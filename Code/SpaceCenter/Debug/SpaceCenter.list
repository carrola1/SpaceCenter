
SpaceCenter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ebc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005000  08005000  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005008  08005008  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005008  08005008  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005010  08005010  00015010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08005018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  20000100  08005118  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  08005118  00020ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000211e0  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046e8  00000000  00000000  00041308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  000459f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e8  00000000  00000000  00046ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001915c  00000000  00000000  000482b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174cd  00000000  00000000  00061414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff33  00000000  00000000  000788e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108814  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e04  00000000  00000000  00108868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000d061  00000000  00000000  0010c66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000100 	.word	0x20000100
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f64 	.word	0x08004f64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000104 	.word	0x20000104
 8000104:	08004f64 	.word	0x08004f64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>:
// Peripheral usage
#include "NeoPixel.hpp"
#include <stdlib.h>

NeoPixel::NeoPixel(uint16_t n, TIM_HandleTypeDef &timHandle, uint32_t timChannel, DMA_HandleTypeDef &dmaHandle) 
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	607a      	str	r2, [r7, #4]
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	200a      	movs	r0, #10
 80004aa:	183b      	adds	r3, r7, r0
 80004ac:	1c0a      	adds	r2, r1, #0
 80004ae:	801a      	strh	r2, [r3, #0]
        : htim(timHandle), hdma(dmaHandle), timCh{timChannel} {
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	490c      	ldr	r1, [pc, #48]	; (80004e4 <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x48>)
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	505a      	str	r2, [r3, r1]
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	2393      	movs	r3, #147	; 0x93
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	69b9      	ldr	r1, [r7, #24]
 80004c0:	50d1      	str	r1, [r2, r3]
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	4908      	ldr	r1, [pc, #32]	; (80004e8 <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x4c>)
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	505a      	str	r2, [r3, r1]
  updateLength(n);
 80004ca:	183b      	adds	r3, r7, r0
 80004cc:	881a      	ldrh	r2, [r3, #0]
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	0011      	movs	r1, r2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 f813 	bl	80004fe <_ZN8NeoPixel12updateLengthEt>
}
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	0018      	movs	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	00000494 	.word	0x00000494
 80004e8:	0000049c 	.word	0x0000049c

080004ec <_ZN8NeoPixelD1Ev>:

NeoPixel::~NeoPixel() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
}
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	0018      	movs	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}

080004fe <_ZN8NeoPixel12updateLengthEt>:

void NeoPixel::updateLength(uint16_t n) {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	000a      	movs	r2, r1
 8000508:	1cbb      	adds	r3, r7, #2
 800050a:	801a      	strh	r2, [r3, #0]

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * 3;
 800050c:	1cbb      	adds	r3, r7, #2
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	1c1a      	adds	r2, r3, #0
 8000512:	1892      	adds	r2, r2, r2
 8000514:	18d3      	adds	r3, r2, r3
 8000516:	b29a      	uxth	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	805a      	strh	r2, [r3, #2]
  pixels = (uint8_t *)malloc(numBytes);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	885b      	ldrh	r3, [r3, #2]
 8000520:	0018      	movs	r0, r3
 8000522:	f004 fbd1 	bl	8004cc8 <malloc>
 8000526:	0003      	movs	r3, r0
 8000528:	001a      	movs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	605a      	str	r2, [r3, #4]
  numLEDs = n;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	1cba      	adds	r2, r7, #2
 8000532:	8812      	ldrh	r2, [r2, #0]
 8000534:	801a      	strh	r2, [r3, #0]
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}

0800053e <_ZN8NeoPixel13setPixelColorEthhh>:

void NeoPixel::setPixelColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 800053e:	b590      	push	{r4, r7, lr}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	000c      	movs	r4, r1
 8000548:	0010      	movs	r0, r2
 800054a:	0019      	movs	r1, r3
 800054c:	1cbb      	adds	r3, r7, #2
 800054e:	1c22      	adds	r2, r4, #0
 8000550:	801a      	strh	r2, [r3, #0]
 8000552:	1c7b      	adds	r3, r7, #1
 8000554:	1c02      	adds	r2, r0, #0
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	003b      	movs	r3, r7
 800055a:	1c0a      	adds	r2, r1, #0
 800055c:	701a      	strb	r2, [r3, #0]
  pixels[n * 3] = g;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6859      	ldr	r1, [r3, #4]
 8000562:	1cbb      	adds	r3, r7, #2
 8000564:	881a      	ldrh	r2, [r3, #0]
 8000566:	0013      	movs	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	189b      	adds	r3, r3, r2
 800056c:	18cb      	adds	r3, r1, r3
 800056e:	003a      	movs	r2, r7
 8000570:	7812      	ldrb	r2, [r2, #0]
 8000572:	701a      	strb	r2, [r3, #0]
  pixels[n * 3 + 1] = r;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	6859      	ldr	r1, [r3, #4]
 8000578:	1cbb      	adds	r3, r7, #2
 800057a:	881a      	ldrh	r2, [r3, #0]
 800057c:	0013      	movs	r3, r2
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	189b      	adds	r3, r3, r2
 8000582:	3301      	adds	r3, #1
 8000584:	18cb      	adds	r3, r1, r3
 8000586:	1c7a      	adds	r2, r7, #1
 8000588:	7812      	ldrb	r2, [r2, #0]
 800058a:	701a      	strb	r2, [r3, #0]
  pixels[n * 3 + 2] = b;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6859      	ldr	r1, [r3, #4]
 8000590:	1cbb      	adds	r3, r7, #2
 8000592:	881a      	ldrh	r2, [r3, #0]
 8000594:	0013      	movs	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	189b      	adds	r3, r3, r2
 800059a:	3302      	adds	r3, #2
 800059c:	18ca      	adds	r2, r1, r3
 800059e:	2318      	movs	r3, #24
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	7013      	strb	r3, [r2, #0]
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b003      	add	sp, #12
 80005ac:	bd90      	pop	{r4, r7, pc}
	...

080005b0 <_ZN8NeoPixel4showEv>:

void NeoPixel::show(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  for(uint16_t j = 0; j < numBytes; j++) {
 80005b8:	2316      	movs	r3, #22
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	2200      	movs	r2, #0
 80005be:	801a      	strh	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	885b      	ldrh	r3, [r3, #2]
 80005c4:	2216      	movs	r2, #22
 80005c6:	18ba      	adds	r2, r7, r2
 80005c8:	8812      	ldrh	r2, [r2, #0]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d22c      	bcs.n	8000628 <_ZN8NeoPixel4showEv+0x78>
	  for(uint_fast8_t i = 0; i < 8; i++) {
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	2b07      	cmp	r3, #7
 80005d6:	d820      	bhi.n	800061a <_ZN8NeoPixel4showEv+0x6a>
		  wr_buf[i+8*j   ] = PWM_LO << (((pixels[j]  << i) & 0x80) > 0);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	2316      	movs	r3, #22
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	18d3      	adds	r3, r2, r3
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	001a      	movs	r2, r3
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	409a      	lsls	r2, r3
 80005ec:	0013      	movs	r3, r2
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	4013      	ands	r3, r2
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dd01      	ble.n	80005fa <_ZN8NeoPixel4showEv+0x4a>
 80005f6:	2118      	movs	r1, #24
 80005f8:	e000      	b.n	80005fc <_ZN8NeoPixel4showEv+0x4c>
 80005fa:	210c      	movs	r1, #12
 80005fc:	2316      	movs	r3, #22
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	001a      	movs	r2, r3
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	18d3      	adds	r3, r2, r3
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	18d3      	adds	r3, r2, r3
 800060e:	1c0a      	adds	r2, r1, #0
 8000610:	721a      	strb	r2, [r3, #8]
	  for(uint_fast8_t i = 0; i < 8; i++) {
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	3301      	adds	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	e7db      	b.n	80005d2 <_ZN8NeoPixel4showEv+0x22>
  for(uint16_t j = 0; j < numBytes; j++) {
 800061a:	2116      	movs	r1, #22
 800061c:	187b      	adds	r3, r7, r1
 800061e:	881a      	ldrh	r2, [r3, #0]
 8000620:	187b      	adds	r3, r7, r1
 8000622:	3201      	adds	r2, #1
 8000624:	801a      	strh	r2, [r3, #0]
 8000626:	e7cb      	b.n	80005c0 <_ZN8NeoPixel4showEv+0x10>
	  }
  }
  for(uint_fast8_t i = 0; i < 8; i++) {
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b07      	cmp	r3, #7
 8000630:	d80d      	bhi.n	800064e <_ZN8NeoPixel4showEv+0x9e>
	  wr_buf[i+8*numBytes   ] = 0;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	885b      	ldrh	r3, [r3, #2]
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	001a      	movs	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	18d3      	adds	r3, r2, r3
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	18d3      	adds	r3, r2, r3
 8000642:	2200      	movs	r2, #0
 8000644:	721a      	strb	r2, [r3, #8]
  for(uint_fast8_t i = 0; i < 8; i++) {
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3301      	adds	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e7ee      	b.n	800062c <_ZN8NeoPixel4showEv+0x7c>
  }
  HAL_TIM_PWM_Start_DMA(&htim, timCh, (uint32_t *)wr_buf, WR_BUF_LEN);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <_ZN8NeoPixel4showEv+0xc0>)
 8000652:	5898      	ldr	r0, [r3, r2]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a07      	ldr	r2, [pc, #28]	; (8000674 <_ZN8NeoPixel4showEv+0xc4>)
 8000658:	5899      	ldr	r1, [r3, r2]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3308      	adds	r3, #8
 800065e:	001a      	movs	r2, r3
 8000660:	2391      	movs	r3, #145	; 0x91
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	f003 fbf9 	bl	8003e5a <HAL_TIM_PWM_Start_DMA>
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b006      	add	sp, #24
 800066e:	bd80      	pop	{r7, pc}
 8000670:	00000494 	.word	0x00000494
 8000674:	0000049c 	.word	0x0000049c

08000678 <_ZN10TouchBoardC1Ev>:
#include "TouchBoard.hpp"

TouchBoard::TouchBoard() {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  myTouchState = NOT_TOUCHED;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2201      	movs	r2, #1
 8000684:	739a      	strb	r2, [r3, #14]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	2b01      	cmp	r3, #1
 800068e:	dc1c      	bgt.n	80006ca <_ZN10TouchBoardC1Ev+0x52>
    pixelColors[i].r = 0;
 8000690:	6879      	ldr	r1, [r7, #4]
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	0013      	movs	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	189b      	adds	r3, r3, r2
 800069a:	2200      	movs	r2, #0
 800069c:	545a      	strb	r2, [r3, r1]
    pixelColors[i].g = 0;
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	0013      	movs	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	189b      	adds	r3, r3, r2
 80006a8:	18cb      	adds	r3, r1, r3
 80006aa:	3301      	adds	r3, #1
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
    pixelColors[i].b = 0;
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	0013      	movs	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	189b      	adds	r3, r3, r2
 80006ba:	18cb      	adds	r3, r1, r3
 80006bc:	3302      	adds	r3, #2
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e7df      	b.n	800068a <_ZN10TouchBoardC1Ev+0x12>
  }
}
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	0018      	movs	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b004      	add	sp, #16
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <_ZN10TouchBoardD1Ev>:

TouchBoard::~TouchBoard() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
}
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	0018      	movs	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_ZN10TouchBoard16setAllPixelColorEhhh>:
  pixelColors[pixel_num].r = r;
  pixelColors[pixel_num].g = g;
  pixelColors[pixel_num].b = b;
}

void TouchBoard::setAllPixelColor(uint8_t r, uint8_t g, uint8_t b) {
 80006e6:	b590      	push	{r4, r7, lr}
 80006e8:	b085      	sub	sp, #20
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	000c      	movs	r4, r1
 80006f0:	0010      	movs	r0, r2
 80006f2:	0019      	movs	r1, r3
 80006f4:	1cfb      	adds	r3, r7, #3
 80006f6:	1c22      	adds	r2, r4, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	1cbb      	adds	r3, r7, #2
 80006fc:	1c02      	adds	r2, r0, #0
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	1c7b      	adds	r3, r7, #1
 8000702:	1c0a      	adds	r2, r1, #0
 8000704:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b01      	cmp	r3, #1
 800070e:	dc1f      	bgt.n	8000750 <_ZN10TouchBoard16setAllPixelColorEhhh+0x6a>
    pixelColors[i].r = r;
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	0013      	movs	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	189b      	adds	r3, r3, r2
 800071a:	1cfa      	adds	r2, r7, #3
 800071c:	7812      	ldrb	r2, [r2, #0]
 800071e:	545a      	strb	r2, [r3, r1]
    pixelColors[i].g = g;
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	0013      	movs	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	189b      	adds	r3, r3, r2
 800072a:	18cb      	adds	r3, r1, r3
 800072c:	3301      	adds	r3, #1
 800072e:	1cba      	adds	r2, r7, #2
 8000730:	7812      	ldrb	r2, [r2, #0]
 8000732:	701a      	strb	r2, [r3, #0]
    pixelColors[i].b = b;
 8000734:	6879      	ldr	r1, [r7, #4]
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	0013      	movs	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	189b      	adds	r3, r3, r2
 800073e:	18cb      	adds	r3, r1, r3
 8000740:	3302      	adds	r3, #2
 8000742:	1c7a      	adds	r2, r7, #1
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3301      	adds	r3, #1
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	e7dc      	b.n	800070a <_ZN10TouchBoard16setAllPixelColorEhhh+0x24>
  }
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b005      	add	sp, #20
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <_ZN10TouchBoard13getPixelColorEh>:

PixelColor_s TouchBoard::getPixelColor(uint8_t pixel_ind) {
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	000a      	movs	r2, r1
 8000762:	1cfb      	adds	r3, r7, #3
 8000764:	701a      	strb	r2, [r3, #0]
  return pixelColors[pixel_ind];
 8000766:	1cfb      	adds	r3, r7, #3
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	240c      	movs	r4, #12
 800076c:	1938      	adds	r0, r7, r4
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	0013      	movs	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	189b      	adds	r3, r3, r2
 8000776:	18cb      	adds	r3, r1, r3
 8000778:	2203      	movs	r2, #3
 800077a:	0019      	movs	r1, r3
 800077c:	f004 fab8 	bl	8004cf0 <memcpy>
 8000780:	193a      	adds	r2, r7, r4
 8000782:	2300      	movs	r3, #0
 8000784:	7811      	ldrb	r1, [r2, #0]
 8000786:	20ff      	movs	r0, #255	; 0xff
 8000788:	4001      	ands	r1, r0
 800078a:	20ff      	movs	r0, #255	; 0xff
 800078c:	4383      	bics	r3, r0
 800078e:	430b      	orrs	r3, r1
 8000790:	7851      	ldrb	r1, [r2, #1]
 8000792:	20ff      	movs	r0, #255	; 0xff
 8000794:	4001      	ands	r1, r0
 8000796:	0209      	lsls	r1, r1, #8
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <_ZN10TouchBoard13getPixelColorEh+0x5c>)
 800079a:	4003      	ands	r3, r0
 800079c:	430b      	orrs	r3, r1
 800079e:	7892      	ldrb	r2, [r2, #2]
 80007a0:	21ff      	movs	r1, #255	; 0xff
 80007a2:	400a      	ands	r2, r1
 80007a4:	0412      	lsls	r2, r2, #16
 80007a6:	4904      	ldr	r1, [pc, #16]	; (80007b8 <_ZN10TouchBoard13getPixelColorEh+0x60>)
 80007a8:	400b      	ands	r3, r1
 80007aa:	4313      	orrs	r3, r2
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b005      	add	sp, #20
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	ffff00ff 	.word	0xffff00ff
 80007b8:	ff00ffff 	.word	0xff00ffff

080007bc <_ZN10TouchBoard12setTouchGPIOEP12GPIO_TypeDeft>:

void TouchBoard::setTouchGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIOpin) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	1dbb      	adds	r3, r7, #6
 80007c8:	801a      	strh	r2, [r3, #0]
  myGpioPort = GPIOx;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	609a      	str	r2, [r3, #8]
  myGpioPin = GPIOpin;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	1dba      	adds	r2, r7, #6
 80007d4:	8812      	ldrh	r2, [r2, #0]
 80007d6:	819a      	strh	r2, [r3, #12]
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b004      	add	sp, #16
 80007de:	bd80      	pop	{r7, pc}

080007e0 <_ZN10TouchBoard16updateTouchStateEv>:

void TouchBoard::updateTouchState() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(myGpioPort, myGpioPin) == GPIO_PIN_RESET) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689a      	ldr	r2, [r3, #8]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	899b      	ldrh	r3, [r3, #12]
 80007f0:	0019      	movs	r1, r3
 80007f2:	0010      	movs	r0, r2
 80007f4:	f002 fa00 	bl	8002bf8 <HAL_GPIO_ReadPin>
 80007f8:	0003      	movs	r3, r0
 80007fa:	425a      	negs	r2, r3
 80007fc:	4153      	adcs	r3, r2
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d003      	beq.n	800080c <_ZN10TouchBoard16updateTouchStateEv+0x2c>
    myTouchState = TOUCHED;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	739a      	strb	r2, [r3, #14]
  } else {
    myTouchState = NOT_TOUCHED;
  }
}
 800080a:	e002      	b.n	8000812 <_ZN10TouchBoard16updateTouchStateEv+0x32>
    myTouchState = NOT_TOUCHED;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2201      	movs	r2, #1
 8000810:	739a      	strb	r2, [r3, #14]
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}

0800081a <_ZN10TouchBoard13getTouchStateEv>:

TouchState_enum TouchBoard::getTouchState() {
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  return myTouchState;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7b9b      	ldrb	r3, [r3, #14]
}
 8000826:	0018      	movs	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}

0800082e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>:
#include "TouchBoardGroup.hpp"
#include "TouchGpioMap.h"
#include "stm32l0xx_hal.h"

TouchBoardGroup::TouchBoardGroup(uint8_t n, TIM_HandleTypeDef &timHandle,
 8000844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000846:	b08b      	sub	sp, #44	; 0x2c
 8000848:	af02      	add	r7, sp, #8
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	260b      	movs	r6, #11
 8000852:	19bb      	adds	r3, r7, r6
 8000854:	1c0a      	adds	r2, r1, #0
 8000856:	701a      	strb	r2, [r3, #0]
                                  uint32_t timChannel, DMA_HandleTypeDef &dmaHandle) 
                : ledArray((uint16_t)(n*NUM_PIXELS_PER_BOARD), timHandle, timChannel, dmaHandle),
                  touchStates(n), touchBoards(n) {
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	1d18      	adds	r0, r3, #4
 800085c:	19bb      	adds	r3, r7, r6
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b29b      	uxth	r3, r3
 8000862:	18db      	adds	r3, r3, r3
 8000864:	b299      	uxth	r1, r3
 8000866:	683c      	ldr	r4, [r7, #0]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	0023      	movs	r3, r4
 8000870:	f7ff fe14 	bl	800049c <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2295      	movs	r2, #149	; 0x95
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	189c      	adds	r4, r3, r2
 800087c:	19bb      	adds	r3, r7, r6
 800087e:	781d      	ldrb	r5, [r3, #0]
 8000880:	2314      	movs	r3, #20
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	0018      	movs	r0, r3
 8000886:	f000 f995 	bl	8000bb4 <_ZNSaI10TouchBoardEC1Ev>
 800088a:	2314      	movs	r3, #20
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	001a      	movs	r2, r3
 8000890:	0029      	movs	r1, r5
 8000892:	0020      	movs	r0, r4
 8000894:	f000 f9a8 	bl	8000be8 <_ZNSt6vectorI10TouchBoardSaIS0_EEC1EjRKS1_>
 8000898:	2314      	movs	r3, #20
 800089a:	18fb      	adds	r3, r7, r3
 800089c:	0018      	movs	r0, r3
 800089e:	f000 f996 	bl	8000bce <_ZNSaI10TouchBoardED1Ev>
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4a28      	ldr	r2, [pc, #160]	; (8000948 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x104>)
 80008a6:	189c      	adds	r4, r3, r2
 80008a8:	19bb      	adds	r3, r7, r6
 80008aa:	781d      	ldrb	r5, [r3, #0]
 80008ac:	2318      	movs	r3, #24
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 f9d2 	bl	8000c5a <_ZNSaI15TouchState_enumEC1Ev>
 80008b6:	2318      	movs	r3, #24
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	001a      	movs	r2, r3
 80008bc:	0029      	movs	r1, r5
 80008be:	0020      	movs	r0, r4
 80008c0:	f000 f9e5 	bl	8000c8e <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>
 80008c4:	2318      	movs	r3, #24
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 f9d3 	bl	8000c74 <_ZNSaI15TouchState_enumED1Ev>
  numBoards = n;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	19ba      	adds	r2, r7, r6
 80008d2:	7812      	ldrb	r2, [r2, #0]
 80008d4:	701a      	strb	r2, [r3, #0]
  numPixels = n*NUM_PIXELS_PER_BOARD;
 80008d6:	19bb      	adds	r3, r7, r6
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	18db      	adds	r3, r3, r3
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	705a      	strb	r2, [r3, #1]
  for (int i=0; i<numBoards; i++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	001a      	movs	r2, r3
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	4293      	cmp	r3, r2
 80008f0:	da24      	bge.n	800093c <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0xf8>
    touchBoards[i].setTouchGPIO(touchGpioMap_Port[i], touchGpioMap_Pin[i]);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2295      	movs	r2, #149	; 0x95
 80008f6:	00d2      	lsls	r2, r2, #3
 80008f8:	4694      	mov	ip, r2
 80008fa:	4463      	add	r3, ip
 80008fc:	69fa      	ldr	r2, [r7, #28]
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f000 f9fd 	bl	8000d00 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x108>)
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	0092      	lsls	r2, r2, #2
 800090c:	58d1      	ldr	r1, [r2, r3]
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x10c>)
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	0052      	lsls	r2, r2, #1
 8000914:	5ad3      	ldrh	r3, [r2, r3]
 8000916:	001a      	movs	r2, r3
 8000918:	f7ff ff50 	bl	80007bc <_ZN10TouchBoard12setTouchGPIOEP12GPIO_TypeDeft>
    touchStates[i] = NOT_TOUCHED;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x104>)
 8000920:	4694      	mov	ip, r2
 8000922:	4463      	add	r3, ip
 8000924:	69fa      	ldr	r2, [r7, #28]
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f000 f9f7 	bl	8000d1c <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>
 800092e:	0003      	movs	r3, r0
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<numBoards; i++) {
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	3301      	adds	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	e7d4      	b.n	80008e6 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0xa2>
  }
}
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	0018      	movs	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	b009      	add	sp, #36	; 0x24
 8000944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	000004b4 	.word	0x000004b4
 800094c:	20000000 	.word	0x20000000
 8000950:	20000060 	.word	0x20000060

08000954 <_ZN15TouchBoardGroupD1Ev>:

TouchBoardGroup::~TouchBoardGroup() {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <_ZN15TouchBoardGroupD1Ev+0x3c>)
 8000960:	4694      	mov	ip, r2
 8000962:	4463      	add	r3, ip
 8000964:	0018      	movs	r0, r3
 8000966:	f000 f9b0 	bl	8000cca <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2295      	movs	r2, #149	; 0x95
 800096e:	00d2      	lsls	r2, r2, #3
 8000970:	4694      	mov	ip, r2
 8000972:	4463      	add	r3, ip
 8000974:	0018      	movs	r0, r3
 8000976:	f000 f955 	bl	8000c24 <_ZNSt6vectorI10TouchBoardSaIS0_EED1Ev>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3304      	adds	r3, #4
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fdb4 	bl	80004ec <_ZN8NeoPixelD1Ev>
}
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	000004b4 	.word	0x000004b4

08000994 <_ZN15TouchBoardGroup16setAllPixelColorEhhh>:

void TouchBoardGroup::setPixelColor(uint8_t board_num, uint8_t pixel_ind, uint8_t r, uint8_t g, uint8_t b) {
  touchBoards[board_num].setPixelColor(pixel_ind, r, g, b);
}

void TouchBoardGroup::setAllPixelColor(uint8_t r, uint8_t g, uint8_t b) {
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	000c      	movs	r4, r1
 800099e:	0010      	movs	r0, r2
 80009a0:	0019      	movs	r1, r3
 80009a2:	1cfb      	adds	r3, r7, #3
 80009a4:	1c22      	adds	r2, r4, #0
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	1cbb      	adds	r3, r7, #2
 80009aa:	1c02      	adds	r2, r0, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	1c7b      	adds	r3, r7, #1
 80009b0:	1c0a      	adds	r2, r1, #0
 80009b2:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<numBoards; i++) {
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	001a      	movs	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4293      	cmp	r3, r2
 80009c2:	da18      	bge.n	80009f6 <_ZN15TouchBoardGroup16setAllPixelColorEhhh+0x62>
    touchBoards[i].setAllPixelColor(r, g, b);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2295      	movs	r2, #149	; 0x95
 80009c8:	00d2      	lsls	r2, r2, #3
 80009ca:	4694      	mov	ip, r2
 80009cc:	4463      	add	r3, ip
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	0011      	movs	r1, r2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 f994 	bl	8000d00 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 80009d8:	0004      	movs	r4, r0
 80009da:	1c7b      	adds	r3, r7, #1
 80009dc:	7818      	ldrb	r0, [r3, #0]
 80009de:	1cbb      	adds	r3, r7, #2
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	1cfb      	adds	r3, r7, #3
 80009e4:	7819      	ldrb	r1, [r3, #0]
 80009e6:	0003      	movs	r3, r0
 80009e8:	0020      	movs	r0, r4
 80009ea:	f7ff fe7c 	bl	80006e6 <_ZN10TouchBoard16setAllPixelColorEhhh>
  for (int i=0; i<numBoards; i++) {
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e7e0      	b.n	80009b8 <_ZN15TouchBoardGroup16setAllPixelColorEhhh+0x24>
  }
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b005      	add	sp, #20
 80009fc:	bd90      	pop	{r4, r7, pc}

080009fe <_ZN15TouchBoardGroup13setBoardColorEhhhh>:

void TouchBoardGroup::setBoardColor(uint8_t board_num, uint8_t r, uint8_t g, uint8_t b) {
 80009fe:	b590      	push	{r4, r7, lr}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	000c      	movs	r4, r1
 8000a08:	0010      	movs	r0, r2
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	1cfb      	adds	r3, r7, #3
 8000a0e:	1c22      	adds	r2, r4, #0
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	1cbb      	adds	r3, r7, #2
 8000a14:	1c02      	adds	r2, r0, #0
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	1c7b      	adds	r3, r7, #1
 8000a1a:	1c0a      	adds	r2, r1, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
  touchBoards[board_num].setAllPixelColor(r, g, b);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2295      	movs	r2, #149	; 0x95
 8000a22:	00d2      	lsls	r2, r2, #3
 8000a24:	189a      	adds	r2, r3, r2
 8000a26:	1cfb      	adds	r3, r7, #3
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	0010      	movs	r0, r2
 8000a2e:	f000 f967 	bl	8000d00 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000a32:	0004      	movs	r4, r0
 8000a34:	2318      	movs	r3, #24
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	7818      	ldrb	r0, [r3, #0]
 8000a3a:	1c7b      	adds	r3, r7, #1
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	1cbb      	adds	r3, r7, #2
 8000a40:	7819      	ldrb	r1, [r3, #0]
 8000a42:	0003      	movs	r3, r0
 8000a44:	0020      	movs	r0, r4
 8000a46:	f7ff fe4e 	bl	80006e6 <_ZN10TouchBoard16setAllPixelColorEhhh>
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b003      	add	sp, #12
 8000a50:	bd90      	pop	{r4, r7, pc}

08000a52 <_ZN15TouchBoardGroup10showPixelsEv>:
  touchBoards[board_num].setAllPixelColor(255, 0, 0);
  showPixels();
  HAL_Delay(40);
}

void TouchBoardGroup::showPixels() {
 8000a52:	b5b0      	push	{r4, r5, r7, lr}
 8000a54:	b088      	sub	sp, #32
 8000a56:	af02      	add	r7, sp, #8
 8000a58:	6078      	str	r0, [r7, #4]
  for (int i=0; i<numBoards; i++) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	001a      	movs	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	4293      	cmp	r3, r2
 8000a68:	da3e      	bge.n	8000ae8 <_ZN15TouchBoardGroup10showPixelsEv+0x96>
    for (int j=0; j<NUM_PIXELS_PER_BOARD; j++) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	dc35      	bgt.n	8000ae0 <_ZN15TouchBoardGroup10showPixelsEv+0x8e>
      PixelColor_s tempColor = touchBoards[i].getPixelColor(j);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2295      	movs	r2, #149	; 0x95
 8000a78:	00d2      	lsls	r2, r2, #3
 8000a7a:	4694      	mov	ip, r2
 8000a7c:	4463      	add	r3, ip
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 f93c 	bl	8000d00 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000a88:	0002      	movs	r2, r0
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	0019      	movs	r1, r3
 8000a90:	0010      	movs	r0, r2
 8000a92:	f7ff fe61 	bl	8000758 <_ZN10TouchBoard13getPixelColorEh>
 8000a96:	0003      	movs	r3, r0
 8000a98:	001a      	movs	r2, r3
 8000a9a:	240c      	movs	r4, #12
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	1c11      	adds	r1, r2, #0
 8000aa0:	7019      	strb	r1, [r3, #0]
 8000aa2:	0411      	lsls	r1, r2, #16
 8000aa4:	0e09      	lsrs	r1, r1, #24
 8000aa6:	7059      	strb	r1, [r3, #1]
 8000aa8:	0212      	lsls	r2, r2, #8
 8000aaa:	0e12      	lsrs	r2, r2, #24
 8000aac:	709a      	strb	r2, [r3, #2]
      ledArray.setPixelColor(i*NUM_PIXELS_PER_BOARD+j, tempColor.r, tempColor.g, tempColor.b);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	1d18      	adds	r0, r3, #4
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	18db      	adds	r3, r3, r3
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	18d3      	adds	r3, r2, r3
 8000ac0:	b299      	uxth	r1, r3
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	0025      	movs	r5, r4
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	785c      	ldrb	r4, [r3, #1]
 8000acc:	197b      	adds	r3, r7, r5
 8000ace:	789b      	ldrb	r3, [r3, #2]
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	0023      	movs	r3, r4
 8000ad4:	f7ff fd33 	bl	800053e <_ZN8NeoPixel13setPixelColorEthhh>
    for (int j=0; j<NUM_PIXELS_PER_BOARD; j++) {
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	3301      	adds	r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	e7c6      	b.n	8000a6e <_ZN15TouchBoardGroup10showPixelsEv+0x1c>
  for (int i=0; i<numBoards; i++) {
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	e7ba      	b.n	8000a5e <_ZN15TouchBoardGroup10showPixelsEv+0xc>
    }
  }
  ledArray.show();
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3304      	adds	r3, #4
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fd5f 	bl	80005b0 <_ZN8NeoPixel4showEv>
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b006      	add	sp, #24
 8000af8:	bdb0      	pop	{r4, r5, r7, pc}

08000afa <_ZN15TouchBoardGroup17updateTouchStatesEv>:

PixelColor_s TouchBoardGroup::getPixelColor(uint8_t board_num, uint8_t pixel_ind) {
  return touchBoards[board_num].getPixelColor(pixel_ind);
}

void TouchBoardGroup::updateTouchStates() {
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  for (int i=0; i<numBoards; i++) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	da11      	bge.n	8000b36 <_ZN15TouchBoardGroup17updateTouchStatesEv+0x3c>
    touchBoards[i].updateTouchState();
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2295      	movs	r2, #149	; 0x95
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	4694      	mov	ip, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 f8ed 	bl	8000d00 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000b26:	0003      	movs	r3, r0
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff fe59 	bl	80007e0 <_ZN10TouchBoard16updateTouchStateEv>
  for (int i=0; i<numBoards; i++) {
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e7e7      	b.n	8000b06 <_ZN15TouchBoardGroup17updateTouchStatesEv+0xc>
  }
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <_ZN15TouchBoardGroup14getTouchStatesEv>:

std::vector<TouchState_enum> TouchBoardGroup::getTouchStates() {
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  for (int i=0; i<numBoards; i++) {
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	001a      	movs	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4293      	cmp	r3, r2
 8000b58:	da1d      	bge.n	8000b96 <_ZN15TouchBoardGroup14getTouchStatesEv+0x56>
    touchStates[i] = touchBoards[i].getTouchState();
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2295      	movs	r2, #149	; 0x95
 8000b5e:	00d2      	lsls	r2, r2, #3
 8000b60:	4694      	mov	ip, r2
 8000b62:	4463      	add	r3, ip
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 f8c9 	bl	8000d00 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000b6e:	0005      	movs	r5, r0
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <_ZN15TouchBoardGroup14getTouchStatesEv+0x70>)
 8000b74:	4694      	mov	ip, r2
 8000b76:	4463      	add	r3, ip
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 f8cd 	bl	8000d1c <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>
 8000b82:	0004      	movs	r4, r0
 8000b84:	0028      	movs	r0, r5
 8000b86:	f7ff fe48 	bl	800081a <_ZN10TouchBoard13getTouchStateEv>
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	7023      	strb	r3, [r4, #0]
  for (int i=0; i<numBoards; i++) {
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3301      	adds	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	e7db      	b.n	8000b4e <_ZN15TouchBoardGroup14getTouchStatesEv+0xe>
  }
  return touchStates;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_ZN15TouchBoardGroup14getTouchStatesEv+0x70>)
 8000b9a:	189a      	adds	r2, r3, r2
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 f8c8 	bl	8000d36 <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS2_>
}
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bdb0      	pop	{r4, r5, r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	000004b4 	.word	0x000004b4

08000bb4 <_ZNSaI10TouchBoardEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 f8f7 	bl	8000db2 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1Ev>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_ZNSaI10TouchBoardED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 f8f3 	bl	8000dc4 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardED1Ev>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZNSt6vectorI10TouchBoardSaIS0_EEC1EjRKS1_>:
       *
       *  This constructor fills the %vector with @a __n default
       *  constructed elements.
       */
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8000bf4:	68fc      	ldr	r4, [r7, #12]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 f8eb 	bl	8000dd8 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_>
 8000c02:	0001      	movs	r1, r0
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	001a      	movs	r2, r3
 8000c08:	0020      	movs	r0, r4
 8000c0a:	f000 f91a 	bl	8000e42 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EEC1EjRKS1_>
      { _M_default_initialize(__n); }
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 f945 	bl	8000ea4 <_ZNSt6vectorI10TouchBoardSaIS0_EE21_M_default_initializeEj>
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b005      	add	sp, #20
 8000c22:	bd90      	pop	{r4, r7, pc}

08000c24 <_ZNSt6vectorI10TouchBoardSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000c24:	b5b0      	push	{r4, r5, r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681c      	ldr	r4, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 f94c 	bl	8000ed4 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>
 8000c3c:	0003      	movs	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000c3e:	001a      	movs	r2, r3
 8000c40:	0029      	movs	r1, r5
 8000c42:	0020      	movs	r0, r4
 8000c44:	f000 f94f 	bl	8000ee6 <_ZSt8_DestroyIP10TouchBoardS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 f910 	bl	8000e70 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EED1Ev>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b002      	add	sp, #8
 8000c58:	bdb0      	pop	{r4, r5, r7, pc}

08000c5a <_ZNSaI15TouchState_enumEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 f94e 	bl	8000f06 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1Ev>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_ZNSaI15TouchState_enumED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f94a 	bl	8000f18 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumED1Ev>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	0018      	movs	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8000c8e:	b590      	push	{r4, r7, lr}
 8000c90:	b085      	sub	sp, #20
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8000c9a:	68fc      	ldr	r4, [r7, #12]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f000 f942 	bl	8000f2c <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_>
 8000ca8:	0001      	movs	r1, r0
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	001a      	movs	r2, r3
 8000cae:	0020      	movs	r0, r4
 8000cb0:	f000 f971 	bl	8000f96 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>
      { _M_default_initialize(__n); }
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	0011      	movs	r1, r2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 f99b 	bl	8000ff6 <_ZNSt6vectorI15TouchState_enumSaIS0_EE21_M_default_initializeEj>
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b005      	add	sp, #20
 8000cc8:	bd90      	pop	{r4, r7, pc}

08000cca <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000cca:	b5b0      	push	{r4, r5, r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681c      	ldr	r4, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 f9a2 	bl	8001026 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8000ce2:	0003      	movs	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	0029      	movs	r1, r5
 8000ce8:	0020      	movs	r0, r4
 8000cea:	f000 f9a5 	bl	8001038 <_ZSt8_DestroyIP15TouchState_enumS0_EvT_S2_RSaIT0_E>
      }
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 f967 	bl	8000fc4 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EED1Ev>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b002      	add	sp, #8
 8000cfe:	bdb0      	pop	{r4, r5, r7, pc}

08000d00 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	18d3      	adds	r3, r2, r3
      }
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	18d3      	adds	r3, r2, r3
      }
 8000d2e:	0018      	movs	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
 8000d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d38:	b085      	sub	sp, #20
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8000d40:	687c      	ldr	r4, [r7, #4]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	0018      	movs	r0, r3
 8000d46:	f000 f987 	bl	8001058 <_ZNKSt6vectorI15TouchState_enumSaIS0_EE4sizeEv>
 8000d4a:	0005      	movs	r5, r0
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f99e 	bl	8001090 <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8000d54:	0002      	movs	r2, r0
 8000d56:	260c      	movs	r6, #12
 8000d58:	19bb      	adds	r3, r7, r6
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 f988 	bl	8001072 <_ZN9__gnu_cxx14__alloc_traitsISaI15TouchState_enumES1_E17_S_select_on_copyERKS2_>
 8000d62:	19bb      	adds	r3, r7, r6
 8000d64:	001a      	movs	r2, r3
 8000d66:	0029      	movs	r1, r5
 8000d68:	0020      	movs	r0, r4
 8000d6a:	f000 f914 	bl	8000f96 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>
 8000d6e:	19bb      	adds	r3, r7, r6
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff7f 	bl	8000c74 <_ZNSaI15TouchState_enumED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 f992 	bl	80010a2 <_ZNKSt6vectorI15TouchState_enumSaIS0_EE5beginEv>
 8000d7e:	0005      	movs	r5, r0
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 f9a1 	bl	80010ca <_ZNKSt6vectorI15TouchState_enumSaIS0_EE3endEv>
 8000d88:	0006      	movs	r6, r0
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 f948 	bl	8001026 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8000d96:	0003      	movs	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000d98:	0022      	movs	r2, r4
 8000d9a:	0031      	movs	r1, r6
 8000d9c:	0028      	movs	r0, r5
 8000d9e:	f000 f9a8 	bl	80010f2 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>
 8000da2:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	605a      	str	r2, [r3, #4]
      }
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b005      	add	sp, #20
 8000db0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000db2 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	250c      	movs	r5, #12
 8000de6:	197b      	adds	r3, r7, r5
 8000de8:	0011      	movs	r1, r2
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 f9b0 	bl	8001150 <_ZNSaI10TouchBoardEC1ERKS0_>
 8000df0:	197b      	adds	r3, r7, r5
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 f990 	bl	8001118 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_>
 8000df8:	0002      	movs	r2, r0
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	419b      	sbcs	r3, r3
 8000e00:	425b      	negs	r3, r3
 8000e02:	b2dc      	uxtb	r4, r3
 8000e04:	197b      	adds	r3, r7, r5
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff fee1 	bl	8000bce <_ZNSaI10TouchBoardED1Ev>
 8000e0c:	2c00      	cmp	r4, #0
 8000e0e:	d003      	beq.n	8000e18 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_+0x40>
	  __throw_length_error(
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f003 ff1d 	bl	8004c52 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8000e18:	687b      	ldr	r3, [r7, #4]
      }
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b004      	add	sp, #16
 8000e20:	bdb0      	pop	{r4, r5, r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	08004f7c 	.word	0x08004f7c

08000e28 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff fecb 	bl	8000bce <_ZNSaI10TouchBoardED1Ev>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EEC1EjRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f000 f98b 	bl	8001170 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 f999 	bl	8001198 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_M_create_storageEj>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b004      	add	sp, #16
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8000e88:	001a      	movs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f000 f9a0 	bl	80011d2 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j>
      }
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff ffc7 	bl	8000e28 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implD1Ev>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_ZNSt6vectorI10TouchBoardSaIS0_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 f80d 	bl	8000ed4 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>
 8000eba:	0002      	movs	r2, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	0020      	movs	r0, r4
 8000ec2:	f000 f999 	bl	80011f8 <_ZSt27__uninitialized_default_n_aIP10TouchBoardjS0_ET_S2_T0_RSaIT1_E>
 8000ec6:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	605a      	str	r2, [r3, #4]
      }
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b003      	add	sp, #12
 8000ed2:	bd90      	pop	{r4, r7, pc}

08000ed4 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	0018      	movs	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_ZSt8_DestroyIP10TouchBoardS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f000 f98e 	bl	800121a <_ZSt8_DestroyIP10TouchBoardEvT_S2_>
    }
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b004      	add	sp, #16
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	250c      	movs	r5, #12
 8000f3a:	197b      	adds	r3, r7, r5
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 f996 	bl	8001270 <_ZNSaI15TouchState_enumEC1ERKS0_>
 8000f44:	197b      	adds	r3, r7, r5
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 f976 	bl	8001238 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_>
 8000f4c:	0002      	movs	r2, r0
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	419b      	sbcs	r3, r3
 8000f54:	425b      	negs	r3, r3
 8000f56:	b2dc      	uxtb	r4, r3
 8000f58:	197b      	adds	r3, r7, r5
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff fe8a 	bl	8000c74 <_ZNSaI15TouchState_enumED1Ev>
 8000f60:	2c00      	cmp	r4, #0
 8000f62:	d003      	beq.n	8000f6c <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_+0x40>
	  __throw_length_error(
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f003 fe73 	bl	8004c52 <_ZSt20__throw_length_errorPKc>
	return __n;
 8000f6c:	687b      	ldr	r3, [r7, #4]
      }
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b004      	add	sp, #16
 8000f74:	bdb0      	pop	{r4, r5, r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	08004f7c 	.word	0x08004f7c

08000f7c <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff fe74 	bl	8000c74 <_ZNSaI15TouchState_enumED1Ev>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 f971 	bl	8001290 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 f97f 	bl	80012b8 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_M_create_storageEj>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b004      	add	sp, #16
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8000fda:	001a      	movs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 f986 	bl	80012f0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j>
      }
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff ffc8 	bl	8000f7c <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implD1Ev>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_ZNSt6vectorI15TouchState_enumSaIS0_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8000ff6:	b590      	push	{r4, r7, lr}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	0018      	movs	r0, r3
 8001008:	f000 f80d 	bl	8001026 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 800100c:	0002      	movs	r2, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	0019      	movs	r1, r3
 8001012:	0020      	movs	r0, r4
 8001014:	f000 f97f 	bl	8001316 <_ZSt27__uninitialized_default_n_aIP15TouchState_enumjS0_ET_S2_T0_RSaIT1_E>
 8001018:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	605a      	str	r2, [r3, #4]
      }
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b003      	add	sp, #12
 8001024:	bd90      	pop	{r4, r7, pc}

08001026 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}

08001038 <_ZSt8_DestroyIP15TouchState_enumS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	0011      	movs	r1, r2
 800104a:	0018      	movs	r0, r3
 800104c:	f000 f974 	bl	8001338 <_ZSt8_DestroyIP15TouchState_enumEvT_S2_>
    }
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b004      	add	sp, #16
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZNKSt6vectorI15TouchState_enumSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}

08001072 <_ZN9__gnu_cxx14__alloc_traitsISaI15TouchState_enumES1_E17_S_select_on_copyERKS2_>:
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	0011      	movs	r1, r2
 8001082:	0018      	movs	r0, r3
 8001084:	f000 f967 	bl	8001356 <_ZNSt16allocator_traitsISaI15TouchState_enumEE37select_on_container_copy_constructionERKS1_>
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ZNKSt6vectorI15TouchState_enumSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	230c      	movs	r3, #12
 80010b2:	18fa      	adds	r2, r7, r3
 80010b4:	2308      	movs	r3, #8
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 f95a 	bl	8001374 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b004      	add	sp, #16
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_ZNKSt6vectorI15TouchState_enumSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	230c      	movs	r3, #12
 80010da:	18fa      	adds	r2, r7, r3
 80010dc:	2308      	movs	r3, #8
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	0011      	movs	r1, r2
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 f946 	bl	8001374 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	0018      	movs	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b004      	add	sp, #16
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	0018      	movs	r0, r3
 8001108:	f000 f942 	bl	8001390 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
 800110c:	0003      	movs	r3, r0
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b004      	add	sp, #16
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8001122:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	0018      	movs	r0, r3
 8001128:	f000 f947 	bl	80013ba <_ZNSt16allocator_traitsISaI10TouchBoardEE8max_sizeERKS1_>
 800112c:	0003      	movs	r3, r0
 800112e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001130:	2308      	movs	r3, #8
 8001132:	18fa      	adds	r2, r7, r3
 8001134:	230c      	movs	r3, #12
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	0011      	movs	r1, r2
 800113a:	0018      	movs	r0, r3
 800113c:	f000 f94a 	bl	80013d4 <_ZSt3minIjERKT_S2_S2_>
 8001140:	0003      	movs	r3, r0
 8001142:	681b      	ldr	r3, [r3, #0]
      }
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b004      	add	sp, #16
 800114a:	bd80      	pop	{r7, pc}
 800114c:	07ffffff 	.word	0x07ffffff

08001150 <_ZNSaI10TouchBoardEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f000 f949 	bl	80013f8 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1ERKS2_>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	0011      	movs	r1, r2
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff ffe5 	bl	8001150 <_ZNSaI10TouchBoardEC1ERKS0_>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	0018      	movs	r0, r3
 800118a:	f000 f93f 	bl	800140c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	0011      	movs	r1, r2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 f941 	bl	8001430 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj>
 80011ae:	0002      	movs	r2, r0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	18d2      	adds	r2, r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	609a      	str	r2, [r3, #8]
      }
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
	if (__p)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 f935 	bl	800145a <_ZNSt16allocator_traitsISaI10TouchBoardEE10deallocateERS1_PS0_j>
      }
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b004      	add	sp, #16
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZSt27__uninitialized_default_n_aIP10TouchBoardjS0_ET_S2_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	0011      	movs	r1, r2
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f935 	bl	800147a <_ZSt25__uninitialized_default_nIP10TouchBoardjET_S2_T0_>
 8001210:	0003      	movs	r3, r0
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b004      	add	sp, #16
 8001218:	bd80      	pop	{r7, pc}

0800121a <_ZSt8_DestroyIP10TouchBoardEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	0011      	movs	r1, r2
 800122a:	0018      	movs	r0, r3
 800122c:	f000 f939 	bl	80014a2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_>
    }
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8001242:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	0018      	movs	r0, r3
 8001248:	f000 f944 	bl	80014d4 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8max_sizeERKS1_>
 800124c:	0003      	movs	r3, r0
 800124e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001250:	2308      	movs	r3, #8
 8001252:	18fa      	adds	r2, r7, r3
 8001254:	230c      	movs	r3, #12
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f000 f8ba 	bl	80013d4 <_ZSt3minIjERKT_S2_S2_>
 8001260:	0003      	movs	r3, r0
 8001262:	681b      	ldr	r3, [r3, #0]
      }
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b004      	add	sp, #16
 800126a:	bd80      	pop	{r7, pc}
 800126c:	7fffffff 	.word	0x7fffffff

08001270 <_ZNSaI15TouchState_enumEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0011      	movs	r1, r2
 8001280:	0018      	movs	r0, r3
 8001282:	f000 f934 	bl	80014ee <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1ERKS2_>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	0011      	movs	r1, r2
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff ffe5 	bl	8001270 <_ZNSaI15TouchState_enumEC1ERKS0_>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	0018      	movs	r0, r3
 80012aa:	f000 f92a 	bl	8001502 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0018      	movs	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 f92c 	bl	8001526 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj>
 80012ce:	0002      	movs	r2, r0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	18d2      	adds	r2, r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
      }
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
	if (__p)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	0018      	movs	r0, r3
 800130a:	f000 f921 	bl	8001550 <_ZNSt16allocator_traitsISaI15TouchState_enumEE10deallocateERS1_PS0_j>
      }
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b004      	add	sp, #16
 8001314:	bd80      	pop	{r7, pc}

08001316 <_ZSt27__uninitialized_default_n_aIP15TouchState_enumjS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	0011      	movs	r1, r2
 8001328:	0018      	movs	r0, r3
 800132a:	f000 f921 	bl	8001570 <_ZSt25__uninitialized_default_nIP15TouchState_enumjET_S2_T0_>
 800132e:	0003      	movs	r3, r0
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b004      	add	sp, #16
 8001336:	bd80      	pop	{r7, pc}

08001338 <_ZSt8_DestroyIP15TouchState_enumEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	0011      	movs	r1, r2
 8001348:	0018      	movs	r0, r3
 800134a:	f000 f925 	bl	8001598 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15TouchState_enumEEvT_S4_>
    }
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}

08001356 <_ZNSt16allocator_traitsISaI15TouchState_enumEE37select_on_container_copy_constructionERKS1_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0011      	movs	r1, r2
 8001366:	0018      	movs	r0, r3
 8001368:	f7ff ff82 	bl	8001270 <_ZNSaI15TouchState_enumEC1ERKS0_>
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}

08001374 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b002      	add	sp, #8
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800139c:	2317      	movs	r3, #23
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
	__uninit_copy(__first, __last, __result);
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f8fd 	bl	80015aa <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>
 80013b0:	0003      	movs	r3, r0
    }
 80013b2:	0018      	movs	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b006      	add	sp, #24
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_ZNSt16allocator_traitsISaI10TouchBoardEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	0018      	movs	r0, r3
 80013c6:	f000 f901 	bl	80015cc <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv>
 80013ca:	0003      	movs	r3, r0
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d201      	bcs.n	80013ee <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	e000      	b.n	80013f0 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80013ee:	687b      	ldr	r3, [r7, #4]
    }
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}

0800140c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
	{ }
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b002      	add	sp, #8
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj+0x20>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f000 f8cc 	bl	80015e4 <_ZNSt16allocator_traitsISaI10TouchBoardEE8allocateERS1_j>
 800144c:	0003      	movs	r3, r0
 800144e:	e000      	b.n	8001452 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj+0x22>
 8001450:	2300      	movs	r3, #0
      }
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}

0800145a <_ZNSt16allocator_traitsISaI10TouchBoardEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	0018      	movs	r0, r3
 800146e:	f000 f8c9 	bl	8001604 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE10deallocateEPS1_j>
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	b004      	add	sp, #16
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZSt25__uninitialized_default_nIP10TouchBoardjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8001484:	230f      	movs	r3, #15
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
	__uninit_default_n(__first, __n);
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	0011      	movs	r1, r2
 8001492:	0018      	movs	r0, r3
 8001494:	f000 f8c4 	bl	8001620 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_>
 8001498:	0003      	movs	r3, r0
    }
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b004      	add	sp, #16
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d00b      	beq.n	80014cc <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_+0x2a>
	    std::_Destroy(std::__addressof(*__first));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 f8d0 	bl	800165c <_ZSt11__addressofI10TouchBoardEPT_RS1_>
 80014bc:	0003      	movs	r3, r0
 80014be:	0018      	movs	r0, r3
 80014c0:	f000 f8d5 	bl	800166e <_ZSt8_DestroyI10TouchBoardEvPT_>
	  for (; __first != __last; ++__first)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3310      	adds	r3, #16
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	e7ef      	b.n	80014ac <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_+0xa>
	}
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b002      	add	sp, #8
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 f8d2 	bl	8001688 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv>
 80014e4:	0003      	movs	r3, r0
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1ERKS2_>:
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}

08001502 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
	{ }
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}

08001526 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj+0x20>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	0011      	movs	r1, r2
 800153c:	0018      	movs	r0, r3
 800153e:	f000 f8af 	bl	80016a0 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8allocateERS1_j>
 8001542:	0003      	movs	r3, r0
 8001544:	e000      	b.n	8001548 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj+0x22>
 8001546:	2300      	movs	r3, #0
      }
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}

08001550 <_ZNSt16allocator_traitsISaI15TouchState_enumEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	0018      	movs	r0, r3
 8001564:	f000 f8ac 	bl	80016c0 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE10deallocateEPS1_j>
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b004      	add	sp, #16
 800156e:	bd80      	pop	{r7, pc}

08001570 <_ZSt25__uninitialized_default_nIP15TouchState_enumjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 800157a:	230f      	movs	r3, #15
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
	__uninit_default_n(__first, __n);
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0011      	movs	r1, r2
 8001588:	0018      	movs	r0, r3
 800158a:	f000 f8a7 	bl	80016dc <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchState_enumjEET_S4_T0_>
 800158e:	0003      	movs	r3, r0
    }
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b004      	add	sp, #16
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15TouchState_enumEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	0018      	movs	r0, r3
 80015be:	f000 f8a1 	bl	8001704 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
 80015c2:	0003      	movs	r3, r0
 80015c4:	0018      	movs	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b004      	add	sp, #16
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv>:
#endif
	::operator delete(__p);
      }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv+0x14>)
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	07ffffff 	.word	0x07ffffff

080015e4 <_ZNSt16allocator_traitsISaI10TouchBoardEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80015ee:	6839      	ldr	r1, [r7, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 f89f 	bl	8001738 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv>
 80015fa:	0003      	movs	r3, r0
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}

08001604 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	0018      	movs	r0, r3
 8001614:	f003 fb04 	bl	8004c20 <_ZdlPv>
      }
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b004      	add	sp, #16
 800161e:	bd80      	pop	{r7, pc}

08001620 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	  _ForwardIterator __cur = __first;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]
	      for (; __n > 0; --__n, (void) ++__cur)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00e      	beq.n	8001652 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_+0x32>
		std::_Construct(std::__addressof(*__cur));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	0018      	movs	r0, r3
 8001638:	f000 f810 	bl	800165c <_ZSt11__addressofI10TouchBoardEPT_RS1_>
 800163c:	0003      	movs	r3, r0
 800163e:	0018      	movs	r0, r3
 8001640:	f000 f898 	bl	8001774 <_ZSt10_ConstructI10TouchBoardJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3b01      	subs	r3, #1
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3310      	adds	r3, #16
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e7ed      	b.n	800162e <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_+0xe>
	      return __cur;
 8001652:	68fb      	ldr	r3, [r7, #12]
	}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b004      	add	sp, #16
 800165a:	bd80      	pop	{r7, pc}

0800165c <_ZSt11__addressofI10TouchBoardEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZSt8_DestroyI10TouchBoardEvPT_>:
    _Destroy(_Tp* __pointer)
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	0018      	movs	r0, r3
 800167a:	f7ff f82b 	bl	80006d4 <_ZN10TouchBoardD1Ev>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001690:	4b02      	ldr	r3, [pc, #8]	; (800169c <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv+0x14>)
      }
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	7fffffff 	.word	0x7fffffff

080016a0 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	0018      	movs	r0, r3
 80016b2:	f000 f870 	bl	8001796 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv>
 80016b6:	0003      	movs	r3, r0
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	0018      	movs	r0, r3
 80016d0:	f003 faa6 	bl	8004c20 <_ZdlPv>
      }
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b004      	add	sp, #16
 80016da:	bd80      	pop	{r7, pc}

080016dc <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchState_enumjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 80016e6:	210f      	movs	r1, #15
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	187a      	adds	r2, r7, r1
 80016f0:	6839      	ldr	r1, [r7, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 f86b 	bl	80017d0 <_ZSt6fill_nIP15TouchState_enumjS0_ET_S2_T0_RKT1_>
 80016fa:	0003      	movs	r3, r0
	}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b004      	add	sp, #16
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	0018      	movs	r0, r3
 8001714:	f000 f877 	bl	8001806 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEET_S9_>
 8001718:	0004      	movs	r4, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	0018      	movs	r0, r3
 800171e:	f000 f872 	bl	8001806 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEET_S9_>
 8001722:	0001      	movs	r1, r0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	001a      	movs	r2, r3
 8001728:	0020      	movs	r0, r4
 800172a:	f000 f875 	bl	8001818 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_>
 800172e:	0003      	movs	r3, r0
    }
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b005      	add	sp, #20
 8001736:	bd90      	pop	{r4, r7, pc}

08001738 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	0018      	movs	r0, r3
 8001748:	f7ff ff40 	bl	80015cc <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv>
 800174c:	0002      	movs	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	419b      	sbcs	r3, r3
 8001754:	425b      	negs	r3, r3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800175c:	f003 fa76 	bl	8004c4c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	0018      	movs	r0, r3
 8001766:	f003 fa5f 	bl	8004c28 <_Znwj>
 800176a:	0003      	movs	r3, r0
      }
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bd80      	pop	{r7, pc}

08001774 <_ZSt10_ConstructI10TouchBoardJEEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	0019      	movs	r1, r3
 8001780:	2010      	movs	r0, #16
 8001782:	f7ff f854 	bl	800082e <_ZnwjPv>
 8001786:	0003      	movs	r3, r0
 8001788:	0018      	movs	r0, r3
 800178a:	f7fe ff75 	bl	8000678 <_ZN10TouchBoardC1Ev>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}

08001796 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7ff ff6f 	bl	8001688 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv>
 80017aa:	0002      	movs	r2, r0
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	419b      	sbcs	r3, r3
 80017b2:	425b      	negs	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80017ba:	f003 fa47 	bl	8004c4c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f003 fa31 	bl	8004c28 <_Znwj>
 80017c6:	0003      	movs	r3, r0
      }
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b004      	add	sp, #16
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_ZSt6fill_nIP15TouchState_enumjS0_ET_S2_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)
      __glibcxx_requires_can_increment(__first, __n);

      return std::__niter_wrap(__first,
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 f83f 	bl	8001862 <_ZSt12__niter_baseIP15TouchState_enumET_S2_>
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	0019      	movs	r1, r3
 80017ea:	f000 f843 	bl	8001874 <_ZSt10__fill_n_aIP15TouchState_enumjS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_>
 80017ee:	0002      	movs	r2, r0
 80017f0:	230c      	movs	r3, #12
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	0011      	movs	r1, r2
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 f857 	bl	80018aa <_ZSt12__niter_wrapIP15TouchState_enumET_RKS2_S2_>
 80017fc:	0003      	movs	r3, r0
		std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b004      	add	sp, #16
 8001804:	bd80      	pop	{r7, pc}

08001806 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEET_S9_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	0018      	movs	r0, r3
 8001828:	f000 f849 	bl	80018be <_ZSt12__niter_baseIPK15TouchState_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800182c:	0004      	movs	r4, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	0018      	movs	r0, r3
 8001832:	f000 f844 	bl	80018be <_ZSt12__niter_baseIPK15TouchState_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8001836:	0005      	movs	r5, r0
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0018      	movs	r0, r3
 800183c:	f000 f811 	bl	8001862 <_ZSt12__niter_baseIP15TouchState_enumET_S2_>
 8001840:	0003      	movs	r3, r0
 8001842:	001a      	movs	r2, r3
 8001844:	0029      	movs	r1, r5
 8001846:	0020      	movs	r0, r4
 8001848:	f000 f847 	bl	80018da <_ZSt13__copy_move_aILb0EPK15TouchState_enumPS0_ET1_T0_S5_S4_>
 800184c:	0002      	movs	r2, r0
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	0011      	movs	r1, r2
 8001852:	0018      	movs	r0, r3
 8001854:	f000 f829 	bl	80018aa <_ZSt12__niter_wrapIP15TouchState_enumET_RKS2_S2_>
 8001858:	0003      	movs	r3, r0
    }
 800185a:	0018      	movs	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	b004      	add	sp, #16
 8001860:	bdb0      	pop	{r4, r5, r7, pc}

08001862 <_ZSt12__niter_baseIP15TouchState_enumET_S2_>:
    __niter_base(_Iterator __it)
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
    { return __it; }
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	b002      	add	sp, #8
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZSt10__fill_n_aIP15TouchState_enumjS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
      for (__decltype(__n + 0) __niter = __n;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, (void) ++__first)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00a      	beq.n	80018a0 <_ZSt10__fill_n_aIP15TouchState_enumjS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_+0x2c>
	*__first = __value;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	701a      	strb	r2, [r3, #0]
      for (__decltype(__n + 0) __niter = __n;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3b01      	subs	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	e7f1      	b.n	8001884 <_ZSt10__fill_n_aIP15TouchState_enumjS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_+0x10>
      return __first;
 80018a0:	68fb      	ldr	r3, [r7, #12]
    }
 80018a2:	0018      	movs	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b006      	add	sp, #24
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_ZSt12__niter_wrapIP15TouchState_enumET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
    { return __res; }
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}

080018be <_ZSt12__niter_baseIPK15TouchState_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f81b 	bl	8001904 <_ZNK9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEE4baseEv>
 80018ce:	0003      	movs	r3, r0
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}

080018da <_ZSt13__copy_move_aILb0EPK15TouchState_enumPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80018e6:	2317      	movs	r3, #23
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
			      _Category>::__copy_m(__first, __last, __result);
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 f80e 	bl	8001916 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchState_enumEEPT_PKS4_S7_S5_>
 80018fa:	0003      	movs	r3, r0
    }
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b006      	add	sp, #24
 8001902:	bd80      	pop	{r7, pc}

08001904 <_ZNK9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchState_enumEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchState_enumEEPT_PKS4_S7_S5_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	68f9      	ldr	r1, [r7, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	0018      	movs	r0, r3
 8001938:	f003 f9e3 	bl	8004d02 <memmove>
	  return __result + _Num;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	18d3      	adds	r3, r2, r3
	}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b006      	add	sp, #24
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001952:	f000 ff37 	bl	80027c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001956:	f000 f895 	bl	8001a84 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195a:	f000 fa3d 	bl	8001dd8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800195e:	f000 fa0d 	bl	8001d7c <_ZL11MX_DMA_Initv>
  MX_I2S2_Init();
 8001962:	f000 f8f3 	bl	8001b4c <_ZL12MX_I2S2_Initv>
  MX_SPI1_Init();
 8001966:	f000 f91f 	bl	8001ba8 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 800196a:	f000 f959 	bl	8001c20 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  // Mount SD Card
  HAL_GPIO_WritePin(SD_SPI1_CS_N_GPIO_Port, SD_SPI1_CS_N_Pin, GPIO_PIN_SET);
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	0219      	lsls	r1, r3, #8
 8001972:	23a0      	movs	r3, #160	; 0xa0
 8001974:	05db      	lsls	r3, r3, #23
 8001976:	2201      	movs	r2, #1
 8001978:	0018      	movs	r0, r3
 800197a:	f001 f943 	bl	8002c04 <HAL_GPIO_WritePin>
  FRESULT fr;
  fr = f_mount(&FatFs, "", 1);
 800197e:	2313      	movs	r3, #19
 8001980:	18fc      	adds	r4, r7, r3
 8001982:	493b      	ldr	r1, [pc, #236]	; (8001a70 <main+0x124>)
 8001984:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <main+0x128>)
 8001986:	2201      	movs	r2, #1
 8001988:	0018      	movs	r0, r3
 800198a:	f003 f923 	bl	8004bd4 <f_mount>
 800198e:	0003      	movs	r3, r0
 8001990:	7023      	strb	r3, [r4, #0]

  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4838      	ldr	r0, [pc, #224]	; (8001a78 <main+0x12c>)
 8001998:	2201      	movs	r2, #1
 800199a:	0019      	movs	r1, r3
 800199c:	f001 f932 	bl	8002c04 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80019a0:	23fa      	movs	r3, #250	; 0xfa
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	0018      	movs	r0, r3
 80019a6:	f000 ff33 	bl	8002810 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  touchGroup0.setAllPixelColor(0,0,255);
 80019aa:	4834      	ldr	r0, [pc, #208]	; (8001a7c <main+0x130>)
 80019ac:	23ff      	movs	r3, #255	; 0xff
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	f7fe ffef 	bl	8000994 <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
  touchGroup0.showPixels();
 80019b6:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <main+0x130>)
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff f84a 	bl	8000a52 <_ZN15TouchBoardGroup10showPixelsEv>
    rocketStreamL.setPixelColor(i, 0, 0, 255);
  }
  rocketStreamL.show();
  */

  bool touched = false;
 80019be:	2312      	movs	r3, #18
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
  bool touched_last = false;
 80019c6:	2311      	movs	r3, #17
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]

  int board_touched = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]

  while (1)
  {

    touchGroup0.updateTouchStates();
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <main+0x130>)
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7ff f890 	bl	8000afa <_ZN15TouchBoardGroup17updateTouchStatesEv>
    touchStates = touchGroup0.getTouchStates();
 80019da:	003b      	movs	r3, r7
 80019dc:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <main+0x130>)
 80019de:	0011      	movs	r1, r2
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7ff f8ad 	bl	8000b40 <_ZN15TouchBoardGroup14getTouchStatesEv>
 80019e6:	003a      	movs	r2, r7
 80019e8:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <main+0x134>)
 80019ea:	0011      	movs	r1, r2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 fb64 	bl	80020ba <_ZNSt6vectorI15TouchState_enumSaIS0_EEaSEOS2_>
 80019f2:	003b      	movs	r3, r7
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff f968 	bl	8000cca <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>

    touched = false;
 80019fa:	2312      	movs	r3, #18
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<NUM_BOARDS; i++) {
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b17      	cmp	r3, #23
 8001a0a:	dc23      	bgt.n	8001a54 <main+0x108>
      if (touchStates[i] == TOUCHED) {
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <main+0x134>)
 8001a10:	0011      	movs	r1, r2
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7ff f982 	bl	8000d1c <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	425a      	negs	r2, r3
 8001a1e:	4153      	adcs	r3, r2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <main+0xee>
        touchGroup0.setBoardColor(i, 255, 100, 0);
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	b2d9      	uxtb	r1, r3
 8001a2a:	4814      	ldr	r0, [pc, #80]	; (8001a7c <main+0x130>)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2364      	movs	r3, #100	; 0x64
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	f7fe ffe3 	bl	80009fe <_ZN15TouchBoardGroup13setBoardColorEhhhh>
 8001a38:	e008      	b.n	8001a4c <main+0x100>
      } else {
        touchGroup0.setBoardColor(i, 0, 100, 255);
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	b2d9      	uxtb	r1, r3
 8001a3e:	480f      	ldr	r0, [pc, #60]	; (8001a7c <main+0x130>)
 8001a40:	23ff      	movs	r3, #255	; 0xff
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2364      	movs	r3, #100	; 0x64
 8001a46:	2200      	movs	r2, #0
 8001a48:	f7fe ffd9 	bl	80009fe <_ZN15TouchBoardGroup13setBoardColorEhhhh>
    for (int i=0; i<NUM_BOARDS; i++) {
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e7d8      	b.n	8001a06 <main+0xba>
      }
    }
    touchGroup0.showPixels();
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <main+0x130>)
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7fe fffb 	bl	8000a52 <_ZN15TouchBoardGroup10showPixelsEv>


    touched_last = touched;
 8001a5c:	2311      	movs	r3, #17
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	2212      	movs	r2, #18
 8001a62:	18ba      	adds	r2, r7, r2
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	701a      	strb	r2, [r3, #0]
    }
    sw = !sw;
    */


    HAL_Delay(250);
 8001a68:	20fa      	movs	r0, #250	; 0xfa
 8001a6a:	f000 fed1 	bl	8002810 <HAL_Delay>


	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001a6e:	e7b0      	b.n	80019d2 <main+0x86>
 8001a70:	08004fb0 	.word	0x08004fb0
 8001a74:	200003a0 	.word	0x200003a0
 8001a78:	50001c00 	.word	0x50001c00
 8001a7c:	200005c8 	.word	0x200005c8
 8001a80:	20000a88 	.word	0x20000a88

08001a84 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b095      	sub	sp, #84	; 0x54
 8001a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8a:	2418      	movs	r4, #24
 8001a8c:	193b      	adds	r3, r7, r4
 8001a8e:	0018      	movs	r0, r3
 8001a90:	2338      	movs	r3, #56	; 0x38
 8001a92:	001a      	movs	r2, r3
 8001a94:	2100      	movs	r1, #0
 8001a96:	f003 f947 	bl	8004d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	2314      	movs	r3, #20
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	f003 f940 	bl	8004d28 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa8:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <_Z18SystemClock_Configv+0xc0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <_Z18SystemClock_Configv+0xc4>)
 8001aae:	401a      	ands	r2, r3
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <_Z18SystemClock_Configv+0xc0>)
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	0109      	lsls	r1, r1, #4
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aba:	0021      	movs	r1, r4
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2202      	movs	r2, #2
 8001ac0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2210      	movs	r2, #16
 8001acc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	02d2      	lsls	r2, r2, #11
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	03d2      	lsls	r2, r2, #15
 8001ae8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	0018      	movs	r0, r3
 8001aee:	f001 f951 	bl	8002d94 <HAL_RCC_OscConfig>
 8001af2:	0003      	movs	r3, r0
 8001af4:	1e5a      	subs	r2, r3, #1
 8001af6:	4193      	sbcs	r3, r2
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8001afe:	f000 fad7 	bl	80020b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	220f      	movs	r2, #15
 8001b06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2101      	movs	r1, #1
 8001b24:	0018      	movs	r0, r3
 8001b26:	f001 fbc1 	bl	80032ac <HAL_RCC_ClockConfig>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	1e5a      	subs	r2, r3, #1
 8001b2e:	4193      	sbcs	r3, r2
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001b36:	f000 fabb 	bl	80020b0 <Error_Handler>
  }
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b015      	add	sp, #84	; 0x54
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40007000 	.word	0x40007000
 8001b48:	ffffe7ff 	.word	0xffffe7ff

08001b4c <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <_ZL12MX_I2S2_Initv+0x50>)
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <_ZL12MX_I2S2_Initv+0x54>)
 8001b54:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <_ZL12MX_I2S2_Initv+0x50>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <_ZL12MX_I2S2_Initv+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <_ZL12MX_I2S2_Initv+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <_ZL12MX_I2S2_Initv+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <_ZL12MX_I2S2_Initv+0x50>)
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <_ZL12MX_I2S2_Initv+0x58>)
 8001b74:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <_ZL12MX_I2S2_Initv+0x50>)
 8001b78:	2208      	movs	r2, #8
 8001b7a:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <_ZL12MX_I2S2_Initv+0x50>)
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f001 f846 	bl	8002c10 <HAL_I2S_Init>
 8001b84:	0003      	movs	r3, r0
 8001b86:	1e5a      	subs	r2, r3, #1
 8001b88:	4193      	sbcs	r3, r2
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <_ZL12MX_I2S2_Initv+0x48>
  {
    Error_Handler();
 8001b90:	f000 fa8e 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	2000011c 	.word	0x2000011c
 8001ba0:	40003800 	.word	0x40003800
 8001ba4:	0000ac44 	.word	0x0000ac44

08001ba8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bae:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <_ZL12MX_SPI1_Initv+0x74>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bb4:	2282      	movs	r2, #130	; 0x82
 8001bb6:	0052      	lsls	r2, r2, #1
 8001bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bdc:	2210      	movs	r2, #16
 8001bde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_ZL12MX_SPI1_Initv+0x70>)
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f001 fcdc 	bl	80035b8 <HAL_SPI_Init>
 8001c00:	0003      	movs	r3, r0
 8001c02:	1e5a      	subs	r2, r3, #1
 8001c04:	4193      	sbcs	r3, r2
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <_ZL12MX_SPI1_Initv+0x68>
  {
    Error_Handler();
 8001c0c:	f000 fa50 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	200001a0 	.word	0x200001a0
 8001c1c:	40013000 	.word	0x40013000

08001c20 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	2318      	movs	r3, #24
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	001a      	movs	r2, r3
 8001c30:	2100      	movs	r1, #0
 8001c32:	f003 f879 	bl	8004d28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c36:	2310      	movs	r3, #16
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	001a      	movs	r2, r3
 8001c40:	2100      	movs	r1, #0
 8001c42:	f003 f871 	bl	8004d28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c46:	003b      	movs	r3, r7
 8001c48:	0018      	movs	r0, r3
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f003 f86a 	bl	8004d28 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c54:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	05d2      	lsls	r2, r2, #23
 8001c5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c5c:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c62:	4b45      	ldr	r3, [pc, #276]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001c6a:	2227      	movs	r2, #39	; 0x27
 8001c6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f001 fff2 	bl	8003c66 <HAL_TIM_Base_Init>
 8001c82:	0003      	movs	r3, r0
 8001c84:	1e5a      	subs	r2, r3, #1
 8001c86:	4193      	sbcs	r3, r2
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8001c8e:	f000 fa0f 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c92:	2118      	movs	r1, #24
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	0152      	lsls	r2, r2, #5
 8001c9a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c9c:	187a      	adds	r2, r7, r1
 8001c9e:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001ca0:	0011      	movs	r1, r2
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f002 f96c 	bl	8003f80 <HAL_TIM_ConfigClockSource>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	1e5a      	subs	r2, r3, #1
 8001cac:	4193      	sbcs	r3, r2
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8001cb4:	f000 f9fc 	bl	80020b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f002 f8a9 	bl	8003e12 <HAL_TIM_PWM_Init>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	1e5a      	subs	r2, r3, #1
 8001cc4:	4193      	sbcs	r3, r2
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8001ccc:	f000 f9f0 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cde:	187a      	adds	r2, r7, r1
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f002 fa79 	bl	80041dc <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	0003      	movs	r3, r0
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	4193      	sbcs	r3, r2
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8001cf6:	f000 f9db 	bl	80020b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfa:	003b      	movs	r3, r7
 8001cfc:	2260      	movs	r2, #96	; 0x60
 8001cfe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d00:	003b      	movs	r3, r7
 8001d02:	2200      	movs	r2, #0
 8001d04:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d06:	003b      	movs	r3, r7
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d0c:	003b      	movs	r3, r7
 8001d0e:	2204      	movs	r2, #4
 8001d10:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d12:	0039      	movs	r1, r7
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f002 f8a3 	bl	8003e64 <HAL_TIM_PWM_ConfigChannel>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	1e5a      	subs	r2, r3, #1
 8001d22:	4193      	sbcs	r3, r2
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8001d2a:	f000 f9c1 	bl	80020b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d2e:	0039      	movs	r1, r7
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001d32:	2208      	movs	r2, #8
 8001d34:	0018      	movs	r0, r3
 8001d36:	f002 f895 	bl	8003e64 <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	4193      	sbcs	r3, r2
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8001d46:	f000 f9b3 	bl	80020b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d4a:	0039      	movs	r1, r7
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	0018      	movs	r0, r3
 8001d52:	f002 f887 	bl	8003e64 <HAL_TIM_PWM_ConfigChannel>
 8001d56:	0003      	movs	r3, r0
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	4193      	sbcs	r3, r2
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <_ZL12MX_TIM2_Initv+0x146>
  {
    Error_Handler();
 8001d62:	f000 f9a5 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <_ZL12MX_TIM2_Initv+0x158>)
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f000 fc27 	bl	80025bc <HAL_TIM_MspPostInit>

}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b00a      	add	sp, #40	; 0x28
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	20000288 	.word	0x20000288

08001d7c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <_ZL11MX_DMA_Initv+0x58>)
 8001d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <_ZL11MX_DMA_Initv+0x58>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <_ZL11MX_DMA_Initv+0x58>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	2201      	movs	r2, #1
 8001d94:	4013      	ands	r3, r2
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2009      	movs	r0, #9
 8001da0:	f000 fd48 	bl	8002834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001da4:	2009      	movs	r0, #9
 8001da6:	f000 fd6f 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	200a      	movs	r0, #10
 8001db0:	f000 fd40 	bl	8002834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001db4:	200a      	movs	r0, #10
 8001db6:	f000 fd67 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	200b      	movs	r0, #11
 8001dc0:	f000 fd38 	bl	8002834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001dc4:	200b      	movs	r0, #11
 8001dc6:	f000 fd5f 	bl	8002888 <HAL_NVIC_EnableIRQ>

}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b08d      	sub	sp, #52	; 0x34
 8001ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	241c      	movs	r4, #28
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	0018      	movs	r0, r3
 8001de4:	2314      	movs	r3, #20
 8001de6:	001a      	movs	r2, r3
 8001de8:	2100      	movs	r1, #0
 8001dea:	f002 ff9d 	bl	8004d28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dee:	4ba7      	ldr	r3, [pc, #668]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df2:	4ba6      	ldr	r3, [pc, #664]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001df4:	2110      	movs	r1, #16
 8001df6:	430a      	orrs	r2, r1
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dfa:	4ba4      	ldr	r3, [pc, #656]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	2210      	movs	r2, #16
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e06:	4ba1      	ldr	r3, [pc, #644]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0a:	4ba0      	ldr	r3, [pc, #640]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e12:	4b9e      	ldr	r3, [pc, #632]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	2204      	movs	r2, #4
 8001e18:	4013      	ands	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1e:	4b9b      	ldr	r3, [pc, #620]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e22:	4b9a      	ldr	r3, [pc, #616]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	430a      	orrs	r2, r1
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e2a:	4b98      	ldr	r3, [pc, #608]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b95      	ldr	r3, [pc, #596]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3a:	4b94      	ldr	r3, [pc, #592]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e42:	4b92      	ldr	r3, [pc, #584]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	4b8f      	ldr	r3, [pc, #572]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e52:	4b8e      	ldr	r3, [pc, #568]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e54:	2102      	movs	r1, #2
 8001e56:	430a      	orrs	r2, r1
 8001e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e5a:	4b8c      	ldr	r3, [pc, #560]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e6c:	2108      	movs	r1, #8
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e72:	4b86      	ldr	r3, [pc, #536]	; (800208c <_ZL12MX_GPIO_Initv+0x2b4>)
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	2208      	movs	r2, #8
 8001e78:	4013      	ands	r3, r2
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin, GPIO_PIN_RESET);
 8001e7e:	4b84      	ldr	r3, [pc, #528]	; (8002090 <_ZL12MX_GPIO_Initv+0x2b8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	2120      	movs	r1, #32
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 febd 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin, GPIO_PIN_RESET);
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	01db      	lsls	r3, r3, #7
 8001e8e:	4881      	ldr	r0, [pc, #516]	; (8002094 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	0019      	movs	r1, r3
 8001e94:	f000 feb6 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	487e      	ldr	r0, [pc, #504]	; (8002098 <_ZL12MX_GPIO_Initv+0x2c0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	f000 feaf 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AUDIO_SD_N_L_Pin|AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
 8001ea6:	23c0      	movs	r3, #192	; 0xc0
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	487c      	ldr	r0, [pc, #496]	; (800209c <_ZL12MX_GPIO_Initv+0x2c4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	0019      	movs	r1, r3
 8001eb0:	f000 fea8 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI1_CS_N_GPIO_Port, SD_SPI1_CS_N_Pin, GPIO_PIN_RESET);
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	0219      	lsls	r1, r3, #8
 8001eb8:	23a0      	movs	r3, #160	; 0xa0
 8001eba:	05db      	lsls	r3, r3, #23
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 fea0 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_L_Pin SD_DET_A_Pin SD_DET_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_L_Pin|SD_DET_A_Pin|SD_DET_B_Pin;
 8001ec4:	193b      	adds	r3, r7, r4
 8001ec6:	22c8      	movs	r2, #200	; 0xc8
 8001ec8:	0052      	lsls	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ecc:	193b      	adds	r3, r7, r4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	193b      	adds	r3, r7, r4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	4a6d      	ldr	r2, [pc, #436]	; (8002090 <_ZL12MX_GPIO_Initv+0x2b8>)
 8001edc:	0019      	movs	r1, r3
 8001ede:	0010      	movs	r0, r2
 8001ee0:	f000 fdc8 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_L_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_L_Pin;
 8001ee4:	193b      	adds	r3, r7, r4
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	193b      	adds	r3, r7, r4
 8001eec:	2201      	movs	r2, #1
 8001eee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	193b      	adds	r3, r7, r4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	193b      	adds	r3, r7, r4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_L_GPIO_Port, &GPIO_InitStruct);
 8001efc:	193b      	adds	r3, r7, r4
 8001efe:	4a64      	ldr	r2, [pc, #400]	; (8002090 <_ZL12MX_GPIO_Initv+0x2b8>)
 8001f00:	0019      	movs	r1, r3
 8001f02:	0010      	movs	r0, r2
 8001f04:	f000 fdb6 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_R_Pin TOUCH_STAR_0_Pin TOUCH_STAR_1_Pin TOUCH_STAR_2_Pin
                           TOUCH_STAR_15_Pin TOUCH_STAR_16_Pin TOUCH_STAR_17_Pin */
  GPIO_InitStruct.Pin = BUTTON_R_Pin|TOUCH_STAR_0_Pin|TOUCH_STAR_1_Pin|TOUCH_STAR_2_Pin
 8001f08:	193b      	adds	r3, r7, r4
 8001f0a:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <_ZL12MX_GPIO_Initv+0x2c8>)
 8001f0c:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_15_Pin|TOUCH_STAR_16_Pin|TOUCH_STAR_17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0e:	193b      	adds	r3, r7, r4
 8001f10:	2200      	movs	r2, #0
 8001f12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	193b      	adds	r3, r7, r4
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1a:	193b      	adds	r3, r7, r4
 8001f1c:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001f1e:	0019      	movs	r1, r3
 8001f20:	0010      	movs	r0, r2
 8001f22:	f000 fda7 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_R_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_R_Pin;
 8001f26:	0021      	movs	r1, r4
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	01d2      	lsls	r2, r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f30:	000c      	movs	r4, r1
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	2201      	movs	r2, #1
 8001f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_R_GPIO_Port, &GPIO_InitStruct);
 8001f44:	193b      	adds	r3, r7, r4
 8001f46:	4a53      	ldr	r2, [pc, #332]	; (8002094 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001f48:	0019      	movs	r1, r3
 8001f4a:	0010      	movs	r0, r2
 8001f4c:	f000 fd92 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8001f50:	0021      	movs	r1, r4
 8001f52:	187b      	adds	r3, r7, r1
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	00d2      	lsls	r2, r2, #3
 8001f58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5a:	000c      	movs	r4, r1
 8001f5c:	193b      	adds	r3, r7, r4
 8001f5e:	2201      	movs	r2, #1
 8001f60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	193b      	adds	r3, r7, r4
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	4a49      	ldr	r2, [pc, #292]	; (8002098 <_ZL12MX_GPIO_Initv+0x2c0>)
 8001f72:	0019      	movs	r1, r3
 8001f74:	0010      	movs	r0, r2
 8001f76:	f000 fd7d 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_G7_1_SAMP_Pin */
  GPIO_InitStruct.Pin = TOUCH_G7_1_SAMP_Pin;
 8001f7a:	193b      	adds	r3, r7, r4
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	193b      	adds	r3, r7, r4
 8001f82:	2202      	movs	r2, #2
 8001f84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	193b      	adds	r3, r7, r4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	193b      	adds	r3, r7, r4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	2203      	movs	r2, #3
 8001f96:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(TOUCH_G7_1_SAMP_GPIO_Port, &GPIO_InitStruct);
 8001f98:	193b      	adds	r3, r7, r4
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	; (8002094 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	0010      	movs	r0, r2
 8001fa0:	f000 fd68 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_STAR_3_Pin TOUCH_STAR_4_Pin TOUCH_STAR_5_Pin TOUCH_STAR_6_Pin
                           TOUCH_STAR_7_Pin TOUCH_STAR_8_Pin TOUCH_STAR_18_Pin TOUCH_STAR_19_Pin
                           TOUCH_STAR_20_Pin */
  GPIO_InitStruct.Pin = TOUCH_STAR_3_Pin|TOUCH_STAR_4_Pin|TOUCH_STAR_5_Pin|TOUCH_STAR_6_Pin
 8001fa4:	193b      	adds	r3, r7, r4
 8001fa6:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <_ZL12MX_GPIO_Initv+0x2cc>)
 8001fa8:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_7_Pin|TOUCH_STAR_8_Pin|TOUCH_STAR_18_Pin|TOUCH_STAR_19_Pin
                          |TOUCH_STAR_20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	193b      	adds	r3, r7, r4
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	193b      	adds	r3, r7, r4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	193a      	adds	r2, r7, r4
 8001fb8:	23a0      	movs	r3, #160	; 0xa0
 8001fba:	05db      	lsls	r3, r3, #23
 8001fbc:	0011      	movs	r1, r2
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 fd58 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_STAR_9_Pin TOUCH_STAR_10_Pin TOUCH_STAR_11_Pin TOUCH_STAR_12_Pin
                           TOUCH_STAR_13_Pin TOUCH_STAR_14_Pin TOUCH_STAR_21_Pin TOUCH_STAR_22_Pin
                           TOUCH_STAR_23_Pin */
  GPIO_InitStruct.Pin = TOUCH_STAR_9_Pin|TOUCH_STAR_10_Pin|TOUCH_STAR_11_Pin|TOUCH_STAR_12_Pin
 8001fc4:	193b      	adds	r3, r7, r4
 8001fc6:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <_ZL12MX_GPIO_Initv+0x2d0>)
 8001fc8:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_13_Pin|TOUCH_STAR_14_Pin|TOUCH_STAR_21_Pin|TOUCH_STAR_22_Pin
                          |TOUCH_STAR_23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fca:	193b      	adds	r3, r7, r4
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	193b      	adds	r3, r7, r4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd6:	193b      	adds	r3, r7, r4
 8001fd8:	4a34      	ldr	r2, [pc, #208]	; (80020ac <_ZL12MX_GPIO_Initv+0x2d4>)
 8001fda:	0019      	movs	r1, r3
 8001fdc:	0010      	movs	r0, r2
 8001fde:	f000 fd49 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_L_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_L_Pin;
 8001fe2:	0021      	movs	r1, r4
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	00d2      	lsls	r2, r2, #3
 8001fea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fec:	000c      	movs	r4, r1
 8001fee:	193b      	adds	r3, r7, r4
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	193b      	adds	r3, r7, r4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_L_GPIO_Port, &GPIO_InitStruct);
 8002000:	193b      	adds	r3, r7, r4
 8002002:	4a26      	ldr	r2, [pc, #152]	; (800209c <_ZL12MX_GPIO_Initv+0x2c4>)
 8002004:	0019      	movs	r1, r3
 8002006:	0010      	movs	r0, r2
 8002008:	f000 fd34 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_R_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_R_Pin;
 800200c:	0021      	movs	r1, r4
 800200e:	187b      	adds	r3, r7, r1
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002016:	000c      	movs	r4, r1
 8002018:	193b      	adds	r3, r7, r4
 800201a:	2211      	movs	r2, #17
 800201c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	193b      	adds	r3, r7, r4
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	193b      	adds	r3, r7, r4
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_R_GPIO_Port, &GPIO_InitStruct);
 800202a:	193b      	adds	r3, r7, r4
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <_ZL12MX_GPIO_Initv+0x2c4>)
 800202e:	0019      	movs	r1, r3
 8002030:	0010      	movs	r0, r2
 8002032:	f000 fd1f 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 8002036:	0021      	movs	r1, r4
 8002038:	187b      	adds	r3, r7, r1
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	0212      	lsls	r2, r2, #8
 800203e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	000c      	movs	r4, r1
 8002042:	193b      	adds	r3, r7, r4
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	193b      	adds	r3, r7, r4
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 800204e:	193b      	adds	r3, r7, r4
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <_ZL12MX_GPIO_Initv+0x2c4>)
 8002052:	0019      	movs	r1, r3
 8002054:	0010      	movs	r0, r2
 8002056:	f000 fd0d 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI1_CS_N_Pin */
  GPIO_InitStruct.Pin = SD_SPI1_CS_N_Pin;
 800205a:	0021      	movs	r1, r4
 800205c:	187b      	adds	r3, r7, r1
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	0212      	lsls	r2, r2, #8
 8002062:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	187b      	adds	r3, r7, r1
 8002066:	2201      	movs	r2, #1
 8002068:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	187b      	adds	r3, r7, r1
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	187b      	adds	r3, r7, r1
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_SPI1_CS_N_GPIO_Port, &GPIO_InitStruct);
 8002076:	187a      	adds	r2, r7, r1
 8002078:	23a0      	movs	r3, #160	; 0xa0
 800207a:	05db      	lsls	r3, r3, #23
 800207c:	0011      	movs	r1, r2
 800207e:	0018      	movs	r0, r3
 8002080:	f000 fcf8 	bl	8002a74 <HAL_GPIO_Init>

}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b00d      	add	sp, #52	; 0x34
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	50001000 	.word	0x50001000
 8002094:	50000800 	.word	0x50000800
 8002098:	50001c00 	.word	0x50001c00
 800209c:	50000c00 	.word	0x50000c00
 80020a0:	0000238e 	.word	0x0000238e
 80020a4:	00001cee 	.word	0x00001cee
 80020a8:	000070d7 	.word	0x000070d7
 80020ac:	50000400 	.word	0x50000400

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <Error_Handler+0x8>

080020ba <_ZNSt6vectorI15TouchState_enumSaIS0_EEaSEOS2_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 80020ba:	b590      	push	{r4, r7, lr}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 80020c4:	230f      	movs	r3, #15
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 f80b 	bl	80020ea <_ZSt4moveIRSt6vectorI15TouchState_enumSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 80020d4:	0001      	movs	r1, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	1c22      	adds	r2, r4, #0
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 f80e 	bl	80020fc <_ZNSt6vectorI15TouchState_enumSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>
	return *this;
 80020e0:	687b      	ldr	r3, [r7, #4]
      }
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b005      	add	sp, #20
 80020e8:	bd90      	pop	{r4, r7, pc}

080020ea <_ZSt4moveIRSt6vectorI15TouchState_enumSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_ZNSt6vectorI15TouchState_enumSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	701a      	strb	r2, [r3, #0]
      {
	vector __tmp(get_allocator());
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	241c      	movs	r4, #28
 800210e:	193b      	adds	r3, r7, r4
 8002110:	0011      	movs	r1, r2
 8002112:	0018      	movs	r0, r3
 8002114:	f000 f82d 	bl	8002172 <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE13get_allocatorEv>
 8002118:	193a      	adds	r2, r7, r4
 800211a:	2510      	movs	r5, #16
 800211c:	197b      	adds	r3, r7, r5
 800211e:	0011      	movs	r1, r2
 8002120:	0018      	movs	r0, r3
 8002122:	f000 f839 	bl	8002198 <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS1_>
 8002126:	193b      	adds	r3, r7, r4
 8002128:	0018      	movs	r0, r3
 800212a:	f7fe fda3 	bl	8000c74 <_ZNSaI15TouchState_enumED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	0011      	movs	r1, r2
 8002134:	0018      	movs	r0, r3
 8002136:	f000 f83f 	bl	80021b8 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	197b      	adds	r3, r7, r5
 800213e:	0011      	movs	r1, r2
 8002140:	0018      	movs	r0, r3
 8002142:	f000 f839 	bl	80021b8 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	0018      	movs	r0, r3
 800214a:	f7fe ff6c 	bl	8001026 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 800214e:	0004      	movs	r4, r0
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	0018      	movs	r0, r3
 8002154:	f7fe ff67 	bl	8001026 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8002158:	0003      	movs	r3, r0
 800215a:	0019      	movs	r1, r3
 800215c:	0020      	movs	r0, r4
 800215e:	f000 f84b 	bl	80021f8 <_ZSt15__alloc_on_moveISaI15TouchState_enumEEvRT_S3_>
	vector __tmp(get_allocator());
 8002162:	197b      	adds	r3, r7, r5
 8002164:	0018      	movs	r0, r3
 8002166:	f7fe fdb0 	bl	8000cca <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
      }
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b008      	add	sp, #32
 8002170:	bdb0      	pop	{r4, r5, r7, pc}

08002172 <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	0018      	movs	r0, r3
 8002180:	f7fe ff86 	bl	8001090 <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8002184:	0002      	movs	r2, r0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0011      	movs	r1, r2
 800218a:	0018      	movs	r0, r3
 800218c:	f7ff f870 	bl	8001270 <_ZNSaI15TouchState_enumEC1ERKS0_>
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}

08002198 <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS1_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	0011      	movs	r1, r2
 80021a8:	0018      	movs	r0, r3
 80021aa:	f000 f833 	bl	8002214 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1ERKS1_>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 80021c2:	240c      	movs	r4, #12
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7ff f99b 	bl	8001502 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	0011      	movs	r1, r2
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 f82e 	bl	8002234 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	  _M_copy_data(__x);
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0011      	movs	r1, r2
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 f828 	bl	8002234 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	  __x._M_copy_data(__tmp);
 80021e4:	193a      	adds	r2, r7, r4
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	0011      	movs	r1, r2
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 f822 	bl	8002234 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b007      	add	sp, #28
 80021f6:	bd90      	pop	{r4, r7, pc}

080021f8 <_ZSt15__alloc_on_moveISaI15TouchState_enumEEvRT_S3_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f829 	bl	800225e <_ZSt18__do_alloc_on_moveISaI15TouchState_enumEEvRT_S3_St17integral_constantIbLb1EE>
    }
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}

08002214 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	0011      	movs	r1, r2
 8002224:	0018      	movs	r0, r3
 8002226:	f7ff f833 	bl	8001290 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	609a      	str	r2, [r3, #8]
	}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	46bd      	mov	sp, r7
 800225a:	b002      	add	sp, #8
 800225c:	bd80      	pop	{r7, pc}

0800225e <_ZSt18__do_alloc_on_moveISaI15TouchState_enumEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	701a      	strb	r2, [r3, #0]
    { __one = std::move(__two); }
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	0018      	movs	r0, r3
 8002270:	f000 f804 	bl	800227c <_ZSt4moveIRSaI15TouchState_enumEEONSt16remove_referenceIT_E4typeEOS4_>
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b004      	add	sp, #16
 800227a:	bd80      	pop	{r7, pc}

0800227c <_ZSt4moveIRSaI15TouchState_enumEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b002      	add	sp, #8
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b087      	sub	sp, #28
 8002294:	af02      	add	r7, sp, #8
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d11a      	bne.n	80022d6 <_Z41__static_initialization_and_destruction_0ii+0x46>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4a16      	ldr	r2, [pc, #88]	; (80022fc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d116      	bne.n	80022d6 <_Z41__static_initialization_and_destruction_0ii+0x46>
TouchBoardGroup touchGroup0 = TouchBoardGroup(NUM_BOARDS, htim2, TIM_CHANNEL_1, hdma_tim2_ch1);
 80022a8:	4a15      	ldr	r2, [pc, #84]	; (8002300 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80022aa:	4816      	ldr	r0, [pc, #88]	; (8002304 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2300      	movs	r3, #0
 80022b2:	2118      	movs	r1, #24
 80022b4:	f7fe fac6 	bl	8000844 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
std::vector<TouchState_enum> touchStates(NUM_BOARDS);
 80022b8:	240c      	movs	r4, #12
 80022ba:	193b      	adds	r3, r7, r4
 80022bc:	0018      	movs	r0, r3
 80022be:	f7fe fccc 	bl	8000c5a <_ZNSaI15TouchState_enumEC1Ev>
 80022c2:	193a      	adds	r2, r7, r4
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80022c6:	2118      	movs	r1, #24
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7fe fce0 	bl	8000c8e <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>
 80022ce:	193b      	adds	r3, r7, r4
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7fe fccf 	bl	8000c74 <_ZNSaI15TouchState_enumED1Ev>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10b      	bne.n	80022f4 <_Z41__static_initialization_and_destruction_0ii+0x64>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d107      	bne.n	80022f4 <_Z41__static_initialization_and_destruction_0ii+0x64>
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80022e6:	0018      	movs	r0, r3
 80022e8:	f7fe fcef 	bl	8000cca <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
TouchBoardGroup touchGroup0 = TouchBoardGroup(NUM_BOARDS, htim2, TIM_CHANNEL_1, hdma_tim2_ch1);
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7fe fb30 	bl	8000954 <_ZN15TouchBoardGroupD1Ev>
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b005      	add	sp, #20
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	0000ffff 	.word	0x0000ffff
 8002300:	20000288 	.word	0x20000288
 8002304:	200005c8 	.word	0x200005c8
 8002308:	200002c8 	.word	0x200002c8
 800230c:	20000a88 	.word	0x20000a88

08002310 <_GLOBAL__sub_I_wav_buf>:
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <_GLOBAL__sub_I_wav_buf+0x14>)
 8002316:	0019      	movs	r1, r3
 8002318:	2001      	movs	r0, #1
 800231a:	f7ff ffb9 	bl	8002290 <_Z41__static_initialization_and_destruction_0ii>
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	0000ffff 	.word	0x0000ffff

08002328 <_GLOBAL__sub_D_wav_buf>:
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <_GLOBAL__sub_D_wav_buf+0x14>)
 800232e:	0019      	movs	r1, r3
 8002330:	2000      	movs	r0, #0
 8002332:	f7ff ffad 	bl	8002290 <_Z41__static_initialization_and_destruction_0ii>
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	0000ffff 	.word	0x0000ffff

08002340 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002340:	2201      	movs	r2, #1
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_MspInit+0x18>)
 8002344:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002346:	430a      	orrs	r2, r1
 8002348:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	2280      	movs	r2, #128	; 0x80
 800234c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800234e:	0552      	lsls	r2, r2, #21
 8002350:	430a      	orrs	r2, r1
 8002352:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002354:	4770      	bx	lr
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	0006      	movs	r6, r0
 8002360:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002362:	2214      	movs	r2, #20
 8002364:	2100      	movs	r1, #0
 8002366:	a803      	add	r0, sp, #12
 8002368:	f002 fcde 	bl	8004d28 <memset>
  if(hi2s->Instance==SPI2)
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <HAL_I2S_MspInit+0xa8>)
 800236e:	6832      	ldr	r2, [r6, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d145      	bne.n	8002400 <HAL_I2S_MspInit+0xa4>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002374:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <HAL_I2S_MspInit+0xac>)
 800237a:	01d2      	lsls	r2, r2, #7
 800237c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PD0     ------> I2S2_WS
    PD1     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2700      	movs	r7, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002380:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002382:	2108      	movs	r1, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 8002388:	4820      	ldr	r0, [pc, #128]	; (800240c <HAL_I2S_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	432a      	orrs	r2, r5
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002390:	402a      	ands	r2, r5
 8002392:	9201      	str	r2, [sp, #4]
 8002394:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	430a      	orrs	r2, r1
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a0:	400b      	ands	r3, r1
 80023a2:	9302      	str	r3, [sp, #8]
 80023a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 80023a6:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80023a8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80023b2:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f000 fb5e 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
 80023b8:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <HAL_I2S_MspInit+0xb4>)
    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
 80023bc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023be:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80023c0:	3b02      	subs	r3, #2
 80023c2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c8:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ca:	f000 fb53 	bl	8002a74 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel7;
 80023ce:	4c11      	ldr	r4, [pc, #68]	; (8002414 <HAL_I2S_MspInit+0xb8>)
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_I2S_MspInit+0xbc>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80023d2:	0020      	movs	r0, r4
    hdma_spi2_tx.Instance = DMA1_Channel7;
 80023d4:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d6:	2310      	movs	r3, #16
 80023d8:	60a3      	str	r3, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023da:	3370      	adds	r3, #112	; 0x70
 80023dc:	6123      	str	r3, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023de:	3380      	adds	r3, #128	; 0x80
 80023e0:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	00db      	lsls	r3, r3, #3
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80023e6:	6065      	str	r5, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e8:	60e7      	str	r7, [r4, #12]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023ea:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80023ec:	61e7      	str	r7, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023ee:	6227      	str	r7, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80023f0:	f000 fa70 	bl	80028d4 <HAL_DMA_Init>
 80023f4:	42b8      	cmp	r0, r7
 80023f6:	d001      	beq.n	80023fc <HAL_I2S_MspInit+0xa0>
    {
      Error_Handler();
 80023f8:	f7ff fe5a 	bl	80020b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80023fc:	62f4      	str	r4, [r6, #44]	; 0x2c
 80023fe:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002400:	b009      	add	sp, #36	; 0x24
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	40003800 	.word	0x40003800
 8002408:	40021000 	.word	0x40021000
 800240c:	50000400 	.word	0x50000400
 8002410:	50000c00 	.word	0x50000c00
 8002414:	20000158 	.word	0x20000158
 8002418:	40020080 	.word	0x40020080

0800241c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	0005      	movs	r5, r0
 8002420:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	2214      	movs	r2, #20
 8002424:	2100      	movs	r1, #0
 8002426:	a801      	add	r0, sp, #4
 8002428:	f002 fc7e 	bl	8004d28 <memset>
  if(hspi->Instance==SPI1)
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_SPI_MspInit+0xb0>)
 800242e:	682a      	ldr	r2, [r5, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d149      	bne.n	80024c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_SPI_MspInit+0xb4>)
 8002438:	0152      	lsls	r2, r2, #5
 800243a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2600      	movs	r6, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800243e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002440:	2110      	movs	r1, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002442:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002446:	4823      	ldr	r0, [pc, #140]	; (80024d4 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002448:	430a      	orrs	r2, r1
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002450:	400b      	ands	r3, r1
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
 8002456:	23e0      	movs	r3, #224	; 0xe0
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800245e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
 8002462:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002468:	f000 fb04 	bl	8002a74 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800246c:	4c1a      	ldr	r4, [pc, #104]	; (80024d8 <HAL_SPI_MspInit+0xbc>)
 800246e:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_SPI_MspInit+0xc0>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002470:	0020      	movs	r0, r4
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002472:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002474:	2301      	movs	r3, #1
 8002476:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002478:	337f      	adds	r3, #127	; 0x7f
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800247a:	60a6      	str	r6, [r4, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800247c:	60e6      	str	r6, [r4, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800247e:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002480:	6166      	str	r6, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002482:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002484:	61e6      	str	r6, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002486:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002488:	f000 fa24 	bl	80028d4 <HAL_DMA_Init>
 800248c:	42b0      	cmp	r0, r6
 800248e:	d001      	beq.n	8002494 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8002490:	f7ff fe0e 	bl	80020b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_SPI_MspInit+0xc4>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002496:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002498:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800249a:	4c12      	ldr	r4, [pc, #72]	; (80024e4 <HAL_SPI_MspInit+0xc8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800249c:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800249e:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	6063      	str	r3, [r4, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a4:	330f      	adds	r3, #15
 80024a6:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a8:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024aa:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ac:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ae:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b0:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b2:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80024b4:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024b6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80024b8:	f000 fa0c 	bl	80028d4 <HAL_DMA_Init>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d001      	beq.n	80024c4 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 80024c0:	f7ff fdf6 	bl	80020b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80024c4:	64ac      	str	r4, [r5, #72]	; 0x48
 80024c6:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024c8:	b006      	add	sp, #24
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
 80024cc:	40013000 	.word	0x40013000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	50001000 	.word	0x50001000
 80024d8:	200001f8 	.word	0x200001f8
 80024dc:	4002001c 	.word	0x4002001c
 80024e0:	40020030 	.word	0x40020030
 80024e4:	20000240 	.word	0x20000240

080024e8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	6802      	ldr	r2, [r0, #0]
{
 80024ec:	b570      	push	{r4, r5, r6, lr}
  if(htim_base->Instance==TIM2)
 80024ee:	05db      	lsls	r3, r3, #23
{
 80024f0:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM2)
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d152      	bne.n	800259c <HAL_TIM_Base_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f6:	2301      	movs	r3, #1
 80024f8:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <HAL_TIM_Base_MspInit+0xb8>)

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80024fa:	4c2a      	ldr	r4, [pc, #168]	; (80025a4 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024fc:	6b91      	ldr	r1, [r2, #56]	; 0x38
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80024fe:	0020      	movs	r0, r4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002500:	430b      	orrs	r3, r1
 8002502:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <HAL_TIM_Base_MspInit+0xc0>)
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002506:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002508:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 800250a:	2308      	movs	r3, #8
 800250c:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800250e:	18db      	adds	r3, r3, r3
 8002510:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002512:	2300      	movs	r3, #0
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002514:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002516:	3281      	adds	r2, #129	; 0x81
 8002518:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800251a:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800251c:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800251e:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002520:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002522:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002524:	f000 f9d6 	bl	80028d4 <HAL_DMA_Init>
 8002528:	2800      	cmp	r0, #0
 800252a:	d001      	beq.n	8002530 <HAL_TIM_Base_MspInit+0x48>
    {
      Error_Handler();
 800252c:	f7ff fdc0 	bl	80020b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002530:	622c      	str	r4, [r5, #32]

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <HAL_TIM_Base_MspInit+0xc4>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002534:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002536:	4c1e      	ldr	r4, [pc, #120]	; (80025b0 <HAL_TIM_Base_MspInit+0xc8>)
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002538:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 800253a:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 800253c:	2308      	movs	r3, #8
 800253e:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002540:	18db      	adds	r3, r3, r3
 8002542:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002544:	2300      	movs	r3, #0
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002546:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002548:	3281      	adds	r2, #129	; 0x81
 800254a:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800254c:	0020      	movs	r0, r4
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800254e:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002550:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002552:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002554:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002556:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002558:	f000 f9bc 	bl	80028d4 <HAL_DMA_Init>
 800255c:	2800      	cmp	r0, #0
 800255e:	d001      	beq.n	8002564 <HAL_TIM_Base_MspInit+0x7c>
    {
      Error_Handler();
 8002560:	f7ff fda6 	bl	80020b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);

    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <HAL_TIM_Base_MspInit+0xcc>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002566:	62ac      	str	r4, [r5, #40]	; 0x28
 8002568:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 800256a:	4c13      	ldr	r4, [pc, #76]	; (80025b8 <HAL_TIM_Base_MspInit+0xd0>)
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800256c:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 800256e:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 8002570:	2308      	movs	r3, #8
 8002572:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002574:	18db      	adds	r3, r3, r3
 8002576:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002578:	2300      	movs	r3, #0
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800257a:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800257c:	3281      	adds	r2, #129	; 0x81
 800257e:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8002580:	0020      	movs	r0, r4
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002582:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002584:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002586:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8002588:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800258a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 800258c:	f000 f9a2 	bl	80028d4 <HAL_DMA_Init>
 8002590:	2800      	cmp	r0, #0
 8002592:	d001      	beq.n	8002598 <HAL_TIM_Base_MspInit+0xb0>
    {
      Error_Handler();
 8002594:	f7ff fd8c 	bl	80020b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8002598:	62ec      	str	r4, [r5, #44]	; 0x2c
 800259a:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800259c:	bd70      	pop	{r4, r5, r6, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	40021000 	.word	0x40021000
 80025a4:	200002c8 	.word	0x200002c8
 80025a8:	40020058 	.word	0x40020058
 80025ac:	40020008 	.word	0x40020008
 80025b0:	20000310 	.word	0x20000310
 80025b4:	40020044 	.word	0x40020044
 80025b8:	20000358 	.word	0x20000358

080025bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025bc:	b510      	push	{r4, lr}
 80025be:	0004      	movs	r4, r0
 80025c0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c2:	2214      	movs	r2, #20
 80025c4:	2100      	movs	r1, #0
 80025c6:	a801      	add	r0, sp, #4
 80025c8:	f002 fbae 	bl	8004d28 <memset>
  if(htim->Instance==TIM2)
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	6822      	ldr	r2, [r4, #0]
 80025d0:	05db      	lsls	r3, r3, #23
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d115      	bne.n	8002602 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025d6:	2010      	movs	r0, #16
 80025d8:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_TIM_MspPostInit+0x4c>)
 80025da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025dc:	4301      	orrs	r1, r0
 80025de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80025e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM2;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e2:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025e4:	4003      	ands	r3, r0
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
 80025ea:	23d0      	movs	r3, #208	; 0xd0
 80025ec:	015b      	lsls	r3, r3, #5
 80025ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM2;
 80025fc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025fe:	f000 fa39 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002602:	b006      	add	sp, #24
 8002604:	bd10      	pop	{r4, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	40021000 	.word	0x40021000
 800260c:	50001000 	.word	0x50001000

08002610 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002610:	4770      	bx	lr

08002612 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <HardFault_Handler>

08002614 <SVC_Handler>:
 8002614:	4770      	bx	lr

08002616 <PendSV_Handler>:
 8002616:	4770      	bx	lr

08002618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002618:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261a:	f000 f8e7 	bl	80027ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261e:	bd10      	pop	{r4, pc}

08002620 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002620:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002622:	4802      	ldr	r0, [pc, #8]	; (800262c <DMA1_Channel1_IRQHandler+0xc>)
 8002624:	f000 f9da 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002628:	bd10      	pop	{r4, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	20000310 	.word	0x20000310

08002630 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002630:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002632:	4803      	ldr	r0, [pc, #12]	; (8002640 <DMA1_Channel2_3_IRQHandler+0x10>)
 8002634:	f000 f9d2 	bl	80029dc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <DMA1_Channel2_3_IRQHandler+0x14>)
 800263a:	f000 f9cf 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800263e:	bd10      	pop	{r4, pc}
 8002640:	200001f8 	.word	0x200001f8
 8002644:	20000240 	.word	0x20000240

08002648 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002648:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 800264a:	4805      	ldr	r0, [pc, #20]	; (8002660 <DMA1_Channel4_5_6_7_IRQHandler+0x18>)
 800264c:	f000 f9c6 	bl	80029dc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002650:	4804      	ldr	r0, [pc, #16]	; (8002664 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8002652:	f000 f9c3 	bl	80029dc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002656:	4804      	ldr	r0, [pc, #16]	; (8002668 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8002658:	f000 f9c0 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800265c:	bd10      	pop	{r4, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	20000358 	.word	0x20000358
 8002664:	200002c8 	.word	0x200002c8
 8002668:	20000158 	.word	0x20000158

0800266c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800266c:	2001      	movs	r0, #1
 800266e:	4770      	bx	lr

08002670 <_kill>:

int _kill(int pid, int sig)
{
 8002670:	b510      	push	{r4, lr}
	errno = EINVAL;
 8002672:	f002 faff 	bl	8004c74 <__errno>
 8002676:	2316      	movs	r3, #22
 8002678:	6003      	str	r3, [r0, #0]
	return -1;
 800267a:	2001      	movs	r0, #1
}
 800267c:	4240      	negs	r0, r0
 800267e:	bd10      	pop	{r4, pc}

08002680 <_exit>:

void _exit (int status)
{
 8002680:	b510      	push	{r4, lr}
	errno = EINVAL;
 8002682:	f002 faf7 	bl	8004c74 <__errno>
 8002686:	2316      	movs	r3, #22
 8002688:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800268a:	e7fe      	b.n	800268a <_exit+0xa>

0800268c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800268c:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <_sbrk+0x30>)
 800268e:	490c      	ldr	r1, [pc, #48]	; (80026c0 <_sbrk+0x34>)
{
 8002690:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002692:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002694:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <_sbrk+0x38>)
{
 8002696:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002698:	6810      	ldr	r0, [r2, #0]
 800269a:	2800      	cmp	r0, #0
 800269c:	d101      	bne.n	80026a2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800269e:	480a      	ldr	r0, [pc, #40]	; (80026c8 <_sbrk+0x3c>)
 80026a0:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026a2:	6810      	ldr	r0, [r2, #0]
 80026a4:	18c3      	adds	r3, r0, r3
 80026a6:	428b      	cmp	r3, r1
 80026a8:	d906      	bls.n	80026b8 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80026aa:	f002 fae3 	bl	8004c74 <__errno>
 80026ae:	230c      	movs	r3, #12
 80026b0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80026b2:	2001      	movs	r0, #1
 80026b4:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80026b6:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80026b8:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80026ba:	e7fc      	b.n	80026b6 <_sbrk+0x2a>
 80026bc:	00000400 	.word	0x00000400
 80026c0:	20005000 	.word	0x20005000
 80026c4:	20000a94 	.word	0x20000a94
 80026c8:	20000ad8 	.word	0x20000ad8

080026cc <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80026cc:	2280      	movs	r2, #128	; 0x80
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <SystemInit+0x44>)
 80026d0:	0052      	lsls	r2, r2, #1
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	490e      	ldr	r1, [pc, #56]	; (8002714 <SystemInit+0x48>)
 80026dc:	400a      	ands	r2, r1
 80026de:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	490d      	ldr	r1, [pc, #52]	; (8002718 <SystemInit+0x4c>)
 80026e4:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80026e6:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80026e8:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	438a      	bics	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	490a      	ldr	r1, [pc, #40]	; (800271c <SystemInit+0x50>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	4909      	ldr	r1, [pc, #36]	; (8002720 <SystemInit+0x54>)
 80026fc:	400a      	ands	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <SystemInit+0x58>)
 8002708:	0512      	lsls	r2, r2, #20
 800270a:	609a      	str	r2, [r3, #8]
#endif
}
 800270c:	4770      	bx	lr
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	40021000 	.word	0x40021000
 8002714:	88ff400c 	.word	0x88ff400c
 8002718:	fef6fff6 	.word	0xfef6fff6
 800271c:	fffbffff 	.word	0xfffbffff
 8002720:	ff02ffff 	.word	0xff02ffff
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800272a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800272c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800272e:	e003      	b.n	8002738 <LoopCopyDataInit>

08002730 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002732:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002734:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002736:	3104      	adds	r1, #4

08002738 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002738:	480b      	ldr	r0, [pc, #44]	; (8002768 <LoopForever+0xa>)
  ldr  r3, =_edata
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <LoopForever+0xe>)
  adds  r2, r0, r1
 800273c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800273e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002740:	d3f6      	bcc.n	8002730 <CopyDataInit>
  ldr  r2, =_sbss
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002744:	e002      	b.n	800274c <LoopFillZerobss>

08002746 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002746:	2300      	movs	r3, #0
  str  r3, [r2]
 8002748:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274a:	3204      	adds	r2, #4

0800274c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <LoopForever+0x16>)
  cmp  r2, r3
 800274e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002750:	d3f9      	bcc.n	8002746 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002752:	f7ff ffbb 	bl	80026cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002756:	f002 fa93 	bl	8004c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800275a:	f7ff f8f7 	bl	800194c <main>

0800275e <LoopForever>:

LoopForever:
    b LoopForever
 800275e:	e7fe      	b.n	800275e <LoopForever>
   ldr   r0, =_estack
 8002760:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002764:	08005018 	.word	0x08005018
  ldr  r0, =_sdata
 8002768:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800276c:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8002770:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8002774:	20000ad4 	.word	0x20000ad4

08002778 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC1_COMP_IRQHandler>
	...

0800277c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002780:	20fa      	movs	r0, #250	; 0xfa
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_InitTick+0x3c>)
 8002784:	0080      	lsls	r0, r0, #2
 8002786:	7819      	ldrb	r1, [r3, #0]
 8002788:	f7fd fcbe 	bl	8000108 <__udivsi3>
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_InitTick+0x40>)
 800278e:	0001      	movs	r1, r0
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	f7fd fcb9 	bl	8000108 <__udivsi3>
 8002796:	f000 f883 	bl	80028a0 <HAL_SYSTICK_Config>
 800279a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800279c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800279e:	2c00      	cmp	r4, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a2:	2d03      	cmp	r5, #3
 80027a4:	d807      	bhi.n	80027b6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a6:	3802      	subs	r0, #2
 80027a8:	0022      	movs	r2, r4
 80027aa:	0029      	movs	r1, r5
 80027ac:	f000 f842 	bl	8002834 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b0:	0020      	movs	r0, r4
 80027b2:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_InitTick+0x44>)
 80027b4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80027b6:	bd70      	pop	{r4, r5, r6, pc}
 80027b8:	20000094 	.word	0x20000094
 80027bc:	20000090 	.word	0x20000090
 80027c0:	20000098 	.word	0x20000098

080027c4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80027c4:	2340      	movs	r3, #64	; 0x40
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_Init+0x24>)
{
 80027c8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80027ca:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027cc:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80027ce:	430b      	orrs	r3, r1
 80027d0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027d2:	f7ff ffd3 	bl	800277c <HAL_InitTick>
 80027d6:	1e04      	subs	r4, r0, #0
 80027d8:	d103      	bne.n	80027e2 <HAL_Init+0x1e>
    HAL_MspInit();
 80027da:	f7ff fdb1 	bl	8002340 <HAL_MspInit>
}
 80027de:	0020      	movs	r0, r4
 80027e0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80027e2:	2401      	movs	r4, #1
 80027e4:	e7fb      	b.n	80027de <HAL_Init+0x1a>
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40022000 	.word	0x40022000

080027ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80027ec:	4a03      	ldr	r2, [pc, #12]	; (80027fc <HAL_IncTick+0x10>)
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <HAL_IncTick+0x14>)
 80027f0:	6811      	ldr	r1, [r2, #0]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	185b      	adds	r3, r3, r1
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	4770      	bx	lr
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	20000ab0 	.word	0x20000ab0
 8002800:	20000094 	.word	0x20000094

08002804 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002804:	4b01      	ldr	r3, [pc, #4]	; (800280c <HAL_GetTick+0x8>)
 8002806:	6818      	ldr	r0, [r3, #0]
}
 8002808:	4770      	bx	lr
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	20000ab0 	.word	0x20000ab0

08002810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff fff6 	bl	8002804 <HAL_GetTick>
 8002818:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281a:	1c63      	adds	r3, r4, #1
 800281c:	d002      	beq.n	8002824 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800281e:	4b04      	ldr	r3, [pc, #16]	; (8002830 <HAL_Delay+0x20>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002824:	f7ff ffee 	bl	8002804 <HAL_GetTick>
 8002828:	1b40      	subs	r0, r0, r5
 800282a:	42a0      	cmp	r0, r4
 800282c:	d3fa      	bcc.n	8002824 <HAL_Delay+0x14>
  {
  }
}
 800282e:	bd70      	pop	{r4, r5, r6, pc}
 8002830:	20000094 	.word	0x20000094

08002834 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002834:	b530      	push	{r4, r5, lr}
 8002836:	25ff      	movs	r5, #255	; 0xff
 8002838:	2403      	movs	r4, #3
 800283a:	002a      	movs	r2, r5
 800283c:	4004      	ands	r4, r0
 800283e:	00e4      	lsls	r4, r4, #3
 8002840:	40a2      	lsls	r2, r4
 8002842:	0189      	lsls	r1, r1, #6
 8002844:	4029      	ands	r1, r5
 8002846:	43d2      	mvns	r2, r2
 8002848:	40a1      	lsls	r1, r4
 800284a:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800284c:	2800      	cmp	r0, #0
 800284e:	db0a      	blt.n	8002866 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002850:	24c0      	movs	r4, #192	; 0xc0
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_NVIC_SetPriority+0x4c>)
 8002854:	0880      	lsrs	r0, r0, #2
 8002856:	0080      	lsls	r0, r0, #2
 8002858:	18c0      	adds	r0, r0, r3
 800285a:	00a4      	lsls	r4, r4, #2
 800285c:	5903      	ldr	r3, [r0, r4]
 800285e:	401a      	ands	r2, r3
 8002860:	4311      	orrs	r1, r2
 8002862:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002864:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002866:	200f      	movs	r0, #15
 8002868:	4003      	ands	r3, r0
 800286a:	3b08      	subs	r3, #8
 800286c:	4805      	ldr	r0, [pc, #20]	; (8002884 <HAL_NVIC_SetPriority+0x50>)
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	181b      	adds	r3, r3, r0
 8002874:	69d8      	ldr	r0, [r3, #28]
 8002876:	4002      	ands	r2, r0
 8002878:	4311      	orrs	r1, r2
 800287a:	61d9      	str	r1, [r3, #28]
 800287c:	e7f2      	b.n	8002864 <HAL_NVIC_SetPriority+0x30>
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	e000e100 	.word	0xe000e100
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002888:	2800      	cmp	r0, #0
 800288a:	db05      	blt.n	8002898 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288c:	231f      	movs	r3, #31
 800288e:	4018      	ands	r0, r3
 8002890:	3b1e      	subs	r3, #30
 8002892:	4083      	lsls	r3, r0
 8002894:	4a01      	ldr	r2, [pc, #4]	; (800289c <HAL_NVIC_EnableIRQ+0x14>)
 8002896:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002898:	4770      	bx	lr
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	e000e100 	.word	0xe000e100

080028a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a0:	2280      	movs	r2, #128	; 0x80
 80028a2:	1e43      	subs	r3, r0, #1
 80028a4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d20d      	bcs.n	80028c8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ac:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b0:	4807      	ldr	r0, [pc, #28]	; (80028d0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b4:	6a03      	ldr	r3, [r0, #32]
 80028b6:	0609      	lsls	r1, r1, #24
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	430b      	orrs	r3, r1
 80028be:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80028c8:	4770      	bx	lr
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	e000e010 	.word	0xe000e010
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80028d8:	2001      	movs	r0, #1
  if(hdma == NULL)
 80028da:	2c00      	cmp	r4, #0
 80028dc:	d035      	beq.n	800294a <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028de:	6825      	ldr	r5, [r4, #0]
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_DMA_Init+0x78>)
 80028e2:	2114      	movs	r1, #20
 80028e4:	18e8      	adds	r0, r5, r3
 80028e6:	f7fd fc0f 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028ec:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80028ee:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028f0:	2302      	movs	r3, #2
 80028f2:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028f4:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80028f6:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028f8:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028fa:	4b16      	ldr	r3, [pc, #88]	; (8002954 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028fc:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028fe:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8002900:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002902:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002904:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	433b      	orrs	r3, r7
 8002908:	6967      	ldr	r7, [r4, #20]
 800290a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290c:	69a7      	ldr	r7, [r4, #24]
 800290e:	433b      	orrs	r3, r7
 8002910:	69e7      	ldr	r7, [r4, #28]
 8002912:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002914:	6a27      	ldr	r7, [r4, #32]
 8002916:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8002918:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800291a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	01db      	lsls	r3, r3, #7
 8002920:	4299      	cmp	r1, r3
 8002922:	d00c      	beq.n	800293e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002924:	251c      	movs	r5, #28
 8002926:	4028      	ands	r0, r5
 8002928:	3d0d      	subs	r5, #13
 800292a:	4085      	lsls	r5, r0
 800292c:	490a      	ldr	r1, [pc, #40]	; (8002958 <HAL_DMA_Init+0x84>)
 800292e:	680b      	ldr	r3, [r1, #0]
 8002930:	43ab      	bics	r3, r5
 8002932:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002934:	6863      	ldr	r3, [r4, #4]
 8002936:	680d      	ldr	r5, [r1, #0]
 8002938:	4083      	lsls	r3, r0
 800293a:	432b      	orrs	r3, r5
 800293c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002940:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002942:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002944:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8002946:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002948:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800294a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800294c:	bffdfff8 	.word	0xbffdfff8
 8002950:	40020000 	.word	0x40020000
 8002954:	ffff800f 	.word	0xffff800f
 8002958:	400200a8 	.word	0x400200a8

0800295c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800295c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800295e:	1d45      	adds	r5, r0, #5
{
 8002960:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8002962:	7feb      	ldrb	r3, [r5, #31]
{
 8002964:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002966:	2002      	movs	r0, #2
 8002968:	2b01      	cmp	r3, #1
 800296a:	d029      	beq.n	80029c0 <HAL_DMA_Start_IT+0x64>
 800296c:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800296e:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8002970:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002972:	7ffb      	ldrb	r3, [r7, #31]
 8002974:	2600      	movs	r6, #0
 8002976:	469c      	mov	ip, r3
 8002978:	4660      	mov	r0, ip
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2801      	cmp	r0, #1
 800297e:	d12a      	bne.n	80029d6 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002980:	3001      	adds	r0, #1
 8002982:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002984:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002986:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002988:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 800298a:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800298c:	361c      	adds	r6, #28
 800298e:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8002990:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002992:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8002994:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002996:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002998:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800299a:	9b01      	ldr	r3, [sp, #4]
 800299c:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800299e:	68a3      	ldr	r3, [r4, #8]
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d10e      	bne.n	80029c2 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029a4:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029a6:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80029a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ae:	230e      	movs	r3, #14
 80029b0:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029b2:	4313      	orrs	r3, r2
 80029b4:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 80029b6:	2301      	movs	r3, #1
 80029b8:	6802      	ldr	r2, [r0, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2000      	movs	r0, #0
}
 80029c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80029c2:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80029c4:	60c2      	str	r2, [r0, #12]
 80029c6:	e7ef      	b.n	80029a8 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029c8:	2204      	movs	r2, #4
 80029ca:	6803      	ldr	r3, [r0, #0]
 80029cc:	4393      	bics	r3, r2
 80029ce:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029d0:	6802      	ldr	r2, [r0, #0]
 80029d2:	230a      	movs	r3, #10
 80029d4:	e7ed      	b.n	80029b2 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 80029d6:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 80029d8:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 80029da:	e7f1      	b.n	80029c0 <HAL_DMA_Start_IT+0x64>

080029dc <HAL_DMA_IRQHandler>:
{
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80029de:	221c      	movs	r2, #28
 80029e0:	2704      	movs	r7, #4
 80029e2:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029e4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80029e6:	4032      	ands	r2, r6
 80029e8:	003e      	movs	r6, r7
 80029ea:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029ec:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80029ee:	6803      	ldr	r3, [r0, #0]
 80029f0:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80029f2:	4235      	tst	r5, r6
 80029f4:	d00d      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x36>
 80029f6:	423c      	tst	r4, r7
 80029f8:	d00b      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	0692      	lsls	r2, r2, #26
 80029fe:	d402      	bmi.n	8002a06 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	43ba      	bics	r2, r7
 8002a04:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8002a06:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002a08:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002a0e:	4798      	blx	r3
  return;
 8002a10:	e017      	b.n	8002a42 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a12:	2702      	movs	r7, #2
 8002a14:	003e      	movs	r6, r7
 8002a16:	4096      	lsls	r6, r2
 8002a18:	4235      	tst	r5, r6
 8002a1a:	d013      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x68>
 8002a1c:	423c      	tst	r4, r7
 8002a1e:	d011      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	0692      	lsls	r2, r2, #26
 8002a24:	d406      	bmi.n	8002a34 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a26:	240a      	movs	r4, #10
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	43a2      	bics	r2, r4
 8002a2c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002a2e:	2201      	movs	r2, #1
 8002a30:	1d83      	adds	r3, r0, #6
 8002a32:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8002a34:	2200      	movs	r2, #0
 8002a36:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a38:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002a3a:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8002a3c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d1e5      	bne.n	8002a0e <HAL_DMA_IRQHandler+0x32>
}
 8002a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002a44:	2608      	movs	r6, #8
 8002a46:	0037      	movs	r7, r6
 8002a48:	4097      	lsls	r7, r2
 8002a4a:	423d      	tst	r5, r7
 8002a4c:	d0f9      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x66>
 8002a4e:	4234      	tst	r4, r6
 8002a50:	d0f7      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a52:	250e      	movs	r5, #14
 8002a54:	681c      	ldr	r4, [r3, #0]
 8002a56:	43ac      	bics	r4, r5
 8002a58:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	001c      	movs	r4, r3
 8002a5e:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8002a60:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a62:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a64:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002a66:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	1d43      	adds	r3, r0, #5
 8002a6c:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002a6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a70:	e7e5      	b.n	8002a3e <HAL_DMA_IRQHandler+0x62>
	...

08002a74 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002a74:	4a58      	ldr	r2, [pc, #352]	; (8002bd8 <HAL_GPIO_Init+0x164>)
{
 8002a76:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002a78:	1882      	adds	r2, r0, r2
 8002a7a:	1e54      	subs	r4, r2, #1
 8002a7c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8002a7e:	2300      	movs	r3, #0
{
 8002a80:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002a82:	3205      	adds	r2, #5
 8002a84:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a86:	680a      	ldr	r2, [r1, #0]
 8002a88:	0014      	movs	r4, r2
 8002a8a:	40dc      	lsrs	r4, r3
 8002a8c:	d101      	bne.n	8002a92 <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8002a8e:	b007      	add	sp, #28
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a92:	2401      	movs	r4, #1
 8002a94:	0025      	movs	r5, r4
 8002a96:	46a4      	mov	ip, r4
 8002a98:	409d      	lsls	r5, r3
 8002a9a:	0014      	movs	r4, r2
 8002a9c:	402c      	ands	r4, r5
 8002a9e:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8002aa0:	422a      	tst	r2, r5
 8002aa2:	d100      	bne.n	8002aa6 <HAL_GPIO_Init+0x32>
 8002aa4:	e096      	b.n	8002bd4 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aa6:	2403      	movs	r4, #3
 8002aa8:	684a      	ldr	r2, [r1, #4]
 8002aaa:	005e      	lsls	r6, r3, #1
 8002aac:	9201      	str	r2, [sp, #4]
 8002aae:	4022      	ands	r2, r4
 8002ab0:	40b4      	lsls	r4, r6
 8002ab2:	43e4      	mvns	r4, r4
 8002ab4:	9403      	str	r4, [sp, #12]
 8002ab6:	1e54      	subs	r4, r2, #1
 8002ab8:	4564      	cmp	r4, ip
 8002aba:	d82a      	bhi.n	8002b12 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8002abc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002abe:	9c03      	ldr	r4, [sp, #12]
 8002ac0:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac2:	68cc      	ldr	r4, [r1, #12]
 8002ac4:	40b4      	lsls	r4, r6
 8002ac6:	433c      	orrs	r4, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac8:	4667      	mov	r7, ip
        GPIOx->OSPEEDR = temp;
 8002aca:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002acc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ace:	43ac      	bics	r4, r5
 8002ad0:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad2:	9c01      	ldr	r4, [sp, #4]
 8002ad4:	0924      	lsrs	r4, r4, #4
 8002ad6:	403c      	ands	r4, r7
 8002ad8:	409c      	lsls	r4, r3
 8002ada:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002adc:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8002ade:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ae0:	9c03      	ldr	r4, [sp, #12]
 8002ae2:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae4:	688c      	ldr	r4, [r1, #8]
 8002ae6:	40b4      	lsls	r4, r6
 8002ae8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8002aea:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aec:	2a02      	cmp	r2, #2
 8002aee:	d112      	bne.n	8002b16 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3U];
 8002af0:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002af2:	2507      	movs	r5, #7
 8002af4:	00a4      	lsls	r4, r4, #2
 8002af6:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3U];
 8002af8:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002afa:	9404      	str	r4, [sp, #16]
 8002afc:	240f      	movs	r4, #15
 8002afe:	401d      	ands	r5, r3
 8002b00:	00ad      	lsls	r5, r5, #2
 8002b02:	40ac      	lsls	r4, r5
 8002b04:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002b06:	690c      	ldr	r4, [r1, #16]
 8002b08:	40ac      	lsls	r4, r5
 8002b0a:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8002b0c:	9c04      	ldr	r4, [sp, #16]
 8002b0e:	6227      	str	r7, [r4, #32]
 8002b10:	e001      	b.n	8002b16 <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b12:	2a03      	cmp	r2, #3
 8002b14:	d1e3      	bne.n	8002ade <HAL_GPIO_Init+0x6a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b16:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8002b18:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b1a:	9d03      	ldr	r5, [sp, #12]
 8002b1c:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b1e:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8002b20:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b22:	22c0      	movs	r2, #192	; 0xc0
 8002b24:	9c01      	ldr	r4, [sp, #4]
 8002b26:	0292      	lsls	r2, r2, #10
 8002b28:	4214      	tst	r4, r2
 8002b2a:	d053      	beq.n	8002bd4 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2c:	2501      	movs	r5, #1
 8002b2e:	4c2b      	ldr	r4, [pc, #172]	; (8002bdc <HAL_GPIO_Init+0x168>)
 8002b30:	46ac      	mov	ip, r5
 8002b32:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002b34:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002b38:	001d      	movs	r5, r3
 8002b3a:	260f      	movs	r6, #15
 8002b3c:	403d      	ands	r5, r7
 8002b3e:	00ad      	lsls	r5, r5, #2
 8002b40:	40ae      	lsls	r6, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8002b44:	4a26      	ldr	r2, [pc, #152]	; (8002be0 <HAL_GPIO_Init+0x16c>)
 8002b46:	089c      	lsrs	r4, r3, #2
 8002b48:	00a4      	lsls	r4, r4, #2
 8002b4a:	18a4      	adds	r4, r4, r2
 8002b4c:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002b4e:	43b2      	bics	r2, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002b50:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002b52:	9203      	str	r2, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002b54:	05f6      	lsls	r6, r6, #23
 8002b56:	2200      	movs	r2, #0
 8002b58:	42b0      	cmp	r0, r6
 8002b5a:	d010      	beq.n	8002b7e <HAL_GPIO_Init+0x10a>
 8002b5c:	4e21      	ldr	r6, [pc, #132]	; (8002be4 <HAL_GPIO_Init+0x170>)
 8002b5e:	4662      	mov	r2, ip
 8002b60:	42b0      	cmp	r0, r6
 8002b62:	d00c      	beq.n	8002b7e <HAL_GPIO_Init+0x10a>
 8002b64:	4e20      	ldr	r6, [pc, #128]	; (8002be8 <HAL_GPIO_Init+0x174>)
 8002b66:	1892      	adds	r2, r2, r2
 8002b68:	42b0      	cmp	r0, r6
 8002b6a:	d008      	beq.n	8002b7e <HAL_GPIO_Init+0x10a>
 8002b6c:	4e1f      	ldr	r6, [pc, #124]	; (8002bec <HAL_GPIO_Init+0x178>)
 8002b6e:	003a      	movs	r2, r7
 8002b70:	42b0      	cmp	r0, r6
 8002b72:	d004      	beq.n	8002b7e <HAL_GPIO_Init+0x10a>
 8002b74:	4e1e      	ldr	r6, [pc, #120]	; (8002bf0 <HAL_GPIO_Init+0x17c>)
 8002b76:	4462      	add	r2, ip
 8002b78:	42b0      	cmp	r0, r6
 8002b7a:	d000      	beq.n	8002b7e <HAL_GPIO_Init+0x10a>
 8002b7c:	9a05      	ldr	r2, [sp, #20]
 8002b7e:	40aa      	lsls	r2, r5
 8002b80:	9d03      	ldr	r5, [sp, #12]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b82:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002b84:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b86:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8002b88:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <HAL_GPIO_Init+0x180>)
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8002b8c:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8002b8e:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8002b92:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b94:	03ff      	lsls	r7, r7, #15
 8002b96:	d401      	bmi.n	8002b9c <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8002b98:	0035      	movs	r5, r6
 8002b9a:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8002b9c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002b9e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8002ba0:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba2:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8002ba4:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba6:	03bf      	lsls	r7, r7, #14
 8002ba8:	d401      	bmi.n	8002bae <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8002baa:	0035      	movs	r5, r6
 8002bac:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8002bae:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002bb0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002bb2:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bb4:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8002bb6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bb8:	02ff      	lsls	r7, r7, #11
 8002bba:	d401      	bmi.n	8002bc0 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8002bbc:	0035      	movs	r5, r6
 8002bbe:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8002bc0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002bc2:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8002bc4:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc6:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8002bc8:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bca:	02bf      	lsls	r7, r7, #10
 8002bcc:	d401      	bmi.n	8002bd2 <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 8002bce:	4025      	ands	r5, r4
 8002bd0:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002bd2:	60d6      	str	r6, [r2, #12]
    position++;
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	e756      	b.n	8002a86 <HAL_GPIO_Init+0x12>
 8002bd8:	afffe400 	.word	0xafffe400
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40010000 	.word	0x40010000
 8002be4:	50000400 	.word	0x50000400
 8002be8:	50000800 	.word	0x50000800
 8002bec:	50000c00 	.word	0x50000c00
 8002bf0:	50001000 	.word	0x50001000
 8002bf4:	40010400 	.word	0x40010400

08002bf8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf8:	6900      	ldr	r0, [r0, #16]
 8002bfa:	4008      	ands	r0, r1
 8002bfc:	1e41      	subs	r1, r0, #1
 8002bfe:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002c00:	b2c0      	uxtb	r0, r0
}
 8002c02:	4770      	bx	lr

08002c04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c04:	2a00      	cmp	r2, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c08:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c0a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8002c0c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002c0e:	e7fc      	b.n	8002c0a <HAL_GPIO_WritePin+0x6>

08002c10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c12:	0004      	movs	r4, r0
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
  {
    return HAL_ERROR;
 8002c14:	2001      	movs	r0, #1
  if (hi2s == NULL)
 8002c16:	2c00      	cmp	r4, #0
 8002c18:	d046      	beq.n	8002ca8 <HAL_I2S_Init+0x98>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002c1a:	0026      	movs	r6, r4
 8002c1c:	3635      	adds	r6, #53	; 0x35
 8002c1e:	7833      	ldrb	r3, [r6, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <HAL_I2S_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002c26:	0023      	movs	r3, r4
 8002c28:	3334      	adds	r3, #52	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002c2a:	0020      	movs	r0, r4
    hi2s->Lock = HAL_UNLOCKED;
 8002c2c:	701a      	strb	r2, [r3, #0]
    HAL_I2S_MspInit(hi2s);
 8002c2e:	f7ff fb95 	bl	800235c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002c32:	2002      	movs	r0, #2
 8002c34:	7030      	strb	r0, [r6, #0]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	4931      	ldr	r1, [pc, #196]	; (8002d00 <HAL_I2S_Init+0xf0>)
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	9101      	str	r1, [sp, #4]
 8002c3e:	400a      	ands	r2, r1
 8002c40:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002c42:	6218      	str	r0, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002c44:	6963      	ldr	r3, [r4, #20]
 8002c46:	4283      	cmp	r3, r0
 8002c48:	d036      	beq.n	8002cb8 <HAL_I2S_Init+0xa8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002c4a:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002c4c:	2510      	movs	r5, #16
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d000      	beq.n	8002c54 <HAL_I2S_Init+0x44>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002c52:	196d      	adds	r5, r5, r5
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002c54:	68a3      	ldr	r3, [r4, #8]
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d800      	bhi.n	8002c5c <HAL_I2S_Init+0x4c>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002c5a:	006d      	lsls	r5, r5, #1
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8002c5c:	f000 f852 	bl	8002d04 <HAL_RCC_GetSysClockFreq>

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	6922      	ldr	r2, [r4, #16]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d11f      	bne.n	8002caa <HAL_I2S_Init+0x9a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002c6a:	68e3      	ldr	r3, [r4, #12]
 8002c6c:	6967      	ldr	r7, [r4, #20]
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c6e:	00a9      	lsls	r1, r5, #2
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d100      	bne.n	8002c76 <HAL_I2S_Init+0x66>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c74:	00e9      	lsls	r1, r5, #3
 8002c76:	f7fd fa47 	bl	8000108 <__udivsi3>
 8002c7a:	230a      	movs	r3, #10
 8002c7c:	0039      	movs	r1, r7
 8002c7e:	4358      	muls	r0, r3
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c80:	f7fd fa42 	bl	8000108 <__udivsi3>
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002c84:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002c86:	3005      	adds	r0, #5
    tmp = tmp / 10U;
 8002c88:	f7fd fa3e 	bl	8000108 <__udivsi3>
 8002c8c:	0002      	movs	r2, r0

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002c8e:	2001      	movs	r0, #1
 8002c90:	0011      	movs	r1, r2

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002c92:	4382      	bics	r2, r0
 8002c94:	0853      	lsrs	r3, r2, #1
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002c96:	4001      	ands	r1, r0
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c98:	1e9a      	subs	r2, r3, #2
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002c9a:	0209      	lsls	r1, r1, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c9c:	2afd      	cmp	r2, #253	; 0xfd
 8002c9e:	d90c      	bls.n	8002cba <HAL_I2S_Init+0xaa>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	63a3      	str	r3, [r4, #56]	; 0x38

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8002ca8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002caa:	0029      	movs	r1, r5
 8002cac:	f7fd fa2c 	bl	8000108 <__udivsi3>
 8002cb0:	230a      	movs	r3, #10
 8002cb2:	6961      	ldr	r1, [r4, #20]
 8002cb4:	4358      	muls	r0, r3
 8002cb6:	e7e3      	b.n	8002c80 <HAL_I2S_Init+0x70>
    i2sodd = 0U;
 8002cb8:	2100      	movs	r1, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	6921      	ldr	r1, [r4, #16]
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002cc4:	68a1      	ldr	r1, [r4, #8]
 8002cc6:	69d0      	ldr	r0, [r2, #28]
 8002cc8:	6863      	ldr	r3, [r4, #4]
 8002cca:	9d01      	ldr	r5, [sp, #4]
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	4028      	ands	r0, r5
 8002cd0:	4303      	orrs	r3, r0
 8002cd2:	68e0      	ldr	r0, [r4, #12]
 8002cd4:	4303      	orrs	r3, r0
 8002cd6:	69a0      	ldr	r0, [r4, #24]
 8002cd8:	4303      	orrs	r3, r0
 8002cda:	2080      	movs	r0, #128	; 0x80
 8002cdc:	0100      	lsls	r0, r0, #4
 8002cde:	4303      	orrs	r3, r0
 8002ce0:	61d3      	str	r3, [r2, #28]
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	4399      	bics	r1, r3
 8002ce6:	2930      	cmp	r1, #48	; 0x30
 8002ce8:	d104      	bne.n	8002cf4 <HAL_I2S_Init+0xe4>
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	69d1      	ldr	r1, [r2, #28]
 8002cee:	015b      	lsls	r3, r3, #5
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002cf4:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8002cf6:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002cf8:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8002cfa:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 8002cfc:	e7d4      	b.n	8002ca8 <HAL_I2S_Init+0x98>
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	fffff040 	.word	0xfffff040

08002d04 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d04:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x78>)
{
 8002d08:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002d0a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002d0c:	4022      	ands	r2, r4
 8002d0e:	2a08      	cmp	r2, #8
 8002d10:	d031      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x72>
 8002d12:	2a0c      	cmp	r2, #12
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x26>
 8002d16:	2a04      	cmp	r2, #4
 8002d18:	d125      	bne.n	8002d66 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d1a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d1e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002d20:	17c0      	asrs	r0, r0, #31
 8002d22:	4018      	ands	r0, r3
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x80>)
 8002d26:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d2a:	02a2      	lsls	r2, r4, #10
 8002d2c:	4816      	ldr	r0, [pc, #88]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x84>)
 8002d2e:	0f12      	lsrs	r2, r2, #28
 8002d30:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d32:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d34:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d36:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d38:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d3c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d3e:	4211      	tst	r1, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d42:	4a12      	ldr	r2, [pc, #72]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x88>)
 8002d44:	2300      	movs	r3, #0
 8002d46:	2100      	movs	r1, #0
 8002d48:	f7fd fa8a 	bl	8000260 <__aeabi_lmul>
 8002d4c:	0022      	movs	r2, r4
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f7fd fa66 	bl	8000220 <__aeabi_uldivmod>
 8002d54:	e7e8      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2310      	movs	r3, #16
 8002d5a:	421a      	tst	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002d5e:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002d60:	e7f0      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x80>)
 8002d64:	e7ee      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d66:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d68:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d6a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d70:	3301      	adds	r3, #1
 8002d72:	4098      	lsls	r0, r3
  return sysclockfreq;
 8002d74:	e7d8      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x88>)
 8002d78:	e7d6      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x24>
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	ff48e500 	.word	0xff48e500
 8002d84:	00f42400 	.word	0x00f42400
 8002d88:	08004ff5 	.word	0x08004ff5
 8002d8c:	007a1200 	.word	0x007a1200
 8002d90:	003d0900 	.word	0x003d0900

08002d94 <HAL_RCC_OscConfig>:
{
 8002d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d96:	0005      	movs	r5, r0
 8002d98:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d059      	beq.n	8002e52 <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9e:	230c      	movs	r3, #12
 8002da0:	4cb8      	ldr	r4, [pc, #736]	; (8003084 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da2:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da6:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	025b      	lsls	r3, r3, #9
 8002dae:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db0:	07d2      	lsls	r2, r2, #31
 8002db2:	d442      	bmi.n	8002e3a <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	079b      	lsls	r3, r3, #30
 8002db8:	d500      	bpl.n	8002dbc <HAL_RCC_OscConfig+0x28>
 8002dba:	e08b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	06db      	lsls	r3, r3, #27
 8002dc0:	d529      	bpl.n	8002e16 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc2:	2e00      	cmp	r6, #0
 8002dc4:	d000      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x34>
 8002dc6:	e0e4      	b.n	8002f92 <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	059b      	lsls	r3, r3, #22
 8002dcc:	d502      	bpl.n	8002dd4 <HAL_RCC_OscConfig+0x40>
 8002dce:	69eb      	ldr	r3, [r5, #28]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03e      	beq.n	8002e52 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd4:	6862      	ldr	r2, [r4, #4]
 8002dd6:	49ac      	ldr	r1, [pc, #688]	; (8003088 <HAL_RCC_OscConfig+0x2f4>)
 8002dd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002dda:	400a      	ands	r2, r1
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de0:	6861      	ldr	r1, [r4, #4]
 8002de2:	6a2a      	ldr	r2, [r5, #32]
 8002de4:	0209      	lsls	r1, r1, #8
 8002de6:	0a09      	lsrs	r1, r1, #8
 8002de8:	0612      	lsls	r2, r2, #24
 8002dea:	430a      	orrs	r2, r1
 8002dec:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	0b5b      	lsrs	r3, r3, #13
 8002df2:	3301      	adds	r3, #1
 8002df4:	0212      	lsls	r2, r2, #8
 8002df6:	409a      	lsls	r2, r3
 8002df8:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002dfa:	68e1      	ldr	r1, [r4, #12]
 8002dfc:	060a      	lsls	r2, r1, #24
 8002dfe:	49a3      	ldr	r1, [pc, #652]	; (800308c <HAL_RCC_OscConfig+0x2f8>)
 8002e00:	0f12      	lsrs	r2, r2, #28
 8002e02:	5c8a      	ldrb	r2, [r1, r2]
 8002e04:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e06:	4aa2      	ldr	r2, [pc, #648]	; (8003090 <HAL_RCC_OscConfig+0x2fc>)
 8002e08:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8002e0a:	4ba2      	ldr	r3, [pc, #648]	; (8003094 <HAL_RCC_OscConfig+0x300>)
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	f7ff fcb5 	bl	800277c <HAL_InitTick>
        if(status != HAL_OK)
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d134      	bne.n	8002e80 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e16:	682b      	ldr	r3, [r5, #0]
 8002e18:	071b      	lsls	r3, r3, #28
 8002e1a:	d500      	bpl.n	8002e1e <HAL_RCC_OscConfig+0x8a>
 8002e1c:	e0f0      	b.n	8003000 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1e:	682b      	ldr	r3, [r5, #0]
 8002e20:	075b      	lsls	r3, r3, #29
 8002e22:	d500      	bpl.n	8002e26 <HAL_RCC_OscConfig+0x92>
 8002e24:	e112      	b.n	800304c <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e26:	682b      	ldr	r3, [r5, #0]
 8002e28:	069b      	lsls	r3, r3, #26
 8002e2a:	d500      	bpl.n	8002e2e <HAL_RCC_OscConfig+0x9a>
 8002e2c:	e199      	b.n	8003162 <HAL_RCC_OscConfig+0x3ce>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d000      	beq.n	8002e36 <HAL_RCC_OscConfig+0xa2>
 8002e34:	e1c8      	b.n	80031c8 <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 8002e36:	2000      	movs	r0, #0
 8002e38:	e022      	b.n	8002e80 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e3a:	2e08      	cmp	r6, #8
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e3e:	2e0c      	cmp	r6, #12
 8002e40:	d109      	bne.n	8002e56 <HAL_RCC_OscConfig+0xc2>
 8002e42:	2f00      	cmp	r7, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	039b      	lsls	r3, r3, #14
 8002e4a:	d5b3      	bpl.n	8002db4 <HAL_RCC_OscConfig+0x20>
 8002e4c:	686b      	ldr	r3, [r5, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1b0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 8002e52:	2001      	movs	r0, #1
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e56:	686a      	ldr	r2, [r5, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d113      	bne.n	8002e84 <HAL_RCC_OscConfig+0xf0>
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e62:	f7ff fccf 	bl	8002804 <HAL_GetTick>
 8002e66:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	0292      	lsls	r2, r2, #10
 8002e6e:	4213      	tst	r3, r2
 8002e70:	d1a0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e72:	f7ff fcc7 	bl	8002804 <HAL_GetTick>
 8002e76:	9b01      	ldr	r3, [sp, #4]
 8002e78:	1ac0      	subs	r0, r0, r3
 8002e7a:	2864      	cmp	r0, #100	; 0x64
 8002e7c:	d9f4      	bls.n	8002e68 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8002e7e:	2003      	movs	r0, #3
}
 8002e80:	b007      	add	sp, #28
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e84:	21a0      	movs	r1, #160	; 0xa0
 8002e86:	02c9      	lsls	r1, r1, #11
 8002e88:	428a      	cmp	r2, r1
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCC_OscConfig+0x104>
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	6821      	ldr	r1, [r4, #0]
 8002e90:	02d2      	lsls	r2, r2, #11
 8002e92:	430a      	orrs	r2, r1
 8002e94:	6022      	str	r2, [r4, #0]
 8002e96:	e7e1      	b.n	8002e5c <HAL_RCC_OscConfig+0xc8>
 8002e98:	6821      	ldr	r1, [r4, #0]
 8002e9a:	487f      	ldr	r0, [pc, #508]	; (8003098 <HAL_RCC_OscConfig+0x304>)
 8002e9c:	4001      	ands	r1, r0
 8002e9e:	6021      	str	r1, [r4, #0]
 8002ea0:	6821      	ldr	r1, [r4, #0]
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	9305      	str	r3, [sp, #20]
 8002ea6:	9b05      	ldr	r3, [sp, #20]
 8002ea8:	497c      	ldr	r1, [pc, #496]	; (800309c <HAL_RCC_OscConfig+0x308>)
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	400b      	ands	r3, r1
 8002eae:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb0:	2a00      	cmp	r2, #0
 8002eb2:	d1d6      	bne.n	8002e62 <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8002eb4:	f7ff fca6 	bl	8002804 <HAL_GetTick>
 8002eb8:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eba:	2280      	movs	r2, #128	; 0x80
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	0292      	lsls	r2, r2, #10
 8002ec0:	4213      	tst	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x132>
 8002ec4:	e776      	b.n	8002db4 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec6:	f7ff fc9d 	bl	8002804 <HAL_GetTick>
 8002eca:	9b01      	ldr	r3, [sp, #4]
 8002ecc:	1ac0      	subs	r0, r0, r3
 8002ece:	2864      	cmp	r0, #100	; 0x64
 8002ed0:	d9f3      	bls.n	8002eba <HAL_RCC_OscConfig+0x126>
 8002ed2:	e7d4      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002ed4:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8002ed6:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002ed8:	4213      	tst	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002edc:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002ede:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002ee0:	4311      	orrs	r1, r2
 8002ee2:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ee4:	2e04      	cmp	r6, #4
 8002ee6:	d003      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ee8:	2e0c      	cmp	r6, #12
 8002eea:	d124      	bne.n	8002f36 <HAL_RCC_OscConfig+0x1a2>
 8002eec:	2f00      	cmp	r7, #0
 8002eee:	d122      	bne.n	8002f36 <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002ef0:	6822      	ldr	r2, [r4, #0]
 8002ef2:	0752      	lsls	r2, r2, #29
 8002ef4:	d501      	bpl.n	8002efa <HAL_RCC_OscConfig+0x166>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0ab      	beq.n	8002e52 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	6861      	ldr	r1, [r4, #4]
 8002efc:	692a      	ldr	r2, [r5, #16]
 8002efe:	4868      	ldr	r0, [pc, #416]	; (80030a0 <HAL_RCC_OscConfig+0x30c>)
 8002f00:	0212      	lsls	r2, r2, #8
 8002f02:	4001      	ands	r1, r0
 8002f04:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f06:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f0a:	6822      	ldr	r2, [r4, #0]
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f12:	f7ff fef7 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002f16:	68e3      	ldr	r3, [r4, #12]
 8002f18:	4a5c      	ldr	r2, [pc, #368]	; (800308c <HAL_RCC_OscConfig+0x2f8>)
 8002f1a:	061b      	lsls	r3, r3, #24
 8002f1c:	0f1b      	lsrs	r3, r3, #28
 8002f1e:	5cd3      	ldrb	r3, [r2, r3]
 8002f20:	40d8      	lsrs	r0, r3
 8002f22:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <HAL_RCC_OscConfig+0x2fc>)
 8002f24:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8002f26:	4b5b      	ldr	r3, [pc, #364]	; (8003094 <HAL_RCC_OscConfig+0x300>)
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	f7ff fc27 	bl	800277c <HAL_InitTick>
      if(status != HAL_OK)
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d100      	bne.n	8002f34 <HAL_RCC_OscConfig+0x1a0>
 8002f32:	e743      	b.n	8002dbc <HAL_RCC_OscConfig+0x28>
 8002f34:	e7a4      	b.n	8002e80 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d019      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f3a:	2109      	movs	r1, #9
 8002f3c:	6822      	ldr	r2, [r4, #0]
 8002f3e:	438a      	bics	r2, r1
 8002f40:	4313      	orrs	r3, r2
 8002f42:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f44:	f7ff fc5e 	bl	8002804 <HAL_GetTick>
 8002f48:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	4213      	tst	r3, r2
 8002f50:	d007      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f52:	6862      	ldr	r2, [r4, #4]
 8002f54:	692b      	ldr	r3, [r5, #16]
 8002f56:	4952      	ldr	r1, [pc, #328]	; (80030a0 <HAL_RCC_OscConfig+0x30c>)
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	6063      	str	r3, [r4, #4]
 8002f60:	e72c      	b.n	8002dbc <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f62:	f7ff fc4f 	bl	8002804 <HAL_GetTick>
 8002f66:	1bc0      	subs	r0, r0, r7
 8002f68:	2802      	cmp	r0, #2
 8002f6a:	d9ee      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1b6>
 8002f6c:	e787      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 8002f6e:	2201      	movs	r2, #1
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	4393      	bics	r3, r2
 8002f74:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f76:	f7ff fc45 	bl	8002804 <HAL_GetTick>
 8002f7a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	4213      	tst	r3, r2
 8002f82:	d100      	bne.n	8002f86 <HAL_RCC_OscConfig+0x1f2>
 8002f84:	e71a      	b.n	8002dbc <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f86:	f7ff fc3d 	bl	8002804 <HAL_GetTick>
 8002f8a:	1bc0      	subs	r0, r0, r7
 8002f8c:	2802      	cmp	r0, #2
 8002f8e:	d9f5      	bls.n	8002f7c <HAL_RCC_OscConfig+0x1e8>
 8002f90:	e775      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f92:	69eb      	ldr	r3, [r5, #28]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	6822      	ldr	r2, [r4, #0]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fa2:	f7ff fc2f 	bl	8002804 <HAL_GetTick>
 8002fa6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fa8:	2280      	movs	r2, #128	; 0x80
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	0092      	lsls	r2, r2, #2
 8002fae:	4213      	tst	r3, r2
 8002fb0:	d00d      	beq.n	8002fce <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb2:	6863      	ldr	r3, [r4, #4]
 8002fb4:	4a34      	ldr	r2, [pc, #208]	; (8003088 <HAL_RCC_OscConfig+0x2f4>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fbe:	6862      	ldr	r2, [r4, #4]
 8002fc0:	6a2b      	ldr	r3, [r5, #32]
 8002fc2:	0212      	lsls	r2, r2, #8
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	0a12      	lsrs	r2, r2, #8
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	6063      	str	r3, [r4, #4]
 8002fcc:	e723      	b.n	8002e16 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fce:	f7ff fc19 	bl	8002804 <HAL_GetTick>
 8002fd2:	1bc0      	subs	r0, r0, r7
 8002fd4:	2802      	cmp	r0, #2
 8002fd6:	d9e7      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x214>
 8002fd8:	e751      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	4a31      	ldr	r2, [pc, #196]	; (80030a4 <HAL_RCC_OscConfig+0x310>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fe2:	f7ff fc0f 	bl	8002804 <HAL_GetTick>
 8002fe6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	0092      	lsls	r2, r2, #2
 8002fee:	4213      	tst	r3, r2
 8002ff0:	d100      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x260>
 8002ff2:	e710      	b.n	8002e16 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff4:	f7ff fc06 	bl	8002804 <HAL_GetTick>
 8002ff8:	1bc0      	subs	r0, r0, r7
 8002ffa:	2802      	cmp	r0, #2
 8002ffc:	d9f4      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x254>
 8002ffe:	e73e      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003000:	696a      	ldr	r2, [r5, #20]
 8003002:	2301      	movs	r3, #1
 8003004:	2a00      	cmp	r2, #0
 8003006:	d010      	beq.n	800302a <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8003008:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800300a:	4313      	orrs	r3, r2
 800300c:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800300e:	f7ff fbf9 	bl	8002804 <HAL_GetTick>
 8003012:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003014:	2202      	movs	r2, #2
 8003016:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003018:	4213      	tst	r3, r2
 800301a:	d000      	beq.n	800301e <HAL_RCC_OscConfig+0x28a>
 800301c:	e6ff      	b.n	8002e1e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301e:	f7ff fbf1 	bl	8002804 <HAL_GetTick>
 8003022:	1bc0      	subs	r0, r0, r7
 8003024:	2802      	cmp	r0, #2
 8003026:	d9f5      	bls.n	8003014 <HAL_RCC_OscConfig+0x280>
 8003028:	e729      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 800302a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800302c:	439a      	bics	r2, r3
 800302e:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003030:	f7ff fbe8 	bl	8002804 <HAL_GetTick>
 8003034:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003036:	2202      	movs	r2, #2
 8003038:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800303a:	4213      	tst	r3, r2
 800303c:	d100      	bne.n	8003040 <HAL_RCC_OscConfig+0x2ac>
 800303e:	e6ee      	b.n	8002e1e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003040:	f7ff fbe0 	bl	8002804 <HAL_GetTick>
 8003044:	1bc0      	subs	r0, r0, r7
 8003046:	2802      	cmp	r0, #2
 8003048:	d9f5      	bls.n	8003036 <HAL_RCC_OscConfig+0x2a2>
 800304a:	e718      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800304e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003050:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003052:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003054:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003056:	421a      	tst	r2, r3
 8003058:	d104      	bne.n	8003064 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800305c:	4313      	orrs	r3, r2
 800305e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003060:	2301      	movs	r3, #1
 8003062:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	2280      	movs	r2, #128	; 0x80
 8003066:	4f10      	ldr	r7, [pc, #64]	; (80030a8 <HAL_RCC_OscConfig+0x314>)
 8003068:	0052      	lsls	r2, r2, #1
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	4213      	tst	r3, r2
 800306e:	d01d      	beq.n	80030ac <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003070:	2280      	movs	r2, #128	; 0x80
 8003072:	68ab      	ldr	r3, [r5, #8]
 8003074:	0052      	lsls	r2, r2, #1
 8003076:	4293      	cmp	r3, r2
 8003078:	d12e      	bne.n	80030d8 <HAL_RCC_OscConfig+0x344>
 800307a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800307c:	4313      	orrs	r3, r2
 800307e:	6523      	str	r3, [r4, #80]	; 0x50
 8003080:	e04f      	b.n	8003122 <HAL_RCC_OscConfig+0x38e>
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	40021000 	.word	0x40021000
 8003088:	ffff1fff 	.word	0xffff1fff
 800308c:	08004fe5 	.word	0x08004fe5
 8003090:	20000090 	.word	0x20000090
 8003094:	20000098 	.word	0x20000098
 8003098:	fffeffff 	.word	0xfffeffff
 800309c:	fffbffff 	.word	0xfffbffff
 80030a0:	ffffe0ff 	.word	0xffffe0ff
 80030a4:	fffffeff 	.word	0xfffffeff
 80030a8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	0052      	lsls	r2, r2, #1
 80030b2:	4313      	orrs	r3, r2
 80030b4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80030b6:	f7ff fba5 	bl	8002804 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80030be:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	9303      	str	r3, [sp, #12]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	9a03      	ldr	r2, [sp, #12]
 80030c6:	4213      	tst	r3, r2
 80030c8:	d1d2      	bne.n	8003070 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7ff fb9b 	bl	8002804 <HAL_GetTick>
 80030ce:	9b02      	ldr	r3, [sp, #8]
 80030d0:	1ac0      	subs	r0, r0, r3
 80030d2:	2864      	cmp	r0, #100	; 0x64
 80030d4:	d9f5      	bls.n	80030c2 <HAL_RCC_OscConfig+0x32e>
 80030d6:	e6d2      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d116      	bne.n	800310a <HAL_RCC_OscConfig+0x376>
 80030dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80030de:	4a6b      	ldr	r2, [pc, #428]	; (800328c <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	6523      	str	r3, [r4, #80]	; 0x50
 80030e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80030e6:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x4fc>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80030ec:	f7ff fb8a 	bl	8002804 <HAL_GetTick>
 80030f0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	4213      	tst	r3, r2
 80030fa:	d01a      	beq.n	8003132 <HAL_RCC_OscConfig+0x39e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7ff fb82 	bl	8002804 <HAL_GetTick>
 8003100:	4b64      	ldr	r3, [pc, #400]	; (8003294 <HAL_RCC_OscConfig+0x500>)
 8003102:	1bc0      	subs	r0, r0, r7
 8003104:	4298      	cmp	r0, r3
 8003106:	d9f4      	bls.n	80030f2 <HAL_RCC_OscConfig+0x35e>
 8003108:	e6b9      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310a:	21a0      	movs	r1, #160	; 0xa0
 800310c:	00c9      	lsls	r1, r1, #3
 800310e:	428b      	cmp	r3, r1
 8003110:	d118      	bne.n	8003144 <HAL_RCC_OscConfig+0x3b0>
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	430b      	orrs	r3, r1
 800311a:	6523      	str	r3, [r4, #80]	; 0x50
 800311c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800311e:	431a      	orrs	r2, r3
 8003120:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003122:	f7ff fb6f 	bl	8002804 <HAL_GetTick>
 8003126:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800312c:	0092      	lsls	r2, r2, #2
 800312e:	4213      	tst	r3, r2
 8003130:	d010      	beq.n	8003154 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8003132:	9b01      	ldr	r3, [sp, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d000      	beq.n	800313a <HAL_RCC_OscConfig+0x3a6>
 8003138:	e675      	b.n	8002e26 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800313c:	4a56      	ldr	r2, [pc, #344]	; (8003298 <HAL_RCC_OscConfig+0x504>)
 800313e:	4013      	ands	r3, r2
 8003140:	63a3      	str	r3, [r4, #56]	; 0x38
 8003142:	e670      	b.n	8002e26 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003144:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003146:	4a51      	ldr	r2, [pc, #324]	; (800328c <HAL_RCC_OscConfig+0x4f8>)
 8003148:	4013      	ands	r3, r2
 800314a:	6523      	str	r3, [r4, #80]	; 0x50
 800314c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800314e:	4a50      	ldr	r2, [pc, #320]	; (8003290 <HAL_RCC_OscConfig+0x4fc>)
 8003150:	4013      	ands	r3, r2
 8003152:	e794      	b.n	800307e <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7ff fb56 	bl	8002804 <HAL_GetTick>
 8003158:	4b4e      	ldr	r3, [pc, #312]	; (8003294 <HAL_RCC_OscConfig+0x500>)
 800315a:	1bc0      	subs	r0, r0, r7
 800315c:	4298      	cmp	r0, r3
 800315e:	d9e3      	bls.n	8003128 <HAL_RCC_OscConfig+0x394>
 8003160:	e68d      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003162:	69a9      	ldr	r1, [r5, #24]
 8003164:	2301      	movs	r3, #1
 8003166:	4a4d      	ldr	r2, [pc, #308]	; (800329c <HAL_RCC_OscConfig+0x508>)
 8003168:	2900      	cmp	r1, #0
 800316a:	d018      	beq.n	800319e <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_HSI48_ENABLE();
 800316c:	68a1      	ldr	r1, [r4, #8]
 800316e:	4319      	orrs	r1, r3
 8003170:	60a1      	str	r1, [r4, #8]
 8003172:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003174:	430b      	orrs	r3, r1
 8003176:	6363      	str	r3, [r4, #52]	; 0x34
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	6a11      	ldr	r1, [r2, #32]
 800317c:	019b      	lsls	r3, r3, #6
 800317e:	430b      	orrs	r3, r1
 8003180:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003182:	f7ff fb3f 	bl	8002804 <HAL_GetTick>
 8003186:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003188:	2202      	movs	r2, #2
 800318a:	68a3      	ldr	r3, [r4, #8]
 800318c:	4213      	tst	r3, r2
 800318e:	d000      	beq.n	8003192 <HAL_RCC_OscConfig+0x3fe>
 8003190:	e64d      	b.n	8002e2e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003192:	f7ff fb37 	bl	8002804 <HAL_GetTick>
 8003196:	1bc0      	subs	r0, r0, r7
 8003198:	2802      	cmp	r0, #2
 800319a:	d9f5      	bls.n	8003188 <HAL_RCC_OscConfig+0x3f4>
 800319c:	e66f      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 800319e:	68a1      	ldr	r1, [r4, #8]
 80031a0:	4399      	bics	r1, r3
 80031a2:	60a1      	str	r1, [r4, #8]
 80031a4:	6a13      	ldr	r3, [r2, #32]
 80031a6:	493e      	ldr	r1, [pc, #248]	; (80032a0 <HAL_RCC_OscConfig+0x50c>)
 80031a8:	400b      	ands	r3, r1
 80031aa:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80031ac:	f7ff fb2a 	bl	8002804 <HAL_GetTick>
 80031b0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031b2:	2202      	movs	r2, #2
 80031b4:	68a3      	ldr	r3, [r4, #8]
 80031b6:	4213      	tst	r3, r2
 80031b8:	d100      	bne.n	80031bc <HAL_RCC_OscConfig+0x428>
 80031ba:	e638      	b.n	8002e2e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031bc:	f7ff fb22 	bl	8002804 <HAL_GetTick>
 80031c0:	1bc0      	subs	r0, r0, r7
 80031c2:	2802      	cmp	r0, #2
 80031c4:	d9f5      	bls.n	80031b2 <HAL_RCC_OscConfig+0x41e>
 80031c6:	e65a      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c8:	2e0c      	cmp	r6, #12
 80031ca:	d043      	beq.n	8003254 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031cc:	4a35      	ldr	r2, [pc, #212]	; (80032a4 <HAL_RCC_OscConfig+0x510>)
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d12e      	bne.n	8003230 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_DISABLE();
 80031d2:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031d4:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4013      	ands	r3, r2
 80031d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80031da:	f7ff fb13 	bl	8002804 <HAL_GetTick>
 80031de:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031e0:	04bf      	lsls	r7, r7, #18
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	423b      	tst	r3, r7
 80031e6:	d11d      	bne.n	8003224 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80031ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80031ec:	68e2      	ldr	r2, [r4, #12]
 80031ee:	430b      	orrs	r3, r1
 80031f0:	492d      	ldr	r1, [pc, #180]	; (80032a8 <HAL_RCC_OscConfig+0x514>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80031f2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f4:	400a      	ands	r2, r1
 80031f6:	4313      	orrs	r3, r2
 80031f8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80031fa:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	045b      	lsls	r3, r3, #17
 8003206:	4313      	orrs	r3, r2
 8003208:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800320a:	f7ff fafb 	bl	8002804 <HAL_GetTick>
 800320e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	4233      	tst	r3, r6
 8003214:	d000      	beq.n	8003218 <HAL_RCC_OscConfig+0x484>
 8003216:	e60e      	b.n	8002e36 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003218:	f7ff faf4 	bl	8002804 <HAL_GetTick>
 800321c:	1b40      	subs	r0, r0, r5
 800321e:	2802      	cmp	r0, #2
 8003220:	d9f6      	bls.n	8003210 <HAL_RCC_OscConfig+0x47c>
 8003222:	e62c      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7ff faee 	bl	8002804 <HAL_GetTick>
 8003228:	1b80      	subs	r0, r0, r6
 800322a:	2802      	cmp	r0, #2
 800322c:	d9d9      	bls.n	80031e2 <HAL_RCC_OscConfig+0x44e>
 800322e:	e626      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8003230:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003232:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003234:	4013      	ands	r3, r2
 8003236:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003238:	f7ff fae4 	bl	8002804 <HAL_GetTick>
 800323c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800323e:	04b6      	lsls	r6, r6, #18
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	4233      	tst	r3, r6
 8003244:	d100      	bne.n	8003248 <HAL_RCC_OscConfig+0x4b4>
 8003246:	e5f6      	b.n	8002e36 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7ff fadc 	bl	8002804 <HAL_GetTick>
 800324c:	1b40      	subs	r0, r0, r5
 800324e:	2802      	cmp	r0, #2
 8003250:	d9f6      	bls.n	8003240 <HAL_RCC_OscConfig+0x4ac>
 8003252:	e614      	b.n	8002e7e <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 8003254:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003256:	2b01      	cmp	r3, #1
 8003258:	d100      	bne.n	800325c <HAL_RCC_OscConfig+0x4c8>
 800325a:	e611      	b.n	8002e80 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325c:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800325e:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003260:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003262:	0252      	lsls	r2, r2, #9
 8003264:	401a      	ands	r2, r3
 8003266:	428a      	cmp	r2, r1
 8003268:	d000      	beq.n	800326c <HAL_RCC_OscConfig+0x4d8>
 800326a:	e5f2      	b.n	8002e52 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800326c:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003270:	0392      	lsls	r2, r2, #14
 8003272:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003274:	428a      	cmp	r2, r1
 8003276:	d000      	beq.n	800327a <HAL_RCC_OscConfig+0x4e6>
 8003278:	e5eb      	b.n	8002e52 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800327a:	22c0      	movs	r2, #192	; 0xc0
 800327c:	0412      	lsls	r2, r2, #16
 800327e:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003280:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003282:	4293      	cmp	r3, r2
 8003284:	d100      	bne.n	8003288 <HAL_RCC_OscConfig+0x4f4>
 8003286:	e5d6      	b.n	8002e36 <HAL_RCC_OscConfig+0xa2>
 8003288:	e5e3      	b.n	8002e52 <HAL_RCC_OscConfig+0xbe>
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	fffffeff 	.word	0xfffffeff
 8003290:	fffffbff 	.word	0xfffffbff
 8003294:	00001388 	.word	0x00001388
 8003298:	efffffff 	.word	0xefffffff
 800329c:	40010000 	.word	0x40010000
 80032a0:	ffffdfff 	.word	0xffffdfff
 80032a4:	feffffff 	.word	0xfeffffff
 80032a8:	ff02ffff 	.word	0xff02ffff

080032ac <HAL_RCC_ClockConfig>:
{
 80032ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032ae:	1e04      	subs	r4, r0, #0
 80032b0:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80032b4:	2001      	movs	r0, #1
}
 80032b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b8:	2601      	movs	r6, #1
 80032ba:	4d5b      	ldr	r5, [pc, #364]	; (8003428 <HAL_RCC_ClockConfig+0x17c>)
 80032bc:	9a01      	ldr	r2, [sp, #4]
 80032be:	682b      	ldr	r3, [r5, #0]
 80032c0:	4033      	ands	r3, r6
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d331      	bcc.n	800332a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c6:	6822      	ldr	r2, [r4, #0]
 80032c8:	0793      	lsls	r3, r2, #30
 80032ca:	d443      	bmi.n	8003354 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032cc:	07d3      	lsls	r3, r2, #31
 80032ce:	d449      	bmi.n	8003364 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	2601      	movs	r6, #1
 80032d2:	682b      	ldr	r3, [r5, #0]
 80032d4:	9a01      	ldr	r2, [sp, #4]
 80032d6:	4033      	ands	r3, r6
 80032d8:	4293      	cmp	r3, r2
 80032da:	d909      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032dc:	682b      	ldr	r3, [r5, #0]
 80032de:	43b3      	bics	r3, r6
 80032e0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80032e2:	f7ff fa8f 	bl	8002804 <HAL_GetTick>
 80032e6:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	4233      	tst	r3, r6
 80032ec:	d000      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x44>
 80032ee:	e08c      	b.n	800340a <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	6822      	ldr	r2, [r4, #0]
 80032f2:	4d4e      	ldr	r5, [pc, #312]	; (800342c <HAL_RCC_ClockConfig+0x180>)
 80032f4:	0753      	lsls	r3, r2, #29
 80032f6:	d500      	bpl.n	80032fa <HAL_RCC_ClockConfig+0x4e>
 80032f8:	e08f      	b.n	800341a <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	0713      	lsls	r3, r2, #28
 80032fc:	d506      	bpl.n	800330c <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032fe:	68ea      	ldr	r2, [r5, #12]
 8003300:	6923      	ldr	r3, [r4, #16]
 8003302:	494b      	ldr	r1, [pc, #300]	; (8003430 <HAL_RCC_ClockConfig+0x184>)
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	400a      	ands	r2, r1
 8003308:	4313      	orrs	r3, r2
 800330a:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800330c:	f7ff fcfa 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8003310:	68eb      	ldr	r3, [r5, #12]
 8003312:	4a48      	ldr	r2, [pc, #288]	; (8003434 <HAL_RCC_ClockConfig+0x188>)
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	0f1b      	lsrs	r3, r3, #28
 8003318:	5cd3      	ldrb	r3, [r2, r3]
 800331a:	40d8      	lsrs	r0, r3
 800331c:	4b46      	ldr	r3, [pc, #280]	; (8003438 <HAL_RCC_ClockConfig+0x18c>)
 800331e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003320:	4b46      	ldr	r3, [pc, #280]	; (800343c <HAL_RCC_ClockConfig+0x190>)
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	f7ff fa2a 	bl	800277c <HAL_InitTick>
  if(status != HAL_OK)
 8003328:	e7c5      	b.n	80032b6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	682b      	ldr	r3, [r5, #0]
 800332c:	9a01      	ldr	r2, [sp, #4]
 800332e:	43b3      	bics	r3, r6
 8003330:	4313      	orrs	r3, r2
 8003332:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003334:	f7ff fa66 	bl	8002804 <HAL_GetTick>
 8003338:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	682b      	ldr	r3, [r5, #0]
 800333c:	9a01      	ldr	r2, [sp, #4]
 800333e:	4033      	ands	r3, r6
 8003340:	4293      	cmp	r3, r2
 8003342:	d0c0      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7ff fa5e 	bl	8002804 <HAL_GetTick>
 8003348:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <HAL_RCC_ClockConfig+0x194>)
 800334a:	1bc0      	subs	r0, r0, r7
 800334c:	4298      	cmp	r0, r3
 800334e:	d9f4      	bls.n	800333a <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8003350:	2003      	movs	r0, #3
 8003352:	e7b0      	b.n	80032b6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	20f0      	movs	r0, #240	; 0xf0
 8003356:	4935      	ldr	r1, [pc, #212]	; (800342c <HAL_RCC_ClockConfig+0x180>)
 8003358:	68cb      	ldr	r3, [r1, #12]
 800335a:	4383      	bics	r3, r0
 800335c:	68a0      	ldr	r0, [r4, #8]
 800335e:	4303      	orrs	r3, r0
 8003360:	60cb      	str	r3, [r1, #12]
 8003362:	e7b3      	b.n	80032cc <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003364:	4e31      	ldr	r6, [pc, #196]	; (800342c <HAL_RCC_ClockConfig+0x180>)
 8003366:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003368:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	2a02      	cmp	r2, #2
 800336c:	d118      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800336e:	039b      	lsls	r3, r3, #14
 8003370:	d5a0      	bpl.n	80032b4 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003372:	2103      	movs	r1, #3
 8003374:	68f3      	ldr	r3, [r6, #12]
 8003376:	438b      	bics	r3, r1
 8003378:	4313      	orrs	r3, r2
 800337a:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800337c:	f7ff fa42 	bl	8002804 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003380:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8003382:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003384:	2b02      	cmp	r3, #2
 8003386:	d118      	bne.n	80033ba <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003388:	220c      	movs	r2, #12
 800338a:	68f3      	ldr	r3, [r6, #12]
 800338c:	4013      	ands	r3, r2
 800338e:	2b08      	cmp	r3, #8
 8003390:	d09e      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003392:	f7ff fa37 	bl	8002804 <HAL_GetTick>
 8003396:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <HAL_RCC_ClockConfig+0x194>)
 8003398:	1bc0      	subs	r0, r0, r7
 800339a:	4298      	cmp	r0, r3
 800339c:	d9f4      	bls.n	8003388 <HAL_RCC_ClockConfig+0xdc>
 800339e:	e7d7      	b.n	8003350 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a0:	2a03      	cmp	r2, #3
 80033a2:	d102      	bne.n	80033aa <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033a4:	019b      	lsls	r3, r3, #6
 80033a6:	d4e4      	bmi.n	8003372 <HAL_RCC_ClockConfig+0xc6>
 80033a8:	e784      	b.n	80032b4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033aa:	2a01      	cmp	r2, #1
 80033ac:	d102      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ae:	075b      	lsls	r3, r3, #29
 80033b0:	d4df      	bmi.n	8003372 <HAL_RCC_ClockConfig+0xc6>
 80033b2:	e77f      	b.n	80032b4 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033b4:	059b      	lsls	r3, r3, #22
 80033b6:	d4dc      	bmi.n	8003372 <HAL_RCC_ClockConfig+0xc6>
 80033b8:	e77c      	b.n	80032b4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033be:	220c      	movs	r2, #12
 80033c0:	68f3      	ldr	r3, [r6, #12]
 80033c2:	4013      	ands	r3, r2
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d083      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7ff fa1c 	bl	8002804 <HAL_GetTick>
 80033cc:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <HAL_RCC_ClockConfig+0x194>)
 80033ce:	1bc0      	subs	r0, r0, r7
 80033d0:	4298      	cmp	r0, r3
 80033d2:	d9f4      	bls.n	80033be <HAL_RCC_ClockConfig+0x112>
 80033d4:	e7bc      	b.n	8003350 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d011      	beq.n	80033fe <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033da:	220c      	movs	r2, #12
 80033dc:	68f3      	ldr	r3, [r6, #12]
 80033de:	4213      	tst	r3, r2
 80033e0:	d100      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x138>
 80033e2:	e775      	b.n	80032d0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7ff fa0e 	bl	8002804 <HAL_GetTick>
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_RCC_ClockConfig+0x194>)
 80033ea:	1bc0      	subs	r0, r0, r7
 80033ec:	4298      	cmp	r0, r3
 80033ee:	d9f4      	bls.n	80033da <HAL_RCC_ClockConfig+0x12e>
 80033f0:	e7ae      	b.n	8003350 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f2:	f7ff fa07 	bl	8002804 <HAL_GetTick>
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_RCC_ClockConfig+0x194>)
 80033f8:	1bc0      	subs	r0, r0, r7
 80033fa:	4298      	cmp	r0, r3
 80033fc:	d8a8      	bhi.n	8003350 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fe:	220c      	movs	r2, #12
 8003400:	68f3      	ldr	r3, [r6, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b04      	cmp	r3, #4
 8003406:	d1f4      	bne.n	80033f2 <HAL_RCC_ClockConfig+0x146>
 8003408:	e762      	b.n	80032d0 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340a:	f7ff f9fb 	bl	8002804 <HAL_GetTick>
 800340e:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_RCC_ClockConfig+0x194>)
 8003410:	1bc0      	subs	r0, r0, r7
 8003412:	4298      	cmp	r0, r3
 8003414:	d800      	bhi.n	8003418 <HAL_RCC_ClockConfig+0x16c>
 8003416:	e767      	b.n	80032e8 <HAL_RCC_ClockConfig+0x3c>
 8003418:	e79a      	b.n	8003350 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341a:	68eb      	ldr	r3, [r5, #12]
 800341c:	4909      	ldr	r1, [pc, #36]	; (8003444 <HAL_RCC_ClockConfig+0x198>)
 800341e:	400b      	ands	r3, r1
 8003420:	68e1      	ldr	r1, [r4, #12]
 8003422:	430b      	orrs	r3, r1
 8003424:	60eb      	str	r3, [r5, #12]
 8003426:	e768      	b.n	80032fa <HAL_RCC_ClockConfig+0x4e>
 8003428:	40022000 	.word	0x40022000
 800342c:	40021000 	.word	0x40021000
 8003430:	ffffc7ff 	.word	0xffffc7ff
 8003434:	08004fe5 	.word	0x08004fe5
 8003438:	20000090 	.word	0x20000090
 800343c:	20000098 	.word	0x20000098
 8003440:	00001388 	.word	0x00001388
 8003444:	fffff8ff 	.word	0xfffff8ff

08003448 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344a:	001d      	movs	r5, r3
 800344c:	0017      	movs	r7, r2
 800344e:	b085      	sub	sp, #20
 8003450:	000e      	movs	r6, r1
 8003452:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003454:	f7ff f9d6 	bl	8002804 <HAL_GetTick>
 8003458:	19ed      	adds	r5, r5, r7
 800345a:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800345c:	f7ff f9d2 	bl	8002804 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003460:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8003462:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	015b      	lsls	r3, r3, #5
 8003468:	0d1b      	lsrs	r3, r3, #20
 800346a:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800346c:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800346e:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003470:	6893      	ldr	r3, [r2, #8]
 8003472:	4033      	ands	r3, r6
 8003474:	429e      	cmp	r6, r3
 8003476:	d001      	beq.n	800347c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8003478:	2000      	movs	r0, #0
 800347a:	e032      	b.n	80034e2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 800347c:	1c7b      	adds	r3, r7, #1
 800347e:	d0f7      	beq.n	8003470 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003480:	f7ff f9c0 	bl	8002804 <HAL_GetTick>
 8003484:	9b01      	ldr	r3, [sp, #4]
 8003486:	1ac0      	subs	r0, r0, r3
 8003488:	42a8      	cmp	r0, r5
 800348a:	d32c      	bcc.n	80034e6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800348c:	21e0      	movs	r1, #224	; 0xe0
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	438a      	bics	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003496:	2282      	movs	r2, #130	; 0x82
 8003498:	6861      	ldr	r1, [r4, #4]
 800349a:	0052      	lsls	r2, r2, #1
 800349c:	4291      	cmp	r1, r2
 800349e:	d10c      	bne.n	80034ba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	68a2      	ldr	r2, [r4, #8]
 80034a4:	0209      	lsls	r1, r1, #8
 80034a6:	428a      	cmp	r2, r1
 80034a8:	d003      	beq.n	80034b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	00c9      	lsls	r1, r1, #3
 80034ae:	428a      	cmp	r2, r1
 80034b0:	d103      	bne.n	80034ba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 80034b2:	2140      	movs	r1, #64	; 0x40
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	438a      	bics	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80034be:	0189      	lsls	r1, r1, #6
 80034c0:	428a      	cmp	r2, r1
 80034c2:	d106      	bne.n	80034d2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	480d      	ldr	r0, [pc, #52]	; (80034fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 80034c8:	4001      	ands	r1, r0
 80034ca:	6019      	str	r1, [r3, #0]
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80034d2:	0023      	movs	r3, r4
 80034d4:	2201      	movs	r2, #1
 80034d6:	3351      	adds	r3, #81	; 0x51
 80034d8:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80034da:	2300      	movs	r3, #0
 80034dc:	2003      	movs	r0, #3
 80034de:	3450      	adds	r4, #80	; 0x50
 80034e0:	7023      	strb	r3, [r4, #0]
}
 80034e2:	b005      	add	sp, #20
 80034e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 80034e6:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 80034e8:	1e5a      	subs	r2, r3, #1
 80034ea:	4193      	sbcs	r3, r2
 80034ec:	425b      	negs	r3, r3
 80034ee:	401d      	ands	r5, r3
      count--;
 80034f0:	9b03      	ldr	r3, [sp, #12]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	e7ba      	b.n	800346c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	20000090 	.word	0x20000090
 80034fc:	ffffdfff 	.word	0xffffdfff

08003500 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003504:	2282      	movs	r2, #130	; 0x82
{
 8003506:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003508:	6840      	ldr	r0, [r0, #4]
 800350a:	0052      	lsls	r2, r2, #1
 800350c:	4290      	cmp	r0, r2
 800350e:	d11e      	bne.n	800354e <SPI_EndRxTransaction+0x4e>
 8003510:	2080      	movs	r0, #128	; 0x80
 8003512:	2580      	movs	r5, #128	; 0x80
 8003514:	68a2      	ldr	r2, [r4, #8]
 8003516:	0200      	lsls	r0, r0, #8
 8003518:	00ed      	lsls	r5, r5, #3
 800351a:	4282      	cmp	r2, r0
 800351c:	d001      	beq.n	8003522 <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800351e:	42aa      	cmp	r2, r5
 8003520:	d106      	bne.n	8003530 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003522:	2740      	movs	r7, #64	; 0x40
 8003524:	6826      	ldr	r6, [r4, #0]
 8003526:	6830      	ldr	r0, [r6, #0]
 8003528:	43b8      	bics	r0, r7
 800352a:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800352c:	42aa      	cmp	r2, r5
 800352e:	d00e      	beq.n	800354e <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	000a      	movs	r2, r1
 8003532:	2180      	movs	r1, #128	; 0x80
 8003534:	0020      	movs	r0, r4
 8003536:	f7ff ff87 	bl	8003448 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800353a:	2800      	cmp	r0, #0
 800353c:	d101      	bne.n	8003542 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800353e:	2000      	movs	r0, #0
}
 8003540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003542:	2320      	movs	r3, #32
 8003544:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003546:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003548:	4313      	orrs	r3, r2
 800354a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800354c:	e7f8      	b.n	8003540 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800354e:	000a      	movs	r2, r1
 8003550:	2101      	movs	r1, #1
 8003552:	e7ef      	b.n	8003534 <SPI_EndRxTransaction+0x34>

08003554 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003554:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <SPI_EndRxTxTransaction+0x5c>)
{
 8003556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003558:	0004      	movs	r4, r0
 800355a:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	4915      	ldr	r1, [pc, #84]	; (80035b4 <SPI_EndRxTxTransaction+0x60>)
{
 8003560:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003562:	f7fc fdd1 	bl	8000108 <__udivsi3>
 8003566:	23fa      	movs	r3, #250	; 0xfa
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4343      	muls	r3, r0
 800356c:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800356e:	2382      	movs	r3, #130	; 0x82
 8003570:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003572:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4299      	cmp	r1, r3
 8003578:	d10d      	bne.n	8003596 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800357a:	0033      	movs	r3, r6
 800357c:	002a      	movs	r2, r5
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	0020      	movs	r0, r4
 8003582:	f7ff ff61 	bl	8003448 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003586:	2800      	cmp	r0, #0
 8003588:	d00f      	beq.n	80035aa <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358a:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800358c:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003590:	4313      	orrs	r3, r2
 8003592:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8003594:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8003596:	9b01      	ldr	r3, [sp, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <SPI_EndRxTxTransaction+0x56>
      count--;
 800359c:	9b01      	ldr	r3, [sp, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	4213      	tst	r3, r2
 80035a8:	d1f5      	bne.n	8003596 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 80035aa:	2000      	movs	r0, #0
 80035ac:	e7f2      	b.n	8003594 <SPI_EndRxTxTransaction+0x40>
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	20000090 	.word	0x20000090
 80035b4:	016e3600 	.word	0x016e3600

080035b8 <HAL_SPI_Init>:
{
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	0004      	movs	r4, r0
    return HAL_ERROR;
 80035bc:	2001      	movs	r0, #1
  if (hspi == NULL)
 80035be:	2c00      	cmp	r4, #0
 80035c0:	d054      	beq.n	800366c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d152      	bne.n	800366e <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c8:	2282      	movs	r2, #130	; 0x82
 80035ca:	6861      	ldr	r1, [r4, #4]
 80035cc:	0052      	lsls	r2, r2, #1
 80035ce:	4291      	cmp	r1, r2
 80035d0:	d000      	beq.n	80035d4 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035d2:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035d4:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80035d6:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035d8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80035da:	3551      	adds	r5, #81	; 0x51
 80035dc:	782b      	ldrb	r3, [r5, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80035e4:	0023      	movs	r3, r4
 80035e6:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 80035e8:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80035ea:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80035ec:	f7fe ff16 	bl	800241c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80035f0:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 80035f2:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80035f4:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80035f6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035f8:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 80035fa:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035fc:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80035fe:	4393      	bics	r3, r2
 8003600:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003602:	2382      	movs	r3, #130	; 0x82
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4033      	ands	r3, r6
 8003608:	2684      	movs	r6, #132	; 0x84
 800360a:	0236      	lsls	r6, r6, #8
 800360c:	403e      	ands	r6, r7
 800360e:	4333      	orrs	r3, r6
 8003610:	2680      	movs	r6, #128	; 0x80
 8003612:	68e7      	ldr	r7, [r4, #12]
 8003614:	0136      	lsls	r6, r6, #4
 8003616:	403e      	ands	r6, r7
 8003618:	4333      	orrs	r3, r6
 800361a:	6926      	ldr	r6, [r4, #16]
 800361c:	69a2      	ldr	r2, [r4, #24]
 800361e:	4030      	ands	r0, r6
 8003620:	2601      	movs	r6, #1
 8003622:	4303      	orrs	r3, r0
 8003624:	6960      	ldr	r0, [r4, #20]
 8003626:	69e7      	ldr	r7, [r4, #28]
 8003628:	4030      	ands	r0, r6
 800362a:	4303      	orrs	r3, r0
 800362c:	2080      	movs	r0, #128	; 0x80
 800362e:	0080      	lsls	r0, r0, #2
 8003630:	4010      	ands	r0, r2
 8003632:	4303      	orrs	r3, r0
 8003634:	2038      	movs	r0, #56	; 0x38
 8003636:	4038      	ands	r0, r7
 8003638:	4303      	orrs	r3, r0
 800363a:	2080      	movs	r0, #128	; 0x80
 800363c:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800363e:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003640:	4038      	ands	r0, r7
 8003642:	4303      	orrs	r3, r0
 8003644:	2080      	movs	r0, #128	; 0x80
 8003646:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003648:	0180      	lsls	r0, r0, #6
 800364a:	4038      	ands	r0, r7
 800364c:	4303      	orrs	r3, r0
 800364e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003650:	2304      	movs	r3, #4
 8003652:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003654:	401a      	ands	r2, r3
 8003656:	330c      	adds	r3, #12
 8003658:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800365a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800365c:	431a      	orrs	r2, r3
 800365e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003660:	69cb      	ldr	r3, [r1, #28]
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <HAL_SPI_Init+0xc0>)
 8003664:	4013      	ands	r3, r2
 8003666:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003668:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800366a:	702e      	strb	r6, [r5, #0]
}
 800366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003672:	6163      	str	r3, [r4, #20]
 8003674:	e7ae      	b.n	80035d4 <HAL_SPI_Init+0x1c>
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	fffff7ff 	.word	0xfffff7ff

0800367c <HAL_SPI_TransmitReceive>:
{
 800367c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800367e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8003680:	0003      	movs	r3, r0
 8003682:	3350      	adds	r3, #80	; 0x50
{
 8003684:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8003686:	781a      	ldrb	r2, [r3, #0]
{
 8003688:	0004      	movs	r4, r0
 800368a:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 800368c:	2002      	movs	r0, #2
{
 800368e:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8003690:	2a01      	cmp	r2, #1
 8003692:	d100      	bne.n	8003696 <HAL_SPI_TransmitReceive+0x1a>
 8003694:	e092      	b.n	80037bc <HAL_SPI_TransmitReceive+0x140>
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800369a:	f7ff f8b3 	bl	8002804 <HAL_GetTick>
  tmp_state           = hspi->State;
 800369e:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80036a0:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 80036a2:	3351      	adds	r3, #81	; 0x51
 80036a4:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80036a6:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80036a8:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d00a      	beq.n	80036c4 <HAL_SPI_TransmitReceive+0x48>
 80036ae:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 80036b0:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4299      	cmp	r1, r3
 80036b6:	d000      	beq.n	80036ba <HAL_SPI_TransmitReceive+0x3e>
 80036b8:	e079      	b.n	80037ae <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036ba:	68a3      	ldr	r3, [r4, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d176      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x132>
 80036c0:	2a04      	cmp	r2, #4
 80036c2:	d174      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 80036c4:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036c6:	2d00      	cmp	r5, #0
 80036c8:	d071      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x132>
 80036ca:	2f00      	cmp	r7, #0
 80036cc:	d06f      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x132>
 80036ce:	2e00      	cmp	r6, #0
 80036d0:	d06d      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036d2:	0023      	movs	r3, r4
 80036d4:	3351      	adds	r3, #81	; 0x51
 80036d6:	781a      	ldrb	r2, [r3, #0]
 80036d8:	2a04      	cmp	r2, #4
 80036da:	d001      	beq.n	80036e0 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036dc:	2205      	movs	r2, #5
 80036de:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e0:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036e2:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80036e6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036e8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ea:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80036ec:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80036ee:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036f0:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036f2:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036f4:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036f6:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036f8:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036fa:	4210      	tst	r0, r2
 80036fc:	d102      	bne.n	8003704 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	4302      	orrs	r2, r0
 8003702:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	68e0      	ldr	r0, [r4, #12]
 8003708:	0112      	lsls	r2, r2, #4
 800370a:	4290      	cmp	r0, r2
 800370c:	d158      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800370e:	2900      	cmp	r1, #0
 8003710:	d001      	beq.n	8003716 <HAL_SPI_TransmitReceive+0x9a>
 8003712:	2e01      	cmp	r6, #1
 8003714:	d107      	bne.n	8003726 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003716:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003718:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800371a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800371c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800371e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003720:	3b01      	subs	r3, #1
 8003722:	b29b      	uxth	r3, r3
 8003724:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003726:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003728:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800372a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800372c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10e      	bne.n	8003750 <HAL_SPI_TransmitReceive+0xd4>
 8003732:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003738:	0020      	movs	r0, r4
 800373a:	9a01      	ldr	r2, [sp, #4]
 800373c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800373e:	f7ff ff09 	bl	8003554 <SPI_EndRxTxTransaction>
 8003742:	2800      	cmp	r0, #0
 8003744:	d100      	bne.n	8003748 <HAL_SPI_TransmitReceive+0xcc>
 8003746:	e083      	b.n	8003850 <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003748:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800374a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800374c:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 800374e:	e02e      	b.n	80037ae <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003750:	6821      	ldr	r1, [r4, #0]
 8003752:	688b      	ldr	r3, [r1, #8]
 8003754:	423b      	tst	r3, r7
 8003756:	d00e      	beq.n	8003776 <HAL_SPI_TransmitReceive+0xfa>
 8003758:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <HAL_SPI_TransmitReceive+0xfa>
 800375e:	2d01      	cmp	r5, #1
 8003760:	d109      	bne.n	8003776 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8003762:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003766:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003768:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800376a:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800376c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800376e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003770:	3b01      	subs	r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003776:	688b      	ldr	r3, [r1, #8]
 8003778:	001a      	movs	r2, r3
 800377a:	4032      	ands	r2, r6
 800377c:	4233      	tst	r3, r6
 800377e:	d00c      	beq.n	800379a <HAL_SPI_TransmitReceive+0x11e>
 8003780:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8003786:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003788:	68c9      	ldr	r1, [r1, #12]
 800378a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800378c:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800378e:	3302      	adds	r3, #2
 8003790:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003792:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003794:	3b01      	subs	r3, #1
 8003796:	b29b      	uxth	r3, r3
 8003798:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800379a:	f7ff f833 	bl	8002804 <HAL_GetTick>
 800379e:	9b01      	ldr	r3, [sp, #4]
 80037a0:	1ac0      	subs	r0, r0, r3
 80037a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037a4:	4298      	cmp	r0, r3
 80037a6:	d3c1      	bcc.n	800372c <HAL_SPI_TransmitReceive+0xb0>
 80037a8:	3301      	adds	r3, #1
 80037aa:	d0bf      	beq.n	800372c <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 80037ac:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80037ae:	0023      	movs	r3, r4
 80037b0:	2201      	movs	r2, #1
 80037b2:	3351      	adds	r3, #81	; 0x51
 80037b4:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80037b6:	2300      	movs	r3, #0
 80037b8:	3450      	adds	r4, #80	; 0x50
 80037ba:	7023      	strb	r3, [r4, #0]
}
 80037bc:	b005      	add	sp, #20
 80037be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037c0:	2900      	cmp	r1, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_SPI_TransmitReceive+0x14c>
 80037c4:	2e01      	cmp	r6, #1
 80037c6:	d108      	bne.n	80037da <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037c8:	782a      	ldrb	r2, [r5, #0]
 80037ca:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037ce:	3301      	adds	r3, #1
 80037d0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80037d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80037da:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037dc:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037de:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x170>
 80037e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0a5      	beq.n	8003738 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	423a      	tst	r2, r7
 80037f2:	d00f      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x198>
 80037f4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	d00c      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x198>
 80037fa:	2d01      	cmp	r5, #1
 80037fc:	d10a      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 80037fe:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003800:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003802:	7812      	ldrb	r2, [r2, #0]
 8003804:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003806:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003808:	3301      	adds	r3, #1
 800380a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800380c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800380e:	3b01      	subs	r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	6899      	ldr	r1, [r3, #8]
 8003818:	000a      	movs	r2, r1
 800381a:	4032      	ands	r2, r6
 800381c:	4231      	tst	r1, r6
 800381e:	d00d      	beq.n	800383c <HAL_SPI_TransmitReceive+0x1c0>
 8003820:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003822:	2900      	cmp	r1, #0
 8003824:	d00a      	beq.n	800383c <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8003826:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800382c:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 800382e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003830:	3301      	adds	r3, #1
 8003832:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003834:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003836:	3b01      	subs	r3, #1
 8003838:	b29b      	uxth	r3, r3
 800383a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800383c:	f7fe ffe2 	bl	8002804 <HAL_GetTick>
 8003840:	9b01      	ldr	r3, [sp, #4]
 8003842:	1ac0      	subs	r0, r0, r3
 8003844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003846:	4298      	cmp	r0, r3
 8003848:	d3ca      	bcc.n	80037e0 <HAL_SPI_TransmitReceive+0x164>
 800384a:	3301      	adds	r3, #1
 800384c:	d0c8      	beq.n	80037e0 <HAL_SPI_TransmitReceive+0x164>
 800384e:	e7ad      	b.n	80037ac <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003850:	68a3      	ldr	r3, [r4, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ab      	bne.n	80037ae <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	9003      	str	r0, [sp, #12]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	9203      	str	r2, [sp, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	9303      	str	r3, [sp, #12]
 8003862:	9b03      	ldr	r3, [sp, #12]
 8003864:	e7a3      	b.n	80037ae <HAL_SPI_TransmitReceive+0x132>
	...

08003868 <HAL_SPI_TransmitReceive_DMA>:
{
 8003868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800386a:	0006      	movs	r6, r0
 800386c:	3650      	adds	r6, #80	; 0x50
 800386e:	7835      	ldrb	r5, [r6, #0]
{
 8003870:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8003872:	2002      	movs	r0, #2
 8003874:	2d01      	cmp	r5, #1
 8003876:	d048      	beq.n	800390a <HAL_SPI_TransmitReceive_DMA+0xa2>
  tmp_state           = hspi->State;
 8003878:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 800387a:	3801      	subs	r0, #1
 800387c:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 800387e:	3551      	adds	r5, #81	; 0x51
 8003880:	7828      	ldrb	r0, [r5, #0]
 8003882:	b2c7      	uxtb	r7, r0
 8003884:	9701      	str	r7, [sp, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003886:	2801      	cmp	r0, #1
 8003888:	d00d      	beq.n	80038a6 <HAL_SPI_TransmitReceive_DMA+0x3e>
 800388a:	2082      	movs	r0, #130	; 0x82
 800388c:	0040      	lsls	r0, r0, #1
 800388e:	4684      	mov	ip, r0
 8003890:	6867      	ldr	r7, [r4, #4]
    errorcode = HAL_BUSY;
 8003892:	3803      	subs	r0, #3
 8003894:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003896:	4567      	cmp	r7, ip
 8003898:	d135      	bne.n	8003906 <HAL_SPI_TransmitReceive_DMA+0x9e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800389a:	68a7      	ldr	r7, [r4, #8]
 800389c:	2f00      	cmp	r7, #0
 800389e:	d132      	bne.n	8003906 <HAL_SPI_TransmitReceive_DMA+0x9e>
 80038a0:	9f01      	ldr	r7, [sp, #4]
 80038a2:	2f04      	cmp	r7, #4
 80038a4:	d12f      	bne.n	8003906 <HAL_SPI_TransmitReceive_DMA+0x9e>
    errorcode = HAL_ERROR;
 80038a6:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d02c      	beq.n	8003906 <HAL_SPI_TransmitReceive_DMA+0x9e>
 80038ac:	2a00      	cmp	r2, #0
 80038ae:	d02a      	beq.n	8003906 <HAL_SPI_TransmitReceive_DMA+0x9e>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d028      	beq.n	8003906 <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038b4:	7828      	ldrb	r0, [r5, #0]
 80038b6:	2804      	cmp	r0, #4
 80038b8:	d001      	beq.n	80038be <HAL_SPI_TransmitReceive_DMA+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038ba:	2005      	movs	r0, #5
 80038bc:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038be:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038c0:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80038c4:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80038c6:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 80038c8:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->TxXferSize  = Size;
 80038ca:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038cc:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80038ce:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80038d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80038d2:	782b      	ldrb	r3, [r5, #0]
 80038d4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d118      	bne.n	800390c <HAL_SPI_TransmitReceive_DMA+0xa4>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80038da:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_SPI_TransmitReceive_DMA+0x100>)
 80038dc:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <HAL_SPI_TransmitReceive_DMA+0x104>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80038e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80038e2:	4b23      	ldr	r3, [pc, #140]	; (8003970 <HAL_SPI_TransmitReceive_DMA+0x108>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80038e4:	6821      	ldr	r1, [r4, #0]
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80038e6:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 80038ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80038ee:	310c      	adds	r1, #12
                                 hspi->RxXferCount))
 80038f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80038f2:	f7ff f833 	bl	800295c <HAL_DMA_Start_IT>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d00c      	beq.n	8003914 <HAL_SPI_TransmitReceive_DMA+0xac>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80038fa:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 80038fc:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80038fe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003900:	4313      	orrs	r3, r2
 8003902:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003904:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8003906:	2300      	movs	r3, #0
 8003908:	7033      	strb	r3, [r6, #0]
}
 800390a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_SPI_TransmitReceive_DMA+0x10c>)
 800390e:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_SPI_TransmitReceive_DMA+0x110>)
 8003912:	e7e5      	b.n	80038e0 <HAL_SPI_TransmitReceive_DMA+0x78>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003914:	2701      	movs	r7, #1
 8003916:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003918:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800391a:	6851      	ldr	r1, [r2, #4]
 800391c:	4339      	orrs	r1, r7
 800391e:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003920:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003922:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003924:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003926:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 8003928:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800392a:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                 hspi->TxXferCount))
 800392c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800392e:	320c      	adds	r2, #12
 8003930:	f7ff f814 	bl	800295c <HAL_DMA_Start_IT>
 8003934:	2800      	cmp	r0, #0
 8003936:	d006      	beq.n	8003946 <HAL_SPI_TransmitReceive_DMA+0xde>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003938:	2310      	movs	r3, #16
 800393a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800393c:	0038      	movs	r0, r7
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800393e:	4313      	orrs	r3, r2
 8003940:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003942:	702f      	strb	r7, [r5, #0]
    goto error;
 8003944:	e7df      	b.n	8003906 <HAL_SPI_TransmitReceive_DMA+0x9e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003946:	2240      	movs	r2, #64	; 0x40
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	6819      	ldr	r1, [r3, #0]
 800394c:	4211      	tst	r1, r2
 800394e:	d102      	bne.n	8003956 <HAL_SPI_TransmitReceive_DMA+0xee>
    __HAL_SPI_ENABLE(hspi);
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003956:	2220      	movs	r2, #32
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800395e:	2202      	movs	r2, #2
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	e7ce      	b.n	8003906 <HAL_SPI_TransmitReceive_DMA+0x9e>
 8003968:	08003a71 	.word	0x08003a71
 800396c:	08003aad 	.word	0x08003aad
 8003970:	08003a89 	.word	0x08003a89
 8003974:	08003a7d 	.word	0x08003a7d
 8003978:	08003b1b 	.word	0x08003b1b

0800397c <HAL_SPI_Receive_DMA>:
{
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003980:	6880      	ldr	r0, [r0, #8]
{
 8003982:	0013      	movs	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003984:	2800      	cmp	r0, #0
 8003986:	d10f      	bne.n	80039a8 <HAL_SPI_Receive_DMA+0x2c>
 8003988:	2282      	movs	r2, #130	; 0x82
 800398a:	6865      	ldr	r5, [r4, #4]
 800398c:	0052      	lsls	r2, r2, #1
 800398e:	4295      	cmp	r5, r2
 8003990:	d10a      	bne.n	80039a8 <HAL_SPI_Receive_DMA+0x2c>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003992:	0022      	movs	r2, r4
 8003994:	3004      	adds	r0, #4
 8003996:	3251      	adds	r2, #81	; 0x51
 8003998:	7010      	strb	r0, [r2, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800399a:	000a      	movs	r2, r1
 800399c:	0020      	movs	r0, r4
 800399e:	f7ff ff63 	bl	8003868 <HAL_SPI_TransmitReceive_DMA>
 80039a2:	0005      	movs	r5, r0
}
 80039a4:	0028      	movs	r0, r5
 80039a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 80039a8:	0026      	movs	r6, r4
 80039aa:	3650      	adds	r6, #80	; 0x50
 80039ac:	7832      	ldrb	r2, [r6, #0]
 80039ae:	2502      	movs	r5, #2
 80039b0:	2a01      	cmp	r2, #1
 80039b2:	d0f7      	beq.n	80039a4 <HAL_SPI_Receive_DMA+0x28>
 80039b4:	2201      	movs	r2, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80039b6:	0027      	movs	r7, r4
  __HAL_LOCK(hspi);
 80039b8:	7032      	strb	r2, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80039ba:	3751      	adds	r7, #81	; 0x51
 80039bc:	783a      	ldrb	r2, [r7, #0]
 80039be:	b2d5      	uxtb	r5, r2
 80039c0:	2a01      	cmp	r2, #1
 80039c2:	d149      	bne.n	8003a58 <HAL_SPI_Receive_DMA+0xdc>
  if ((pData == NULL) || (Size == 0U))
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d032      	beq.n	8003a2e <HAL_SPI_Receive_DMA+0xb2>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d030      	beq.n	8003a2e <HAL_SPI_Receive_DMA+0xb2>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039cc:	3203      	adds	r2, #3
 80039ce:	703a      	strb	r2, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039d0:	2200      	movs	r2, #0
  hspi->RxXferSize  = Size;
 80039d2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039d4:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80039d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d8:	2380      	movs	r3, #128	; 0x80
  hspi->RxISR       = NULL;
 80039da:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039dc:	6462      	str	r2, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80039de:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80039e0:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039e2:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e4:	6822      	ldr	r2, [r4, #0]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	4298      	cmp	r0, r3
 80039ea:	d107      	bne.n	80039fc <HAL_SPI_Receive_DMA+0x80>
    __HAL_SPI_DISABLE(hspi);
 80039ec:	2040      	movs	r0, #64	; 0x40
 80039ee:	6813      	ldr	r3, [r2, #0]
 80039f0:	4383      	bics	r3, r0
 80039f2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80039f4:	6813      	ldr	r3, [r2, #0]
 80039f6:	4819      	ldr	r0, [pc, #100]	; (8003a5c <HAL_SPI_Receive_DMA+0xe0>)
 80039f8:	4003      	ands	r3, r0
 80039fa:	6013      	str	r3, [r2, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80039fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80039fe:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <HAL_SPI_Receive_DMA+0xe4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003a00:	320c      	adds	r2, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003a02:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <HAL_SPI_Receive_DMA+0xe8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003a06:	4694      	mov	ip, r2
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003a08:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003a0a:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <HAL_SPI_Receive_DMA+0xec>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003a0c:	000a      	movs	r2, r1
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003a0e:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 8003a14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003a16:	4661      	mov	r1, ip
                                 hspi->RxXferCount))
 8003a18:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003a1a:	f7fe ff9f 	bl	800295c <HAL_DMA_Start_IT>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_SPI_Receive_DMA+0xb8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a22:	2310      	movs	r3, #16
 8003a24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003a26:	4313      	orrs	r3, r2
 8003a28:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	7033      	strb	r3, [r6, #0]
  return errorcode;
 8003a32:	e7b7      	b.n	80039a4 <HAL_SPI_Receive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a34:	2240      	movs	r2, #64	; 0x40
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	6819      	ldr	r1, [r3, #0]
 8003a3a:	4211      	tst	r1, r2
 8003a3c:	d102      	bne.n	8003a44 <HAL_SPI_Receive_DMA+0xc8>
    __HAL_SPI_ENABLE(hspi);
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003a44:	2220      	movs	r2, #32
 8003a46:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a48:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
 8003a56:	e7ea      	b.n	8003a2e <HAL_SPI_Receive_DMA+0xb2>
    errorcode = HAL_BUSY;
 8003a58:	2502      	movs	r5, #2
 8003a5a:	e7e8      	b.n	8003a2e <HAL_SPI_Receive_DMA+0xb2>
 8003a5c:	ffffbfff 	.word	0xffffbfff
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003aad 	.word	0x08003aad
 8003a68:	08003a89 	.word	0x08003a89

08003a6c <HAL_SPI_TxRxCpltCallback>:
 8003a6c:	4770      	bx	lr

08003a6e <HAL_SPI_RxHalfCpltCallback>:
 8003a6e:	4770      	bx	lr

08003a70 <SPI_DMAHalfReceiveCplt>:
{
 8003a70:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003a72:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003a74:	f7ff fffb 	bl	8003a6e <HAL_SPI_RxHalfCpltCallback>
}
 8003a78:	bd10      	pop	{r4, pc}

08003a7a <HAL_SPI_TxRxHalfCpltCallback>:
 8003a7a:	4770      	bx	lr

08003a7c <SPI_DMAHalfTransmitReceiveCplt>:
{
 8003a7c:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003a7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003a80:	f7ff fffb 	bl	8003a7a <HAL_SPI_TxRxHalfCpltCallback>
}
 8003a84:	bd10      	pop	{r4, pc}

08003a86 <HAL_SPI_ErrorCallback>:
 8003a86:	4770      	bx	lr

08003a88 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a88:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003a8c:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a8e:	6802      	ldr	r2, [r0, #0]
 8003a90:	6853      	ldr	r3, [r2, #4]
 8003a92:	438b      	bics	r3, r1
 8003a94:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a96:	2310      	movs	r3, #16
 8003a98:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	3351      	adds	r3, #81	; 0x51
 8003aa4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8003aa6:	f7ff ffee 	bl	8003a86 <HAL_SPI_ErrorCallback>
}
 8003aaa:	bd10      	pop	{r4, pc}

08003aac <SPI_DMAReceiveCplt>:
{
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ab0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003ab2:	f7fe fea7 	bl	8002804 <HAL_GetTick>
 8003ab6:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003ab8:	2020      	movs	r0, #32
 8003aba:	682b      	ldr	r3, [r5, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4203      	tst	r3, r0
 8003ac0:	d127      	bne.n	8003b12 <SPI_DMAReceiveCplt+0x66>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	4381      	bics	r1, r0
 8003ac8:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003aca:	68a1      	ldr	r1, [r4, #8]
 8003acc:	2900      	cmp	r1, #0
 8003ace:	d11d      	bne.n	8003b0c <SPI_DMAReceiveCplt+0x60>
 8003ad0:	3105      	adds	r1, #5
 8003ad2:	6860      	ldr	r0, [r4, #4]
 8003ad4:	31ff      	adds	r1, #255	; 0xff
 8003ad6:	4288      	cmp	r0, r1
 8003ad8:	d118      	bne.n	8003b0c <SPI_DMAReceiveCplt+0x60>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ada:	2003      	movs	r0, #3
 8003adc:	6859      	ldr	r1, [r3, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003ade:	4381      	bics	r1, r0
 8003ae0:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ae2:	0020      	movs	r0, r4
 8003ae4:	2164      	movs	r1, #100	; 0x64
 8003ae6:	f7ff fd0b 	bl	8003500 <SPI_EndRxTransaction>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d001      	beq.n	8003af2 <SPI_DMAReceiveCplt+0x46>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aee:	2320      	movs	r3, #32
 8003af0:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003af6:	0023      	movs	r3, r4
 8003af8:	2201      	movs	r2, #1
 8003afa:	3351      	adds	r3, #81	; 0x51
 8003afc:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003afe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d006      	beq.n	8003b12 <SPI_DMAReceiveCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8003b04:	0020      	movs	r0, r4
 8003b06:	f7ff ffbe 	bl	8003a86 <HAL_SPI_ErrorCallback>
}
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	e7e5      	b.n	8003ade <SPI_DMAReceiveCplt+0x32>
  HAL_SPI_RxCpltCallback(hspi);
 8003b12:	0020      	movs	r0, r4
 8003b14:	f000 feea 	bl	80048ec <HAL_SPI_RxCpltCallback>
 8003b18:	e7f7      	b.n	8003b0a <SPI_DMAReceiveCplt+0x5e>

08003b1a <SPI_DMATransmitReceiveCplt>:
{
 8003b1a:	b570      	push	{r4, r5, r6, lr}
 8003b1c:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b1e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003b20:	f7fe fe70 	bl	8002804 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	2520      	movs	r5, #32
 8003b28:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8003b2a:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003b2c:	422b      	tst	r3, r5
 8003b2e:	d11f      	bne.n	8003b70 <SPI_DMATransmitReceiveCplt+0x56>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b30:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b32:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b34:	684b      	ldr	r3, [r1, #4]
 8003b36:	43ab      	bics	r3, r5
 8003b38:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b3a:	2164      	movs	r1, #100	; 0x64
 8003b3c:	f7ff fd0a 	bl	8003554 <SPI_EndRxTxTransaction>
 8003b40:	2800      	cmp	r0, #0
 8003b42:	d002      	beq.n	8003b4a <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b46:	431d      	orrs	r5, r3
 8003b48:	6565      	str	r5, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b4a:	2103      	movs	r1, #3
 8003b4c:	6822      	ldr	r2, [r4, #0]
 8003b4e:	6853      	ldr	r3, [r2, #4]
 8003b50:	438b      	bics	r3, r1
 8003b52:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003b58:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003b5a:	0023      	movs	r3, r4
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	3351      	adds	r3, #81	; 0x51
 8003b60:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <SPI_DMATransmitReceiveCplt+0x56>
      HAL_SPI_ErrorCallback(hspi);
 8003b68:	0020      	movs	r0, r4
 8003b6a:	f7ff ff8c 	bl	8003a86 <HAL_SPI_ErrorCallback>
}
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8003b70:	0020      	movs	r0, r4
 8003b72:	f7ff ff7b 	bl	8003a6c <HAL_SPI_TxRxCpltCallback>
 8003b76:	e7fa      	b.n	8003b6e <SPI_DMATransmitReceiveCplt+0x54>

08003b78 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b78:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 8003b7a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b7c:	05d2      	lsls	r2, r2, #23
 8003b7e:	4290      	cmp	r0, r2
 8003b80:	d008      	beq.n	8003b94 <TIM_Base_SetConfig+0x1c>
 8003b82:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <TIM_Base_SetConfig+0x60>)
 8003b84:	4290      	cmp	r0, r2
 8003b86:	d005      	beq.n	8003b94 <TIM_Base_SetConfig+0x1c>
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <TIM_Base_SetConfig+0x64>)
 8003b8a:	4290      	cmp	r0, r2
 8003b8c:	d002      	beq.n	8003b94 <TIM_Base_SetConfig+0x1c>
 8003b8e:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <TIM_Base_SetConfig+0x68>)
 8003b90:	4290      	cmp	r0, r2
 8003b92:	d114      	bne.n	8003bbe <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b94:	2270      	movs	r2, #112	; 0x70
 8003b96:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003b98:	684a      	ldr	r2, [r1, #4]
 8003b9a:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	05d2      	lsls	r2, r2, #23
 8003ba0:	4290      	cmp	r0, r2
 8003ba2:	d008      	beq.n	8003bb6 <TIM_Base_SetConfig+0x3e>
 8003ba4:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <TIM_Base_SetConfig+0x60>)
 8003ba6:	4290      	cmp	r0, r2
 8003ba8:	d005      	beq.n	8003bb6 <TIM_Base_SetConfig+0x3e>
 8003baa:	4a0c      	ldr	r2, [pc, #48]	; (8003bdc <TIM_Base_SetConfig+0x64>)
 8003bac:	4290      	cmp	r0, r2
 8003bae:	d002      	beq.n	8003bb6 <TIM_Base_SetConfig+0x3e>
 8003bb0:	4a0b      	ldr	r2, [pc, #44]	; (8003be0 <TIM_Base_SetConfig+0x68>)
 8003bb2:	4290      	cmp	r0, r2
 8003bb4:	d103      	bne.n	8003bbe <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bb6:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <TIM_Base_SetConfig+0x6c>)
 8003bb8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bba:	68ca      	ldr	r2, [r1, #12]
 8003bbc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bbe:	2280      	movs	r2, #128	; 0x80
 8003bc0:	4393      	bics	r3, r2
 8003bc2:	690a      	ldr	r2, [r1, #16]
 8003bc4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003bc6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc8:	688b      	ldr	r3, [r1, #8]
 8003bca:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bcc:	680b      	ldr	r3, [r1, #0]
 8003bce:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	6143      	str	r3, [r0, #20]
}
 8003bd4:	4770      	bx	lr
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40010800 	.word	0x40010800
 8003be0:	40011400 	.word	0x40011400
 8003be4:	fffffcff 	.word	0xfffffcff

08003be8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be8:	2201      	movs	r2, #1
{
 8003bea:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bec:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bee:	6a03      	ldr	r3, [r0, #32]
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003bf4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003bf6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003bf8:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bfa:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bfc:	680d      	ldr	r5, [r1, #0]
 8003bfe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c00:	2502      	movs	r5, #2
 8003c02:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c04:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c06:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c08:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c0a:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8003c0c:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8003c0e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c10:	6203      	str	r3, [r0, #32]
}
 8003c12:	bd30      	pop	{r4, r5, pc}

08003c14 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c14:	2210      	movs	r2, #16
 8003c16:	6a03      	ldr	r3, [r0, #32]
{
 8003c18:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c1a:	4393      	bics	r3, r2
 8003c1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c20:	4c09      	ldr	r4, [pc, #36]	; (8003c48 <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8003c22:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003c24:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c26:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c28:	680a      	ldr	r2, [r1, #0]
 8003c2a:	0212      	lsls	r2, r2, #8
 8003c2c:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c2e:	2420      	movs	r4, #32
 8003c30:	43a3      	bics	r3, r4
 8003c32:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c34:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c36:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c38:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c3a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c3c:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c3e:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8003c40:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c42:	6203      	str	r3, [r0, #32]
}
 8003c44:	bd30      	pop	{r4, r5, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	ffff8cff 	.word	0xffff8cff

08003c4c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c4c:	231f      	movs	r3, #31
{
 8003c4e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c50:	2401      	movs	r4, #1
 8003c52:	4019      	ands	r1, r3
 8003c54:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c56:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003c58:	6a03      	ldr	r3, [r0, #32]
 8003c5a:	43a3      	bics	r3, r4
 8003c5c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c5e:	6a03      	ldr	r3, [r0, #32]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	6202      	str	r2, [r0, #32]
}
 8003c64:	bd10      	pop	{r4, pc}

08003c66 <HAL_TIM_Base_Init>:
{
 8003c66:	b570      	push	{r4, r5, r6, lr}
 8003c68:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003c6a:	2001      	movs	r0, #1
  if (htim == NULL)
 8003c6c:	2c00      	cmp	r4, #0
 8003c6e:	d01d      	beq.n	8003cac <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003c70:	0025      	movs	r5, r4
 8003c72:	3539      	adds	r5, #57	; 0x39
 8003c74:	782b      	ldrb	r3, [r5, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003c7c:	0023      	movs	r3, r4
 8003c7e:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003c80:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003c82:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8003c84:	f7fe fc30 	bl	80024e8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c8c:	6820      	ldr	r0, [r4, #0]
 8003c8e:	1d21      	adds	r1, r4, #4
 8003c90:	f7ff ff72 	bl	8003b78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c94:	0022      	movs	r2, r4
 8003c96:	2301      	movs	r3, #1
  return HAL_OK;
 8003c98:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c9a:	323e      	adds	r2, #62	; 0x3e
 8003c9c:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9e:	343d      	adds	r4, #61	; 0x3d
 8003ca0:	3a04      	subs	r2, #4
 8003ca2:	7013      	strb	r3, [r2, #0]
 8003ca4:	7053      	strb	r3, [r2, #1]
 8003ca6:	7093      	strb	r3, [r2, #2]
 8003ca8:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003caa:	702b      	strb	r3, [r5, #0]
}
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb0 <HAL_TIM_OC_Start_DMA>:
{
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	000e      	movs	r6, r1
 8003cb4:	0005      	movs	r5, r0
 8003cb6:	0011      	movs	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003cb8:	0002      	movs	r2, r0
 8003cba:	2e00      	cmp	r6, #0
 8003cbc:	d105      	bne.n	8003cca <HAL_TIM_OC_Start_DMA+0x1a>
 8003cbe:	323a      	adds	r2, #58	; 0x3a
 8003cc0:	7814      	ldrb	r4, [r2, #0]
 8003cc2:	b2e0      	uxtb	r0, r4
 8003cc4:	2c02      	cmp	r4, #2
 8003cc6:	d10a      	bne.n	8003cde <HAL_TIM_OC_Start_DMA+0x2e>
}
 8003cc8:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003cca:	2e04      	cmp	r6, #4
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_OC_Start_DMA+0x22>
 8003cce:	323b      	adds	r2, #59	; 0x3b
 8003cd0:	e7f6      	b.n	8003cc0 <HAL_TIM_OC_Start_DMA+0x10>
 8003cd2:	2e08      	cmp	r6, #8
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_OC_Start_DMA+0x2a>
 8003cd6:	323c      	adds	r2, #60	; 0x3c
 8003cd8:	e7f2      	b.n	8003cc0 <HAL_TIM_OC_Start_DMA+0x10>
 8003cda:	323d      	adds	r2, #61	; 0x3d
 8003cdc:	e7f0      	b.n	8003cc0 <HAL_TIM_OC_Start_DMA+0x10>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003cde:	7814      	ldrb	r4, [r2, #0]
 8003ce0:	3c01      	subs	r4, #1
 8003ce2:	4262      	negs	r2, r4
 8003ce4:	4154      	adcs	r4, r2
 8003ce6:	b2e4      	uxtb	r4, r4
 8003ce8:	2c00      	cmp	r4, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_TIM_OC_Start_DMA+0x40>
  switch (Channel)
 8003cec:	2001      	movs	r0, #1
 8003cee:	e7eb      	b.n	8003cc8 <HAL_TIM_OC_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 8003cf0:	2900      	cmp	r1, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_TIM_OC_Start_DMA+0x48>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f9      	bne.n	8003cec <HAL_TIM_OC_Start_DMA+0x3c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	0028      	movs	r0, r5
 8003cfc:	2e00      	cmp	r6, #0
 8003cfe:	d132      	bne.n	8003d66 <HAL_TIM_OC_Start_DMA+0xb6>
 8003d00:	303a      	adds	r0, #58	; 0x3a
 8003d02:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d04:	6a28      	ldr	r0, [r5, #32]
 8003d06:	4a3c      	ldr	r2, [pc, #240]	; (8003df8 <HAL_TIM_OC_Start_DMA+0x148>)
 8003d08:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d0a:	4a3c      	ldr	r2, [pc, #240]	; (8003dfc <HAL_TIM_OC_Start_DMA+0x14c>)
 8003d0c:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d0e:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <HAL_TIM_OC_Start_DMA+0x150>)
 8003d10:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003d12:	682a      	ldr	r2, [r5, #0]
 8003d14:	3234      	adds	r2, #52	; 0x34
 8003d16:	f7fe fe21 	bl	800295c <HAL_DMA_Start_IT>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d1e6      	bne.n	8003cec <HAL_TIM_OC_Start_DMA+0x3c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	682a      	ldr	r2, [r5, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	68d1      	ldr	r1, [r2, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003d26:	430b      	orrs	r3, r1
 8003d28:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d2a:	0031      	movs	r1, r6
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	6828      	ldr	r0, [r5, #0]
 8003d30:	f7ff ff8c 	bl	8003c4c <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d34:	2280      	movs	r2, #128	; 0x80
 8003d36:	682b      	ldr	r3, [r5, #0]
 8003d38:	05d2      	lsls	r2, r2, #23
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d008      	beq.n	8003d50 <HAL_TIM_OC_Start_DMA+0xa0>
 8003d3e:	4a31      	ldr	r2, [pc, #196]	; (8003e04 <HAL_TIM_OC_Start_DMA+0x154>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d005      	beq.n	8003d50 <HAL_TIM_OC_Start_DMA+0xa0>
 8003d44:	4a30      	ldr	r2, [pc, #192]	; (8003e08 <HAL_TIM_OC_Start_DMA+0x158>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d002      	beq.n	8003d50 <HAL_TIM_OC_Start_DMA+0xa0>
 8003d4a:	4a30      	ldr	r2, [pc, #192]	; (8003e0c <HAL_TIM_OC_Start_DMA+0x15c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d14c      	bne.n	8003dea <HAL_TIM_OC_Start_DMA+0x13a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d50:	2107      	movs	r1, #7
 8003d52:	689a      	ldr	r2, [r3, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d54:	2000      	movs	r0, #0
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d56:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d58:	2a06      	cmp	r2, #6
 8003d5a:	d0b5      	beq.n	8003cc8 <HAL_TIM_OC_Start_DMA+0x18>
        __HAL_TIM_ENABLE(htim);
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	6819      	ldr	r1, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e7b0      	b.n	8003cc8 <HAL_TIM_OC_Start_DMA+0x18>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d66:	2e04      	cmp	r6, #4
 8003d68:	d113      	bne.n	8003d92 <HAL_TIM_OC_Start_DMA+0xe2>
 8003d6a:	303b      	adds	r0, #59	; 0x3b
 8003d6c:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d6e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003d70:	4a21      	ldr	r2, [pc, #132]	; (8003df8 <HAL_TIM_OC_Start_DMA+0x148>)
 8003d72:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d74:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <HAL_TIM_OC_Start_DMA+0x14c>)
 8003d76:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d78:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <HAL_TIM_OC_Start_DMA+0x150>)
 8003d7a:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d7c:	682a      	ldr	r2, [r5, #0]
 8003d7e:	3238      	adds	r2, #56	; 0x38
 8003d80:	f7fe fdec 	bl	800295c <HAL_DMA_Start_IT>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d1b1      	bne.n	8003cec <HAL_TIM_OC_Start_DMA+0x3c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	682a      	ldr	r2, [r5, #0]
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	68d1      	ldr	r1, [r2, #12]
 8003d90:	e7c9      	b.n	8003d26 <HAL_TIM_OC_Start_DMA+0x76>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d92:	2e08      	cmp	r6, #8
 8003d94:	d113      	bne.n	8003dbe <HAL_TIM_OC_Start_DMA+0x10e>
 8003d96:	303c      	adds	r0, #60	; 0x3c
 8003d98:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d9a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003d9c:	4a16      	ldr	r2, [pc, #88]	; (8003df8 <HAL_TIM_OC_Start_DMA+0x148>)
 8003d9e:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003da0:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <HAL_TIM_OC_Start_DMA+0x14c>)
 8003da2:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003da4:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <HAL_TIM_OC_Start_DMA+0x150>)
 8003da6:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003da8:	682a      	ldr	r2, [r5, #0]
 8003daa:	323c      	adds	r2, #60	; 0x3c
 8003dac:	f7fe fdd6 	bl	800295c <HAL_DMA_Start_IT>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d19b      	bne.n	8003cec <HAL_TIM_OC_Start_DMA+0x3c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	682a      	ldr	r2, [r5, #0]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	68d1      	ldr	r1, [r2, #12]
 8003dbc:	e7b3      	b.n	8003d26 <HAL_TIM_OC_Start_DMA+0x76>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dbe:	303d      	adds	r0, #61	; 0x3d
 8003dc0:	7002      	strb	r2, [r0, #0]
  switch (Channel)
 8003dc2:	2e0c      	cmp	r6, #12
 8003dc4:	d192      	bne.n	8003cec <HAL_TIM_OC_Start_DMA+0x3c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003dc6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003dc8:	4a0b      	ldr	r2, [pc, #44]	; (8003df8 <HAL_TIM_OC_Start_DMA+0x148>)
 8003dca:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <HAL_TIM_OC_Start_DMA+0x14c>)
 8003dce:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003dd0:	4a0b      	ldr	r2, [pc, #44]	; (8003e00 <HAL_TIM_OC_Start_DMA+0x150>)
 8003dd2:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003dd4:	682a      	ldr	r2, [r5, #0]
 8003dd6:	3240      	adds	r2, #64	; 0x40
 8003dd8:	f7fe fdc0 	bl	800295c <HAL_DMA_Start_IT>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d185      	bne.n	8003cec <HAL_TIM_OC_Start_DMA+0x3c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	682a      	ldr	r2, [r5, #0]
 8003de4:	015b      	lsls	r3, r3, #5
 8003de6:	68d1      	ldr	r1, [r2, #12]
 8003de8:	e79d      	b.n	8003d26 <HAL_TIM_OC_Start_DMA+0x76>
      __HAL_TIM_ENABLE(htim);
 8003dea:	2201      	movs	r2, #1
 8003dec:	6819      	ldr	r1, [r3, #0]
 8003dee:	2000      	movs	r0, #0
 8003df0:	430a      	orrs	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	e768      	b.n	8003cc8 <HAL_TIM_OC_Start_DMA+0x18>
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	080040d3 	.word	0x080040d3
 8003dfc:	08004145 	.word	0x08004145
 8003e00:	0800417f 	.word	0x0800417f
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40010800 	.word	0x40010800
 8003e0c:	40011400 	.word	0x40011400

08003e10 <HAL_TIM_PWM_MspInit>:
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_PWM_Init>:
{
 8003e12:	b570      	push	{r4, r5, r6, lr}
 8003e14:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003e16:	2001      	movs	r0, #1
  if (htim == NULL)
 8003e18:	2c00      	cmp	r4, #0
 8003e1a:	d01d      	beq.n	8003e58 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1c:	0025      	movs	r5, r4
 8003e1e:	3539      	adds	r5, #57	; 0x39
 8003e20:	782b      	ldrb	r3, [r5, #0]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003e28:	0023      	movs	r3, r4
 8003e2a:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8003e2c:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8003e30:	f7ff ffee 	bl	8003e10 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	2302      	movs	r3, #2
 8003e36:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e38:	6820      	ldr	r0, [r4, #0]
 8003e3a:	1d21      	adds	r1, r4, #4
 8003e3c:	f7ff fe9c 	bl	8003b78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e40:	0022      	movs	r2, r4
 8003e42:	2301      	movs	r3, #1
  return HAL_OK;
 8003e44:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e46:	323e      	adds	r2, #62	; 0x3e
 8003e48:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	343d      	adds	r4, #61	; 0x3d
 8003e4c:	3a04      	subs	r2, #4
 8003e4e:	7013      	strb	r3, [r2, #0]
 8003e50:	7053      	strb	r3, [r2, #1]
 8003e52:	7093      	strb	r3, [r2, #2]
 8003e54:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003e56:	702b      	strb	r3, [r5, #0]
}
 8003e58:	bd70      	pop	{r4, r5, r6, pc}

08003e5a <HAL_TIM_PWM_Start_DMA>:
 8003e5a:	b510      	push	{r4, lr}
 8003e5c:	f7ff ff28 	bl	8003cb0 <HAL_TIM_OC_Start_DMA>
 8003e60:	bd10      	pop	{r4, pc}
	...

08003e64 <HAL_TIM_PWM_ConfigChannel>:
{
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003e66:	0005      	movs	r5, r0
 8003e68:	3538      	adds	r5, #56	; 0x38
 8003e6a:	782b      	ldrb	r3, [r5, #0]
{
 8003e6c:	0007      	movs	r7, r0
 8003e6e:	000c      	movs	r4, r1
 8003e70:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 8003e72:	2002      	movs	r0, #2
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d00a      	beq.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003e78:	3801      	subs	r0, #1
 8003e7a:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 8003e7c:	2a08      	cmp	r2, #8
 8003e7e:	d050      	beq.n	8003f22 <HAL_TIM_PWM_ConfigChannel+0xbe>
 8003e80:	d806      	bhi.n	8003e90 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	d02a      	beq.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x78>
 8003e86:	2a04      	cmp	r2, #4
 8003e88:	d03a      	beq.n	8003f00 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	702b      	strb	r3, [r5, #0]
}
 8003e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8003e90:	2a0c      	cmp	r2, #12
 8003e92:	d1fa      	bne.n	8003e8a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e94:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e96:	4934      	ldr	r1, [pc, #208]	; (8003f68 <HAL_TIM_PWM_ConfigChannel+0x104>)
 8003e98:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e9a:	4834      	ldr	r0, [pc, #208]	; (8003f6c <HAL_TIM_PWM_ConfigChannel+0x108>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003ea0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003ea2:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003ea4:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea6:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea8:	6820      	ldr	r0, [r4, #0]
 8003eaa:	0207      	lsls	r7, r0, #8
  tmpccer &= ~TIM_CCER_CC4P;
 8003eac:	4830      	ldr	r0, [pc, #192]	; (8003f70 <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eae:	4339      	orrs	r1, r7
  tmpccer &= ~TIM_CCER_CC4P;
 8003eb0:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eb2:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8003eb4:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eb6:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8003eb8:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003eba:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ebc:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 8003ebe:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003ec0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ec2:	2280      	movs	r2, #128	; 0x80
 8003ec4:	69d9      	ldr	r1, [r3, #28]
 8003ec6:	0112      	lsls	r2, r2, #4
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ecc:	69da      	ldr	r2, [r3, #28]
 8003ece:	4929      	ldr	r1, [pc, #164]	; (8003f74 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ed4:	68e2      	ldr	r2, [r4, #12]
 8003ed6:	69d9      	ldr	r1, [r3, #28]
 8003ed8:	0212      	lsls	r2, r2, #8
 8003eda:	e041      	b.n	8003f60 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003edc:	6838      	ldr	r0, [r7, #0]
 8003ede:	f7ff fe83 	bl	8003be8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	6999      	ldr	r1, [r3, #24]
 8003ee8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eea:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003efc:	2000      	movs	r0, #0
      break;
 8003efe:	e7c4      	b.n	8003e8a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f00:	6838      	ldr	r0, [r7, #0]
 8003f02:	f7ff fe87 	bl	8003c14 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f06:	2280      	movs	r2, #128	; 0x80
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	0112      	lsls	r2, r2, #4
 8003f0c:	6999      	ldr	r1, [r3, #24]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	4917      	ldr	r1, [pc, #92]	; (8003f74 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8003f16:	400a      	ands	r2, r1
 8003f18:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f1a:	68e2      	ldr	r2, [r4, #12]
 8003f1c:	6999      	ldr	r1, [r3, #24]
 8003f1e:	0212      	lsls	r2, r2, #8
 8003f20:	e7ea      	b.n	8003ef8 <HAL_TIM_PWM_ConfigChannel+0x94>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f22:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f24:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f26:	4914      	ldr	r1, [pc, #80]	; (8003f78 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8003f28:	6a1a      	ldr	r2, [r3, #32]
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003f30:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f32:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f34:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 8003f36:	6820      	ldr	r0, [r4, #0]
 8003f38:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8003f3a:	4810      	ldr	r0, [pc, #64]	; (8003f7c <HAL_TIM_PWM_ConfigChannel+0x118>)
 8003f3c:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f3e:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8003f40:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003f42:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003f44:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f46:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 8003f48:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f4a:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f4c:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8003f4e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	4316      	orrs	r6, r2
 8003f54:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	438a      	bics	r2, r1
 8003f5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f60:	430a      	orrs	r2, r1
 8003f62:	61da      	str	r2, [r3, #28]
 8003f64:	e7ca      	b.n	8003efc <HAL_TIM_PWM_ConfigChannel+0x98>
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	ffffefff 	.word	0xffffefff
 8003f6c:	ffff8cff 	.word	0xffff8cff
 8003f70:	ffffdfff 	.word	0xffffdfff
 8003f74:	fffffbff 	.word	0xfffffbff
 8003f78:	fffffeff 	.word	0xfffffeff
 8003f7c:	fffffdff 	.word	0xfffffdff

08003f80 <HAL_TIM_ConfigClockSource>:
{
 8003f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003f82:	0005      	movs	r5, r0
 8003f84:	2202      	movs	r2, #2
 8003f86:	3538      	adds	r5, #56	; 0x38
 8003f88:	782c      	ldrb	r4, [r5, #0]
{
 8003f8a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003f8c:	0010      	movs	r0, r2
 8003f8e:	2c01      	cmp	r4, #1
 8003f90:	d01d      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f92:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8003f94:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003f96:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 8003f98:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9a:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003f9c:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9e:	4849      	ldr	r0, [pc, #292]	; (80040c4 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr = htim->Instance->SMCR;
 8003fa0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa2:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8003fa4:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8003fa6:	680a      	ldr	r2, [r1, #0]
 8003fa8:	2a60      	cmp	r2, #96	; 0x60
 8003faa:	d05d      	beq.n	8004068 <HAL_TIM_ConfigClockSource+0xe8>
 8003fac:	d830      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x90>
 8003fae:	2a40      	cmp	r2, #64	; 0x40
 8003fb0:	d100      	bne.n	8003fb4 <HAL_TIM_ConfigClockSource+0x34>
 8003fb2:	e071      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x118>
 8003fb4:	d814      	bhi.n	8003fe0 <HAL_TIM_ConfigClockSource+0x60>
 8003fb6:	2a20      	cmp	r2, #32
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_TIM_ConfigClockSource+0x54>
 8003fba:	d809      	bhi.n	8003fd0 <HAL_TIM_ConfigClockSource+0x50>
 8003fbc:	2110      	movs	r1, #16
 8003fbe:	0010      	movs	r0, r2
 8003fc0:	4388      	bics	r0, r1
 8003fc2:	d007      	beq.n	8003fd4 <HAL_TIM_ConfigClockSource+0x54>
 8003fc4:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	702b      	strb	r3, [r5, #0]
}
 8003fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8003fd0:	2a30      	cmp	r2, #48	; 0x30
 8003fd2:	d1f7      	bne.n	8003fc4 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd4:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003fd6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd8:	4381      	bics	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	2107      	movs	r1, #7
 8003fde:	e030      	b.n	8004042 <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8003fe0:	2a50      	cmp	r2, #80	; 0x50
 8003fe2:	d1ef      	bne.n	8003fc4 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe4:	6848      	ldr	r0, [r1, #4]
 8003fe6:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8003fe8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fea:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fec:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fee:	43a7      	bics	r7, r4
 8003ff0:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff2:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003ff4:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff6:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ff8:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ffa:	240a      	movs	r4, #10
 8003ffc:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003ffe:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004000:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004002:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004004:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004006:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004008:	438a      	bics	r2, r1
 800400a:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800400c:	2257      	movs	r2, #87	; 0x57
 800400e:	e018      	b.n	8004042 <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8004010:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8004012:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8004014:	017f      	lsls	r7, r7, #5
 8004016:	42ba      	cmp	r2, r7
 8004018:	d0d5      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0x46>
 800401a:	2080      	movs	r0, #128	; 0x80
 800401c:	0180      	lsls	r0, r0, #6
 800401e:	4282      	cmp	r2, r0
 8004020:	d013      	beq.n	800404a <HAL_TIM_ConfigClockSource+0xca>
 8004022:	0020      	movs	r0, r4
 8004024:	2a70      	cmp	r2, #112	; 0x70
 8004026:	d1ce      	bne.n	8003fc6 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8004028:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402a:	4827      	ldr	r0, [pc, #156]	; (80040c8 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800402c:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402e:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004030:	688a      	ldr	r2, [r1, #8]
 8004032:	68c9      	ldr	r1, [r1, #12]
 8004034:	4322      	orrs	r2, r4
 8004036:	0209      	lsls	r1, r1, #8
 8004038:	430a      	orrs	r2, r1
 800403a:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800403c:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800403e:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8004040:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004042:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	e7bd      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 800404a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800404c:	481e      	ldr	r0, [pc, #120]	; (80040c8 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800404e:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004050:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004052:	688a      	ldr	r2, [r1, #8]
 8004054:	68c9      	ldr	r1, [r1, #12]
 8004056:	4322      	orrs	r2, r4
 8004058:	0209      	lsls	r1, r1, #8
 800405a:	430a      	orrs	r2, r1
 800405c:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800405e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	6899      	ldr	r1, [r3, #8]
 8004064:	01d2      	lsls	r2, r2, #7
 8004066:	e7ec      	b.n	8004042 <HAL_TIM_ConfigClockSource+0xc2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004068:	2410      	movs	r4, #16
 800406a:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800406c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406e:	43a0      	bics	r0, r4
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004070:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004072:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004074:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004076:	4f15      	ldr	r7, [pc, #84]	; (80040cc <HAL_TIM_ConfigClockSource+0x14c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004078:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407a:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800407c:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800407e:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8004080:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004082:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004084:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004086:	43a0      	bics	r0, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8004088:	0112      	lsls	r2, r2, #4
 800408a:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 800408c:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800408e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004090:	438a      	bics	r2, r1
 8004092:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004094:	2267      	movs	r2, #103	; 0x67
 8004096:	e7d4      	b.n	8004042 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004098:	6848      	ldr	r0, [r1, #4]
 800409a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800409c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409e:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a0:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a2:	43a7      	bics	r7, r4
 80040a4:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a6:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80040a8:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040aa:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ac:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ae:	240a      	movs	r4, #10
 80040b0:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80040b2:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80040b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b6:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b8:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80040ba:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040bc:	438a      	bics	r2, r1
 80040be:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040c0:	2247      	movs	r2, #71	; 0x47
 80040c2:	e7be      	b.n	8004042 <HAL_TIM_ConfigClockSource+0xc2>
 80040c4:	ffff0088 	.word	0xffff0088
 80040c8:	ffff00ff 	.word	0xffff00ff
 80040cc:	ffff0fff 	.word	0xffff0fff

080040d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80040d0:	4770      	bx	lr

080040d2 <TIM_DMADelayPulseCplt>:
{
 80040d2:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040d6:	6a22      	ldr	r2, [r4, #32]
 80040d8:	4282      	cmp	r2, r0
 80040da:	d10d      	bne.n	80040f8 <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040dc:	2301      	movs	r3, #1
 80040de:	7623      	strb	r3, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 80040e0:	69d2      	ldr	r2, [r2, #28]
 80040e2:	2a00      	cmp	r2, #0
 80040e4:	d102      	bne.n	80040ec <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040e6:	0022      	movs	r2, r4
 80040e8:	323a      	adds	r2, #58	; 0x3a
 80040ea:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ec:	0020      	movs	r0, r4
 80040ee:	f7ff ffef 	bl	80040d0 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f2:	2300      	movs	r3, #0
 80040f4:	7623      	strb	r3, [r4, #24]
}
 80040f6:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040fa:	4283      	cmp	r3, r0
 80040fc:	d109      	bne.n	8004112 <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040fe:	2202      	movs	r2, #2
 8004100:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f1      	bne.n	80040ec <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004108:	0023      	movs	r3, r4
 800410a:	3a01      	subs	r2, #1
 800410c:	333b      	adds	r3, #59	; 0x3b
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	701a      	strb	r2, [r3, #0]
 8004110:	e7ec      	b.n	80040ec <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004112:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004114:	4283      	cmp	r3, r0
 8004116:	d108      	bne.n	800412a <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004118:	2204      	movs	r2, #4
 800411a:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e4      	bne.n	80040ec <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004122:	0023      	movs	r3, r4
 8004124:	3a03      	subs	r2, #3
 8004126:	333c      	adds	r3, #60	; 0x3c
 8004128:	e7f1      	b.n	800410e <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800412a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800412c:	4283      	cmp	r3, r0
 800412e:	d1dd      	bne.n	80040ec <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004130:	2208      	movs	r2, #8
 8004132:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1d8      	bne.n	80040ec <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800413a:	0023      	movs	r3, r4
 800413c:	3a07      	subs	r2, #7
 800413e:	333d      	adds	r3, #61	; 0x3d
 8004140:	e7e5      	b.n	800410e <TIM_DMADelayPulseCplt+0x3c>

08004142 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8004142:	4770      	bx	lr

08004144 <TIM_DMADelayPulseHalfCplt>:
{
 8004144:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004146:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004148:	6a23      	ldr	r3, [r4, #32]
 800414a:	4283      	cmp	r3, r0
 800414c:	d107      	bne.n	800415e <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800414e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004150:	7623      	strb	r3, [r4, #24]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004152:	0020      	movs	r0, r4
 8004154:	f7ff fff5 	bl	8004142 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004158:	2300      	movs	r3, #0
 800415a:	7623      	strb	r3, [r4, #24]
}
 800415c:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800415e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004160:	4283      	cmp	r3, r0
 8004162:	d101      	bne.n	8004168 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004164:	2302      	movs	r3, #2
 8004166:	e7f3      	b.n	8004150 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004168:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800416a:	4283      	cmp	r3, r0
 800416c:	d101      	bne.n	8004172 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800416e:	2304      	movs	r3, #4
 8004170:	e7ee      	b.n	8004150 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004172:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004174:	4283      	cmp	r3, r0
 8004176:	d1ec      	bne.n	8004152 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004178:	2308      	movs	r3, #8
 800417a:	e7e9      	b.n	8004150 <TIM_DMADelayPulseHalfCplt+0xc>

0800417c <HAL_TIM_ErrorCallback>:
 800417c:	4770      	bx	lr

0800417e <TIM_DMAError>:
{
 800417e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004180:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004182:	6a23      	ldr	r3, [r4, #32]
 8004184:	4283      	cmp	r3, r0
 8004186:	d105      	bne.n	8004194 <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004188:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800418a:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418c:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800418e:	323a      	adds	r2, #58	; 0x3a
    htim->State = HAL_TIM_STATE_READY;
 8004190:	7013      	strb	r3, [r2, #0]
 8004192:	e008      	b.n	80041a6 <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004196:	4283      	cmp	r3, r0
 8004198:	d10b      	bne.n	80041b2 <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419a:	2302      	movs	r3, #2
 800419c:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800419e:	0023      	movs	r3, r4
 80041a0:	2201      	movs	r2, #1
 80041a2:	333b      	adds	r3, #59	; 0x3b
 80041a4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 80041a6:	0020      	movs	r0, r4
 80041a8:	f7ff ffe8 	bl	800417c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ac:	2300      	movs	r3, #0
 80041ae:	7623      	strb	r3, [r4, #24]
}
 80041b0:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80041b4:	2301      	movs	r3, #1
 80041b6:	4282      	cmp	r2, r0
 80041b8:	d104      	bne.n	80041c4 <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ba:	2204      	movs	r2, #4
 80041bc:	7622      	strb	r2, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041be:	0022      	movs	r2, r4
 80041c0:	323c      	adds	r2, #60	; 0x3c
 80041c2:	e7e5      	b.n	8004190 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80041c6:	4282      	cmp	r2, r0
 80041c8:	d104      	bne.n	80041d4 <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ca:	2208      	movs	r2, #8
 80041cc:	7622      	strb	r2, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041ce:	0022      	movs	r2, r4
 80041d0:	323d      	adds	r2, #61	; 0x3d
 80041d2:	e7dd      	b.n	8004190 <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 80041d4:	0022      	movs	r2, r4
 80041d6:	3239      	adds	r2, #57	; 0x39
 80041d8:	e7da      	b.n	8004190 <TIM_DMAError+0x12>
	...

080041dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041dc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041de:	0004      	movs	r4, r0
 80041e0:	2202      	movs	r2, #2
 80041e2:	3438      	adds	r4, #56	; 0x38
 80041e4:	7825      	ldrb	r5, [r4, #0]
{
 80041e6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80041e8:	0010      	movs	r0, r2
 80041ea:	2d01      	cmp	r5, #1
 80041ec:	d020      	beq.n	8004230 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ee:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f0:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80041f2:	3539      	adds	r5, #57	; 0x39
 80041f4:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80041fa:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80041fc:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041fe:	680e      	ldr	r6, [r1, #0]
 8004200:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004202:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004204:	2080      	movs	r0, #128	; 0x80
 8004206:	05c0      	lsls	r0, r0, #23
 8004208:	4283      	cmp	r3, r0
 800420a:	d008      	beq.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800420c:	4809      	ldr	r0, [pc, #36]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800420e:	4283      	cmp	r3, r0
 8004210:	d005      	beq.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004212:	4809      	ldr	r0, [pc, #36]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8004214:	4283      	cmp	r3, r0
 8004216:	d002      	beq.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004218:	4808      	ldr	r0, [pc, #32]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800421a:	4283      	cmp	r3, r0
 800421c:	d104      	bne.n	8004228 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800421e:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004220:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004222:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004224:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004228:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800422a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800422c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800422e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004230:	bd70      	pop	{r4, r5, r6, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	40000400 	.word	0x40000400
 8004238:	40010800 	.word	0x40010800
 800423c:	40011400 	.word	0x40011400

08004240 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	if (SD_ff_hw.initialized)
 8004240:	4b02      	ldr	r3, [pc, #8]	; (800424c <disk_status+0xc>)
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	4243      	negs	r3, r0
 8004246:	4158      	adcs	r0, r3
 8004248:	b2c0      	uxtb	r0, r0
		return 0;

	return STA_NOINIT;
}
 800424a:	4770      	bx	lr
 800424c:	20000ab4 	.word	0x20000ab4

08004250 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004250:	b510      	push	{r4, lr}
	if (hwif_init(&SD_ff_hw) == 0)
 8004252:	4803      	ldr	r0, [pc, #12]	; (8004260 <disk_initialize+0x10>)
 8004254:	f000 fa7e 	bl	8004754 <hwif_init>
 8004258:	1e43      	subs	r3, r0, #1
 800425a:	4198      	sbcs	r0, r3
		return 0;

	return STA_NOINIT;
}
 800425c:	b2c0      	uxtb	r0, r0
 800425e:	bd10      	pop	{r4, pc}
 8004260:	20000ab4 	.word	0x20000ab4

08004264 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	0014      	movs	r4, r2
 8004268:	000d      	movs	r5, r1
 800426a:	189e      	adds	r6, r3, r2
	int i;

	for (i=0; i<count; i++)
 800426c:	42b4      	cmp	r4, r6
 800426e:	d101      	bne.n	8004274 <disk_read+0x10>
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
			return RES_ERROR;

	return RES_OK;
 8004270:	2000      	movs	r0, #0
}
 8004272:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
 8004274:	002a      	movs	r2, r5
 8004276:	0021      	movs	r1, r4
 8004278:	4805      	ldr	r0, [pc, #20]	; (8004290 <disk_read+0x2c>)
 800427a:	f000 fb15 	bl	80048a8 <sd_read>
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	3401      	adds	r4, #1
 8004284:	18ed      	adds	r5, r5, r3
 8004286:	2800      	cmp	r0, #0
 8004288:	d0f0      	beq.n	800426c <disk_read+0x8>
			return RES_ERROR;
 800428a:	2001      	movs	r0, #1
 800428c:	e7f1      	b.n	8004272 <disk_read+0xe>
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	20000ab4 	.word	0x20000ab4

08004294 <crc7_one>:
	int i;
	const uint8_t g = 0x89;
	t ^= data;
	for (i=0; i<8; i++) {
		if (t & 0x80)
			t ^= g;
 8004294:	2277      	movs	r2, #119	; 0x77
	t ^= data;
 8004296:	2308      	movs	r3, #8
 8004298:	4048      	eors	r0, r1
			t ^= g;
 800429a:	4252      	negs	r2, r2
		if (t & 0x80)
 800429c:	b241      	sxtb	r1, r0
 800429e:	2900      	cmp	r1, #0
 80042a0:	da01      	bge.n	80042a6 <crc7_one+0x12>
			t ^= g;
 80042a2:	4050      	eors	r0, r2
 80042a4:	b2c0      	uxtb	r0, r0
		t <<= 1;
 80042a6:	0040      	lsls	r0, r0, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b2c0      	uxtb	r0, r0
	for (i=0; i<8; i++) {
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f5      	bne.n	800429c <crc7_one+0x8>
	}
	return t;
}
 80042b0:	4770      	bx	lr
	...

080042b4 <spi_txrx>:
{
 80042b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t out = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	466a      	mov	r2, sp
{
 80042ba:	210f      	movs	r1, #15
	uint8_t out = 0;
 80042bc:	75d3      	strb	r3, [r2, #23]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 80042be:	2217      	movs	r2, #23
{
 80042c0:	4469      	add	r1, sp
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 80042c2:	3b01      	subs	r3, #1
{
 80042c4:	7008      	strb	r0, [r1, #0]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 80042c6:	446a      	add	r2, sp
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	4804      	ldr	r0, [pc, #16]	; (80042dc <spi_txrx+0x28>)
 80042cc:	3302      	adds	r3, #2
 80042ce:	f7ff f9d5 	bl	800367c <HAL_SPI_TransmitReceive>
	return out;
 80042d2:	466b      	mov	r3, sp
 80042d4:	7dd8      	ldrb	r0, [r3, #23]
}
 80042d6:	b007      	add	sp, #28
 80042d8:	bd00      	pop	{pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	200001a0 	.word	0x200001a0

080042e0 <sd_cmd>:


/*** sd functions - on top of spi code ***/

static void sd_cmd(uint8_t cmd, uint32_t arg)
{
 80042e0:	b570      	push	{r4, r5, r6, lr}
	uint8_t crc = 0;
	spi_txrx(0x40 | cmd);
 80042e2:	2540      	movs	r5, #64	; 0x40
 80042e4:	4305      	orrs	r5, r0
 80042e6:	0028      	movs	r0, r5
{
 80042e8:	000c      	movs	r4, r1
	spi_txrx(0x40 | cmd);
 80042ea:	f7ff ffe3 	bl	80042b4 <spi_txrx>
	crc = crc7_one(crc, 0x40 | cmd);
 80042ee:	0029      	movs	r1, r5
 80042f0:	2000      	movs	r0, #0
 80042f2:	f7ff ffcf 	bl	8004294 <crc7_one>
 80042f6:	0005      	movs	r5, r0
	spi_txrx(arg >> 24);
 80042f8:	0e26      	lsrs	r6, r4, #24
 80042fa:	0030      	movs	r0, r6
 80042fc:	f7ff ffda 	bl	80042b4 <spi_txrx>
	crc = crc7_one(crc, arg >> 24);
 8004300:	0031      	movs	r1, r6
 8004302:	0028      	movs	r0, r5
 8004304:	f7ff ffc6 	bl	8004294 <crc7_one>
 8004308:	0006      	movs	r6, r0
	spi_txrx(arg >> 16);
 800430a:	0c25      	lsrs	r5, r4, #16
 800430c:	b2ed      	uxtb	r5, r5
 800430e:	0028      	movs	r0, r5
 8004310:	f7ff ffd0 	bl	80042b4 <spi_txrx>
	crc = crc7_one(crc, arg >> 16);
 8004314:	0029      	movs	r1, r5
 8004316:	0030      	movs	r0, r6
 8004318:	f7ff ffbc 	bl	8004294 <crc7_one>
 800431c:	0006      	movs	r6, r0
	spi_txrx(arg >> 8);
 800431e:	0a25      	lsrs	r5, r4, #8
 8004320:	b2ed      	uxtb	r5, r5
 8004322:	0028      	movs	r0, r5
 8004324:	f7ff ffc6 	bl	80042b4 <spi_txrx>
	crc = crc7_one(crc, arg >> 8);
 8004328:	0029      	movs	r1, r5
 800432a:	0030      	movs	r0, r6
 800432c:	f7ff ffb2 	bl	8004294 <crc7_one>
 8004330:	0005      	movs	r5, r0
	spi_txrx(arg);
 8004332:	b2e4      	uxtb	r4, r4
 8004334:	0020      	movs	r0, r4
 8004336:	f7ff ffbd 	bl	80042b4 <spi_txrx>
	crc = crc7_one(crc, arg);
 800433a:	0021      	movs	r1, r4
 800433c:	0028      	movs	r0, r5
 800433e:	f7ff ffa9 	bl	8004294 <crc7_one>
	//spi_txrx(0x95);
	spi_txrx(crc | 0x1);	/* crc7, for cmd0 */
 8004342:	2301      	movs	r3, #1
 8004344:	4318      	orrs	r0, r3
 8004346:	b2c0      	uxtb	r0, r0
 8004348:	f7ff ffb4 	bl	80042b4 <spi_txrx>
}
 800434c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004350 <sd_get_r1>:

static uint8_t sd_get_r1()
{
 8004350:	b510      	push	{r4, lr}
	int tries = 1000;
	uint8_t r;

	while (tries--) {
 8004352:	4c05      	ldr	r4, [pc, #20]	; (8004368 <sd_get_r1+0x18>)
 8004354:	3c01      	subs	r4, #1
		r = spi_txrx(0xff);
 8004356:	20ff      	movs	r0, #255	; 0xff
	while (tries--) {
 8004358:	2c00      	cmp	r4, #0
 800435a:	d003      	beq.n	8004364 <sd_get_r1+0x14>
		r = spi_txrx(0xff);
 800435c:	f7ff ffaa 	bl	80042b4 <spi_txrx>
		if ((r & 0x80) == 0)
 8004360:	0603      	lsls	r3, r0, #24
 8004362:	d4f7      	bmi.n	8004354 <sd_get_r1+0x4>
			return r;
	}
	return 0xff;
}
 8004364:	bd10      	pop	{r4, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	000003e9 	.word	0x000003e9

0800436c <sd_nec>:


/* Nec (=Ncr? which is limited to [0,8]) dummy bytes before lowering CS,
 * as described in sandisk doc, 5.4. */
static void sd_nec()
{
 800436c:	b510      	push	{r4, lr}
 800436e:	2408      	movs	r4, #8
	int i;
	for (i=0; i<8; i++)
		spi_txrx(0xff);
 8004370:	20ff      	movs	r0, #255	; 0xff
 8004372:	3c01      	subs	r4, #1
 8004374:	f7ff ff9e 	bl	80042b4 <spi_txrx>
	for (i=0; i<8; i++)
 8004378:	2c00      	cmp	r4, #0
 800437a:	d1f9      	bne.n	8004370 <sd_nec+0x4>
}
 800437c:	bd10      	pop	{r4, pc}

0800437e <sd_get_r7>:
{
 800437e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004380:	0006      	movs	r6, r0
	r = sd_get_r1();
 8004382:	f7ff ffe5 	bl	8004350 <sd_get_r1>
 8004386:	0005      	movs	r5, r0
	if (r != 0x01)
 8004388:	2801      	cmp	r0, #1
 800438a:	d113      	bne.n	80043b4 <sd_get_r7+0x36>
	r = spi_txrx(0xff) << 24;
 800438c:	20ff      	movs	r0, #255	; 0xff
 800438e:	f7ff ff91 	bl	80042b4 <spi_txrx>
 8004392:	0604      	lsls	r4, r0, #24
	r |= spi_txrx(0xff) << 16;
 8004394:	20ff      	movs	r0, #255	; 0xff
 8004396:	f7ff ff8d 	bl	80042b4 <spi_txrx>
 800439a:	0407      	lsls	r7, r0, #16
	r |= spi_txrx(0xff) << 8;
 800439c:	20ff      	movs	r0, #255	; 0xff
 800439e:	f7ff ff89 	bl	80042b4 <spi_txrx>
	r |= spi_txrx(0xff) << 16;
 80043a2:	4327      	orrs	r7, r4
	r |= spi_txrx(0xff) << 8;
 80043a4:	0004      	movs	r4, r0
	r |= spi_txrx(0xff);
 80043a6:	20ff      	movs	r0, #255	; 0xff
 80043a8:	f7ff ff84 	bl	80042b4 <spi_txrx>
	r |= spi_txrx(0xff) << 8;
 80043ac:	0224      	lsls	r4, r4, #8
 80043ae:	4307      	orrs	r7, r0
	r |= spi_txrx(0xff);
 80043b0:	433c      	orrs	r4, r7
	*r7 = r;
 80043b2:	6034      	str	r4, [r6, #0]
}
 80043b4:	0028      	movs	r0, r5
 80043b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080043b8 <sd_read_status.isra.0>:

static int sd_read_status(hwif *hw)
{
	uint16_t r2;

	spi_cs_low();
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	20a0      	movs	r0, #160	; 0xa0
static int sd_read_status(hwif *hw)
 80043bc:	b570      	push	{r4, r5, r6, lr}
	spi_cs_low();
 80043be:	2200      	movs	r2, #0
 80043c0:	0209      	lsls	r1, r1, #8
 80043c2:	05c0      	lsls	r0, r0, #23
 80043c4:	f7fe fc1e 	bl	8002c04 <HAL_GPIO_WritePin>
	sd_cmd(13, 0);
 80043c8:	2100      	movs	r1, #0
 80043ca:	200d      	movs	r0, #13
 80043cc:	f7ff ff88 	bl	80042e0 <sd_cmd>
	while (tries--) {
 80043d0:	4d0b      	ldr	r5, [pc, #44]	; (8004400 <sd_read_status.isra.0+0x48>)
 80043d2:	3d01      	subs	r5, #1
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	d10a      	bne.n	80043ee <sd_read_status.isra.0+0x36>
	r2 = sd_get_r2();
	sd_nec();
 80043d8:	f7ff ffc8 	bl	800436c <sd_nec>
	spi_cs_high();
 80043dc:	2180      	movs	r1, #128	; 0x80
 80043de:	20a0      	movs	r0, #160	; 0xa0
 80043e0:	2201      	movs	r2, #1
 80043e2:	0209      	lsls	r1, r1, #8
 80043e4:	05c0      	lsls	r0, r0, #23
 80043e6:	f7fe fc0d 	bl	8002c04 <HAL_GPIO_WritePin>
	if (r2 & 0x8000)
		return -1;
	if (r2)

	return 0;
}
 80043ea:	2000      	movs	r0, #0
 80043ec:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 80043ee:	20ff      	movs	r0, #255	; 0xff
 80043f0:	f7ff ff60 	bl	80042b4 <spi_txrx>
		if ((r & 0x80) == 0)
 80043f4:	0603      	lsls	r3, r0, #24
 80043f6:	d4ec      	bmi.n	80043d2 <sd_read_status.isra.0+0x1a>
	r = r<<8 | spi_txrx(0xff);
 80043f8:	20ff      	movs	r0, #255	; 0xff
 80043fa:	f7ff ff5b 	bl	80042b4 <spi_txrx>
	return r;
 80043fe:	e7eb      	b.n	80043d8 <sd_read_status.isra.0+0x20>
 8004400:	000003e9 	.word	0x000003e9

08004404 <sd_get_data.isra.0>:

/* 0xfe marks data start, then len bytes of data and crc16 */
static int sd_get_data(hwif *hw, uint8_t *buf, int len)
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	0005      	movs	r5, r0
 8004408:	000c      	movs	r4, r1
 800440a:	4e0c      	ldr	r6, [pc, #48]	; (800443c <sd_get_data.isra.0+0x38>)
	uint8_t r;
	uint16_t _crc16;
	uint16_t calc_crc;
	int i;

	while (tries--) {
 800440c:	3e01      	subs	r6, #1
 800440e:	2e00      	cmp	r6, #0
 8004410:	d102      	bne.n	8004418 <sd_get_data.isra.0+0x14>
		r = spi_txrx(0xff);
		if (r == 0xfe)
			break;
	}
	if (tries < 0)
		return -1;
 8004412:	2001      	movs	r0, #1
 8004414:	4240      	negs	r0, r0
	//if (_crc16 != calc_crc) {
	//	return -1;
	//}

	return 0;
}
 8004416:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 8004418:	20ff      	movs	r0, #255	; 0xff
 800441a:	f7ff ff4b 	bl	80042b4 <spi_txrx>
		if (r == 0xfe)
 800441e:	28fe      	cmp	r0, #254	; 0xfe
 8004420:	d1f4      	bne.n	800440c <sd_get_data.isra.0+0x8>
	dma_complete = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	4e06      	ldr	r6, [pc, #24]	; (8004440 <sd_get_data.isra.0+0x3c>)
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 8004426:	0029      	movs	r1, r5
 8004428:	4806      	ldr	r0, [pc, #24]	; (8004444 <sd_get_data.isra.0+0x40>)
 800442a:	b2a2      	uxth	r2, r4
	dma_complete = 0;
 800442c:	7033      	strb	r3, [r6, #0]
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 800442e:	f7ff faa5 	bl	800397c <HAL_SPI_Receive_DMA>
	while (dma_complete == 0);
 8004432:	7833      	ldrb	r3, [r6, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0fc      	beq.n	8004432 <sd_get_data.isra.0+0x2e>
 8004438:	2000      	movs	r0, #0
 800443a:	e7ec      	b.n	8004416 <sd_get_data.isra.0+0x12>
 800443c:	00004e21 	.word	0x00004e21
 8004440:	20000a98 	.word	0x20000a98
 8004444:	200001a0 	.word	0x200001a0

08004448 <sd_readsector.isra.0>:

	return 0;
}


static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	0005      	movs	r5, r0
 800444c:	000c      	movs	r4, r1
{
	int r;

	spi_cs_low();
 800444e:	20a0      	movs	r0, #160	; 0xa0
 8004450:	2180      	movs	r1, #128	; 0x80
static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
 8004452:	0016      	movs	r6, r2
	spi_cs_low();
 8004454:	0209      	lsls	r1, r1, #8
 8004456:	2200      	movs	r2, #0
 8004458:	05c0      	lsls	r0, r0, #23
 800445a:	f7fe fbd3 	bl	8002c04 <HAL_GPIO_WritePin>
	if (hw->capabilities & CAP_SDHC)
 800445e:	682b      	ldr	r3, [r5, #0]
		sd_cmd(17, address); /* read single block */
 8004460:	0021      	movs	r1, r4
	if (hw->capabilities & CAP_SDHC)
 8004462:	079b      	lsls	r3, r3, #30
 8004464:	d400      	bmi.n	8004468 <sd_readsector.isra.0+0x20>
	else
		sd_cmd(17, address*512); /* read single block */
 8004466:	0261      	lsls	r1, r4, #9
 8004468:	2011      	movs	r0, #17
 800446a:	f7ff ff39 	bl	80042e0 <sd_cmd>

	r = sd_get_r1();
 800446e:	f7ff ff6f 	bl	8004350 <sd_get_r1>
	if (r == 0xff) {
 8004472:	28ff      	cmp	r0, #255	; 0xff
 8004474:	d109      	bne.n	800448a <sd_readsector.isra.0+0x42>
		spi_cs_high();
 8004476:	2180      	movs	r1, #128	; 0x80
 8004478:	20a0      	movs	r0, #160	; 0xa0
 800447a:	2201      	movs	r2, #1
 800447c:	05c0      	lsls	r0, r0, #23
 800447e:	0209      	lsls	r1, r1, #8
 8004480:	f7fe fbc0 	bl	8002c04 <HAL_GPIO_WritePin>
		r = -1;
 8004484:	2001      	movs	r0, #1

	r = sd_get_data(hw, buf, 512);
	sd_nec();
	spi_cs_high();
	if (r == -1) {
		r = -3;
 8004486:	4240      	negs	r0, r0
	}

	return 0;
 fail:
	return r;
}
 8004488:	bd70      	pop	{r4, r5, r6, pc}
	if (r & 0xfe) {
 800448a:	2501      	movs	r5, #1
 800448c:	43a8      	bics	r0, r5
 800448e:	b2c4      	uxtb	r4, r0
 8004490:	2c00      	cmp	r4, #0
 8004492:	d008      	beq.n	80044a6 <sd_readsector.isra.0+0x5e>
		spi_cs_high();
 8004494:	2180      	movs	r1, #128	; 0x80
 8004496:	20a0      	movs	r0, #160	; 0xa0
 8004498:	002a      	movs	r2, r5
 800449a:	05c0      	lsls	r0, r0, #23
 800449c:	0209      	lsls	r1, r1, #8
 800449e:	f7fe fbb1 	bl	8002c04 <HAL_GPIO_WritePin>
		r = -2;
 80044a2:	2002      	movs	r0, #2
 80044a4:	e7ef      	b.n	8004486 <sd_readsector.isra.0+0x3e>
	r = sd_get_data(hw, buf, 512);
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	0030      	movs	r0, r6
 80044aa:	0089      	lsls	r1, r1, #2
 80044ac:	f7ff ffaa 	bl	8004404 <sd_get_data.isra.0>
 80044b0:	0006      	movs	r6, r0
	sd_nec();
 80044b2:	f7ff ff5b 	bl	800436c <sd_nec>
	spi_cs_high();
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	20a0      	movs	r0, #160	; 0xa0
 80044ba:	002a      	movs	r2, r5
 80044bc:	05c0      	lsls	r0, r0, #23
 80044be:	0209      	lsls	r1, r1, #8
 80044c0:	f7fe fba0 	bl	8002c04 <HAL_GPIO_WritePin>
	return 0;
 80044c4:	0020      	movs	r0, r4
	if (r == -1) {
 80044c6:	1c73      	adds	r3, r6, #1
 80044c8:	d1de      	bne.n	8004488 <sd_readsector.isra.0+0x40>
		r = -3;
 80044ca:	2003      	movs	r0, #3
 80044cc:	e7db      	b.n	8004486 <sd_readsector.isra.0+0x3e>
	...

080044d0 <sd_init.isra.0>:
	hw->capabilities = 0;
 80044d0:	2300      	movs	r3, #0
static int sd_init(hwif *hw)
 80044d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	hw->capabilities = 0;
 80044d4:	6003      	str	r3, [r0, #0]
static int sd_init(hwif *hw)
 80044d6:	0004      	movs	r4, r0
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80044d8:	489c      	ldr	r0, [pc, #624]	; (800474c <sd_init.isra.0+0x27c>)
 80044da:	3328      	adds	r3, #40	; 0x28
static int sd_init(hwif *hw)
 80044dc:	b085      	sub	sp, #20
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80044de:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 80044e0:	f7ff f86a 	bl	80035b8 <HAL_SPI_Init>
	spi_cs_high();
 80044e4:	2180      	movs	r1, #128	; 0x80
 80044e6:	20a0      	movs	r0, #160	; 0xa0
 80044e8:	2201      	movs	r2, #1
 80044ea:	0209      	lsls	r1, r1, #8
 80044ec:	05c0      	lsls	r0, r0, #23
 80044ee:	f7fe fb89 	bl	8002c04 <HAL_GPIO_WritePin>
 80044f2:	260a      	movs	r6, #10
		spi_txrx(0xff);
 80044f4:	20ff      	movs	r0, #255	; 0xff
 80044f6:	3e01      	subs	r6, #1
 80044f8:	f7ff fedc 	bl	80042b4 <spi_txrx>
	for (i=0; i<10; i++)
 80044fc:	2e00      	cmp	r6, #0
 80044fe:	d1f9      	bne.n	80044f4 <sd_init.isra.0+0x24>
	spi_cs_low();
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	20a0      	movs	r0, #160	; 0xa0
 8004504:	0032      	movs	r2, r6
 8004506:	0209      	lsls	r1, r1, #8
 8004508:	05c0      	lsls	r0, r0, #23
 800450a:	f7fe fb7b 	bl	8002c04 <HAL_GPIO_WritePin>
	sd_cmd(0, 0);
 800450e:	0031      	movs	r1, r6
 8004510:	0030      	movs	r0, r6
 8004512:	f7ff fee5 	bl	80042e0 <sd_cmd>
	r = sd_get_r1();
 8004516:	f7ff ff1b 	bl	8004350 <sd_get_r1>
 800451a:	0005      	movs	r5, r0
	sd_nec();
 800451c:	f7ff ff26 	bl	800436c <sd_nec>
	spi_cs_high();
 8004520:	2180      	movs	r1, #128	; 0x80
 8004522:	20a0      	movs	r0, #160	; 0xa0
 8004524:	2201      	movs	r2, #1
 8004526:	0209      	lsls	r1, r1, #8
 8004528:	05c0      	lsls	r0, r0, #23
 800452a:	f7fe fb6b 	bl	8002c04 <HAL_GPIO_WritePin>
	if (r == 0xff)
 800452e:	2dff      	cmp	r5, #255	; 0xff
 8004530:	d104      	bne.n	800453c <sd_init.isra.0+0x6c>
	return -1;
 8004532:	2501      	movs	r5, #1
	return -2;
 8004534:	426d      	negs	r5, r5
}
 8004536:	0028      	movs	r0, r5
 8004538:	b005      	add	sp, #20
 800453a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (r != 0x01) {
 800453c:	2d01      	cmp	r5, #1
 800453e:	d001      	beq.n	8004544 <sd_init.isra.0+0x74>
	return -2;
 8004540:	2502      	movs	r5, #2
 8004542:	e7f7      	b.n	8004534 <sd_init.isra.0+0x64>
	spi_cs_low();
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	20a0      	movs	r0, #160	; 0xa0
 8004548:	0032      	movs	r2, r6
 800454a:	0209      	lsls	r1, r1, #8
 800454c:	05c0      	lsls	r0, r0, #23
 800454e:	f7fe fb59 	bl	8002c04 <HAL_GPIO_WritePin>
	sd_cmd(8, 0x1aa /* VHS = 1 */);
 8004552:	21d5      	movs	r1, #213	; 0xd5
 8004554:	2008      	movs	r0, #8
 8004556:	0049      	lsls	r1, r1, #1
 8004558:	f7ff fec2 	bl	80042e0 <sd_cmd>
	r = sd_get_r7(&r7);
 800455c:	a802      	add	r0, sp, #8
 800455e:	f7ff ff0e 	bl	800437e <sd_get_r7>
 8004562:	0007      	movs	r7, r0
	sd_nec();
 8004564:	f7ff ff02 	bl	800436c <sd_nec>
	spi_cs_high();
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	20a0      	movs	r0, #160	; 0xa0
 800456c:	002a      	movs	r2, r5
 800456e:	0209      	lsls	r1, r1, #8
 8004570:	05c0      	lsls	r0, r0, #23
 8004572:	f7fe fb47 	bl	8002c04 <HAL_GPIO_WritePin>
	hw->capabilities |= CAP_VER2_00;
 8004576:	002a      	movs	r2, r5
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	431a      	orrs	r2, r3
 800457c:	6022      	str	r2, [r4, #0]
	if (r == 0xff)
 800457e:	2fff      	cmp	r7, #255	; 0xff
 8004580:	d0d7      	beq.n	8004532 <sd_init.isra.0+0x62>
	if (r == 0x01)
 8004582:	2f01      	cmp	r7, #1
 8004584:	d003      	beq.n	800458e <sd_init.isra.0+0xbe>
	else if (r & 0x4) {
 8004586:	077a      	lsls	r2, r7, #29
 8004588:	d5da      	bpl.n	8004540 <sd_init.isra.0+0x70>
		hw->capabilities &= ~CAP_VER2_00;
 800458a:	43ab      	bics	r3, r5
 800458c:	6023      	str	r3, [r4, #0]
	spi_cs_low();
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	20a0      	movs	r0, #160	; 0xa0
 8004592:	2200      	movs	r2, #0
 8004594:	0209      	lsls	r1, r1, #8
 8004596:	05c0      	lsls	r0, r0, #23
 8004598:	f7fe fb34 	bl	8002c04 <HAL_GPIO_WritePin>
	sd_cmd(58, 0);
 800459c:	2100      	movs	r1, #0
 800459e:	203a      	movs	r0, #58	; 0x3a
 80045a0:	f7ff fe9e 	bl	80042e0 <sd_cmd>
	r = sd_get_r3(&r3);
 80045a4:	a803      	add	r0, sp, #12
 80045a6:	f7ff feea 	bl	800437e <sd_get_r7>
 80045aa:	0005      	movs	r5, r0
	sd_nec();
 80045ac:	f7ff fede 	bl	800436c <sd_nec>
	spi_cs_high();
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	20a0      	movs	r0, #160	; 0xa0
 80045b4:	2201      	movs	r2, #1
 80045b6:	0209      	lsls	r1, r1, #8
 80045b8:	05c0      	lsls	r0, r0, #23
 80045ba:	f7fe fb23 	bl	8002c04 <HAL_GPIO_WritePin>
	if (r == 0xff)
 80045be:	2dff      	cmp	r5, #255	; 0xff
 80045c0:	d0b7      	beq.n	8004532 <sd_init.isra.0+0x62>
	if (r != 0x01 && !(r & 0x4)) { /* allow it to not be implemented - old cards */
 80045c2:	2d01      	cmp	r5, #1
 80045c4:	d001      	beq.n	80045ca <sd_init.isra.0+0xfa>
 80045c6:	076b      	lsls	r3, r5, #29
 80045c8:	d5ba      	bpl.n	8004540 <sd_init.isra.0+0x70>
	if (hw->capabilities & CAP_VER2_00)
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	07db      	lsls	r3, r3, #31
 80045ce:	d501      	bpl.n	80045d4 <sd_init.isra.0+0x104>
		hcs = 1<<30;
 80045d0:	2680      	movs	r6, #128	; 0x80
 80045d2:	05f6      	lsls	r6, r6, #23
 80045d4:	4b5e      	ldr	r3, [pc, #376]	; (8004750 <sd_init.isra.0+0x280>)
 80045d6:	9301      	str	r3, [sp, #4]
		spi_cs_low();
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	20a0      	movs	r0, #160	; 0xa0
 80045dc:	2200      	movs	r2, #0
 80045de:	0209      	lsls	r1, r1, #8
 80045e0:	05c0      	lsls	r0, r0, #23
 80045e2:	f7fe fb0f 	bl	8002c04 <HAL_GPIO_WritePin>
		sd_cmd(55, 0);
 80045e6:	2100      	movs	r1, #0
 80045e8:	2037      	movs	r0, #55	; 0x37
 80045ea:	f7ff fe79 	bl	80042e0 <sd_cmd>
		r = sd_get_r1();
 80045ee:	f7ff feaf 	bl	8004350 <sd_get_r1>
 80045f2:	0005      	movs	r5, r0
		sd_nec();
 80045f4:	f7ff feba 	bl	800436c <sd_nec>
		spi_cs_high();
 80045f8:	2180      	movs	r1, #128	; 0x80
 80045fa:	20a0      	movs	r0, #160	; 0xa0
 80045fc:	2201      	movs	r2, #1
 80045fe:	0209      	lsls	r1, r1, #8
 8004600:	05c0      	lsls	r0, r0, #23
 8004602:	f7fe faff 	bl	8002c04 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8004606:	2dff      	cmp	r5, #255	; 0xff
 8004608:	d100      	bne.n	800460c <sd_init.isra.0+0x13c>
 800460a:	e792      	b.n	8004532 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 800460c:	2701      	movs	r7, #1
 800460e:	43bd      	bics	r5, r7
 8004610:	b2ea      	uxtb	r2, r5
 8004612:	2a00      	cmp	r2, #0
 8004614:	d194      	bne.n	8004540 <sd_init.isra.0+0x70>
		spi_cs_low();
 8004616:	2180      	movs	r1, #128	; 0x80
 8004618:	20a0      	movs	r0, #160	; 0xa0
 800461a:	0209      	lsls	r1, r1, #8
 800461c:	05c0      	lsls	r0, r0, #23
 800461e:	f7fe faf1 	bl	8002c04 <HAL_GPIO_WritePin>
		sd_cmd(41, hcs);
 8004622:	0031      	movs	r1, r6
 8004624:	2029      	movs	r0, #41	; 0x29
 8004626:	f7ff fe5b 	bl	80042e0 <sd_cmd>
		r = sd_get_r1();
 800462a:	f7ff fe91 	bl	8004350 <sd_get_r1>
 800462e:	0005      	movs	r5, r0
		sd_nec();
 8004630:	f7ff fe9c 	bl	800436c <sd_nec>
		spi_cs_high();
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	20a0      	movs	r0, #160	; 0xa0
 8004638:	003a      	movs	r2, r7
 800463a:	0209      	lsls	r1, r1, #8
 800463c:	05c0      	lsls	r0, r0, #23
 800463e:	f7fe fae1 	bl	8002c04 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8004642:	2dff      	cmp	r5, #255	; 0xff
 8004644:	d100      	bne.n	8004648 <sd_init.isra.0+0x178>
 8004646:	e774      	b.n	8004532 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 8004648:	002b      	movs	r3, r5
 800464a:	43bb      	bics	r3, r7
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d000      	beq.n	8004654 <sd_init.isra.0+0x184>
 8004652:	e775      	b.n	8004540 <sd_init.isra.0+0x70>
	} while (r != 0 && tries--);
 8004654:	2d00      	cmp	r5, #0
 8004656:	d023      	beq.n	80046a0 <sd_init.isra.0+0x1d0>
 8004658:	9b01      	ldr	r3, [sp, #4]
 800465a:	3b01      	subs	r3, #1
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1ba      	bne.n	80045d8 <sd_init.isra.0+0x108>
 8004662:	e76d      	b.n	8004540 <sd_init.isra.0+0x70>
		spi_cs_low();
 8004664:	2180      	movs	r1, #128	; 0x80
 8004666:	20a0      	movs	r0, #160	; 0xa0
 8004668:	0209      	lsls	r1, r1, #8
 800466a:	05c0      	lsls	r0, r0, #23
 800466c:	f7fe faca 	bl	8002c04 <HAL_GPIO_WritePin>
		sd_cmd(16, 512);
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	2010      	movs	r0, #16
 8004674:	0089      	lsls	r1, r1, #2
 8004676:	f7ff fe33 	bl	80042e0 <sd_cmd>
		r = sd_get_r1();
 800467a:	f7ff fe69 	bl	8004350 <sd_get_r1>
 800467e:	0004      	movs	r4, r0
		sd_nec();
 8004680:	f7ff fe74 	bl	800436c <sd_nec>
		spi_cs_high();
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	20a0      	movs	r0, #160	; 0xa0
 8004688:	2201      	movs	r2, #1
 800468a:	0209      	lsls	r1, r1, #8
 800468c:	05c0      	lsls	r0, r0, #23
 800468e:	f7fe fab9 	bl	8002c04 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8004692:	2cff      	cmp	r4, #255	; 0xff
 8004694:	d100      	bne.n	8004698 <sd_init.isra.0+0x1c8>
 8004696:	e74c      	b.n	8004532 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 8004698:	23fe      	movs	r3, #254	; 0xfe
 800469a:	421c      	tst	r4, r3
 800469c:	d031      	beq.n	8004702 <sd_init.isra.0+0x232>
 800469e:	e74f      	b.n	8004540 <sd_init.isra.0+0x70>
	if (hw->capabilities & CAP_VER2_00) {
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	423b      	tst	r3, r7
 80046a4:	d027      	beq.n	80046f6 <sd_init.isra.0+0x226>
		spi_cs_low();
 80046a6:	2180      	movs	r1, #128	; 0x80
 80046a8:	20a0      	movs	r0, #160	; 0xa0
 80046aa:	002a      	movs	r2, r5
 80046ac:	0209      	lsls	r1, r1, #8
 80046ae:	05c0      	lsls	r0, r0, #23
 80046b0:	f7fe faa8 	bl	8002c04 <HAL_GPIO_WritePin>
		sd_cmd(58, 0);
 80046b4:	0029      	movs	r1, r5
 80046b6:	203a      	movs	r0, #58	; 0x3a
 80046b8:	f7ff fe12 	bl	80042e0 <sd_cmd>
		r = sd_get_r3(&r3);
 80046bc:	a803      	add	r0, sp, #12
 80046be:	f7ff fe5e 	bl	800437e <sd_get_r7>
 80046c2:	0006      	movs	r6, r0
		sd_nec();
 80046c4:	f7ff fe52 	bl	800436c <sd_nec>
		spi_cs_high();
 80046c8:	2180      	movs	r1, #128	; 0x80
 80046ca:	20a0      	movs	r0, #160	; 0xa0
 80046cc:	003a      	movs	r2, r7
 80046ce:	0209      	lsls	r1, r1, #8
 80046d0:	05c0      	lsls	r0, r0, #23
 80046d2:	f7fe fa97 	bl	8002c04 <HAL_GPIO_WritePin>
		if (r == 0xff)
 80046d6:	2eff      	cmp	r6, #255	; 0xff
 80046d8:	d100      	bne.n	80046dc <sd_init.isra.0+0x20c>
 80046da:	e72a      	b.n	8004532 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 80046dc:	43be      	bics	r6, r7
 80046de:	b2f6      	uxtb	r6, r6
 80046e0:	2e00      	cmp	r6, #0
 80046e2:	d000      	beq.n	80046e6 <sd_init.isra.0+0x216>
 80046e4:	e72c      	b.n	8004540 <sd_init.isra.0+0x70>
			if (r3>>30 & 1) {
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	0f9b      	lsrs	r3, r3, #30
 80046ea:	423b      	tst	r3, r7
 80046ec:	d003      	beq.n	80046f6 <sd_init.isra.0+0x226>
				hw->capabilities |= CAP_SDHC;
 80046ee:	2302      	movs	r3, #2
 80046f0:	6822      	ldr	r2, [r4, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	6023      	str	r3, [r4, #0]
	if ((hw->capabilities & CAP_SDHC) == 0) {
 80046f6:	6821      	ldr	r1, [r4, #0]
 80046f8:	2302      	movs	r3, #2
 80046fa:	000a      	movs	r2, r1
 80046fc:	401a      	ands	r2, r3
 80046fe:	4219      	tst	r1, r3
 8004700:	d0b0      	beq.n	8004664 <sd_init.isra.0+0x194>
	spi_cs_low();
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	20a0      	movs	r0, #160	; 0xa0
 8004706:	2200      	movs	r2, #0
 8004708:	0209      	lsls	r1, r1, #8
 800470a:	05c0      	lsls	r0, r0, #23
 800470c:	f7fe fa7a 	bl	8002c04 <HAL_GPIO_WritePin>
	sd_cmd(59, 0);
 8004710:	2100      	movs	r1, #0
 8004712:	203b      	movs	r0, #59	; 0x3b
 8004714:	f7ff fde4 	bl	80042e0 <sd_cmd>
	r = sd_get_r1();
 8004718:	f7ff fe1a 	bl	8004350 <sd_get_r1>
 800471c:	0004      	movs	r4, r0
	sd_nec();
 800471e:	f7ff fe25 	bl	800436c <sd_nec>
	spi_cs_high();
 8004722:	2180      	movs	r1, #128	; 0x80
 8004724:	20a0      	movs	r0, #160	; 0xa0
 8004726:	2201      	movs	r2, #1
 8004728:	0209      	lsls	r1, r1, #8
 800472a:	05c0      	lsls	r0, r0, #23
 800472c:	f7fe fa6a 	bl	8002c04 <HAL_GPIO_WritePin>
	if (r == 0xff)
 8004730:	2cff      	cmp	r4, #255	; 0xff
 8004732:	d100      	bne.n	8004736 <sd_init.isra.0+0x266>
 8004734:	e6fd      	b.n	8004532 <sd_init.isra.0+0x62>
	if (r & 0xfe) {
 8004736:	23fe      	movs	r3, #254	; 0xfe
 8004738:	421c      	tst	r4, r3
 800473a:	d000      	beq.n	800473e <sd_init.isra.0+0x26e>
 800473c:	e700      	b.n	8004540 <sd_init.isra.0+0x70>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 800473e:	4803      	ldr	r0, [pc, #12]	; (800474c <sd_init.isra.0+0x27c>)
 8004740:	3bee      	subs	r3, #238	; 0xee
 8004742:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8004744:	f7fe ff38 	bl	80035b8 <HAL_SPI_Init>
}
 8004748:	e6f5      	b.n	8004536 <sd_init.isra.0+0x66>
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	200001a0 	.word	0x200001a0
 8004750:	000003e9 	.word	0x000003e9

08004754 <hwif_init>:


/*** public API - on top of sd/spi code ***/

int hwif_init(hwif* hw)
{
 8004754:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int tries = 10;

	if (hw->initialized)
		return 0;
 8004756:	2500      	movs	r5, #0
	if (hw->initialized)
 8004758:	6803      	ldr	r3, [r0, #0]
{
 800475a:	0004      	movs	r4, r0
	if (hw->initialized)
 800475c:	42ab      	cmp	r3, r5
 800475e:	d10a      	bne.n	8004776 <hwif_init+0x22>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8004760:	2328      	movs	r3, #40	; 0x28
 8004762:	4850      	ldr	r0, [pc, #320]	; (80048a4 <hwif_init+0x150>)
}
 8004764:	260b      	movs	r6, #11
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8004766:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8004768:	f7fe ff26 	bl	80035b8 <HAL_SPI_Init>

	spi_init();

	while (tries--) {
 800476c:	3e01      	subs	r6, #1
 800476e:	2e00      	cmp	r6, #0
 8004770:	d104      	bne.n	800477c <hwif_init+0x28>
	/* read status register */
	sd_read_status(hw);

	sd_read_cid(hw);
	if (sd_read_csd(hw) != 0)
		return -1;
 8004772:	2501      	movs	r5, #1
 8004774:	426d      	negs	r5, r5

	hw->initialized = 1;
	return 0;
}
 8004776:	0028      	movs	r0, r5
 8004778:	b004      	add	sp, #16
 800477a:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_init(hw) == 0)
 800477c:	0020      	movs	r0, r4
 800477e:	300c      	adds	r0, #12
 8004780:	f7ff fea6 	bl	80044d0 <sd_init.isra.0>
 8004784:	1e05      	subs	r5, r0, #0
 8004786:	d1f1      	bne.n	800476c <hwif_init+0x18>
	sd_read_status(hw);
 8004788:	f7ff fe16 	bl	80043b8 <sd_read_status.isra.0>
	spi_cs_low();
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	20a0      	movs	r0, #160	; 0xa0
 8004790:	002a      	movs	r2, r5
 8004792:	0209      	lsls	r1, r1, #8
 8004794:	05c0      	lsls	r0, r0, #23
 8004796:	f7fe fa35 	bl	8002c04 <HAL_GPIO_WritePin>
	sd_cmd(10, 0);
 800479a:	0029      	movs	r1, r5
 800479c:	200a      	movs	r0, #10
 800479e:	f7ff fd9f 	bl	80042e0 <sd_cmd>
	r = sd_get_r1();
 80047a2:	f7ff fdd5 	bl	8004350 <sd_get_r1>
	if (r == 0xff) {
 80047a6:	28ff      	cmp	r0, #255	; 0xff
 80047a8:	d11d      	bne.n	80047e6 <hwif_init+0x92>
		spi_cs_high();
 80047aa:	2201      	movs	r2, #1
	spi_cs_high();
 80047ac:	2180      	movs	r1, #128	; 0x80
 80047ae:	20a0      	movs	r0, #160	; 0xa0
 80047b0:	0209      	lsls	r1, r1, #8
 80047b2:	05c0      	lsls	r0, r0, #23
 80047b4:	f7fe fa26 	bl	8002c04 <HAL_GPIO_WritePin>
	spi_cs_low();
 80047b8:	2180      	movs	r1, #128	; 0x80
 80047ba:	20a0      	movs	r0, #160	; 0xa0
 80047bc:	2200      	movs	r2, #0
 80047be:	0209      	lsls	r1, r1, #8
 80047c0:	05c0      	lsls	r0, r0, #23
 80047c2:	f7fe fa1f 	bl	8002c04 <HAL_GPIO_WritePin>
	sd_cmd(9, 0);
 80047c6:	2100      	movs	r1, #0
 80047c8:	2009      	movs	r0, #9
 80047ca:	f7ff fd89 	bl	80042e0 <sd_cmd>
	r = sd_get_r1();
 80047ce:	f7ff fdbf 	bl	8004350 <sd_get_r1>
	if (r == 0xff) {
 80047d2:	28ff      	cmp	r0, #255	; 0xff
 80047d4:	d114      	bne.n	8004800 <hwif_init+0xac>
		spi_cs_high();
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	20a0      	movs	r0, #160	; 0xa0
 80047da:	2201      	movs	r2, #1
 80047dc:	0209      	lsls	r1, r1, #8
 80047de:	05c0      	lsls	r0, r0, #23
 80047e0:	f7fe fa10 	bl	8002c04 <HAL_GPIO_WritePin>
 80047e4:	e7c5      	b.n	8004772 <hwif_init+0x1e>
	if (r & 0xfe) {
 80047e6:	2501      	movs	r5, #1
 80047e8:	43a8      	bics	r0, r5
 80047ea:	b2c0      	uxtb	r0, r0
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d1dc      	bne.n	80047aa <hwif_init+0x56>
	r = sd_get_data(hw, buf, 16);
 80047f0:	2110      	movs	r1, #16
 80047f2:	4668      	mov	r0, sp
 80047f4:	f7ff fe06 	bl	8004404 <sd_get_data.isra.0>
	sd_nec();
 80047f8:	f7ff fdb8 	bl	800436c <sd_nec>
	spi_cs_high();
 80047fc:	002a      	movs	r2, r5
 80047fe:	e7d5      	b.n	80047ac <hwif_init+0x58>
	if (r & 0xfe) {
 8004800:	2601      	movs	r6, #1
 8004802:	43b0      	bics	r0, r6
 8004804:	b2c0      	uxtb	r0, r0
 8004806:	2800      	cmp	r0, #0
 8004808:	d1e5      	bne.n	80047d6 <hwif_init+0x82>
	r = sd_get_data(hw, buf, 16);
 800480a:	2110      	movs	r1, #16
 800480c:	4668      	mov	r0, sp
 800480e:	f7ff fdf9 	bl	8004404 <sd_get_data.isra.0>
 8004812:	0005      	movs	r5, r0
	sd_nec();
 8004814:	f7ff fdaa 	bl	800436c <sd_nec>
	spi_cs_high();
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	20a0      	movs	r0, #160	; 0xa0
 800481c:	0032      	movs	r2, r6
 800481e:	0209      	lsls	r1, r1, #8
 8004820:	05c0      	lsls	r0, r0, #23
 8004822:	f7fe f9ef 	bl	8002c04 <HAL_GPIO_WritePin>
	if (r == -1) {
 8004826:	1c6b      	adds	r3, r5, #1
 8004828:	d0a5      	beq.n	8004776 <hwif_init+0x22>
	if ((buf[0] >> 6) + 1 == 1) {
 800482a:	466b      	mov	r3, sp
 800482c:	7a99      	ldrb	r1, [r3, #10]
 800482e:	79da      	ldrb	r2, [r3, #7]
 8004830:	7a1d      	ldrb	r5, [r3, #8]
 8004832:	7a58      	ldrb	r0, [r3, #9]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	d12a      	bne.n	8004890 <hwif_init+0x13c>
	capacity = (((buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6)+1) << (2+(((buf[9]&3) << 1) | buf[10]>>7)) << ((buf[5] & 0xf) - 9);
 800483a:	466b      	mov	r3, sp
 800483c:	26c0      	movs	r6, #192	; 0xc0
 800483e:	799b      	ldrb	r3, [r3, #6]
 8004840:	0136      	lsls	r6, r6, #4
 8004842:	029b      	lsls	r3, r3, #10
 8004844:	0092      	lsls	r2, r2, #2
 8004846:	09ad      	lsrs	r5, r5, #6
 8004848:	432a      	orrs	r2, r5
 800484a:	4033      	ands	r3, r6
 800484c:	4313      	orrs	r3, r2
 800484e:	2206      	movs	r2, #6
 8004850:	0040      	lsls	r0, r0, #1
 8004852:	4010      	ands	r0, r2
 8004854:	09ca      	lsrs	r2, r1, #7
 8004856:	4310      	orrs	r0, r2
 8004858:	466a      	mov	r2, sp
 800485a:	3002      	adds	r0, #2
 800485c:	3301      	adds	r3, #1
 800485e:	4083      	lsls	r3, r0
 8004860:	200f      	movs	r0, #15
 8004862:	7952      	ldrb	r2, [r2, #5]
 8004864:	4002      	ands	r2, r0
 8004866:	3a09      	subs	r2, #9
 8004868:	4093      	lsls	r3, r2
	hw->sectors = capacity;
 800486a:	6063      	str	r3, [r4, #4]
	hw->erase_sectors = 1;
 800486c:	2301      	movs	r3, #1
	if (((buf[10]>>6)&1) == 0)
 800486e:	098a      	lsrs	r2, r1, #6
	hw->erase_sectors = 1;
 8004870:	60a3      	str	r3, [r4, #8]
	if (((buf[10]>>6)&1) == 0)
 8004872:	421a      	tst	r2, r3
 8004874:	d108      	bne.n	8004888 <hwif_init+0x134>
		hw->erase_sectors = ((buf[10]&0x3f)<<1 | buf[11]>>7) + 1;
 8004876:	4099      	lsls	r1, r3
 8004878:	337d      	adds	r3, #125	; 0x7d
 800487a:	4019      	ands	r1, r3
 800487c:	466b      	mov	r3, sp
 800487e:	7adb      	ldrb	r3, [r3, #11]
 8004880:	09db      	lsrs	r3, r3, #7
 8004882:	4319      	orrs	r1, r3
 8004884:	3101      	adds	r1, #1
 8004886:	60a1      	str	r1, [r4, #8]
	hw->initialized = 1;
 8004888:	2301      	movs	r3, #1
	return 0;
 800488a:	2500      	movs	r5, #0
	hw->initialized = 1;
 800488c:	6023      	str	r3, [r4, #0]
	return 0;
 800488e:	e772      	b.n	8004776 <hwif_init+0x22>
		hw->capabilities |= CAP_SDHC;
 8004890:	2302      	movs	r3, #2
 8004892:	68e6      	ldr	r6, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 8004894:	0412      	lsls	r2, r2, #16
		hw->capabilities |= CAP_SDHC;
 8004896:	4333      	orrs	r3, r6
 8004898:	60e3      	str	r3, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 800489a:	022b      	lsls	r3, r5, #8
 800489c:	4313      	orrs	r3, r2
 800489e:	4303      	orrs	r3, r0
	capacity *= 1024; /* in 512 B sectors */
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	e7e2      	b.n	800486a <hwif_init+0x116>
 80048a4:	200001a0 	.word	0x200001a0

080048a8 <sd_read>:

int sd_read(hwif* hw, uint32_t address, uint8_t *buf)
{
 80048a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048aa:	300c      	adds	r0, #12
 80048ac:	000e      	movs	r6, r1
 80048ae:	0017      	movs	r7, r2
 80048b0:	0005      	movs	r5, r0
	int r;
	int tries = 10;

	r = sd_readsector(hw, address, buf);
 80048b2:	f7ff fdc9 	bl	8004448 <sd_readsector.isra.0>

	while (r < 0 && tries--) {
 80048b6:	230b      	movs	r3, #11
	r = sd_readsector(hw, address, buf);
 80048b8:	0004      	movs	r4, r0
	while (r < 0 && tries--) {
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	2c00      	cmp	r4, #0
 80048be:	da04      	bge.n	80048ca <sd_read+0x22>
 80048c0:	9b01      	ldr	r3, [sp, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <sd_read+0x26>
		r = sd_readsector(hw, address, buf);
	}
	if (tries == -1)

	return r;
}
 80048ca:	0020      	movs	r0, r4
 80048cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (sd_init(hw) != 0)
 80048ce:	0028      	movs	r0, r5
 80048d0:	f7ff fdfe 	bl	80044d0 <sd_init.isra.0>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d1f1      	bne.n	80048bc <sd_read+0x14>
		sd_read_status(hw);
 80048d8:	f7ff fd6e 	bl	80043b8 <sd_read_status.isra.0>
		r = sd_readsector(hw, address, buf);
 80048dc:	003a      	movs	r2, r7
 80048de:	0031      	movs	r1, r6
 80048e0:	0028      	movs	r0, r5
 80048e2:	f7ff fdb1 	bl	8004448 <sd_readsector.isra.0>
 80048e6:	0004      	movs	r4, r0
 80048e8:	e7e8      	b.n	80048bc <sd_read+0x14>
	...

080048ec <HAL_SPI_RxCpltCallback>:

	return r;
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
    dma_complete = 1;
 80048ec:	2201      	movs	r2, #1
 80048ee:	4b01      	ldr	r3, [pc, #4]	; (80048f4 <HAL_SPI_RxCpltCallback+0x8>)
 80048f0:	701a      	strb	r2, [r3, #0]
	return;
}
 80048f2:	4770      	bx	lr
 80048f4:	20000a98 	.word	0x20000a98

080048f8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80048f8:	6802      	ldr	r2, [r0, #0]
 80048fa:	1e13      	subs	r3, r2, #0
 80048fc:	d103      	bne.n	8004906 <get_ldnumber+0xe>
	int vol = -1;
 80048fe:	2001      	movs	r0, #1
 8004900:	4240      	negs	r0, r0
 8004902:	e00e      	b.n	8004922 <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004904:	3301      	adds	r3, #1
 8004906:	7819      	ldrb	r1, [r3, #0]
 8004908:	291f      	cmp	r1, #31
 800490a:	d909      	bls.n	8004920 <get_ldnumber+0x28>
 800490c:	293a      	cmp	r1, #58	; 0x3a
 800490e:	d1f9      	bne.n	8004904 <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8004910:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004912:	428b      	cmp	r3, r1
 8004914:	d1f3      	bne.n	80048fe <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004916:	7812      	ldrb	r2, [r2, #0]
 8004918:	2a30      	cmp	r2, #48	; 0x30
 800491a:	d1f0      	bne.n	80048fe <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 800491c:	3301      	adds	r3, #1
 800491e:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004920:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8004922:	4770      	bx	lr

08004924 <move_window>:
{
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	0004      	movs	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004928:	6a63      	ldr	r3, [r4, #36]	; 0x24
{
 800492a:	000d      	movs	r5, r1
	FRESULT res = FR_OK;
 800492c:	2000      	movs	r0, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800492e:	428b      	cmp	r3, r1
 8004930:	d00c      	beq.n	800494c <move_window+0x28>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004932:	000a      	movs	r2, r1
 8004934:	0021      	movs	r1, r4
 8004936:	2301      	movs	r3, #1
 8004938:	7860      	ldrb	r0, [r4, #1]
 800493a:	3128      	adds	r1, #40	; 0x28
 800493c:	f7ff fc92 	bl	8004264 <disk_read>
 8004940:	2800      	cmp	r0, #0
 8004942:	d002      	beq.n	800494a <move_window+0x26>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004944:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 8004946:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004948:	426d      	negs	r5, r5
			fs->winsect = sector;
 800494a:	6265      	str	r5, [r4, #36]	; 0x24
}
 800494c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004950 <check_fs>:
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004950:	2300      	movs	r3, #0
{
 8004952:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004954:	7103      	strb	r3, [r0, #4]
 8004956:	3b01      	subs	r3, #1
 8004958:	6243      	str	r3, [r0, #36]	; 0x24
{
 800495a:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800495c:	f7ff ffe2 	bl	8004924 <move_window>
 8004960:	2800      	cmp	r0, #0
 8004962:	d121      	bne.n	80049a8 <check_fs+0x58>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004964:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <check_fs+0x60>)
 8004966:	5ce2      	ldrb	r2, [r4, r3]
 8004968:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <check_fs+0x64>)
 800496a:	0212      	lsls	r2, r2, #8
 800496c:	5ce3      	ldrb	r3, [r4, r3]
 800496e:	4313      	orrs	r3, r2
 8004970:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <check_fs+0x68>)
 8004972:	b21b      	sxth	r3, r3
 8004974:	4293      	cmp	r3, r2
 8004976:	d119      	bne.n	80049ac <check_fs+0x5c>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004978:	0022      	movs	r2, r4
 800497a:	325e      	adds	r2, #94	; 0x5e
 800497c:	8853      	ldrh	r3, [r2, #2]
 800497e:	8811      	ldrh	r1, [r2, #0]
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	430b      	orrs	r3, r1
 8004984:	4a0d      	ldr	r2, [pc, #52]	; (80049bc <check_fs+0x6c>)
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	0a1b      	lsrs	r3, r3, #8
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <check_fs+0x56>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800498e:	347a      	adds	r4, #122	; 0x7a
 8004990:	8860      	ldrh	r0, [r4, #2]
 8004992:	8823      	ldrh	r3, [r4, #0]
 8004994:	0400      	lsls	r0, r0, #16
 8004996:	4318      	orrs	r0, r3
 8004998:	0200      	lsls	r0, r0, #8
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <check_fs+0x70>)
 800499c:	0a00      	lsrs	r0, r0, #8
 800499e:	18c0      	adds	r0, r0, r3
 80049a0:	1e43      	subs	r3, r0, #1
 80049a2:	4198      	sbcs	r0, r3
		return 3;
 80049a4:	b2c0      	uxtb	r0, r0
		return 0;

	return 1;
}
 80049a6:	bd10      	pop	{r4, pc}
		return 3;
 80049a8:	2003      	movs	r0, #3
 80049aa:	e7fc      	b.n	80049a6 <check_fs+0x56>
		return 2;
 80049ac:	2002      	movs	r0, #2
 80049ae:	e7fa      	b.n	80049a6 <check_fs+0x56>
 80049b0:	00000227 	.word	0x00000227
 80049b4:	00000226 	.word	0x00000226
 80049b8:	ffffaa55 	.word	0xffffaa55
 80049bc:	00544146 	.word	0x00544146
 80049c0:	ffabbeba 	.word	0xffabbeba

080049c4 <find_volume.isra.0>:
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 80049c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80049c6:	2300      	movs	r3, #0
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 80049c8:	0007      	movs	r7, r0
 80049ca:	b08b      	sub	sp, #44	; 0x2c
 80049cc:	0008      	movs	r0, r1
	*rfs = 0;
 80049ce:	603b      	str	r3, [r7, #0]
	vol = get_ldnumber(path);
 80049d0:	f7ff ff92 	bl	80048f8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80049d4:	250b      	movs	r5, #11
	vol = get_ldnumber(path);
 80049d6:	1e06      	subs	r6, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 80049d8:	db15      	blt.n	8004a06 <find_volume.isra.0+0x42>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80049da:	4b78      	ldr	r3, [pc, #480]	; (8004bbc <find_volume.isra.0+0x1f8>)
 80049dc:	0082      	lsls	r2, r0, #2
 80049de:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80049e0:	3501      	adds	r5, #1
 80049e2:	2c00      	cmp	r4, #0
 80049e4:	d00f      	beq.n	8004a06 <find_volume.isra.0+0x42>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */

	if (fs->fs_type) {					/* If the volume has been mounted */
 80049e6:	7823      	ldrb	r3, [r4, #0]
	*rfs = fs;							/* Return pointer to the file system object */
 80049e8:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10e      	bne.n	8004a0c <find_volume.isra.0+0x48>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80049ee:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80049f0:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80049f2:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80049f4:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80049f6:	f7ff fc2b 	bl	8004250 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80049fa:	2601      	movs	r6, #1
 80049fc:	0007      	movs	r7, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80049fe:	2503      	movs	r5, #3
 8004a00:	4037      	ands	r7, r6
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004a02:	4230      	tst	r0, r6
 8004a04:	d00b      	beq.n	8004a1e <find_volume.isra.0+0x5a>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8004a06:	0028      	movs	r0, r5
 8004a08:	b00b      	add	sp, #44	; 0x2c
 8004a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = disk_status(fs->drv);
 8004a0c:	7860      	ldrb	r0, [r4, #1]
 8004a0e:	f7ff fc17 	bl	8004240 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004a12:	2301      	movs	r3, #1
 8004a14:	0005      	movs	r5, r0
 8004a16:	401d      	ands	r5, r3
 8004a18:	4218      	tst	r0, r3
 8004a1a:	d1e8      	bne.n	80049ee <find_volume.isra.0+0x2a>
 8004a1c:	e7f3      	b.n	8004a06 <find_volume.isra.0+0x42>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004a1e:	0039      	movs	r1, r7
 8004a20:	0020      	movs	r0, r4
 8004a22:	f7ff ff95 	bl	8004950 <check_fs>
 8004a26:	0005      	movs	r5, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004a28:	2801      	cmp	r0, #1
 8004a2a:	d12c      	bne.n	8004a86 <find_volume.isra.0+0xc2>
 8004a2c:	0023      	movs	r3, r4
 8004a2e:	4a64      	ldr	r2, [pc, #400]	; (8004bc0 <find_volume.isra.0+0x1fc>)
 8004a30:	33e7      	adds	r3, #231	; 0xe7
 8004a32:	a906      	add	r1, sp, #24
 8004a34:	33ff      	adds	r3, #255	; 0xff
 8004a36:	18a0      	adds	r0, r4, r2
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004a38:	2200      	movs	r2, #0
 8004a3a:	791e      	ldrb	r6, [r3, #4]
 8004a3c:	4296      	cmp	r6, r2
 8004a3e:	d009      	beq.n	8004a54 <find_volume.isra.0+0x90>
 8004a40:	7a5e      	ldrb	r6, [r3, #9]
 8004a42:	7a1a      	ldrb	r2, [r3, #8]
 8004a44:	0236      	lsls	r6, r6, #8
 8004a46:	4316      	orrs	r6, r2
 8004a48:	7a9a      	ldrb	r2, [r3, #10]
 8004a4a:	0412      	lsls	r2, r2, #16
 8004a4c:	4316      	orrs	r6, r2
 8004a4e:	7ada      	ldrb	r2, [r3, #11]
 8004a50:	0612      	lsls	r2, r2, #24
 8004a52:	4332      	orrs	r2, r6
 8004a54:	3310      	adds	r3, #16
 8004a56:	c104      	stmia	r1!, {r2}
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004a58:	4298      	cmp	r0, r3
 8004a5a:	d1ed      	bne.n	8004a38 <find_volume.isra.0+0x74>
 8004a5c:	2600      	movs	r6, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004a5e:	2702      	movs	r7, #2
			bsect = br[i];
 8004a60:	00b3      	lsls	r3, r6, #2
 8004a62:	aa06      	add	r2, sp, #24
 8004a64:	58d3      	ldr	r3, [r2, r3]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004a66:	0038      	movs	r0, r7
			bsect = br[i];
 8004a68:	9301      	str	r3, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <find_volume.isra.0+0xb6>
 8004a6e:	0019      	movs	r1, r3
 8004a70:	0020      	movs	r0, r4
 8004a72:	f7ff ff6d 	bl	8004950 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d00d      	beq.n	8004a96 <find_volume.isra.0+0xd2>
 8004a7a:	3601      	adds	r6, #1
 8004a7c:	2e04      	cmp	r6, #4
 8004a7e:	d1ef      	bne.n	8004a60 <find_volume.isra.0+0x9c>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004a80:	2803      	cmp	r0, #3
 8004a82:	d106      	bne.n	8004a92 <find_volume.isra.0+0xce>
 8004a84:	e7bf      	b.n	8004a06 <find_volume.isra.0+0x42>
 8004a86:	2803      	cmp	r0, #3
 8004a88:	d100      	bne.n	8004a8c <find_volume.isra.0+0xc8>
 8004a8a:	e095      	b.n	8004bb8 <find_volume.isra.0+0x1f4>
	bsect = 0;
 8004a8c:	9701      	str	r7, [sp, #4]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d001      	beq.n	8004a96 <find_volume.isra.0+0xd2>
 8004a92:	250d      	movs	r5, #13
 8004a94:	e7b7      	b.n	8004a06 <find_volume.isra.0+0x42>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004a96:	0023      	movs	r3, r4
 8004a98:	3334      	adds	r3, #52	; 0x34
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	0212      	lsls	r2, r2, #8
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	2280      	movs	r2, #128	; 0x80
 8004aa6:	b21b      	sxth	r3, r3
 8004aa8:	0092      	lsls	r2, r2, #2
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d1f1      	bne.n	8004a92 <find_volume.isra.0+0xce>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8004aae:	0023      	movs	r3, r4
 8004ab0:	0022      	movs	r2, r4
 8004ab2:	333f      	adds	r3, #63	; 0x3f
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	323e      	adds	r2, #62	; 0x3e
 8004ab8:	7817      	ldrb	r7, [r2, #0]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	431f      	orrs	r7, r3
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 8004abe:	d100      	bne.n	8004ac2 <find_volume.isra.0+0xfe>
 8004ac0:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8004ac2:	0023      	movs	r3, r4
	fs->fsize = fasize;
 8004ac4:	6127      	str	r7, [r4, #16]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8004ac6:	3338      	adds	r3, #56	; 0x38
 8004ac8:	781a      	ldrb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004aca:	1e53      	subs	r3, r2, #1
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8004acc:	70e2      	strb	r2, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d8df      	bhi.n	8004a92 <find_volume.isra.0+0xce>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004ad2:	0023      	movs	r3, r4
 8004ad4:	3335      	adds	r3, #53	; 0x35
 8004ad6:	781e      	ldrb	r6, [r3, #0]
 8004ad8:	70a6      	strb	r6, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004ada:	2e00      	cmp	r6, #0
 8004adc:	d0d9      	beq.n	8004a92 <find_volume.isra.0+0xce>
 8004ade:	1e73      	subs	r3, r6, #1
 8004ae0:	421e      	tst	r6, r3
 8004ae2:	d1d6      	bne.n	8004a92 <find_volume.isra.0+0xce>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004ae4:	0023      	movs	r3, r4
 8004ae6:	333a      	adds	r3, #58	; 0x3a
 8004ae8:	781d      	ldrb	r5, [r3, #0]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	022d      	lsls	r5, r5, #8
 8004af0:	431d      	orrs	r5, r3
 8004af2:	8125      	strh	r5, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004af4:	072b      	lsls	r3, r5, #28
 8004af6:	d1cc      	bne.n	8004a92 <find_volume.isra.0+0xce>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8004af8:	0023      	movs	r3, r4
 8004afa:	333c      	adds	r3, #60	; 0x3c
 8004afc:	7819      	ldrb	r1, [r3, #0]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	0209      	lsls	r1, r1, #8
 8004b04:	430b      	orrs	r3, r1
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 8004b06:	d100      	bne.n	8004b0a <find_volume.isra.0+0x146>
 8004b08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004b0a:	0021      	movs	r1, r4
 8004b0c:	0020      	movs	r0, r4
 8004b0e:	3137      	adds	r1, #55	; 0x37
 8004b10:	7809      	ldrb	r1, [r1, #0]
 8004b12:	3036      	adds	r0, #54	; 0x36
 8004b14:	7800      	ldrb	r0, [r0, #0]
 8004b16:	0209      	lsls	r1, r1, #8
 8004b18:	4308      	orrs	r0, r1
 8004b1a:	9002      	str	r0, [sp, #8]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004b1c:	d0b9      	beq.n	8004a92 <find_volume.isra.0+0xce>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004b1e:	437a      	muls	r2, r7
 8004b20:	9204      	str	r2, [sp, #16]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004b22:	9904      	ldr	r1, [sp, #16]
 8004b24:	092a      	lsrs	r2, r5, #4
 8004b26:	1812      	adds	r2, r2, r0
 8004b28:	1852      	adds	r2, r2, r1
 8004b2a:	9203      	str	r2, [sp, #12]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d8b0      	bhi.n	8004a92 <find_volume.isra.0+0xce>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	0018      	movs	r0, r3
 8004b34:	0031      	movs	r1, r6
 8004b36:	9305      	str	r3, [sp, #20]
 8004b38:	f7fb fae6 	bl	8000108 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004b3c:	9b05      	ldr	r3, [sp, #20]
 8004b3e:	42b3      	cmp	r3, r6
 8004b40:	d3a7      	bcc.n	8004a92 <find_volume.isra.0+0xce>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004b42:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <find_volume.isra.0+0x200>)
	fmt = FS_FAT12;
 8004b44:	2301      	movs	r3, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004b46:	4290      	cmp	r0, r2
 8004b48:	d904      	bls.n	8004b54 <find_volume.isra.0+0x190>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	; (8004bc8 <find_volume.isra.0+0x204>)
 8004b4c:	4283      	cmp	r3, r0
 8004b4e:	419b      	sbcs	r3, r3
 8004b50:	425b      	negs	r3, r3
 8004b52:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004b54:	9901      	ldr	r1, [sp, #4]
	fs->volbase = bsect;								/* Volume start sector */
 8004b56:	9a01      	ldr	r2, [sp, #4]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004b58:	468c      	mov	ip, r1
	fs->volbase = bsect;								/* Volume start sector */
 8004b5a:	6162      	str	r2, [r4, #20]
	fs->database = bsect + sysect;						/* Data start sector */
 8004b5c:	9903      	ldr	r1, [sp, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004b5e:	9a02      	ldr	r2, [sp, #8]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004b60:	3002      	adds	r0, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004b62:	4462      	add	r2, ip
	fs->database = bsect + sysect;						/* Data start sector */
 8004b64:	4461      	add	r1, ip
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004b66:	60e0      	str	r0, [r4, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004b68:	61a2      	str	r2, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 8004b6a:	6221      	str	r1, [r4, #32]
	if (fmt == FS_FAT32) {
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d112      	bne.n	8004b96 <find_volume.isra.0+0x1d2>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004b70:	2d00      	cmp	r5, #0
 8004b72:	d18e      	bne.n	8004a92 <find_volume.isra.0+0xce>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8004b74:	6d62      	ldr	r2, [r4, #84]	; 0x54
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004b76:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8004b78:	61e2      	str	r2, [r4, #28]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004b7a:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <find_volume.isra.0+0x208>)
 8004b7c:	1880      	adds	r0, r0, r2
 8004b7e:	0a40      	lsrs	r0, r0, #9
 8004b80:	4287      	cmp	r7, r0
 8004b82:	d386      	bcc.n	8004a92 <find_volume.isra.0+0xce>
	fs->id = ++Fsid;	/* File system mount ID */
 8004b84:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <find_volume.isra.0+0x20c>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8004b86:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8004b88:	8813      	ldrh	r3, [r2, #0]
	return FR_OK;
 8004b8a:	2500      	movs	r5, #0
	fs->id = ++Fsid;	/* File system mount ID */
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
 8004b92:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8004b94:	e737      	b.n	8004a06 <find_volume.isra.0+0x42>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004b96:	2d00      	cmp	r5, #0
 8004b98:	d100      	bne.n	8004b9c <find_volume.isra.0+0x1d8>
 8004b9a:	e77a      	b.n	8004a92 <find_volume.isra.0+0xce>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004b9c:	9904      	ldr	r1, [sp, #16]
 8004b9e:	188a      	adds	r2, r1, r2
 8004ba0:	61e2      	str	r2, [r4, #28]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d101      	bne.n	8004baa <find_volume.isra.0+0x1e6>
 8004ba6:	0040      	lsls	r0, r0, #1
 8004ba8:	e7e7      	b.n	8004b7a <find_volume.isra.0+0x1b6>
 8004baa:	2203      	movs	r2, #3
 8004bac:	2101      	movs	r1, #1
 8004bae:	4342      	muls	r2, r0
 8004bb0:	4008      	ands	r0, r1
 8004bb2:	0852      	lsrs	r2, r2, #1
 8004bb4:	1810      	adds	r0, r2, r0
 8004bb6:	e7e0      	b.n	8004b7a <find_volume.isra.0+0x1b6>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004bb8:	0035      	movs	r5, r6
 8004bba:	e724      	b.n	8004a06 <find_volume.isra.0+0x42>
 8004bbc:	20000a9c 	.word	0x20000a9c
 8004bc0:	00000226 	.word	0x00000226
 8004bc4:	00000ff5 	.word	0x00000ff5
 8004bc8:	0000fff5 	.word	0x0000fff5
 8004bcc:	000001ff 	.word	0x000001ff
 8004bd0:	20000aa0 	.word	0x20000aa0

08004bd4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004bd6:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8004bd8:	a803      	add	r0, sp, #12
{
 8004bda:	0014      	movs	r4, r2
 8004bdc:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8004bde:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8004be0:	f7ff fe8a 	bl	80048f8 <get_ldnumber>
 8004be4:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 8004be6:	200b      	movs	r0, #11
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	db15      	blt.n	8004c18 <f_mount+0x44>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004bec:	490b      	ldr	r1, [pc, #44]	; (8004c1c <f_mount+0x48>)
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	585a      	ldr	r2, [r3, r1]

	if (cfs) {
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	d001      	beq.n	8004bfa <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	7010      	strb	r0, [r2, #0]
	}

	if (fs) {
 8004bfa:	9a01      	ldr	r2, [sp, #4]
 8004bfc:	2a00      	cmp	r2, #0
 8004bfe:	d001      	beq.n	8004c04 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8004c00:	2000      	movs	r0, #0
 8004c02:	7010      	strb	r0, [r2, #0]
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004c04:	1e10      	subs	r0, r2, #0
	FatFs[vol] = fs;					/* Register new fs object */
 8004c06:	50ca      	str	r2, [r1, r3]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004c08:	d006      	beq.n	8004c18 <f_mount+0x44>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	2c01      	cmp	r4, #1
 8004c0e:	d103      	bne.n	8004c18 <f_mount+0x44>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004c10:	4669      	mov	r1, sp
 8004c12:	a801      	add	r0, sp, #4
 8004c14:	f7ff fed6 	bl	80049c4 <find_volume.isra.0>
	LEAVE_FF(fs, res);
}
 8004c18:	b004      	add	sp, #16
 8004c1a:	bd10      	pop	{r4, pc}
 8004c1c:	20000a9c 	.word	0x20000a9c

08004c20 <_ZdlPv>:
 8004c20:	b510      	push	{r4, lr}
 8004c22:	f000 f85b 	bl	8004cdc <free>
 8004c26:	bd10      	pop	{r4, pc}

08004c28 <_Znwj>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	1e04      	subs	r4, r0, #0
 8004c2c:	d100      	bne.n	8004c30 <_Znwj+0x8>
 8004c2e:	3401      	adds	r4, #1
 8004c30:	0020      	movs	r0, r4
 8004c32:	f000 f849 	bl	8004cc8 <malloc>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d107      	bne.n	8004c4a <_Znwj+0x22>
 8004c3a:	f000 f80d 	bl	8004c58 <_ZSt15get_new_handlerv>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d101      	bne.n	8004c46 <_Znwj+0x1e>
 8004c42:	f000 f80f 	bl	8004c64 <abort>
 8004c46:	4780      	blx	r0
 8004c48:	e7f2      	b.n	8004c30 <_Znwj+0x8>
 8004c4a:	bd10      	pop	{r4, pc}

08004c4c <_ZSt17__throw_bad_allocv>:
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	f000 f809 	bl	8004c64 <abort>

08004c52 <_ZSt20__throw_length_errorPKc>:
 8004c52:	b510      	push	{r4, lr}
 8004c54:	f000 f806 	bl	8004c64 <abort>

08004c58 <_ZSt15get_new_handlerv>:
 8004c58:	4b01      	ldr	r3, [pc, #4]	; (8004c60 <_ZSt15get_new_handlerv+0x8>)
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	4770      	bx	lr
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	20000aa4 	.word	0x20000aa4

08004c64 <abort>:
 8004c64:	2006      	movs	r0, #6
 8004c66:	b510      	push	{r4, lr}
 8004c68:	f000 f94a 	bl	8004f00 <raise>
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	f7fd fd07 	bl	8002680 <_exit>
	...

08004c74 <__errno>:
 8004c74:	4b01      	ldr	r3, [pc, #4]	; (8004c7c <__errno+0x8>)
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	4770      	bx	lr
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	2000009c 	.word	0x2000009c

08004c80 <__libc_init_array>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	2600      	movs	r6, #0
 8004c84:	4d0c      	ldr	r5, [pc, #48]	; (8004cb8 <__libc_init_array+0x38>)
 8004c86:	4c0d      	ldr	r4, [pc, #52]	; (8004cbc <__libc_init_array+0x3c>)
 8004c88:	1b64      	subs	r4, r4, r5
 8004c8a:	10a4      	asrs	r4, r4, #2
 8004c8c:	42a6      	cmp	r6, r4
 8004c8e:	d109      	bne.n	8004ca4 <__libc_init_array+0x24>
 8004c90:	2600      	movs	r6, #0
 8004c92:	f000 f967 	bl	8004f64 <_init>
 8004c96:	4d0a      	ldr	r5, [pc, #40]	; (8004cc0 <__libc_init_array+0x40>)
 8004c98:	4c0a      	ldr	r4, [pc, #40]	; (8004cc4 <__libc_init_array+0x44>)
 8004c9a:	1b64      	subs	r4, r4, r5
 8004c9c:	10a4      	asrs	r4, r4, #2
 8004c9e:	42a6      	cmp	r6, r4
 8004ca0:	d105      	bne.n	8004cae <__libc_init_array+0x2e>
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	00b3      	lsls	r3, r6, #2
 8004ca6:	58eb      	ldr	r3, [r5, r3]
 8004ca8:	4798      	blx	r3
 8004caa:	3601      	adds	r6, #1
 8004cac:	e7ee      	b.n	8004c8c <__libc_init_array+0xc>
 8004cae:	00b3      	lsls	r3, r6, #2
 8004cb0:	58eb      	ldr	r3, [r5, r3]
 8004cb2:	4798      	blx	r3
 8004cb4:	3601      	adds	r6, #1
 8004cb6:	e7f2      	b.n	8004c9e <__libc_init_array+0x1e>
 8004cb8:	08005008 	.word	0x08005008
 8004cbc:	08005008 	.word	0x08005008
 8004cc0:	08005008 	.word	0x08005008
 8004cc4:	08005010 	.word	0x08005010

08004cc8 <malloc>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <malloc+0x10>)
 8004ccc:	0001      	movs	r1, r0
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	f000 f87c 	bl	8004dcc <_malloc_r>
 8004cd4:	bd10      	pop	{r4, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	2000009c 	.word	0x2000009c

08004cdc <free>:
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	4b03      	ldr	r3, [pc, #12]	; (8004cec <free+0x10>)
 8004ce0:	0001      	movs	r1, r0
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	f000 f828 	bl	8004d38 <_free_r>
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	2000009c 	.word	0x2000009c

08004cf0 <memcpy>:
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d100      	bne.n	8004cfa <memcpy+0xa>
 8004cf8:	bd10      	pop	{r4, pc}
 8004cfa:	5ccc      	ldrb	r4, [r1, r3]
 8004cfc:	54c4      	strb	r4, [r0, r3]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	e7f8      	b.n	8004cf4 <memcpy+0x4>

08004d02 <memmove>:
 8004d02:	b510      	push	{r4, lr}
 8004d04:	4288      	cmp	r0, r1
 8004d06:	d902      	bls.n	8004d0e <memmove+0xc>
 8004d08:	188b      	adds	r3, r1, r2
 8004d0a:	4298      	cmp	r0, r3
 8004d0c:	d303      	bcc.n	8004d16 <memmove+0x14>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e007      	b.n	8004d22 <memmove+0x20>
 8004d12:	5c8b      	ldrb	r3, [r1, r2]
 8004d14:	5483      	strb	r3, [r0, r2]
 8004d16:	3a01      	subs	r2, #1
 8004d18:	d2fb      	bcs.n	8004d12 <memmove+0x10>
 8004d1a:	bd10      	pop	{r4, pc}
 8004d1c:	5ccc      	ldrb	r4, [r1, r3]
 8004d1e:	54c4      	strb	r4, [r0, r3]
 8004d20:	3301      	adds	r3, #1
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d1fa      	bne.n	8004d1c <memmove+0x1a>
 8004d26:	e7f8      	b.n	8004d1a <memmove+0x18>

08004d28 <memset>:
 8004d28:	0003      	movs	r3, r0
 8004d2a:	1882      	adds	r2, r0, r2
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <memset+0xa>
 8004d30:	4770      	bx	lr
 8004d32:	7019      	strb	r1, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	e7f9      	b.n	8004d2c <memset+0x4>

08004d38 <_free_r>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	0005      	movs	r5, r0
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	d010      	beq.n	8004d62 <_free_r+0x2a>
 8004d40:	1f0c      	subs	r4, r1, #4
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da00      	bge.n	8004d4a <_free_r+0x12>
 8004d48:	18e4      	adds	r4, r4, r3
 8004d4a:	0028      	movs	r0, r5
 8004d4c:	f000 f8f8 	bl	8004f40 <__malloc_lock>
 8004d50:	4a1d      	ldr	r2, [pc, #116]	; (8004dc8 <_free_r+0x90>)
 8004d52:	6813      	ldr	r3, [r2, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <_free_r+0x2c>
 8004d58:	6063      	str	r3, [r4, #4]
 8004d5a:	6014      	str	r4, [r2, #0]
 8004d5c:	0028      	movs	r0, r5
 8004d5e:	f000 f8f7 	bl	8004f50 <__malloc_unlock>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	42a3      	cmp	r3, r4
 8004d66:	d908      	bls.n	8004d7a <_free_r+0x42>
 8004d68:	6821      	ldr	r1, [r4, #0]
 8004d6a:	1860      	adds	r0, r4, r1
 8004d6c:	4283      	cmp	r3, r0
 8004d6e:	d1f3      	bne.n	8004d58 <_free_r+0x20>
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	1841      	adds	r1, r0, r1
 8004d76:	6021      	str	r1, [r4, #0]
 8004d78:	e7ee      	b.n	8004d58 <_free_r+0x20>
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <_free_r+0x4e>
 8004d82:	42a3      	cmp	r3, r4
 8004d84:	d9f9      	bls.n	8004d7a <_free_r+0x42>
 8004d86:	6811      	ldr	r1, [r2, #0]
 8004d88:	1850      	adds	r0, r2, r1
 8004d8a:	42a0      	cmp	r0, r4
 8004d8c:	d10b      	bne.n	8004da6 <_free_r+0x6e>
 8004d8e:	6820      	ldr	r0, [r4, #0]
 8004d90:	1809      	adds	r1, r1, r0
 8004d92:	1850      	adds	r0, r2, r1
 8004d94:	6011      	str	r1, [r2, #0]
 8004d96:	4283      	cmp	r3, r0
 8004d98:	d1e0      	bne.n	8004d5c <_free_r+0x24>
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	1841      	adds	r1, r0, r1
 8004da0:	6011      	str	r1, [r2, #0]
 8004da2:	6053      	str	r3, [r2, #4]
 8004da4:	e7da      	b.n	8004d5c <_free_r+0x24>
 8004da6:	42a0      	cmp	r0, r4
 8004da8:	d902      	bls.n	8004db0 <_free_r+0x78>
 8004daa:	230c      	movs	r3, #12
 8004dac:	602b      	str	r3, [r5, #0]
 8004dae:	e7d5      	b.n	8004d5c <_free_r+0x24>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	1860      	adds	r0, r4, r1
 8004db4:	4283      	cmp	r3, r0
 8004db6:	d103      	bne.n	8004dc0 <_free_r+0x88>
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	1841      	adds	r1, r0, r1
 8004dbe:	6021      	str	r1, [r4, #0]
 8004dc0:	6063      	str	r3, [r4, #4]
 8004dc2:	6054      	str	r4, [r2, #4]
 8004dc4:	e7ca      	b.n	8004d5c <_free_r+0x24>
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	20000aa8 	.word	0x20000aa8

08004dcc <_malloc_r>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	2303      	movs	r3, #3
 8004dd0:	1ccd      	adds	r5, r1, #3
 8004dd2:	439d      	bics	r5, r3
 8004dd4:	3508      	adds	r5, #8
 8004dd6:	0006      	movs	r6, r0
 8004dd8:	2d0c      	cmp	r5, #12
 8004dda:	d21f      	bcs.n	8004e1c <_malloc_r+0x50>
 8004ddc:	250c      	movs	r5, #12
 8004dde:	42a9      	cmp	r1, r5
 8004de0:	d81e      	bhi.n	8004e20 <_malloc_r+0x54>
 8004de2:	0030      	movs	r0, r6
 8004de4:	f000 f8ac 	bl	8004f40 <__malloc_lock>
 8004de8:	4925      	ldr	r1, [pc, #148]	; (8004e80 <_malloc_r+0xb4>)
 8004dea:	680a      	ldr	r2, [r1, #0]
 8004dec:	0014      	movs	r4, r2
 8004dee:	2c00      	cmp	r4, #0
 8004df0:	d11a      	bne.n	8004e28 <_malloc_r+0x5c>
 8004df2:	4f24      	ldr	r7, [pc, #144]	; (8004e84 <_malloc_r+0xb8>)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <_malloc_r+0x38>
 8004dfa:	0021      	movs	r1, r4
 8004dfc:	0030      	movs	r0, r6
 8004dfe:	f000 f843 	bl	8004e88 <_sbrk_r>
 8004e02:	6038      	str	r0, [r7, #0]
 8004e04:	0029      	movs	r1, r5
 8004e06:	0030      	movs	r0, r6
 8004e08:	f000 f83e 	bl	8004e88 <_sbrk_r>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d12b      	bne.n	8004e68 <_malloc_r+0x9c>
 8004e10:	230c      	movs	r3, #12
 8004e12:	0030      	movs	r0, r6
 8004e14:	6033      	str	r3, [r6, #0]
 8004e16:	f000 f89b 	bl	8004f50 <__malloc_unlock>
 8004e1a:	e003      	b.n	8004e24 <_malloc_r+0x58>
 8004e1c:	2d00      	cmp	r5, #0
 8004e1e:	dade      	bge.n	8004dde <_malloc_r+0x12>
 8004e20:	230c      	movs	r3, #12
 8004e22:	6033      	str	r3, [r6, #0]
 8004e24:	2000      	movs	r0, #0
 8004e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	1b5b      	subs	r3, r3, r5
 8004e2c:	d419      	bmi.n	8004e62 <_malloc_r+0x96>
 8004e2e:	2b0b      	cmp	r3, #11
 8004e30:	d903      	bls.n	8004e3a <_malloc_r+0x6e>
 8004e32:	6023      	str	r3, [r4, #0]
 8004e34:	18e4      	adds	r4, r4, r3
 8004e36:	6025      	str	r5, [r4, #0]
 8004e38:	e003      	b.n	8004e42 <_malloc_r+0x76>
 8004e3a:	6863      	ldr	r3, [r4, #4]
 8004e3c:	42a2      	cmp	r2, r4
 8004e3e:	d10e      	bne.n	8004e5e <_malloc_r+0x92>
 8004e40:	600b      	str	r3, [r1, #0]
 8004e42:	0030      	movs	r0, r6
 8004e44:	f000 f884 	bl	8004f50 <__malloc_unlock>
 8004e48:	0020      	movs	r0, r4
 8004e4a:	2207      	movs	r2, #7
 8004e4c:	300b      	adds	r0, #11
 8004e4e:	1d23      	adds	r3, r4, #4
 8004e50:	4390      	bics	r0, r2
 8004e52:	1ac2      	subs	r2, r0, r3
 8004e54:	4298      	cmp	r0, r3
 8004e56:	d0e6      	beq.n	8004e26 <_malloc_r+0x5a>
 8004e58:	1a1b      	subs	r3, r3, r0
 8004e5a:	50a3      	str	r3, [r4, r2]
 8004e5c:	e7e3      	b.n	8004e26 <_malloc_r+0x5a>
 8004e5e:	6053      	str	r3, [r2, #4]
 8004e60:	e7ef      	b.n	8004e42 <_malloc_r+0x76>
 8004e62:	0022      	movs	r2, r4
 8004e64:	6864      	ldr	r4, [r4, #4]
 8004e66:	e7c2      	b.n	8004dee <_malloc_r+0x22>
 8004e68:	2303      	movs	r3, #3
 8004e6a:	1cc4      	adds	r4, r0, #3
 8004e6c:	439c      	bics	r4, r3
 8004e6e:	42a0      	cmp	r0, r4
 8004e70:	d0e1      	beq.n	8004e36 <_malloc_r+0x6a>
 8004e72:	1a21      	subs	r1, r4, r0
 8004e74:	0030      	movs	r0, r6
 8004e76:	f000 f807 	bl	8004e88 <_sbrk_r>
 8004e7a:	1c43      	adds	r3, r0, #1
 8004e7c:	d1db      	bne.n	8004e36 <_malloc_r+0x6a>
 8004e7e:	e7c7      	b.n	8004e10 <_malloc_r+0x44>
 8004e80:	20000aa8 	.word	0x20000aa8
 8004e84:	20000aac 	.word	0x20000aac

08004e88 <_sbrk_r>:
 8004e88:	2300      	movs	r3, #0
 8004e8a:	b570      	push	{r4, r5, r6, lr}
 8004e8c:	4d06      	ldr	r5, [pc, #24]	; (8004ea8 <_sbrk_r+0x20>)
 8004e8e:	0004      	movs	r4, r0
 8004e90:	0008      	movs	r0, r1
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	f7fd fbfa 	bl	800268c <_sbrk>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d103      	bne.n	8004ea4 <_sbrk_r+0x1c>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d000      	beq.n	8004ea4 <_sbrk_r+0x1c>
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	bd70      	pop	{r4, r5, r6, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	20000ac4 	.word	0x20000ac4

08004eac <_raise_r>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	0004      	movs	r4, r0
 8004eb0:	000d      	movs	r5, r1
 8004eb2:	291f      	cmp	r1, #31
 8004eb4:	d904      	bls.n	8004ec0 <_raise_r+0x14>
 8004eb6:	2316      	movs	r3, #22
 8004eb8:	6003      	str	r3, [r0, #0]
 8004eba:	2001      	movs	r0, #1
 8004ebc:	4240      	negs	r0, r0
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d004      	beq.n	8004ed0 <_raise_r+0x24>
 8004ec6:	008a      	lsls	r2, r1, #2
 8004ec8:	189b      	adds	r3, r3, r2
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	d108      	bne.n	8004ee2 <_raise_r+0x36>
 8004ed0:	0020      	movs	r0, r4
 8004ed2:	f000 f831 	bl	8004f38 <_getpid_r>
 8004ed6:	002a      	movs	r2, r5
 8004ed8:	0001      	movs	r1, r0
 8004eda:	0020      	movs	r0, r4
 8004edc:	f000 f81a 	bl	8004f14 <_kill_r>
 8004ee0:	e7ed      	b.n	8004ebe <_raise_r+0x12>
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	2a01      	cmp	r2, #1
 8004ee6:	d0ea      	beq.n	8004ebe <_raise_r+0x12>
 8004ee8:	1c51      	adds	r1, r2, #1
 8004eea:	d103      	bne.n	8004ef4 <_raise_r+0x48>
 8004eec:	2316      	movs	r3, #22
 8004eee:	3001      	adds	r0, #1
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	e7e4      	b.n	8004ebe <_raise_r+0x12>
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	0028      	movs	r0, r5
 8004ef8:	601c      	str	r4, [r3, #0]
 8004efa:	4790      	blx	r2
 8004efc:	0020      	movs	r0, r4
 8004efe:	e7de      	b.n	8004ebe <_raise_r+0x12>

08004f00 <raise>:
 8004f00:	b510      	push	{r4, lr}
 8004f02:	4b03      	ldr	r3, [pc, #12]	; (8004f10 <raise+0x10>)
 8004f04:	0001      	movs	r1, r0
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	f7ff ffd0 	bl	8004eac <_raise_r>
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	2000009c 	.word	0x2000009c

08004f14 <_kill_r>:
 8004f14:	2300      	movs	r3, #0
 8004f16:	b570      	push	{r4, r5, r6, lr}
 8004f18:	4d06      	ldr	r5, [pc, #24]	; (8004f34 <_kill_r+0x20>)
 8004f1a:	0004      	movs	r4, r0
 8004f1c:	0008      	movs	r0, r1
 8004f1e:	0011      	movs	r1, r2
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	f7fd fba5 	bl	8002670 <_kill>
 8004f26:	1c43      	adds	r3, r0, #1
 8004f28:	d103      	bne.n	8004f32 <_kill_r+0x1e>
 8004f2a:	682b      	ldr	r3, [r5, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d000      	beq.n	8004f32 <_kill_r+0x1e>
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	20000ac4 	.word	0x20000ac4

08004f38 <_getpid_r>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	f7fd fb97 	bl	800266c <_getpid>
 8004f3e:	bd10      	pop	{r4, pc}

08004f40 <__malloc_lock>:
 8004f40:	b510      	push	{r4, lr}
 8004f42:	4802      	ldr	r0, [pc, #8]	; (8004f4c <__malloc_lock+0xc>)
 8004f44:	f000 f80c 	bl	8004f60 <__retarget_lock_acquire_recursive>
 8004f48:	bd10      	pop	{r4, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	20000acc 	.word	0x20000acc

08004f50 <__malloc_unlock>:
 8004f50:	b510      	push	{r4, lr}
 8004f52:	4802      	ldr	r0, [pc, #8]	; (8004f5c <__malloc_unlock+0xc>)
 8004f54:	f000 f805 	bl	8004f62 <__retarget_lock_release_recursive>
 8004f58:	bd10      	pop	{r4, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	20000acc 	.word	0x20000acc

08004f60 <__retarget_lock_acquire_recursive>:
 8004f60:	4770      	bx	lr

08004f62 <__retarget_lock_release_recursive>:
 8004f62:	4770      	bx	lr

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
