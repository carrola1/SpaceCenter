
SpaceCenter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e68  08007578  08007578  00017578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083e0  080083e0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080083e0  080083e0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083e0  080083e0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e0  080083e0  000183e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080083e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  20000024  0800840c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001008  0800840c  00021008  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001510f  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ff  00000000  00000000  0003515b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00038660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00039700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a1f  00000000  00000000  0003a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001468d  00000000  00000000  00051fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e24  00000000  00000000  0006668c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea4b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038dc  00000000  00000000  000ea504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007560 	.word	0x08007560

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08007560 	.word	0x08007560

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fffb 	bl	8001220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f851 	bl	80002d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa43 	bl	80006b8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000232:	f000 fa13 	bl	800065c <_ZL11MX_DMA_Initv>
  MX_I2S2_Init();
 8000236:	f000 f8af 	bl	8000398 <_ZL12MX_I2S2_Initv>
  MX_SPI1_Init();
 800023a:	f000 f8db 	bl	80003f4 <_ZL12MX_SPI1_Initv>
  MX_TSC_Init();
 800023e:	f000 f9c3 	bl	80005c8 <_ZL11MX_TSC_Initv>
  MX_TOUCHSENSING_Init();
 8000242:	f007 f935 	bl	80074b0 <MX_TOUCHSENSING_Init>
  MX_TIM2_Init();
 8000246:	f000 f911 	bl	800046c <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SD_SPI1_CS_N_GPIO_Port, SD_SPI1_CS_N_Pin, GPIO_PIN_SET);
 800024a:	2380      	movs	r3, #128	; 0x80
 800024c:	0219      	lsls	r1, r3, #8
 800024e:	23a0      	movs	r3, #160	; 0xa0
 8000250:	05db      	lsls	r3, r3, #23
 8000252:	2201      	movs	r2, #1
 8000254:	0018      	movs	r0, r3
 8000256:	f001 fc73 	bl	8001b40 <HAL_GPIO_WritePin>
  FRESULT fr;
  fr = f_mount(&FatFs, "", 1);
 800025a:	1dfc      	adds	r4, r7, #7
 800025c:	4918      	ldr	r1, [pc, #96]	; (80002c0 <main+0xa0>)
 800025e:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <main+0xa4>)
 8000260:	2201      	movs	r2, #1
 8000262:	0018      	movs	r0, r3
 8000264:	f006 ff2c 	bl	80070c0 <f_mount>
 8000268:	0003      	movs	r3, r0
 800026a:	7023      	strb	r3, [r4, #0]

  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	00db      	lsls	r3, r3, #3
 8000270:	4815      	ldr	r0, [pc, #84]	; (80002c8 <main+0xa8>)
 8000272:	2200      	movs	r2, #0
 8000274:	0019      	movs	r1, r3
 8000276:	f001 fc63 	bl	8001b40 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800027a:	23fa      	movs	r3, #250	; 0xfa
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	0018      	movs	r0, r3
 8000280:	f001 f82e 	bl	80012e0 <HAL_Delay>
  play_wav("blue.wav");
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <main+0xac>)
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fede 	bl	8001048 <play_wav>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(500);
 800028c:	23fa      	movs	r3, #250	; 0xfa
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	0018      	movs	r0, r3
 8000292:	f001 f825 	bl	80012e0 <HAL_Delay>
	HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 8000296:	2380      	movs	r3, #128	; 0x80
 8000298:	00db      	lsls	r3, r3, #3
 800029a:	480b      	ldr	r0, [pc, #44]	; (80002c8 <main+0xa8>)
 800029c:	2201      	movs	r2, #1
 800029e:	0019      	movs	r1, r3
 80002a0:	f001 fc4e 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80002a4:	23fa      	movs	r3, #250	; 0xfa
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 f819 	bl	80012e0 <HAL_Delay>
	HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 80002ae:	2380      	movs	r3, #128	; 0x80
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	4805      	ldr	r0, [pc, #20]	; (80002c8 <main+0xa8>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	0019      	movs	r1, r3
 80002b8:	f001 fc42 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80002bc:	e7e6      	b.n	800028c <main+0x6c>
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	08007578 	.word	0x08007578
 80002c4:	2000050c 	.word	0x2000050c
 80002c8:	50001c00 	.word	0x50001c00
 80002cc:	0800757c 	.word	0x0800757c

080002d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b095      	sub	sp, #84	; 0x54
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	2418      	movs	r4, #24
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2338      	movs	r3, #56	; 0x38
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f007 f935 	bl	8007550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	0018      	movs	r0, r3
 80002ea:	2314      	movs	r3, #20
 80002ec:	001a      	movs	r2, r3
 80002ee:	2100      	movs	r1, #0
 80002f0:	f007 f92e 	bl	8007550 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002f4:	4b26      	ldr	r3, [pc, #152]	; (8000390 <_Z18SystemClock_Configv+0xc0>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <_Z18SystemClock_Configv+0xc4>)
 80002fa:	401a      	ands	r2, r3
 80002fc:	4b24      	ldr	r3, [pc, #144]	; (8000390 <_Z18SystemClock_Configv+0xc0>)
 80002fe:	2180      	movs	r1, #128	; 0x80
 8000300:	0109      	lsls	r1, r1, #4
 8000302:	430a      	orrs	r2, r1
 8000304:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000306:	0021      	movs	r1, r4
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2202      	movs	r2, #2
 800030c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2201      	movs	r2, #1
 8000312:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2210      	movs	r2, #16
 8000318:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2202      	movs	r2, #2
 800031e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2280      	movs	r2, #128	; 0x80
 800032a:	02d2      	lsls	r2, r2, #11
 800032c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2280      	movs	r2, #128	; 0x80
 8000332:	03d2      	lsls	r2, r2, #15
 8000334:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	187b      	adds	r3, r7, r1
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fe25 	bl	8001f88 <HAL_RCC_OscConfig>
 800033e:	0003      	movs	r3, r0
 8000340:	1e5a      	subs	r2, r3, #1
 8000342:	4193      	sbcs	r3, r2
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 800034a:	f000 fae1 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	220f      	movs	r2, #15
 8000352:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2203      	movs	r2, #3
 8000358:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2101      	movs	r1, #1
 8000370:	0018      	movs	r0, r3
 8000372:	f002 f9d9 	bl	8002728 <HAL_RCC_ClockConfig>
 8000376:	0003      	movs	r3, r0
 8000378:	1e5a      	subs	r2, r3, #1
 800037a:	4193      	sbcs	r3, r2
 800037c:	b2db      	uxtb	r3, r3
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8000382:	f000 fac5 	bl	8000910 <Error_Handler>
  }
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b015      	add	sp, #84	; 0x54
 800038c:	bd90      	pop	{r4, r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	40007000 	.word	0x40007000
 8000394:	ffffe7ff 	.word	0xffffe7ff

08000398 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <_ZL12MX_I2S2_Initv+0x50>)
 800039e:	4a13      	ldr	r2, [pc, #76]	; (80003ec <_ZL12MX_I2S2_Initv+0x54>)
 80003a0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <_ZL12MX_I2S2_Initv+0x50>)
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	0092      	lsls	r2, r2, #2
 80003a8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <_ZL12MX_I2S2_Initv+0x50>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80003b0:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <_ZL12MX_I2S2_Initv+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <_ZL12MX_I2S2_Initv+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <_ZL12MX_I2S2_Initv+0x50>)
 80003be:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <_ZL12MX_I2S2_Initv+0x58>)
 80003c0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <_ZL12MX_I2S2_Initv+0x50>)
 80003c4:	2208      	movs	r2, #8
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <_ZL12MX_I2S2_Initv+0x50>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 fbd6 	bl	8001b7c <HAL_I2S_Init>
 80003d0:	0003      	movs	r3, r0
 80003d2:	1e5a      	subs	r2, r3, #1
 80003d4:	4193      	sbcs	r3, r2
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <_ZL12MX_I2S2_Initv+0x48>
  {
    Error_Handler();
 80003dc:	f000 fa98 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	20000248 	.word	0x20000248
 80003ec:	40003800 	.word	0x40003800
 80003f0:	0000ac44 	.word	0x0000ac44

080003f4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003f8:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 80003fa:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <_ZL12MX_SPI1_Initv+0x74>)
 80003fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003fe:	4b19      	ldr	r3, [pc, #100]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 8000400:	2282      	movs	r2, #130	; 0x82
 8000402:	0052      	lsls	r2, r2, #1
 8000404:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000412:	4b14      	ldr	r3, [pc, #80]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 800041a:	2200      	movs	r2, #0
 800041c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800041e:	4b11      	ldr	r3, [pc, #68]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 8000420:	2280      	movs	r2, #128	; 0x80
 8000422:	0092      	lsls	r2, r2, #2
 8000424:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 8000428:	2210      	movs	r2, #16
 800042a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800042c:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 800042e:	2200      	movs	r2, #0
 8000430:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 8000434:	2200      	movs	r2, #0
 8000436:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 800043a:	2200      	movs	r2, #0
 800043c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 8000440:	2207      	movs	r2, #7
 8000442:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <_ZL12MX_SPI1_Initv+0x70>)
 8000446:	0018      	movs	r0, r3
 8000448:	f002 fb1e 	bl	8002a88 <HAL_SPI_Init>
 800044c:	0003      	movs	r3, r0
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	4193      	sbcs	r3, r2
 8000452:	b2db      	uxtb	r3, r3
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <_ZL12MX_SPI1_Initv+0x68>
  {
    Error_Handler();
 8000458:	f000 fa5a 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	200002cc 	.word	0x200002cc
 8000468:	40013000 	.word	0x40013000

0800046c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000472:	2318      	movs	r3, #24
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	0018      	movs	r0, r3
 8000478:	2310      	movs	r3, #16
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f007 f867 	bl	8007550 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000482:	2310      	movs	r3, #16
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	0018      	movs	r0, r3
 8000488:	2308      	movs	r3, #8
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f007 f85f 	bl	8007550 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000492:	003b      	movs	r3, r7
 8000494:	0018      	movs	r0, r3
 8000496:	2310      	movs	r3, #16
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f007 f858 	bl	8007550 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004a0:	4b48      	ldr	r3, [pc, #288]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	05d2      	lsls	r2, r2, #23
 80004a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004a8:	4b46      	ldr	r3, [pc, #280]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ae:	4b45      	ldr	r3, [pc, #276]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80004b4:	4b43      	ldr	r3, [pc, #268]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 80004b6:	2227      	movs	r2, #39	; 0x27
 80004b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ba:	4b42      	ldr	r3, [pc, #264]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c0:	4b40      	ldr	r3, [pc, #256]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004c6:	4b3f      	ldr	r3, [pc, #252]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 80004c8:	0018      	movs	r0, r3
 80004ca:	f003 f8f4 	bl	80036b6 <HAL_TIM_Base_Init>
 80004ce:	0003      	movs	r3, r0
 80004d0:	1e5a      	subs	r2, r3, #1
 80004d2:	4193      	sbcs	r3, r2
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80004da:	f000 fa19 	bl	8000910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004de:	2118      	movs	r1, #24
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	0152      	lsls	r2, r2, #5
 80004e6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004e8:	187a      	adds	r2, r7, r1
 80004ea:	4b36      	ldr	r3, [pc, #216]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 80004ec:	0011      	movs	r1, r2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 fa06 	bl	8003900 <HAL_TIM_ConfigClockSource>
 80004f4:	0003      	movs	r3, r0
 80004f6:	1e5a      	subs	r2, r3, #1
 80004f8:	4193      	sbcs	r3, r2
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000500:	f000 fa06 	bl	8000910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000504:	4b2f      	ldr	r3, [pc, #188]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 8000506:	0018      	movs	r0, r3
 8000508:	f003 f901 	bl	800370e <HAL_TIM_PWM_Init>
 800050c:	0003      	movs	r3, r0
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	4193      	sbcs	r3, r2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000518:	f000 f9fa 	bl	8000910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051c:	2110      	movs	r1, #16
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800052a:	187a      	adds	r2, r7, r1
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f003 fcab 	bl	8003e8c <HAL_TIMEx_MasterConfigSynchronization>
 8000536:	0003      	movs	r3, r0
 8000538:	1e5a      	subs	r2, r3, #1
 800053a:	4193      	sbcs	r3, r2
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000542:	f000 f9e5 	bl	8000910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000546:	003b      	movs	r3, r7
 8000548:	2260      	movs	r2, #96	; 0x60
 800054a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800054c:	003b      	movs	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000552:	003b      	movs	r3, r7
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000558:	003b      	movs	r3, r7
 800055a:	2204      	movs	r2, #4
 800055c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800055e:	0039      	movs	r1, r7
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 8000562:	2200      	movs	r2, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f003 f907 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
 800056a:	0003      	movs	r3, r0
 800056c:	1e5a      	subs	r2, r3, #1
 800056e:	4193      	sbcs	r3, r2
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8000576:	f000 f9cb 	bl	8000910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800057a:	0039      	movs	r1, r7
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 800057e:	2208      	movs	r2, #8
 8000580:	0018      	movs	r0, r3
 8000582:	f003 f8f9 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
 8000586:	0003      	movs	r3, r0
 8000588:	1e5a      	subs	r2, r3, #1
 800058a:	4193      	sbcs	r3, r2
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8000592:	f000 f9bd 	bl	8000910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000596:	0039      	movs	r1, r7
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 800059a:	220c      	movs	r2, #12
 800059c:	0018      	movs	r0, r3
 800059e:	f003 f8eb 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
 80005a2:	0003      	movs	r3, r0
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	4193      	sbcs	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <_ZL12MX_TIM2_Initv+0x146>
  {
    Error_Handler();
 80005ae:	f000 f9af 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005b2:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <_ZL12MX_TIM2_Initv+0x158>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fb9d 	bl	8000cf4 <HAL_TIM_MspPostInit>

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b00a      	add	sp, #40	; 0x28
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	200003b4 	.word	0x200003b4

080005c8 <_ZL11MX_TSC_Initv>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 80005ce:	4a20      	ldr	r2, [pc, #128]	; (8000650 <_ZL11MX_TSC_Initv+0x88>)
 80005d0:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	0552      	lsls	r2, r2, #21
 80005d8:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	0452      	lsls	r2, r2, #17
 80005e0:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	0192      	lsls	r2, r2, #6
 80005fa:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 80005fe:	22a0      	movs	r2, #160	; 0xa0
 8000600:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 8000610:	2200      	movs	r2, #0
 8000612:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 8000616:	2200      	movs	r2, #0
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO2|TSC_GROUP1_IO3|TSC_GROUP1_IO4|TSC_GROUP2_IO2
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <_ZL11MX_TSC_Initv+0x8c>)
 800061e:	631a      	str	r2, [r3, #48]	; 0x30
                    |TSC_GROUP2_IO3|TSC_GROUP2_IO4|TSC_GROUP3_IO2|TSC_GROUP3_IO3
                    |TSC_GROUP3_IO4|TSC_GROUP4_IO2|TSC_GROUP4_IO3|TSC_GROUP4_IO4
                    |TSC_GROUP5_IO2|TSC_GROUP5_IO3|TSC_GROUP5_IO4|TSC_GROUP6_IO2
                    |TSC_GROUP6_IO3|TSC_GROUP6_IO4|TSC_GROUP7_IO2|TSC_GROUP7_IO3
                    |TSC_GROUP7_IO4|TSC_GROUP8_IO2|TSC_GROUP8_IO3|TSC_GROUP8_IO4;
  htsc.Init.ShieldIOs = 0;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 8000622:	2200      	movs	r2, #0
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO1|TSC_GROUP2_IO1|TSC_GROUP3_IO1|TSC_GROUP4_IO1
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <_ZL11MX_TSC_Initv+0x90>)
 800062a:	639a      	str	r2, [r3, #56]	; 0x38
                    |TSC_GROUP5_IO1|TSC_GROUP6_IO1|TSC_GROUP7_IO1|TSC_GROUP8_IO1;
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <_ZL11MX_TSC_Initv+0x84>)
 800062e:	0018      	movs	r0, r3
 8000630:	f003 fc6f 	bl	8003f12 <HAL_TSC_Init>
 8000634:	0003      	movs	r3, r0
 8000636:	1e5a      	subs	r2, r3, #1
 8000638:	4193      	sbcs	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <_ZL11MX_TSC_Initv+0x7c>
  {
    Error_Handler();
 8000640:	f000 f966 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	200004c8 	.word	0x200004c8
 8000650:	40024000 	.word	0x40024000
 8000654:	eeeeeeee 	.word	0xeeeeeeee
 8000658:	11111111 	.word	0x11111111

0800065c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <_ZL11MX_DMA_Initv+0x58>)
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <_ZL11MX_DMA_Initv+0x58>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_ZL11MX_DMA_Initv+0x58>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2009      	movs	r0, #9
 8000680:	f000 fef4 	bl	800146c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000684:	2009      	movs	r0, #9
 8000686:	f000 ff06 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	200a      	movs	r0, #10
 8000690:	f000 feec 	bl	800146c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fefe 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	200b      	movs	r0, #11
 80006a0:	f000 fee4 	bl	800146c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006a4:	200b      	movs	r0, #11
 80006a6:	f000 fef6 	bl	8001496 <HAL_NVIC_EnableIRQ>

}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	40021000 	.word	0x40021000

080006b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b08d      	sub	sp, #52	; 0x34
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	241c      	movs	r4, #28
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	2314      	movs	r3, #20
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f006 ff41 	bl	8007550 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ce:	4b8b      	ldr	r3, [pc, #556]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 80006d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d2:	4b8a      	ldr	r3, [pc, #552]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 80006d4:	2110      	movs	r1, #16
 80006d6:	430a      	orrs	r2, r1
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006da:	4b88      	ldr	r3, [pc, #544]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	2210      	movs	r2, #16
 80006e0:	4013      	ands	r3, r2
 80006e2:	61bb      	str	r3, [r7, #24]
 80006e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b85      	ldr	r3, [pc, #532]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 80006e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ea:	4b84      	ldr	r3, [pc, #528]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 80006ec:	2104      	movs	r1, #4
 80006ee:	430a      	orrs	r2, r1
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f2:	4b82      	ldr	r3, [pc, #520]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	2204      	movs	r2, #4
 80006f8:	4013      	ands	r3, r2
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	4b7f      	ldr	r3, [pc, #508]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 8000700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000702:	4b7e      	ldr	r3, [pc, #504]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	430a      	orrs	r2, r1
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
 800070a:	4b7c      	ldr	r3, [pc, #496]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 800070c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b79      	ldr	r3, [pc, #484]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 8000718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071a:	4b78      	ldr	r3, [pc, #480]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 800071c:	2101      	movs	r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
 8000722:	4b76      	ldr	r3, [pc, #472]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b73      	ldr	r3, [pc, #460]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 8000730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000732:	4b72      	ldr	r3, [pc, #456]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 8000734:	2102      	movs	r1, #2
 8000736:	430a      	orrs	r2, r1
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
 800073a:	4b70      	ldr	r3, [pc, #448]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	2202      	movs	r2, #2
 8000740:	4013      	ands	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	4b6d      	ldr	r3, [pc, #436]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 8000748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074a:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 800074c:	2108      	movs	r1, #8
 800074e:	430a      	orrs	r2, r1
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
 8000752:	4b6a      	ldr	r3, [pc, #424]	; (80008fc <_ZL12MX_GPIO_Initv+0x244>)
 8000754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000756:	2208      	movs	r2, #8
 8000758:	4013      	ands	r3, r2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin, GPIO_PIN_RESET);
 800075e:	4b68      	ldr	r3, [pc, #416]	; (8000900 <_ZL12MX_GPIO_Initv+0x248>)
 8000760:	2200      	movs	r2, #0
 8000762:	2120      	movs	r1, #32
 8000764:	0018      	movs	r0, r3
 8000766:	f001 f9eb 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin, GPIO_PIN_RESET);
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	01db      	lsls	r3, r3, #7
 800076e:	4865      	ldr	r0, [pc, #404]	; (8000904 <_ZL12MX_GPIO_Initv+0x24c>)
 8000770:	2200      	movs	r2, #0
 8000772:	0019      	movs	r1, r3
 8000774:	f001 f9e4 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	4862      	ldr	r0, [pc, #392]	; (8000908 <_ZL12MX_GPIO_Initv+0x250>)
 800077e:	2200      	movs	r2, #0
 8000780:	0019      	movs	r1, r3
 8000782:	f001 f9dd 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AUDIO_SD_N_L_Pin|AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
 8000786:	23c0      	movs	r3, #192	; 0xc0
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	4860      	ldr	r0, [pc, #384]	; (800090c <_ZL12MX_GPIO_Initv+0x254>)
 800078c:	2200      	movs	r2, #0
 800078e:	0019      	movs	r1, r3
 8000790:	f001 f9d6 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_L_Pin SD_DET_A_Pin SD_DET_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_L_Pin|SD_DET_A_Pin|SD_DET_B_Pin;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	22c8      	movs	r2, #200	; 0xc8
 8000798:	0052      	lsls	r2, r2, #1
 800079a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	4a55      	ldr	r2, [pc, #340]	; (8000900 <_ZL12MX_GPIO_Initv+0x248>)
 80007ac:	0019      	movs	r1, r3
 80007ae:	0010      	movs	r0, r2
 80007b0:	f001 f848 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_L_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_L_Pin;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2220      	movs	r2, #32
 80007b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2201      	movs	r2, #1
 80007be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_L_GPIO_Port, &GPIO_InitStruct);
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	4a4c      	ldr	r2, [pc, #304]	; (8000900 <_ZL12MX_GPIO_Initv+0x248>)
 80007d0:	0019      	movs	r1, r3
 80007d2:	0010      	movs	r0, r2
 80007d4:	f001 f836 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_R_Pin */
  GPIO_InitStruct.Pin = BUTTON_R_Pin;
 80007d8:	0021      	movs	r1, r4
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	0192      	lsls	r2, r2, #6
 80007e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	000c      	movs	r4, r1
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_R_GPIO_Port, &GPIO_InitStruct);
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	4a44      	ldr	r2, [pc, #272]	; (8000904 <_ZL12MX_GPIO_Initv+0x24c>)
 80007f4:	0019      	movs	r1, r3
 80007f6:	0010      	movs	r0, r2
 80007f8:	f001 f824 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_R_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_R_Pin;
 80007fc:	0021      	movs	r1, r4
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	01d2      	lsls	r2, r2, #7
 8000804:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	000c      	movs	r4, r1
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2201      	movs	r2, #1
 800080c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_R_GPIO_Port, &GPIO_InitStruct);
 800081a:	193b      	adds	r3, r7, r4
 800081c:	4a39      	ldr	r2, [pc, #228]	; (8000904 <_ZL12MX_GPIO_Initv+0x24c>)
 800081e:	0019      	movs	r1, r3
 8000820:	0010      	movs	r0, r2
 8000822:	f001 f80f 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8000826:	0021      	movs	r1, r4
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	00d2      	lsls	r2, r2, #3
 800082e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	000c      	movs	r4, r1
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2201      	movs	r2, #1
 8000836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8000844:	193b      	adds	r3, r7, r4
 8000846:	4a30      	ldr	r2, [pc, #192]	; (8000908 <_ZL12MX_GPIO_Initv+0x250>)
 8000848:	0019      	movs	r1, r3
 800084a:	0010      	movs	r0, r2
 800084c:	f000 fffa 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_L_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_L_Pin;
 8000850:	0021      	movs	r1, r4
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	00d2      	lsls	r2, r2, #3
 8000858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	000c      	movs	r4, r1
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2201      	movs	r2, #1
 8000860:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_L_GPIO_Port, &GPIO_InitStruct);
 800086e:	193b      	adds	r3, r7, r4
 8000870:	4a26      	ldr	r2, [pc, #152]	; (800090c <_ZL12MX_GPIO_Initv+0x254>)
 8000872:	0019      	movs	r1, r3
 8000874:	0010      	movs	r0, r2
 8000876:	f000 ffe5 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI1_CS_N_Pin */
  GPIO_InitStruct.Pin = SD_SPI1_CS_N_Pin;
 800087a:	0021      	movs	r1, r4
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	0212      	lsls	r2, r2, #8
 8000882:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	000c      	movs	r4, r1
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2201      	movs	r2, #1
 800088a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2203      	movs	r2, #3
 8000896:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_SPI1_CS_N_GPIO_Port, &GPIO_InitStruct);
 8000898:	193a      	adds	r2, r7, r4
 800089a:	23a0      	movs	r3, #160	; 0xa0
 800089c:	05db      	lsls	r3, r3, #23
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 ffcf 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_R_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_R_Pin;
 80008a6:	0021      	movs	r1, r4
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008b0:	000c      	movs	r4, r1
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2211      	movs	r2, #17
 80008b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_R_GPIO_Port, &GPIO_InitStruct);
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <_ZL12MX_GPIO_Initv+0x254>)
 80008c8:	0019      	movs	r1, r3
 80008ca:	0010      	movs	r0, r2
 80008cc:	f000 ffba 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 80008d0:	0021      	movs	r1, r4
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	0212      	lsls	r2, r2, #8
 80008d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	4a08      	ldr	r2, [pc, #32]	; (800090c <_ZL12MX_GPIO_Initv+0x254>)
 80008ea:	0019      	movs	r1, r3
 80008ec:	0010      	movs	r0, r2
 80008ee:	f000 ffa9 	bl	8001844 <HAL_GPIO_Init>

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b00d      	add	sp, #52	; 0x34
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40021000 	.word	0x40021000
 8000900:	50001000 	.word	0x50001000
 8000904:	50000800 	.word	0x50000800
 8000908:	50001c00 	.word	0x50001c00
 800090c:	50000c00 	.word	0x50000c00

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <HAL_MspInit+0x24>)
 8000922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x24>)
 8000926:	2101      	movs	r1, #1
 8000928:	430a      	orrs	r2, r1
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <HAL_MspInit+0x24>)
 800092e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_MspInit+0x24>)
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	0549      	lsls	r1, r1, #21
 8000936:	430a      	orrs	r2, r1
 8000938:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b08b      	sub	sp, #44	; 0x2c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	2414      	movs	r4, #20
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	2314      	movs	r3, #20
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f006 fdfa 	bl	8007550 <memset>
  if(hi2s->Instance==SPI2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a3d      	ldr	r2, [pc, #244]	; (8000a58 <HAL_I2S_MspInit+0x114>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d173      	bne.n	8000a4e <HAL_I2S_MspInit+0x10a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000966:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <HAL_I2S_MspInit+0x118>)
 8000968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800096a:	4b3c      	ldr	r3, [pc, #240]	; (8000a5c <HAL_I2S_MspInit+0x118>)
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	01c9      	lsls	r1, r1, #7
 8000970:	430a      	orrs	r2, r1
 8000972:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <HAL_I2S_MspInit+0x118>)
 8000976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000978:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <HAL_I2S_MspInit+0x118>)
 800097a:	2102      	movs	r1, #2
 800097c:	430a      	orrs	r2, r1
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000980:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <HAL_I2S_MspInit+0x118>)
 8000982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000984:	2202      	movs	r2, #2
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800098c:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <HAL_I2S_MspInit+0x118>)
 800098e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000990:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <HAL_I2S_MspInit+0x118>)
 8000992:	2108      	movs	r1, #8
 8000994:	430a      	orrs	r2, r1
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
 8000998:	4b30      	ldr	r3, [pc, #192]	; (8000a5c <HAL_I2S_MspInit+0x118>)
 800099a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099c:	2208      	movs	r2, #8
 800099e:	4013      	ands	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB15     ------> I2S2_SD
    PD0     ------> I2S2_WS
    PD1     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	0212      	lsls	r2, r2, #8
 80009aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2202      	movs	r2, #2
 80009b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2202      	movs	r2, #2
 80009bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <HAL_I2S_MspInit+0x11c>)
 80009c8:	0019      	movs	r1, r3
 80009ca:	0010      	movs	r0, r2
 80009cc:	f000 ff3a 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
 80009d0:	0021      	movs	r1, r4
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2203      	movs	r2, #3
 80009d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2202      	movs	r2, #2
 80009dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2202      	movs	r2, #2
 80009e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2201      	movs	r2, #1
 80009ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <HAL_I2S_MspInit+0x120>)
 80009f4:	0019      	movs	r1, r3
 80009f6:	0010      	movs	r0, r2
 80009f8:	f000 ff24 	bl	8001844 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel7;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 80009fe:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <HAL_I2S_MspInit+0x128>)
 8000a00:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a04:	2202      	movs	r2, #2
 8000a06:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fd4b 	bl	80014d0 <HAL_DMA_Init>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_I2S_MspInit+0xfe>
    {
      Error_Handler();
 8000a3e:	f7ff ff67 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <HAL_I2S_MspInit+0x124>)
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b00b      	add	sp, #44	; 0x2c
 8000a54:	bd90      	pop	{r4, r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40003800 	.word	0x40003800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	50000400 	.word	0x50000400
 8000a64:	50000c00 	.word	0x50000c00
 8000a68:	20000284 	.word	0x20000284
 8000a6c:	40020080 	.word	0x40020080

08000a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	240c      	movs	r4, #12
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	2314      	movs	r3, #20
 8000a80:	001a      	movs	r2, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	f006 fd64 	bl	8007550 <memset>
  if(hspi->Instance==SPI1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a41      	ldr	r2, [pc, #260]	; (8000b94 <HAL_SPI_MspInit+0x124>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d000      	beq.n	8000a94 <HAL_SPI_MspInit+0x24>
 8000a92:	e07b      	b.n	8000b8c <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a94:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <HAL_SPI_MspInit+0x128>)
 8000a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a98:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <HAL_SPI_MspInit+0x128>)
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	0149      	lsls	r1, r1, #5
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	; (8000b98 <HAL_SPI_MspInit+0x128>)
 8000aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa6:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <HAL_SPI_MspInit+0x128>)
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <HAL_SPI_MspInit+0x128>)
 8000ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	22e0      	movs	r2, #224	; 0xe0
 8000abe:	0212      	lsls	r2, r2, #8
 8000ac0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	0021      	movs	r1, r4
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2202      	movs	r2, #2
 8000ada:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <HAL_SPI_MspInit+0x12c>)
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	0010      	movs	r0, r2
 8000ae4:	f000 feae 	bl	8001844 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000aea:	4a2e      	ldr	r2, [pc, #184]	; (8000ba4 <HAL_SPI_MspInit+0x134>)
 8000aec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000aee:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b00:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b06:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000b12:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fcd5 	bl	80014d0 <HAL_DMA_Init>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000b2a:	f7ff fef1 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000b32:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HAL_SPI_MspInit+0x130>)
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <HAL_SPI_MspInit+0x13c>)
 8000b3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b48:	2210      	movs	r2, #16
 8000b4a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fcac 	bl	80014d0 <HAL_DMA_Init>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8000b7c:	f7ff fec8 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b84:	649a      	str	r2, [r3, #72]	; 0x48
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_SPI_MspInit+0x138>)
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b009      	add	sp, #36	; 0x24
 8000b92:	bd90      	pop	{r4, r7, pc}
 8000b94:	40013000 	.word	0x40013000
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	50001000 	.word	0x50001000
 8000ba0:	20000324 	.word	0x20000324
 8000ba4:	4002001c 	.word	0x4002001c
 8000ba8:	2000036c 	.word	0x2000036c
 8000bac:	40020030 	.word	0x40020030

08000bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d000      	beq.n	8000bc6 <HAL_TIM_Base_MspInit+0x16>
 8000bc4:	e083      	b.n	8000cce <HAL_TIM_Base_MspInit+0x11e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc6:	4b44      	ldr	r3, [pc, #272]	; (8000cd8 <HAL_TIM_Base_MspInit+0x128>)
 8000bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bca:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <HAL_TIM_Base_MspInit+0x128>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000bd2:	4b42      	ldr	r3, [pc, #264]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000bd4:	4a42      	ldr	r2, [pc, #264]	; (8000ce0 <HAL_TIM_Base_MspInit+0x130>)
 8000bd6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8000bd8:	4b40      	ldr	r3, [pc, #256]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000bda:	2208      	movs	r2, #8
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bde:	4b3f      	ldr	r3, [pc, #252]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be4:	4b3d      	ldr	r3, [pc, #244]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000bea:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf0:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf6:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000bf8:	2280      	movs	r2, #128	; 0x80
 8000bfa:	00d2      	lsls	r2, r2, #3
 8000bfc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000c00:	2220      	movs	r2, #32
 8000c02:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c04:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000c0a:	4b34      	ldr	r3, [pc, #208]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 fc5f 	bl	80014d0 <HAL_DMA_Init>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 8000c16:	f7ff fe7b 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a2f      	ldr	r2, [pc, #188]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000c1e:	621a      	str	r2, [r3, #32]
 8000c20:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <HAL_TIM_Base_MspInit+0x12c>)
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000c26:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c28:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <HAL_TIM_Base_MspInit+0x138>)
 8000c2a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c32:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c40:	2280      	movs	r2, #128	; 0x80
 8000c42:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c44:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c4a:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	00d2      	lsls	r2, r2, #3
 8000c50:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c54:	2220      	movs	r2, #32
 8000c56:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fc35 	bl	80014d0 <HAL_DMA_Init>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8000c6a:	f7ff fe51 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_TIM_Base_MspInit+0x134>)
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000c7c:	4a1c      	ldr	r2, [pc, #112]	; (8000cf0 <HAL_TIM_Base_MspInit+0x140>)
 8000c7e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	00d2      	lsls	r2, r2, #3
 8000ca4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000ca8:	2220      	movs	r2, #32
 8000caa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f000 fc0b 	bl	80014d0 <HAL_DMA_Init>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_TIM_Base_MspInit+0x112>
    {
      Error_Handler();
 8000cbe:	f7ff fe27 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_TIM_Base_MspInit+0x13c>)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	200003f0 	.word	0x200003f0
 8000ce0:	40020058 	.word	0x40020058
 8000ce4:	20000438 	.word	0x20000438
 8000ce8:	40020008 	.word	0x40020008
 8000cec:	20000480 	.word	0x20000480
 8000cf0:	40020044 	.word	0x40020044

08000cf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	240c      	movs	r4, #12
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	0018      	movs	r0, r3
 8000d02:	2314      	movs	r3, #20
 8000d04:	001a      	movs	r2, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	f006 fc22 	bl	8007550 <memset>
  if(htim->Instance==TIM2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	05db      	lsls	r3, r3, #23
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d122      	bne.n	8000d5e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_TIM_MspPostInit+0x74>)
 8000d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_TIM_MspPostInit+0x74>)
 8000d1e:	2110      	movs	r1, #16
 8000d20:	430a      	orrs	r2, r1
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_TIM_MspPostInit+0x74>)
 8000d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d28:	2210      	movs	r2, #16
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PE9     ------> TIM2_CH1
    PE11     ------> TIM2_CH3
    PE12     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	22d0      	movs	r2, #208	; 0xd0
 8000d34:	0152      	lsls	r2, r2, #5
 8000d36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	0021      	movs	r1, r4
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM2;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <HAL_TIM_MspPostInit+0x78>)
 8000d56:	0019      	movs	r1, r3
 8000d58:	0010      	movs	r0, r2
 8000d5a:	f000 fd73 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b009      	add	sp, #36	; 0x24
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	50001000 	.word	0x50001000

08000d70 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b08d      	sub	sp, #52	; 0x34
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	241c      	movs	r4, #28
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	2314      	movs	r3, #20
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f006 fbe4 	bl	8007550 <memset>
  if(htsc->Instance==TSC)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a5d      	ldr	r2, [pc, #372]	; (8000f04 <HAL_TSC_MspInit+0x194>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d000      	beq.n	8000d94 <HAL_TSC_MspInit+0x24>
 8000d92:	e0b2      	b.n	8000efa <HAL_TSC_MspInit+0x18a>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000d94:	4b5c      	ldr	r3, [pc, #368]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d98:	4b5b      	ldr	r3, [pc, #364]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	0249      	lsls	r1, r1, #9
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
 8000da2:	4b59      	ldr	r3, [pc, #356]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	025b      	lsls	r3, r3, #9
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db0:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db4:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000db6:	2104      	movs	r1, #4
 8000db8:	430a      	orrs	r2, r1
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dbc:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b4f      	ldr	r3, [pc, #316]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dcc:	4b4e      	ldr	r3, [pc, #312]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000dce:	2101      	movs	r1, #1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd4:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b49      	ldr	r3, [pc, #292]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000de6:	2102      	movs	r1, #2
 8000de8:	430a      	orrs	r2, r1
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dec:	4b46      	ldr	r3, [pc, #280]	; (8000f08 <HAL_TSC_MspInit+0x198>)
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	2202      	movs	r2, #2
 8000df2:	4013      	ands	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    PB3     ------> TSC_G5_IO1
    PB4     ------> TSC_G5_IO2
    PB6     ------> TSC_G5_IO3
    PB7     ------> TSC_G5_IO4
    */
    GPIO_InitStruct.Pin = TOUCH_G7_1_SAMP_Pin|TOUCH_G3_1_SAMP_Pin|TOUCH_G8_1_SAMP_Pin;
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	2261      	movs	r2, #97	; 0x61
 8000dfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	2212      	movs	r2, #18
 8000e02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2203      	movs	r2, #3
 8000e14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	4a3c      	ldr	r2, [pc, #240]	; (8000f0c <HAL_TSC_MspInit+0x19c>)
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	0010      	movs	r0, r2
 8000e1e:	f000 fd11 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TOUCH_G7_2_STAR_0_Pin|TOUCH_G7_3_STAR_1_Pin|TOUCH_G7_4_STAR_2_Pin|TOUCH_G8_2_STAR_15_Pin
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	4a3a      	ldr	r2, [pc, #232]	; (8000f10 <HAL_TSC_MspInit+0x1a0>)
 8000e26:	601a      	str	r2, [r3, #0]
                          |TOUCH_G8_3_STAR_16_Pin|TOUCH_G8_4_STAR_17_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	4a32      	ldr	r2, [pc, #200]	; (8000f0c <HAL_TSC_MspInit+0x19c>)
 8000e44:	0019      	movs	r1, r3
 8000e46:	0010      	movs	r0, r2
 8000e48:	f000 fcfc 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TOUCH_G1_1_SAMP_Pin|TOUCH_G2_1_SAMP_Pin|TOUCH_G4_1_SAMP_Pin;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	4a31      	ldr	r2, [pc, #196]	; (8000f14 <HAL_TSC_MspInit+0x1a4>)
 8000e50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2212      	movs	r2, #18
 8000e56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2203      	movs	r2, #3
 8000e68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	193a      	adds	r2, r7, r4
 8000e6c:	23a0      	movs	r3, #160	; 0xa0
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 fce6 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TOUCH_G1_2_STAR_3_Pin|TOUCH_G1_3_STAR_4_Pin|TOUCH_G1_4_STAR_5_Pin|TOUCH_G2_2_STAR_6_Pin
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	4a27      	ldr	r2, [pc, #156]	; (8000f18 <HAL_TSC_MspInit+0x1a8>)
 8000e7c:	601a      	str	r2, [r3, #0]
                          |TOUCH_G2_3_STAR_7_Pin|TOUCH_G2_4_STAR_8_Pin|TOUCH_G4_2_STAR_18_Pin|TOUCH_G4_3_STAR_19_Pin
                          |TOUCH_G4_4_STAR_20_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	2202      	movs	r2, #2
 8000e82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2203      	movs	r2, #3
 8000e94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	193a      	adds	r2, r7, r4
 8000e98:	23a0      	movs	r3, #160	; 0xa0
 8000e9a:	05db      	lsls	r3, r3, #23
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 fcd0 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TOUCH_G3_2_STAR_9_Pin|TOUCH_G3_3_STAR_10_Pin|TOUCH_G3_4_STAR_11_Pin|TOUCH_G6_2_STAR_12_Pin
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <HAL_TSC_MspInit+0x1ac>)
 8000ea8:	601a      	str	r2, [r3, #0]
                          |TOUCH_G6_3_STAR_13_Pin|TOUCH_G6_4_STAR_14_Pin|TOUCH_G5_2_STAR_21_Pin|TOUCH_G5_3_STAR_22_Pin
                          |TOUCH_G5_4_STAR_23_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	2202      	movs	r2, #2
 8000eae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	4a16      	ldr	r2, [pc, #88]	; (8000f20 <HAL_TSC_MspInit+0x1b0>)
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	0010      	movs	r0, r2
 8000eca:	f000 fcbb 	bl	8001844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TOUCH_G6_1_SAMP_Pin|TOUCH_G4_1_SAMPB3_Pin;
 8000ece:	0021      	movs	r1, r4
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_TSC_MspInit+0x1b4>)
 8000ed4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2212      	movs	r2, #18
 8000eda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	2203      	movs	r2, #3
 8000eec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <HAL_TSC_MspInit+0x1b0>)
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	f000 fca5 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b00d      	add	sp, #52	; 0x34
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	40024000 	.word	0x40024000
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	50000800 	.word	0x50000800
 8000f10:	0000038e 	.word	0x0000038e
 8000f14:	00000211 	.word	0x00000211
 8000f18:	00001cee 	.word	0x00001cee
 8000f1c:	000070d7 	.word	0x000070d7
 8000f20:	50000400 	.word	0x50000400
 8000f24:	00000808 	.word	0x00000808

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f000 f9b0 	bl	80012b4 <HAL_IncTick>
  /* TSL timing for ECS, DTO */
  TSL_tim_ProcessIT();
 8000f54:	f003 f932 	bl	80041bc <TSL_tim_ProcessIT>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <DMA1_Channel1_IRQHandler+0x14>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 fb90 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	20000438 	.word	0x20000438

08000f78 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f000 fb84 	bl	800168c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 fb80 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	20000324 	.word	0x20000324
 8000f98:	2000036c 	.word	0x2000036c

08000f9c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fb72 	bl	800168c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 fb6e 	bl	800168c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fb6a 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	20000480 	.word	0x20000480
 8000fc4:	200003f0 	.word	0x200003f0
 8000fc8:	20000284 	.word	0x20000284

08000fcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <SystemInit+0x64>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <SystemInit+0x64>)
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	0049      	lsls	r1, r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <SystemInit+0x64>)
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <SystemInit+0x64>)
 8000fe4:	4913      	ldr	r1, [pc, #76]	; (8001034 <SystemInit+0x68>)
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <SystemInit+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <SystemInit+0x64>)
 8000ff0:	4911      	ldr	r1, [pc, #68]	; (8001038 <SystemInit+0x6c>)
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <SystemInit+0x64>)
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <SystemInit+0x64>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	438a      	bics	r2, r1
 8001000:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <SystemInit+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <SystemInit+0x64>)
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <SystemInit+0x70>)
 800100a:	400a      	ands	r2, r1
 800100c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <SystemInit+0x64>)
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	4b07      	ldr	r3, [pc, #28]	; (8001030 <SystemInit+0x64>)
 8001014:	490a      	ldr	r1, [pc, #40]	; (8001040 <SystemInit+0x74>)
 8001016:	400a      	ands	r2, r1
 8001018:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SystemInit+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <SystemInit+0x78>)
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	0512      	lsls	r2, r2, #20
 8001026:	609a      	str	r2, [r3, #8]
#endif
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40021000 	.word	0x40021000
 8001034:	88ff400c 	.word	0x88ff400c
 8001038:	fef6fff6 	.word	0xfef6fff6
 800103c:	fffbffff 	.word	0xfffbffff
 8001040:	ff02ffff 	.word	0xff02ffff
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <play_wav>:
static uint16_t audio_buf_0[256];
static uint16_t audio_buf_1[256];
static uint16_t *audio_buf_ptr;
static uint16_t *audio_buf_ptr_start;

void play_wav(char wav_file[32]) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_SET);
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	484e      	ldr	r0, [pc, #312]	; (8001190 <play_wav+0x148>)
 8001056:	2201      	movs	r2, #1
 8001058:	0019      	movs	r1, r3
 800105a:	f000 fd71 	bl	8001b40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AUDIO_SD_N_R_GPIO_Port, AUDIO_SD_N_R_Pin, GPIO_PIN_SET);
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	484b      	ldr	r0, [pc, #300]	; (8001190 <play_wav+0x148>)
 8001064:	2201      	movs	r2, #1
 8001066:	0019      	movs	r1, r3
 8001068:	f000 fd6a 	bl	8001b40 <HAL_GPIO_WritePin>
    fr = f_open(&fil, wav_file, FA_READ);  // open file
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4b49      	ldr	r3, [pc, #292]	; (8001194 <play_wav+0x14c>)
 8001070:	2201      	movs	r2, #1
 8001072:	0018      	movs	r0, r3
 8001074:	f006 f86c 	bl	8007150 <f_open>
 8001078:	0003      	movs	r3, r0
 800107a:	001a      	movs	r2, r3
 800107c:	4b46      	ldr	r3, [pc, #280]	; (8001198 <play_wav+0x150>)
 800107e:	701a      	strb	r2, [r3, #0]
    //f_lseek(&fil, 76);                      // move to data region of .wav
    audio_buf_ptr = audio_buf_0;        // point to buffer 0 first
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <play_wav+0x154>)
 8001082:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <play_wav+0x158>)
 8001084:	601a      	str	r2, [r3, #0]
    audio_buf_ptr_start = audio_buf_0;
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <play_wav+0x15c>)
 8001088:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <play_wav+0x158>)
 800108a:	601a      	str	r2, [r3, #0]

    while(1) {
        f_read(&fil, &wav_buf[0], 512, &bytes_read);
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <play_wav+0x160>)
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	4946      	ldr	r1, [pc, #280]	; (80011ac <play_wav+0x164>)
 8001094:	483f      	ldr	r0, [pc, #252]	; (8001194 <play_wav+0x14c>)
 8001096:	f006 f8f1 	bl	800727c <f_read>

        //////////// End of File ////////////
        if (bytes_read < 512) {
 800109a:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <play_wav+0x160>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d212      	bcs.n	80010cc <play_wav+0x84>
            f_close(&fil);
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <play_wav+0x14c>)
 80010a8:	0018      	movs	r0, r3
 80010aa:	f006 f9e7 	bl	800747c <f_close>
            HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_RESET);
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4837      	ldr	r0, [pc, #220]	; (8001190 <play_wav+0x148>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	0019      	movs	r1, r3
 80010b8:	f000 fd42 	bl	8001b40 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(AUDIO_SD_N_R_GPIO_Port, AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4833      	ldr	r0, [pc, #204]	; (8001190 <play_wav+0x148>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	0019      	movs	r1, r3
 80010c6:	f000 fd3b 	bl	8001b40 <HAL_GPIO_WritePin>
            return;
 80010ca:	e05d      	b.n	8001188 <play_wav+0x140>
        }
        //////////// End of File ////////////

        // convert raw bytes from wav file into 16-bit audio samples
        for (int ii=0; ii<511; ii+=2) {
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e033      	b.n	800113a <play_wav+0xf2>
            *audio_buf_ptr = ((uint16_t)wav_buf[ii+1] << 8) | (uint16_t)wav_buf[ii];
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	4a35      	ldr	r2, [pc, #212]	; (80011ac <play_wav+0x164>)
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	4933      	ldr	r1, [pc, #204]	; (80011ac <play_wav+0x164>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	18cb      	adds	r3, r1, r3
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <play_wav+0x154>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	b292      	uxth	r2, r2
 80010f2:	801a      	strh	r2, [r3, #0]
            if (*audio_buf_ptr > 32767) {
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <play_wav+0x154>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	da0c      	bge.n	800111a <play_wav+0xd2>
                *audio_buf_ptr = (*audio_buf_ptr >> 1) + 32768;
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <play_wav+0x154>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	085b      	lsrs	r3, r3, #1
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <play_wav+0x154>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4928      	ldr	r1, [pc, #160]	; (80011b0 <play_wav+0x168>)
 8001110:	468c      	mov	ip, r1
 8001112:	4462      	add	r2, ip
 8001114:	b292      	uxth	r2, r2
 8001116:	801a      	strh	r2, [r3, #0]
 8001118:	e007      	b.n	800112a <play_wav+0xe2>
            } else {
                *audio_buf_ptr = *audio_buf_ptr >> 1;
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <play_wav+0x154>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	881a      	ldrh	r2, [r3, #0]
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <play_wav+0x154>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0852      	lsrs	r2, r2, #1
 8001126:	b292      	uxth	r2, r2
 8001128:	801a      	strh	r2, [r3, #0]
            }
            audio_buf_ptr++;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <play_wav+0x154>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1c9a      	adds	r2, r3, #2
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <play_wav+0x154>)
 8001132:	601a      	str	r2, [r3, #0]
        for (int ii=0; ii<511; ii+=2) {
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3302      	adds	r3, #2
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	23ff      	movs	r3, #255	; 0xff
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	429a      	cmp	r2, r3
 8001142:	ddc6      	ble.n	80010d2 <play_wav+0x8a>
        }

        while (hi2s2.State != HAL_I2S_STATE_READY);    // Wait for I2S to be ready
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <play_wav+0x16c>)
 8001148:	2235      	movs	r2, #53	; 0x35
 800114a:	5c9b      	ldrb	r3, [r3, r2]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d1f9      	bne.n	8001146 <play_wav+0xfe>
        HAL_I2S_Transmit_DMA(&hi2s2, audio_buf_ptr_start, 256);    // play buffer
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <play_wav+0x15c>)
 8001154:	6819      	ldr	r1, [r3, #0]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	005a      	lsls	r2, r3, #1
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <play_wav+0x16c>)
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fe09 	bl	8001d74 <HAL_I2S_Transmit_DMA>
        
        // ping pong buffer
        if (audio_buf_ptr_start == &audio_buf_0[0]) {
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <play_wav+0x15c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <play_wav+0x158>)
 8001168:	429a      	cmp	r2, r3
 800116a:	d106      	bne.n	800117a <play_wav+0x132>
            audio_buf_ptr = &audio_buf_1[0];
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <play_wav+0x154>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <play_wav+0x170>)
 8001170:	601a      	str	r2, [r3, #0]
            audio_buf_ptr_start = &audio_buf_1[0];
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <play_wav+0x15c>)
 8001174:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <play_wav+0x170>)
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e788      	b.n	800108c <play_wav+0x44>
        } else {
            audio_buf_ptr = &audio_buf_0[0];
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <play_wav+0x154>)
 800117c:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <play_wav+0x158>)
 800117e:	601a      	str	r2, [r3, #0]
            audio_buf_ptr_start = &audio_buf_0[0];
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <play_wav+0x15c>)
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <play_wav+0x158>)
 8001184:	601a      	str	r2, [r3, #0]
        f_read(&fil, &wav_buf[0], 512, &bytes_read);
 8001186:	e781      	b.n	800108c <play_wav+0x44>
        }
    }
    
}
 8001188:	46bd      	mov	sp, r7
 800118a:	b004      	add	sp, #16
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	50000c00 	.word	0x50000c00
 8001194:	20000734 	.word	0x20000734
 8001198:	20000244 	.word	0x20000244
 800119c:	20000b50 	.word	0x20000b50
 80011a0:	20000750 	.word	0x20000750
 80011a4:	20000b54 	.word	0x20000b54
 80011a8:	20000240 	.word	0x20000240
 80011ac:	20000040 	.word	0x20000040
 80011b0:	ffff8000 	.word	0xffff8000
 80011b4:	20000248 	.word	0x20000248
 80011b8:	20000950 	.word	0x20000950

080011bc <HAL_I2S_TxCpltCallback>:
  f_close(&fil);
  HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(AUDIO_SD_N_R_GPIO_Port, AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef* hi2s) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    return;
 80011c4:	46c0      	nop			; (mov r8, r8)
}
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}

080011cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80011d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011d2:	e003      	b.n	80011dc <LoopCopyDataInit>

080011d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80011d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011da:	3104      	adds	r1, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <LoopForever+0xa>)
  ldr  r3, =_edata
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <LoopForever+0xe>)
  adds  r2, r0, r1
 80011e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011e4:	d3f6      	bcc.n	80011d4 <CopyDataInit>
  ldr  r2, =_sbss
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <LoopForever+0x12>)
  b  LoopFillZerobss
 80011e8:	e002      	b.n	80011f0 <LoopFillZerobss>

080011ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80011ea:	2300      	movs	r3, #0
  str  r3, [r2]
 80011ec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ee:	3204      	adds	r2, #4

080011f0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <LoopForever+0x16>)
  cmp  r2, r3
 80011f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011f4:	d3f9      	bcc.n	80011ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011f6:	f7ff fee9 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fa:	f006 f985 	bl	8007508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fe:	f7ff f80f 	bl	8000220 <main>

08001202 <LoopForever>:

LoopForever:
    b LoopForever
 8001202:	e7fe      	b.n	8001202 <LoopForever>
   ldr   r0, =_estack
 8001204:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8001208:	080083e8 	.word	0x080083e8
  ldr  r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001210:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8001214:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8001218:	20001008 	.word	0x20001008

0800121c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC1_COMP_IRQHandler>
	...

08001220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x3c>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_Init+0x3c>)
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	430a      	orrs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001238:	2000      	movs	r0, #0
 800123a:	f000 f811 	bl	8001260 <HAL_InitTick>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d003      	beq.n	800124a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	2201      	movs	r2, #1
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e001      	b.n	800124e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800124a:	f7ff fb67 	bl	800091c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	781b      	ldrb	r3, [r3, #0]
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	240f      	movs	r4, #15
 800126a:	193b      	adds	r3, r7, r4
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_InitTick+0x50>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	22fa      	movs	r2, #250	; 0xfa
 8001276:	0091      	lsls	r1, r2, #2
 8001278:	0018      	movs	r0, r3
 800127a:	f7fe ff45 	bl	8000108 <__udivsi3>
 800127e:	0003      	movs	r3, r0
 8001280:	0018      	movs	r0, r3
 8001282:	f000 f918 	bl	80014b6 <HAL_SYSTICK_Config>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d003      	beq.n	8001292 <HAL_InitTick+0x32>
  {
    status = HAL_ERROR;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e006      	b.n	80012a0 <HAL_InitTick+0x40>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	2301      	movs	r3, #1
 8001296:	425b      	negs	r3, r3
 8001298:	2200      	movs	r2, #0
 800129a:	0018      	movs	r0, r3
 800129c:	f000 f8e6 	bl	800146c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80012a0:	230f      	movs	r3, #15
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	781b      	ldrb	r3, [r3, #0]
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b005      	add	sp, #20
 80012ac:	bd90      	pop	{r4, r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	20000000 	.word	0x20000000

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  uwTick++;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_IncTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	4b02      	ldr	r3, [pc, #8]	; (80012c8 <HAL_IncTick+0x14>)
 80012c0:	601a      	str	r2, [r3, #0]
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000d68 	.word	0x20000d68

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_GetTick+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	20000d68 	.word	0x20000d68

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff fff0 	bl	80012cc <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	d002      	beq.n	8001300 <HAL_Delay+0x20>
  {
    wait++;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	f7ff ffe3 	bl	80012cc <HAL_GetTick>
 8001306:	0002      	movs	r2, r0
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	429a      	cmp	r2, r3
 8001310:	d8f7      	bhi.n	8001302 <HAL_Delay+0x22>
  {
  }
}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b004      	add	sp, #16
 800131a:	bd80      	pop	{r7, pc}

0800131c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	0002      	movs	r2, r0
 8001324:	1dfb      	adds	r3, r7, #7
 8001326:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	001a      	movs	r2, r3
 800132e:	231f      	movs	r3, #31
 8001330:	401a      	ands	r2, r3
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <NVIC_EnableIRQ+0x28>)
 8001334:	2101      	movs	r1, #1
 8001336:	4091      	lsls	r1, r2
 8001338:	000a      	movs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}
 8001344:	e000e100 	.word	0xe000e100

08001348 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	0002      	movs	r2, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b7f      	cmp	r3, #127	; 0x7f
 800135c:	d932      	bls.n	80013c4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135e:	4a2f      	ldr	r2, [pc, #188]	; (800141c <NVIC_SetPriority+0xd4>)
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	0019      	movs	r1, r3
 8001366:	230f      	movs	r3, #15
 8001368:	400b      	ands	r3, r1
 800136a:	3b08      	subs	r3, #8
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3306      	adds	r3, #6
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	18d3      	adds	r3, r2, r3
 8001374:	3304      	adds	r3, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	1dfa      	adds	r2, r7, #7
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	0011      	movs	r1, r2
 800137e:	2203      	movs	r2, #3
 8001380:	400a      	ands	r2, r1
 8001382:	00d2      	lsls	r2, r2, #3
 8001384:	21ff      	movs	r1, #255	; 0xff
 8001386:	4091      	lsls	r1, r2
 8001388:	000a      	movs	r2, r1
 800138a:	43d2      	mvns	r2, r2
 800138c:	401a      	ands	r2, r3
 800138e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	019b      	lsls	r3, r3, #6
 8001394:	22ff      	movs	r2, #255	; 0xff
 8001396:	401a      	ands	r2, r3
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	0018      	movs	r0, r3
 800139e:	2303      	movs	r3, #3
 80013a0:	4003      	ands	r3, r0
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a6:	481d      	ldr	r0, [pc, #116]	; (800141c <NVIC_SetPriority+0xd4>)
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	001c      	movs	r4, r3
 80013ae:	230f      	movs	r3, #15
 80013b0:	4023      	ands	r3, r4
 80013b2:	3b08      	subs	r3, #8
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	430a      	orrs	r2, r1
 80013b8:	3306      	adds	r3, #6
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	18c3      	adds	r3, r0, r3
 80013be:	3304      	adds	r3, #4
 80013c0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013c2:	e027      	b.n	8001414 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c4:	4a16      	ldr	r2, [pc, #88]	; (8001420 <NVIC_SetPriority+0xd8>)
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	33c0      	adds	r3, #192	; 0xc0
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	589b      	ldr	r3, [r3, r2]
 80013d4:	1dfa      	adds	r2, r7, #7
 80013d6:	7812      	ldrb	r2, [r2, #0]
 80013d8:	0011      	movs	r1, r2
 80013da:	2203      	movs	r2, #3
 80013dc:	400a      	ands	r2, r1
 80013de:	00d2      	lsls	r2, r2, #3
 80013e0:	21ff      	movs	r1, #255	; 0xff
 80013e2:	4091      	lsls	r1, r2
 80013e4:	000a      	movs	r2, r1
 80013e6:	43d2      	mvns	r2, r2
 80013e8:	401a      	ands	r2, r3
 80013ea:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	019b      	lsls	r3, r3, #6
 80013f0:	22ff      	movs	r2, #255	; 0xff
 80013f2:	401a      	ands	r2, r3
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	0018      	movs	r0, r3
 80013fa:	2303      	movs	r3, #3
 80013fc:	4003      	ands	r3, r0
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <NVIC_SetPriority+0xd8>)
 8001404:	1dfb      	adds	r3, r7, #7
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b25b      	sxtb	r3, r3
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	430a      	orrs	r2, r1
 800140e:	33c0      	adds	r3, #192	; 0xc0
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	501a      	str	r2, [r3, r0]
}
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b003      	add	sp, #12
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	e000ed00 	.word	0xe000ed00
 8001420:	e000e100 	.word	0xe000e100

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	045b      	lsls	r3, r3, #17
 8001434:	429a      	cmp	r2, r3
 8001436:	d301      	bcc.n	800143c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001438:	2301      	movs	r3, #1
 800143a:	e010      	b.n	800145e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <SysTick_Config+0x44>)
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	3a01      	subs	r2, #1
 8001442:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001444:	2301      	movs	r3, #1
 8001446:	425b      	negs	r3, r3
 8001448:	2103      	movs	r1, #3
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff ff7c 	bl	8001348 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x44>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x44>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	210f      	movs	r1, #15
 8001478:	187b      	adds	r3, r7, r1
 800147a:	1c02      	adds	r2, r0, #0
 800147c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	187b      	adds	r3, r7, r1
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f7ff ff5d 	bl	8001348 <NVIC_SetPriority>
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b004      	add	sp, #16
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	0002      	movs	r2, r0
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff ff37 	bl	800131c <NVIC_EnableIRQ>
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff ffaf 	bl	8001424 <SysTick_Config>
 80014c6:	0003      	movs	r3, r0
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e061      	b.n	80015a6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <HAL_DMA_Init+0xe0>)
 80014e8:	4694      	mov	ip, r2
 80014ea:	4463      	add	r3, ip
 80014ec:	2114      	movs	r1, #20
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7fe fe0a 	bl	8000108 <__udivsi3>
 80014f4:	0003      	movs	r3, r0
 80014f6:	009a      	lsls	r2, r3, #2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a2d      	ldr	r2, [pc, #180]	; (80015b4 <HAL_DMA_Init+0xe4>)
 8001500:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2225      	movs	r2, #37	; 0x25
 8001506:	2102      	movs	r1, #2
 8001508:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <HAL_DMA_Init+0xe8>)
 8001516:	4013      	ands	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4313      	orrs	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	01db      	lsls	r3, r3, #7
 8001558:	429a      	cmp	r2, r3
 800155a:	d018      	beq.n	800158e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_DMA_Init+0xec>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	211c      	movs	r1, #28
 8001566:	400b      	ands	r3, r1
 8001568:	210f      	movs	r1, #15
 800156a:	4099      	lsls	r1, r3
 800156c:	000b      	movs	r3, r1
 800156e:	43d9      	mvns	r1, r3
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_DMA_Init+0xec>)
 8001572:	400a      	ands	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_DMA_Init+0xec>)
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	201c      	movs	r0, #28
 8001584:	4003      	ands	r3, r0
 8001586:	409a      	lsls	r2, r3
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_DMA_Init+0xec>)
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2225      	movs	r2, #37	; 0x25
 8001598:	2101      	movs	r1, #1
 800159a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2224      	movs	r2, #36	; 0x24
 80015a0:	2100      	movs	r1, #0
 80015a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	bffdfff8 	.word	0xbffdfff8
 80015b4:	40020000 	.word	0x40020000
 80015b8:	ffff800f 	.word	0xffff800f
 80015bc:	400200a8 	.word	0x400200a8

080015c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ce:	2317      	movs	r3, #23
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2224      	movs	r2, #36	; 0x24
 80015da:	5c9b      	ldrb	r3, [r3, r2]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_DMA_Start_IT+0x24>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e04f      	b.n	8001684 <HAL_DMA_Start_IT+0xc4>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2224      	movs	r2, #36	; 0x24
 80015e8:	2101      	movs	r1, #1
 80015ea:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2225      	movs	r2, #37	; 0x25
 80015f0:	5c9b      	ldrb	r3, [r3, r2]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d13a      	bne.n	800166e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2225      	movs	r2, #37	; 0x25
 80015fc:	2102      	movs	r1, #2
 80015fe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	438a      	bics	r2, r1
 8001614:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f8e3 	bl	80017e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	210e      	movs	r1, #14
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e00f      	b.n	800165c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2104      	movs	r1, #4
 8001648:	438a      	bics	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	210a      	movs	r1, #10
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2101      	movs	r1, #1
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e007      	b.n	800167e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2224      	movs	r2, #36	; 0x24
 8001672:	2100      	movs	r1, #0
 8001674:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001676:	2317      	movs	r3, #23
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2202      	movs	r2, #2
 800167c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800167e:	2317      	movs	r3, #23
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	781b      	ldrb	r3, [r3, #0]
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b006      	add	sp, #24
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	221c      	movs	r2, #28
 80016aa:	4013      	ands	r3, r2
 80016ac:	2204      	movs	r2, #4
 80016ae:	409a      	lsls	r2, r3
 80016b0:	0013      	movs	r3, r2
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	d026      	beq.n	8001706 <HAL_DMA_IRQHandler+0x7a>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2204      	movs	r2, #4
 80016bc:	4013      	ands	r3, r2
 80016be:	d022      	beq.n	8001706 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2220      	movs	r2, #32
 80016c8:	4013      	ands	r3, r2
 80016ca:	d107      	bne.n	80016dc <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2104      	movs	r1, #4
 80016d8:	438a      	bics	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	221c      	movs	r2, #28
 80016e2:	401a      	ands	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	2104      	movs	r1, #4
 80016ea:	4091      	lsls	r1, r2
 80016ec:	000a      	movs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d100      	bne.n	80016fa <HAL_DMA_IRQHandler+0x6e>
 80016f8:	e071      	b.n	80017de <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	0010      	movs	r0, r2
 8001702:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001704:	e06b      	b.n	80017de <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	221c      	movs	r2, #28
 800170c:	4013      	ands	r3, r2
 800170e:	2202      	movs	r2, #2
 8001710:	409a      	lsls	r2, r3
 8001712:	0013      	movs	r3, r2
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4013      	ands	r3, r2
 8001718:	d02d      	beq.n	8001776 <HAL_DMA_IRQHandler+0xea>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2202      	movs	r2, #2
 800171e:	4013      	ands	r3, r2
 8001720:	d029      	beq.n	8001776 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2220      	movs	r2, #32
 800172a:	4013      	ands	r3, r2
 800172c:	d10b      	bne.n	8001746 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	210a      	movs	r1, #10
 800173a:	438a      	bics	r2, r1
 800173c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2225      	movs	r2, #37	; 0x25
 8001742:	2101      	movs	r1, #1
 8001744:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	221c      	movs	r2, #28
 800174c:	401a      	ands	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2102      	movs	r1, #2
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2224      	movs	r2, #36	; 0x24
 800175e:	2100      	movs	r1, #0
 8001760:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	2b00      	cmp	r3, #0
 8001768:	d039      	beq.n	80017de <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	0010      	movs	r0, r2
 8001772:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001774:	e033      	b.n	80017de <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	221c      	movs	r2, #28
 800177c:	4013      	ands	r3, r2
 800177e:	2208      	movs	r2, #8
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	d02a      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x154>
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2208      	movs	r2, #8
 800178e:	4013      	ands	r3, r2
 8001790:	d026      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	210e      	movs	r1, #14
 800179e:	438a      	bics	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	221c      	movs	r2, #28
 80017a8:	401a      	ands	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	2101      	movs	r1, #1
 80017b0:	4091      	lsls	r1, r2
 80017b2:	000a      	movs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2225      	movs	r2, #37	; 0x25
 80017c0:	2101      	movs	r1, #1
 80017c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2224      	movs	r2, #36	; 0x24
 80017c8:	2100      	movs	r1, #0
 80017ca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	0010      	movs	r0, r2
 80017dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46c0      	nop			; (mov r8, r8)
}
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b004      	add	sp, #16
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	221c      	movs	r2, #28
 80017fc:	401a      	ands	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	2101      	movs	r1, #1
 8001804:	4091      	lsls	r1, r2
 8001806:	000a      	movs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b10      	cmp	r3, #16
 8001818:	d108      	bne.n	800182c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800182a:	e007      	b.n	800183c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	60da      	str	r2, [r3, #12]
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b004      	add	sp, #16
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800185a:	e155      	b.n	8001b08 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4091      	lsls	r1, r2
 8001866:	000a      	movs	r2, r1
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d100      	bne.n	8001874 <HAL_GPIO_Init+0x30>
 8001872:	e146      	b.n	8001b02 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x40>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b12      	cmp	r3, #18
 8001882:	d123      	bne.n	80018cc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	58d3      	ldr	r3, [r2, r3]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2207      	movs	r2, #7
 8001896:	4013      	ands	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	409a      	lsls	r2, r3
 800189e:	0013      	movs	r3, r2
 80018a0:	43da      	mvns	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2107      	movs	r1, #7
 80018b0:	400b      	ands	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	409a      	lsls	r2, r3
 80018b6:	0013      	movs	r3, r2
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	0092      	lsls	r2, r2, #2
 80018c8:	6939      	ldr	r1, [r7, #16]
 80018ca:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d00b      	beq.n	80018ec <HAL_GPIO_Init+0xa8>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d007      	beq.n	80018ec <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e0:	2b11      	cmp	r3, #17
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b12      	cmp	r3, #18
 80018ea:	d130      	bne.n	800194e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	409a      	lsls	r2, r3
 80018fa:	0013      	movs	r3, r2
 80018fc:	43da      	mvns	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	0013      	movs	r3, r2
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001922:	2201      	movs	r2, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	43da      	mvns	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	2201      	movs	r2, #1
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	43da      	mvns	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2203      	movs	r2, #3
 800196c:	401a      	ands	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	409a      	lsls	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	43da      	mvns	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	055b      	lsls	r3, r3, #21
 80019ba:	4013      	ands	r3, r2
 80019bc:	d100      	bne.n	80019c0 <HAL_GPIO_Init+0x17c>
 80019be:	e0a0      	b.n	8001b02 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c0:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_GPIO_Init+0x2dc>)
 80019c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c4:	4b56      	ldr	r3, [pc, #344]	; (8001b20 <HAL_GPIO_Init+0x2dc>)
 80019c6:	2101      	movs	r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80019cc:	4a55      	ldr	r2, [pc, #340]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	589b      	ldr	r3, [r3, r2]
 80019d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2203      	movs	r2, #3
 80019de:	4013      	ands	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	409a      	lsls	r2, r3
 80019e6:	0013      	movs	r3, r2
 80019e8:	43da      	mvns	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	23a0      	movs	r3, #160	; 0xa0
 80019f4:	05db      	lsls	r3, r3, #23
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d01f      	beq.n	8001a3a <HAL_GPIO_Init+0x1f6>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <HAL_GPIO_Init+0x2e4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d019      	beq.n	8001a36 <HAL_GPIO_Init+0x1f2>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x1ee>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a48      	ldr	r2, [pc, #288]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x1ea>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a47      	ldr	r2, [pc, #284]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x1e6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a46      	ldr	r2, [pc, #280]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a22:	2305      	movs	r3, #5
 8001a24:	e00a      	b.n	8001a3c <HAL_GPIO_Init+0x1f8>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e008      	b.n	8001a3c <HAL_GPIO_Init+0x1f8>
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x1f8>
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e004      	b.n	8001a3c <HAL_GPIO_Init+0x1f8>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e002      	b.n	8001a3c <HAL_GPIO_Init+0x1f8>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_GPIO_Init+0x1f8>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	2103      	movs	r1, #3
 8001a40:	400a      	ands	r2, r1
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	4093      	lsls	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a4c:	4935      	ldr	r1, [pc, #212]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	3302      	adds	r3, #2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	025b      	lsls	r3, r3, #9
 8001a72:	4013      	ands	r3, r2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a7e:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	029b      	lsls	r3, r3, #10
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	035b      	lsls	r3, r3, #13
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	039b      	lsls	r3, r3, #14
 8001af0:	4013      	ands	r3, r2
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	40da      	lsrs	r2, r3
 8001b10:	1e13      	subs	r3, r2, #0
 8001b12:	d000      	beq.n	8001b16 <HAL_GPIO_Init+0x2d2>
 8001b14:	e6a2      	b.n	800185c <HAL_GPIO_Init+0x18>
  }
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b006      	add	sp, #24
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000
 8001b28:	50000400 	.word	0x50000400
 8001b2c:	50000800 	.word	0x50000800
 8001b30:	50000c00 	.word	0x50000c00
 8001b34:	50001000 	.word	0x50001000
 8001b38:	50001c00 	.word	0x50001c00
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	0008      	movs	r0, r1
 8001b4a:	0011      	movs	r1, r2
 8001b4c:	1cbb      	adds	r3, r7, #2
 8001b4e:	1c02      	adds	r2, r0, #0
 8001b50:	801a      	strh	r2, [r3, #0]
 8001b52:	1c7b      	adds	r3, r7, #1
 8001b54:	1c0a      	adds	r2, r1, #0
 8001b56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001b58:	1c7b      	adds	r3, r7, #1
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b60:	1cbb      	adds	r3, r7, #2
 8001b62:	881a      	ldrh	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b68:	e003      	b.n	8001b72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b6a:	1cbb      	adds	r3, r7, #2
 8001b6c:	881a      	ldrh	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	617b      	str	r3, [r7, #20]
  uint32_t tmp = 0U, i2sclk = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_I2S_Init+0x26>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0e1      	b.n	8001d66 <HAL_I2S_Init+0x1ea>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2235      	movs	r2, #53	; 0x35
 8001ba6:	5c9b      	ldrb	r3, [r3, r2]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d107      	bne.n	8001bbe <HAL_I2S_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2234      	movs	r2, #52	; 0x34
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7fe fec3 	bl	8000944 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2235      	movs	r2, #53	; 0x35
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4967      	ldr	r1, [pc, #412]	; (8001d70 <HAL_I2S_Init+0x1f4>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d073      	beq.n	8001cce <HAL_I2S_Init+0x152>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_I2S_Init+0x78>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001bee:	2310      	movs	r3, #16
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e001      	b.n	8001bf8 <HAL_I2S_Init+0x7c>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d802      	bhi.n	8001c06 <HAL_I2S_Init+0x8a>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8001c06:	f000 feb9 	bl	800297c <HAL_RCC_GetSysClockFreq>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d131      	bne.n	8001c7e <HAL_I2S_Init+0x102>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d016      	beq.n	8001c50 <HAL_I2S_Init+0xd4>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	0019      	movs	r1, r3
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7fe fa6d 	bl	8000108 <__udivsi3>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	001a      	movs	r2, r3
 8001c32:	0013      	movs	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	189b      	adds	r3, r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	0019      	movs	r1, r3
 8001c42:	0010      	movs	r0, r2
 8001c44:	f7fe fa60 	bl	8000108 <__udivsi3>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	3305      	adds	r3, #5
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	e02a      	b.n	8001ca6 <HAL_I2S_Init+0x12a>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	0019      	movs	r1, r3
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7fe fa56 	bl	8000108 <__udivsi3>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	001a      	movs	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	189b      	adds	r3, r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	001a      	movs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	0019      	movs	r1, r3
 8001c70:	0010      	movs	r0, r2
 8001c72:	f7fe fa49 	bl	8000108 <__udivsi3>
 8001c76:	0003      	movs	r3, r0
 8001c78:	3305      	adds	r3, #5
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	e013      	b.n	8001ca6 <HAL_I2S_Init+0x12a>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001c7e:	6979      	ldr	r1, [r7, #20]
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7fe fa41 	bl	8000108 <__udivsi3>
 8001c86:	0003      	movs	r3, r0
 8001c88:	001a      	movs	r2, r3
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	189b      	adds	r3, r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	001a      	movs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	0019      	movs	r1, r3
 8001c9a:	0010      	movs	r0, r2
 8001c9c:	f7fe fa34 	bl	8000108 <__udivsi3>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	3305      	adds	r3, #5
 8001ca4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	210a      	movs	r1, #10
 8001caa:	0018      	movs	r0, r3
 8001cac:	f7fe fa2c 	bl	8000108 <__udivsi3>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	e003      	b.n	8001cd6 <HAL_I2S_Init+0x15a>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d902      	bls.n	8001ce2 <HAL_I2S_Init+0x166>
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	2bff      	cmp	r3, #255	; 0xff
 8001ce0:	d907      	bls.n	8001cf2 <HAL_I2S_Init+0x176>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e039      	b.n	8001d66 <HAL_I2S_Init+0x1ea>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <HAL_I2S_Init+0x1f4>)
 8001d0e:	401a      	ands	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4319      	orrs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	4319      	orrs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	0109      	lsls	r1, r1, #4
 8001d30:	430a      	orrs	r2, r1
 8001d32:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b30      	cmp	r3, #48	; 0x30
 8001d3a:	d003      	beq.n	8001d44 <HAL_I2S_Init+0x1c8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2bb0      	cmp	r3, #176	; 0xb0
 8001d42:	d108      	bne.n	8001d56 <HAL_I2S_Init+0x1da>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	0149      	lsls	r1, r1, #5
 8001d52:	430a      	orrs	r2, r1
 8001d54:	61da      	str	r2, [r3, #28]
  }
#endif

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2235      	movs	r2, #53	; 0x35
 8001d60:	2101      	movs	r1, #1
 8001d62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b008      	add	sp, #32
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	fffff040 	.word	0xfffff040

08001d74 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	1dbb      	adds	r3, r7, #6
 8001d80:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d86:	2117      	movs	r1, #23
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2235      	movs	r2, #53	; 0x35
 8001d92:	5c9b      	ldrb	r3, [r3, r2]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d003      	beq.n	8001da2 <HAL_I2S_Transmit_DMA+0x2e>
  {
    errorcode = HAL_BUSY;
 8001d9a:	187b      	adds	r3, r7, r1
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001da0:	e079      	b.n	8001e96 <HAL_I2S_Transmit_DMA+0x122>
  }

  if ((pData == NULL) || (Size == 0U))
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_I2S_Transmit_DMA+0x3c>
 8001da8:	1dbb      	adds	r3, r7, #6
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_I2S_Transmit_DMA+0x40>
  {
    return  HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e077      	b.n	8001ea4 <HAL_I2S_Transmit_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2234      	movs	r2, #52	; 0x34
 8001db8:	5c9b      	ldrb	r3, [r3, r2]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_I2S_Transmit_DMA+0x50>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e06f      	b.n	8001ea4 <HAL_I2S_Transmit_DMA+0x130>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2234      	movs	r2, #52	; 0x34
 8001dc8:	2101      	movs	r1, #1
 8001dca:	5499      	strb	r1, [r3, r2]

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2235      	movs	r2, #53	; 0x35
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	2207      	movs	r2, #7
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d002      	beq.n	8001df8 <HAL_I2S_Transmit_DMA+0x84>
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d10c      	bne.n	8001e12 <HAL_I2S_Transmit_DMA+0x9e>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001df8:	1dbb      	adds	r3, r7, #6
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	18db      	adds	r3, r3, r3
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8001e04:	1dbb      	adds	r3, r7, #6
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	18db      	adds	r3, r3, r3
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	845a      	strh	r2, [r3, #34]	; 0x22
 8001e10:	e007      	b.n	8001e22 <HAL_I2S_Transmit_DMA+0xae>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1dba      	adds	r2, r7, #6
 8001e16:	8812      	ldrh	r2, [r2, #0]
 8001e18:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1dba      	adds	r2, r7, #6
 8001e1e:	8812      	ldrh	r2, [r2, #0]
 8001e20:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	4a21      	ldr	r2, [pc, #132]	; (8001eac <HAL_I2S_Transmit_DMA+0x138>)
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	4a20      	ldr	r2, [pc, #128]	; (8001eb0 <HAL_I2S_Transmit_DMA+0x13c>)
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <HAL_I2S_Transmit_DMA+0x140>)
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	0019      	movs	r1, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	330c      	adds	r3, #12
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8c1b      	ldrh	r3, [r3, #32]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	f7ff fbb5 	bl	80015c0 <HAL_DMA_Start_IT>

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4013      	ands	r3, r2
 8001e62:	d108      	bne.n	8001e76 <HAL_I2S_Transmit_DMA+0x102>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	00c9      	lsls	r1, r1, #3
 8001e72:	430a      	orrs	r2, r1
 8001e74:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d108      	bne.n	8001e94 <HAL_I2S_Transmit_DMA+0x120>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	e000      	b.n	8001e96 <HAL_I2S_Transmit_DMA+0x122>
  }

error :
 8001e94:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hi2s);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2234      	movs	r2, #52	; 0x34
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001e9e:	2317      	movs	r3, #23
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	781b      	ldrb	r3, [r3, #0]
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b006      	add	sp, #24
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	08001f1d 	.word	0x08001f1d
 8001eb0:	08001ed9 	.word	0x08001ed9
 8001eb4:	08001f3b 	.word	0x08001f3b

08001eb8 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10e      	bne.n	8001f0c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2102      	movs	r1, #2
 8001efa:	438a      	bics	r2, r1
 8001efc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2235      	movs	r2, #53	; 0x35
 8001f08:	2101      	movs	r1, #1
 8001f0a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7ff f954 	bl	80011bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b004      	add	sp, #16
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff ffc3 	bl	8001eb8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b004      	add	sp, #16
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2103      	movs	r1, #3
 8001f54:	438a      	bics	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2235      	movs	r2, #53	; 0x35
 8001f68:	2101      	movs	r1, #1
 8001f6a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	2208      	movs	r2, #8
 8001f72:	431a      	orrs	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7ff ffa4 	bl	8001ec8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b004      	add	sp, #16
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f000 fbbb 	bl	8002712 <HAL_RCC_OscConfig+0x78a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9c:	4bc8      	ldr	r3, [pc, #800]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa6:	4bc6      	ldr	r3, [pc, #792]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d100      	bne.n	8001fbe <HAL_RCC_OscConfig+0x36>
 8001fbc:	e07e      	b.n	80020bc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d007      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d112      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x68>
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	025b      	lsls	r3, r3, #9
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	4bba      	ldr	r3, [pc, #744]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	029b      	lsls	r3, r3, #10
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d100      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5a>
 8001fe0:	e06b      	b.n	80020ba <HAL_RCC_OscConfig+0x132>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d167      	bne.n	80020ba <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f000 fb91 	bl	8002712 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	025b      	lsls	r3, r3, #9
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x84>
 8001ffc:	4bb0      	ldr	r3, [pc, #704]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4baf      	ldr	r3, [pc, #700]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	0249      	lsls	r1, r1, #9
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e027      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	23a0      	movs	r3, #160	; 0xa0
 8002012:	02db      	lsls	r3, r3, #11
 8002014:	429a      	cmp	r2, r3
 8002016:	d10e      	bne.n	8002036 <HAL_RCC_OscConfig+0xae>
 8002018:	4ba9      	ldr	r3, [pc, #676]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4ba8      	ldr	r3, [pc, #672]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	02c9      	lsls	r1, r1, #11
 8002022:	430a      	orrs	r2, r1
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	4ba6      	ldr	r3, [pc, #664]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4ba5      	ldr	r3, [pc, #660]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	0249      	lsls	r1, r1, #9
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e012      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 8002036:	4ba2      	ldr	r3, [pc, #648]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4ba1      	ldr	r3, [pc, #644]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 800203c:	49a1      	ldr	r1, [pc, #644]	; (80022c4 <HAL_RCC_OscConfig+0x33c>)
 800203e:	400a      	ands	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	4b9f      	ldr	r3, [pc, #636]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	025b      	lsls	r3, r3, #9
 800204a:	4013      	ands	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4b9b      	ldr	r3, [pc, #620]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b9a      	ldr	r3, [pc, #616]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002056:	499c      	ldr	r1, [pc, #624]	; (80022c8 <HAL_RCC_OscConfig+0x340>)
 8002058:	400a      	ands	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d015      	beq.n	8002090 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff f932 	bl	80012cc <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800206c:	e009      	b.n	8002082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206e:	f7ff f92d 	bl	80012cc <HAL_GetTick>
 8002072:	0002      	movs	r2, r0
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b64      	cmp	r3, #100	; 0x64
 800207a:	d902      	bls.n	8002082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	f000 fb48 	bl	8002712 <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002082:	4b8f      	ldr	r3, [pc, #572]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	029b      	lsls	r3, r3, #10
 800208a:	4013      	ands	r3, r2
 800208c:	d0ef      	beq.n	800206e <HAL_RCC_OscConfig+0xe6>
 800208e:	e015      	b.n	80020bc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff f91c 	bl	80012cc <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800209a:	f7ff f917 	bl	80012cc <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b64      	cmp	r3, #100	; 0x64
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e332      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ac:	4b84      	ldr	r3, [pc, #528]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	029b      	lsls	r3, r3, #10
 80020b4:	4013      	ands	r3, r2
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x112>
 80020b8:	e000      	b.n	80020bc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2202      	movs	r2, #2
 80020c2:	4013      	ands	r3, r2
 80020c4:	d100      	bne.n	80020c8 <HAL_RCC_OscConfig+0x140>
 80020c6:	e098      	b.n	80021fa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	2220      	movs	r2, #32
 80020d2:	4013      	ands	r3, r2
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80020d6:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b79      	ldr	r3, [pc, #484]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 80020dc:	2120      	movs	r1, #32
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	2220      	movs	r2, #32
 80020e6:	4393      	bics	r3, r2
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d13d      	bne.n	8002172 <HAL_RCC_OscConfig+0x1ea>
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d13a      	bne.n	8002172 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80020fc:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2204      	movs	r2, #4
 8002102:	4013      	ands	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_RCC_OscConfig+0x188>
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e300      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b6b      	ldr	r3, [pc, #428]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a6d      	ldr	r2, [pc, #436]	; (80022cc <HAL_RCC_OscConfig+0x344>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	021a      	lsls	r2, r3, #8
 8002120:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002126:	4b66      	ldr	r3, [pc, #408]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2209      	movs	r2, #9
 800212c:	4393      	bics	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002138:	f000 fc20 	bl	800297c <HAL_RCC_GetSysClockFreq>
 800213c:	0001      	movs	r1, r0
 800213e:	4b60      	ldr	r3, [pc, #384]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	220f      	movs	r2, #15
 8002146:	4013      	ands	r3, r2
 8002148:	4a61      	ldr	r2, [pc, #388]	; (80022d0 <HAL_RCC_OscConfig+0x348>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	000a      	movs	r2, r1
 800214e:	40da      	lsrs	r2, r3
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <HAL_RCC_OscConfig+0x34c>)
 8002152:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002154:	2513      	movs	r5, #19
 8002156:	197c      	adds	r4, r7, r5
 8002158:	2000      	movs	r0, #0
 800215a:	f7ff f881 	bl	8001260 <HAL_InitTick>
 800215e:	0003      	movs	r3, r0
 8002160:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002162:	002a      	movs	r2, r5
 8002164:	18bb      	adds	r3, r7, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d046      	beq.n	80021fa <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800216c:	18bb      	adds	r3, r7, r2
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	e2cf      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	2b00      	cmp	r3, #0
 8002176:	d027      	beq.n	80021c8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002178:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2209      	movs	r2, #9
 800217e:	4393      	bics	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff f89f 	bl	80012cc <HAL_GetTick>
 800218e:	0003      	movs	r3, r0
 8002190:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002194:	f7ff f89a 	bl	80012cc <HAL_GetTick>
 8002198:	0002      	movs	r2, r0
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e2b5      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021a6:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2204      	movs	r2, #4
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f1      	beq.n	8002194 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a45      	ldr	r2, [pc, #276]	; (80022cc <HAL_RCC_OscConfig+0x344>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	021a      	lsls	r2, r3, #8
 80021c0:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	e018      	b.n	80021fa <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c8:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	438a      	bics	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff f87a 	bl	80012cc <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff f875 	bl	80012cc <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e290      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021f0:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2204      	movs	r2, #4
 80021f6:	4013      	ands	r3, r2
 80021f8:	d1f1      	bne.n	80021de <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2210      	movs	r2, #16
 8002200:	4013      	ands	r3, r2
 8002202:	d100      	bne.n	8002206 <HAL_RCC_OscConfig+0x27e>
 8002204:	e09f      	b.n	8002346 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d13f      	bne.n	800228c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800220c:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d005      	beq.n	8002224 <HAL_RCC_OscConfig+0x29c>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e276      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002224:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <HAL_RCC_OscConfig+0x350>)
 800222a:	4013      	ands	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002238:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	0a19      	lsrs	r1, r3, #8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	061a      	lsls	r2, r3, #24
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	0b5b      	lsrs	r3, r3, #13
 8002252:	3301      	adds	r3, #1
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	0212      	lsls	r2, r2, #8
 8002258:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	210f      	movs	r1, #15
 8002262:	400b      	ands	r3, r1
 8002264:	491a      	ldr	r1, [pc, #104]	; (80022d0 <HAL_RCC_OscConfig+0x348>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCC_OscConfig+0x34c>)
 800226c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800226e:	2513      	movs	r5, #19
 8002270:	197c      	adds	r4, r7, r5
 8002272:	2000      	movs	r0, #0
 8002274:	f7fe fff4 	bl	8001260 <HAL_InitTick>
 8002278:	0003      	movs	r3, r0
 800227a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800227c:	002a      	movs	r2, r5
 800227e:	18bb      	adds	r3, r7, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d05f      	beq.n	8002346 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8002286:	18bb      	adds	r3, r7, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	e242      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03e      	beq.n	8002312 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_OscConfig+0x338>)
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	0049      	lsls	r1, r1, #1
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7ff f813 	bl	80012cc <HAL_GetTick>
 80022a6:	0003      	movs	r3, r0
 80022a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022aa:	e017      	b.n	80022dc <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ac:	f7ff f80e 	bl	80012cc <HAL_GetTick>
 80022b0:	0002      	movs	r2, r0
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e229      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	40021000 	.word	0x40021000
 80022c4:	fffeffff 	.word	0xfffeffff
 80022c8:	fffbffff 	.word	0xfffbffff
 80022cc:	ffffe0ff 	.word	0xffffe0ff
 80022d0:	0800759c 	.word	0x0800759c
 80022d4:	20000000 	.word	0x20000000
 80022d8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022dc:	4bca      	ldr	r3, [pc, #808]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	d0e1      	beq.n	80022ac <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e8:	4bc7      	ldr	r3, [pc, #796]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4ac7      	ldr	r2, [pc, #796]	; (800260c <HAL_RCC_OscConfig+0x684>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f6:	4bc4      	ldr	r3, [pc, #784]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fc:	4bc2      	ldr	r3, [pc, #776]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	0a19      	lsrs	r1, r3, #8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	061a      	lsls	r2, r3, #24
 800230a:	4bbf      	ldr	r3, [pc, #764]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	e019      	b.n	8002346 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002312:	4bbd      	ldr	r3, [pc, #756]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	4bbc      	ldr	r3, [pc, #752]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002318:	49bd      	ldr	r1, [pc, #756]	; (8002610 <HAL_RCC_OscConfig+0x688>)
 800231a:	400a      	ands	r2, r1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe ffd5 	bl	80012cc <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002328:	f7fe ffd0 	bl	80012cc <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1eb      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800233a:	4bb3      	ldr	r3, [pc, #716]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2208      	movs	r2, #8
 800234c:	4013      	ands	r3, r2
 800234e:	d036      	beq.n	80023be <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d019      	beq.n	800238c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002358:	4bab      	ldr	r3, [pc, #684]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800235a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235c:	4baa      	ldr	r3, [pc, #680]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800235e:	2101      	movs	r1, #1
 8002360:	430a      	orrs	r2, r1
 8002362:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7fe ffb2 	bl	80012cc <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236e:	f7fe ffad 	bl	80012cc <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1c8      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002380:	4ba1      	ldr	r3, [pc, #644]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002384:	2202      	movs	r2, #2
 8002386:	4013      	ands	r3, r2
 8002388:	d0f1      	beq.n	800236e <HAL_RCC_OscConfig+0x3e6>
 800238a:	e018      	b.n	80023be <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238c:	4b9e      	ldr	r3, [pc, #632]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800238e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002390:	4b9d      	ldr	r3, [pc, #628]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002392:	2101      	movs	r1, #1
 8002394:	438a      	bics	r2, r1
 8002396:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7fe ff98 	bl	80012cc <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a2:	f7fe ff93 	bl	80012cc <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1ae      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023b4:	4b94      	ldr	r3, [pc, #592]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d1f1      	bne.n	80023a2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2204      	movs	r2, #4
 80023c4:	4013      	ands	r3, r2
 80023c6:	d100      	bne.n	80023ca <HAL_RCC_OscConfig+0x442>
 80023c8:	e0ae      	b.n	8002528 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	2023      	movs	r0, #35	; 0x23
 80023cc:	183b      	adds	r3, r7, r0
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d2:	4b8d      	ldr	r3, [pc, #564]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80023d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	055b      	lsls	r3, r3, #21
 80023da:	4013      	ands	r3, r2
 80023dc:	d109      	bne.n	80023f2 <HAL_RCC_OscConfig+0x46a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b8a      	ldr	r3, [pc, #552]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80023e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e2:	4b89      	ldr	r3, [pc, #548]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0549      	lsls	r1, r1, #21
 80023e8:	430a      	orrs	r2, r1
 80023ea:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80023ec:	183b      	adds	r3, r7, r0
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b88      	ldr	r3, [pc, #544]	; (8002614 <HAL_RCC_OscConfig+0x68c>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4013      	ands	r3, r2
 80023fc:	d11a      	bne.n	8002434 <HAL_RCC_OscConfig+0x4ac>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b85      	ldr	r3, [pc, #532]	; (8002614 <HAL_RCC_OscConfig+0x68c>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b84      	ldr	r3, [pc, #528]	; (8002614 <HAL_RCC_OscConfig+0x68c>)
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	0049      	lsls	r1, r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240c:	f7fe ff5e 	bl	80012cc <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7fe ff59 	bl	80012cc <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	; 0x64
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e174      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b7a      	ldr	r3, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x68c>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4013      	ands	r3, r2
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x48e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	429a      	cmp	r2, r3
 800243e:	d107      	bne.n	8002450 <HAL_RCC_OscConfig+0x4c8>
 8002440:	4b71      	ldr	r3, [pc, #452]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002444:	4b70      	ldr	r3, [pc, #448]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	0049      	lsls	r1, r1, #1
 800244a:	430a      	orrs	r2, r1
 800244c:	651a      	str	r2, [r3, #80]	; 0x50
 800244e:	e031      	b.n	80024b4 <HAL_RCC_OscConfig+0x52c>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x4ea>
 8002458:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800245a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800245c:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800245e:	496c      	ldr	r1, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x688>)
 8002460:	400a      	ands	r2, r1
 8002462:	651a      	str	r2, [r3, #80]	; 0x50
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002468:	4b67      	ldr	r3, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800246a:	496b      	ldr	r1, [pc, #428]	; (8002618 <HAL_RCC_OscConfig+0x690>)
 800246c:	400a      	ands	r2, r1
 800246e:	651a      	str	r2, [r3, #80]	; 0x50
 8002470:	e020      	b.n	80024b4 <HAL_RCC_OscConfig+0x52c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	23a0      	movs	r3, #160	; 0xa0
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	429a      	cmp	r2, r3
 800247c:	d10e      	bne.n	800249c <HAL_RCC_OscConfig+0x514>
 800247e:	4b62      	ldr	r3, [pc, #392]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002482:	4b61      	ldr	r3, [pc, #388]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	00c9      	lsls	r1, r1, #3
 8002488:	430a      	orrs	r2, r1
 800248a:	651a      	str	r2, [r3, #80]	; 0x50
 800248c:	4b5e      	ldr	r3, [pc, #376]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800248e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002490:	4b5d      	ldr	r3, [pc, #372]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	0049      	lsls	r1, r1, #1
 8002496:	430a      	orrs	r2, r1
 8002498:	651a      	str	r2, [r3, #80]	; 0x50
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0x52c>
 800249c:	4b5a      	ldr	r3, [pc, #360]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800249e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024a0:	4b59      	ldr	r3, [pc, #356]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80024a2:	495b      	ldr	r1, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x688>)
 80024a4:	400a      	ands	r2, r1
 80024a6:	651a      	str	r2, [r3, #80]	; 0x50
 80024a8:	4b57      	ldr	r3, [pc, #348]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80024aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ac:	4b56      	ldr	r3, [pc, #344]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80024ae:	495a      	ldr	r1, [pc, #360]	; (8002618 <HAL_RCC_OscConfig+0x690>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <HAL_RCC_OscConfig+0x560>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024bc:	f7fe ff06 	bl	80012cc <HAL_GetTick>
 80024c0:	0003      	movs	r3, r0
 80024c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024c4:	e009      	b.n	80024da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe ff01 	bl	80012cc <HAL_GetTick>
 80024ca:	0002      	movs	r2, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	4a52      	ldr	r2, [pc, #328]	; (800261c <HAL_RCC_OscConfig+0x694>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e11b      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024da:	4b4b      	ldr	r3, [pc, #300]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80024dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4013      	ands	r3, r2
 80024e4:	d0ef      	beq.n	80024c6 <HAL_RCC_OscConfig+0x53e>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x58a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7fe fef0 	bl	80012cc <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024f0:	e009      	b.n	8002506 <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7fe feeb 	bl	80012cc <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	4a47      	ldr	r2, [pc, #284]	; (800261c <HAL_RCC_OscConfig+0x694>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e105      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002506:	4b40      	ldr	r3, [pc, #256]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4013      	ands	r3, r2
 8002510:	d1ef      	bne.n	80024f2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002512:	2323      	movs	r3, #35	; 0x23
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800251e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002520:	4b39      	ldr	r3, [pc, #228]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002522:	493f      	ldr	r1, [pc, #252]	; (8002620 <HAL_RCC_OscConfig+0x698>)
 8002524:	400a      	ands	r2, r1
 8002526:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2220      	movs	r2, #32
 800252e:	4013      	ands	r3, r2
 8002530:	d049      	beq.n	80025c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d026      	beq.n	8002588 <HAL_RCC_OscConfig+0x600>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800253a:	4b33      	ldr	r3, [pc, #204]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	4b32      	ldr	r3, [pc, #200]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002540:	2101      	movs	r1, #1
 8002542:	430a      	orrs	r2, r1
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 8002548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800254a:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800254c:	2101      	movs	r1, #1
 800254e:	430a      	orrs	r2, r1
 8002550:	635a      	str	r2, [r3, #52]	; 0x34
 8002552:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCC_OscConfig+0x69c>)
 8002554:	6a1a      	ldr	r2, [r3, #32]
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <HAL_RCC_OscConfig+0x69c>)
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	0189      	lsls	r1, r1, #6
 800255c:	430a      	orrs	r2, r1
 800255e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe feb4 	bl	80012cc <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x5f4>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800256a:	f7fe feaf 	bl	80012cc <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x5f4>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0ca      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2202      	movs	r2, #2
 8002582:	4013      	ands	r3, r2
 8002584:	d0f1      	beq.n	800256a <HAL_RCC_OscConfig+0x5e2>
 8002586:	e01e      	b.n	80025c6 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 800258e:	2101      	movs	r1, #1
 8002590:	438a      	bics	r2, r1
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_RCC_OscConfig+0x69c>)
 8002596:	6a1a      	ldr	r2, [r3, #32]
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_RCC_OscConfig+0x69c>)
 800259a:	4923      	ldr	r1, [pc, #140]	; (8002628 <HAL_RCC_OscConfig+0x6a0>)
 800259c:	400a      	ands	r2, r1
 800259e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fe94 	bl	80012cc <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x634>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025aa:	f7fe fe8f 	bl	80012cc <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x634>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0aa      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2202      	movs	r2, #2
 80025c2:	4013      	ands	r3, r2
 80025c4:	d1f1      	bne.n	80025aa <HAL_RCC_OscConfig+0x622>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d100      	bne.n	80025d0 <HAL_RCC_OscConfig+0x648>
 80025ce:	e09f      	b.n	8002710 <HAL_RCC_OscConfig+0x788>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d100      	bne.n	80025d8 <HAL_RCC_OscConfig+0x650>
 80025d6:	e078      	b.n	80026ca <HAL_RCC_OscConfig+0x742>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d159      	bne.n	8002694 <HAL_RCC_OscConfig+0x70c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_RCC_OscConfig+0x680>)
 80025e6:	4911      	ldr	r1, [pc, #68]	; (800262c <HAL_RCC_OscConfig+0x6a4>)
 80025e8:	400a      	ands	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fe6e 	bl	80012cc <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025f4:	e01c      	b.n	8002630 <HAL_RCC_OscConfig+0x6a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fe69 	bl	80012cc <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d915      	bls.n	8002630 <HAL_RCC_OscConfig+0x6a8>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e084      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
 8002608:	40021000 	.word	0x40021000
 800260c:	ffff1fff 	.word	0xffff1fff
 8002610:	fffffeff 	.word	0xfffffeff
 8002614:	40007000 	.word	0x40007000
 8002618:	fffffbff 	.word	0xfffffbff
 800261c:	00001388 	.word	0x00001388
 8002620:	efffffff 	.word	0xefffffff
 8002624:	40010000 	.word	0x40010000
 8002628:	ffffdfff 	.word	0xffffdfff
 800262c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002630:	4b3a      	ldr	r3, [pc, #232]	; (800271c <HAL_RCC_OscConfig+0x794>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	049b      	lsls	r3, r3, #18
 8002638:	4013      	ands	r3, r2
 800263a:	d1dc      	bne.n	80025f6 <HAL_RCC_OscConfig+0x66e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263c:	4b37      	ldr	r3, [pc, #220]	; (800271c <HAL_RCC_OscConfig+0x794>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a37      	ldr	r2, [pc, #220]	; (8002720 <HAL_RCC_OscConfig+0x798>)
 8002642:	4013      	ands	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002654:	431a      	orrs	r2, r3
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_RCC_OscConfig+0x794>)
 8002658:	430a      	orrs	r2, r1
 800265a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_RCC_OscConfig+0x794>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b2e      	ldr	r3, [pc, #184]	; (800271c <HAL_RCC_OscConfig+0x794>)
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	0449      	lsls	r1, r1, #17
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe fe2f 	bl	80012cc <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x6fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe fe2a 	bl	80012cc <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x6fe>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e045      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_RCC_OscConfig+0x794>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	049b      	lsls	r3, r3, #18
 800268e:	4013      	ands	r3, r2
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x6ec>
 8002692:	e03d      	b.n	8002710 <HAL_RCC_OscConfig+0x788>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x794>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_RCC_OscConfig+0x794>)
 800269a:	4922      	ldr	r1, [pc, #136]	; (8002724 <HAL_RCC_OscConfig+0x79c>)
 800269c:	400a      	ands	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fe14 	bl	80012cc <HAL_GetTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x734>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe fe0f 	bl	80012cc <HAL_GetTick>
 80026ae:	0002      	movs	r2, r0
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x734>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e02a      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_RCC_OscConfig+0x794>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	049b      	lsls	r3, r3, #18
 80026c4:	4013      	ands	r3, r2
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x722>
 80026c8:	e022      	b.n	8002710 <HAL_RCC_OscConfig+0x788>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_OscConfig+0x74e>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e01d      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_RCC_OscConfig+0x794>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	401a      	ands	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d10f      	bne.n	800270c <HAL_RCC_OscConfig+0x784>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	23f0      	movs	r3, #240	; 0xf0
 80026f0:	039b      	lsls	r3, r3, #14
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x784>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	23c0      	movs	r3, #192	; 0xc0
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	401a      	ands	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x788>
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x78a>
        }
      }
    }
  }

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b00a      	add	sp, #40	; 0x28
 8002718:	bdb0      	pop	{r4, r5, r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	40021000 	.word	0x40021000
 8002720:	ff02ffff 	.word	0xff02ffff
 8002724:	feffffff 	.word	0xfeffffff

08002728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e10d      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b88      	ldr	r3, [pc, #544]	; (8002960 <HAL_RCC_ClockConfig+0x238>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2201      	movs	r2, #1
 8002742:	4013      	ands	r3, r2
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d911      	bls.n	800276e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b85      	ldr	r3, [pc, #532]	; (8002960 <HAL_RCC_ClockConfig+0x238>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2201      	movs	r2, #1
 8002750:	4393      	bics	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	4b82      	ldr	r3, [pc, #520]	; (8002960 <HAL_RCC_ClockConfig+0x238>)
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275c:	4b80      	ldr	r3, [pc, #512]	; (8002960 <HAL_RCC_ClockConfig+0x238>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2201      	movs	r2, #1
 8002762:	4013      	ands	r3, r2
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d001      	beq.n	800276e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0f4      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2202      	movs	r2, #2
 8002774:	4013      	ands	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002778:	4b7a      	ldr	r3, [pc, #488]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	22f0      	movs	r2, #240	; 0xf0
 800277e:	4393      	bics	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	4b77      	ldr	r3, [pc, #476]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 8002788:	430a      	orrs	r2, r1
 800278a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d100      	bne.n	8002798 <HAL_RCC_ClockConfig+0x70>
 8002796:	e089      	b.n	80028ac <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027a0:	4b70      	ldr	r3, [pc, #448]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	029b      	lsls	r3, r3, #10
 80027a8:	4013      	ands	r3, r2
 80027aa:	d120      	bne.n	80027ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0d3      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027b8:	4b6a      	ldr	r3, [pc, #424]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	049b      	lsls	r3, r3, #18
 80027c0:	4013      	ands	r3, r2
 80027c2:	d114      	bne.n	80027ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0c7      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d106      	bne.n	80027de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d0:	4b64      	ldr	r3, [pc, #400]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2204      	movs	r2, #4
 80027d6:	4013      	ands	r3, r2
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0bc      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027de:	4b61      	ldr	r3, [pc, #388]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0b4      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b5d      	ldr	r3, [pc, #372]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2203      	movs	r2, #3
 80027f4:	4393      	bics	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002802:	f7fe fd63 	bl	80012cc <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d111      	bne.n	8002836 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002812:	e009      	b.n	8002828 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7fe fd5a 	bl	80012cc <HAL_GetTick>
 8002818:	0002      	movs	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	4a52      	ldr	r2, [pc, #328]	; (8002968 <HAL_RCC_ClockConfig+0x240>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e097      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002828:	4b4e      	ldr	r3, [pc, #312]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	220c      	movs	r2, #12
 800282e:	4013      	ands	r3, r2
 8002830:	2b08      	cmp	r3, #8
 8002832:	d1ef      	bne.n	8002814 <HAL_RCC_ClockConfig+0xec>
 8002834:	e03a      	b.n	80028ac <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b03      	cmp	r3, #3
 800283c:	d111      	bne.n	8002862 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283e:	e009      	b.n	8002854 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7fe fd44 	bl	80012cc <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	4a47      	ldr	r2, [pc, #284]	; (8002968 <HAL_RCC_ClockConfig+0x240>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e081      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	220c      	movs	r2, #12
 800285a:	4013      	ands	r3, r2
 800285c:	2b0c      	cmp	r3, #12
 800285e:	d1ef      	bne.n	8002840 <HAL_RCC_ClockConfig+0x118>
 8002860:	e024      	b.n	80028ac <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d11b      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800286a:	e009      	b.n	8002880 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7fe fd2e 	bl	80012cc <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	4a3c      	ldr	r2, [pc, #240]	; (8002968 <HAL_RCC_ClockConfig+0x240>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e06b      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002880:	4b38      	ldr	r3, [pc, #224]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	220c      	movs	r2, #12
 8002886:	4013      	ands	r3, r2
 8002888:	2b04      	cmp	r3, #4
 800288a:	d1ef      	bne.n	800286c <HAL_RCC_ClockConfig+0x144>
 800288c:	e00e      	b.n	80028ac <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288e:	f7fe fd1d 	bl	80012cc <HAL_GetTick>
 8002892:	0002      	movs	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	4a33      	ldr	r2, [pc, #204]	; (8002968 <HAL_RCC_ClockConfig+0x240>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e05a      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	220c      	movs	r2, #12
 80028a8:	4013      	ands	r3, r2
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <HAL_RCC_ClockConfig+0x238>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2201      	movs	r2, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d211      	bcs.n	80028de <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_RCC_ClockConfig+0x238>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2201      	movs	r2, #1
 80028c0:	4393      	bics	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_RCC_ClockConfig+0x238>)
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028cc:	4b24      	ldr	r3, [pc, #144]	; (8002960 <HAL_RCC_ClockConfig+0x238>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	4013      	ands	r3, r2
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d001      	beq.n	80028de <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e03c      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2204      	movs	r2, #4
 80028e4:	4013      	ands	r3, r2
 80028e6:	d009      	beq.n	80028fc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	; (800296c <HAL_RCC_ClockConfig+0x244>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 80028f8:	430a      	orrs	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2208      	movs	r2, #8
 8002902:	4013      	ands	r3, r2
 8002904:	d00a      	beq.n	800291c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002906:	4b17      	ldr	r3, [pc, #92]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4a19      	ldr	r2, [pc, #100]	; (8002970 <HAL_RCC_ClockConfig+0x248>)
 800290c:	4013      	ands	r3, r2
 800290e:	0019      	movs	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	00da      	lsls	r2, r3, #3
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 8002918:	430a      	orrs	r2, r1
 800291a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800291c:	f000 f82e 	bl	800297c <HAL_RCC_GetSysClockFreq>
 8002920:	0001      	movs	r1, r0
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_RCC_ClockConfig+0x23c>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	220f      	movs	r2, #15
 800292a:	4013      	ands	r3, r2
 800292c:	4a11      	ldr	r2, [pc, #68]	; (8002974 <HAL_RCC_ClockConfig+0x24c>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	000a      	movs	r2, r1
 8002932:	40da      	lsrs	r2, r3
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_RCC_ClockConfig+0x250>)
 8002936:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002938:	250b      	movs	r5, #11
 800293a:	197c      	adds	r4, r7, r5
 800293c:	2000      	movs	r0, #0
 800293e:	f7fe fc8f 	bl	8001260 <HAL_InitTick>
 8002942:	0003      	movs	r3, r0
 8002944:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002946:	002a      	movs	r2, r5
 8002948:	18bb      	adds	r3, r7, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002950:	18bb      	adds	r3, r7, r2
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	e000      	b.n	8002958 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b004      	add	sp, #16
 800295e:	bdb0      	pop	{r4, r5, r7, pc}
 8002960:	40022000 	.word	0x40022000
 8002964:	40021000 	.word	0x40021000
 8002968:	00001388 	.word	0x00001388
 800296c:	fffff8ff 	.word	0xfffff8ff
 8002970:	ffffc7ff 	.word	0xffffc7ff
 8002974:	0800759c 	.word	0x0800759c
 8002978:	20000000 	.word	0x20000000

0800297c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002982:	4b3c      	ldr	r3, [pc, #240]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	220c      	movs	r2, #12
 800298c:	4013      	ands	r3, r2
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d013      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x3e>
 8002992:	d85c      	bhi.n	8002a4e <HAL_RCC_GetSysClockFreq+0xd2>
 8002994:	2b04      	cmp	r3, #4
 8002996:	d002      	beq.n	800299e <HAL_RCC_GetSysClockFreq+0x22>
 8002998:	2b08      	cmp	r3, #8
 800299a:	d00b      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x38>
 800299c:	e057      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800299e:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2210      	movs	r2, #16
 80029a4:	4013      	ands	r3, r2
 80029a6:	d002      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80029a8:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029aa:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80029ac:	e05d      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80029ae:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x100>)
 80029b0:	613b      	str	r3, [r7, #16]
      break;
 80029b2:	e05a      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b4:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x104>)
 80029b6:	613b      	str	r3, [r7, #16]
      break;
 80029b8:	e057      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	0c9b      	lsrs	r3, r3, #18
 80029be:	220f      	movs	r2, #15
 80029c0:	4013      	ands	r3, r2
 80029c2:	4a30      	ldr	r2, [pc, #192]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c4:	5cd3      	ldrb	r3, [r2, r3]
 80029c6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	0d9b      	lsrs	r3, r3, #22
 80029cc:	2203      	movs	r2, #3
 80029ce:	4013      	ands	r3, r2
 80029d0:	3301      	adds	r3, #1
 80029d2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	025b      	lsls	r3, r3, #9
 80029dc:	4013      	ands	r3, r2
 80029de:	d00f      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	000a      	movs	r2, r1
 80029e4:	0152      	lsls	r2, r2, #5
 80029e6:	1a52      	subs	r2, r2, r1
 80029e8:	0193      	lsls	r3, r2, #6
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	185b      	adds	r3, r3, r1
 80029f0:	025b      	lsls	r3, r3, #9
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7fd fb87 	bl	8000108 <__udivsi3>
 80029fa:	0003      	movs	r3, r0
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	e023      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2210      	movs	r2, #16
 8002a06:	4013      	ands	r3, r2
 8002a08:	d00f      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	000a      	movs	r2, r1
 8002a0e:	0152      	lsls	r2, r2, #5
 8002a10:	1a52      	subs	r2, r2, r1
 8002a12:	0193      	lsls	r3, r2, #6
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	185b      	adds	r3, r3, r1
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7fd fb72 	bl	8000108 <__udivsi3>
 8002a24:	0003      	movs	r3, r0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e00e      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	000a      	movs	r2, r1
 8002a2e:	0152      	lsls	r2, r2, #5
 8002a30:	1a52      	subs	r2, r2, r1
 8002a32:	0193      	lsls	r3, r2, #6
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	185b      	adds	r3, r3, r1
 8002a3a:	029b      	lsls	r3, r3, #10
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fd fb62 	bl	8000108 <__udivsi3>
 8002a44:	0003      	movs	r3, r0
 8002a46:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	613b      	str	r3, [r7, #16]
      break;
 8002a4c:	e00d      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	0b5b      	lsrs	r3, r3, #13
 8002a54:	2207      	movs	r2, #7
 8002a56:	4013      	ands	r3, r2
 8002a58:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	0212      	lsls	r2, r2, #8
 8002a62:	409a      	lsls	r2, r3
 8002a64:	0013      	movs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
      break;
 8002a68:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a6a:	693b      	ldr	r3, [r7, #16]
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b006      	add	sp, #24
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000
 8002a78:	003d0900 	.word	0x003d0900
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	007a1200 	.word	0x007a1200
 8002a84:	080075ac 	.word	0x080075ac

08002a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e059      	b.n	8002b4e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2251      	movs	r2, #81	; 0x51
 8002aa4:	5c9b      	ldrb	r3, [r3, r2]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2250      	movs	r2, #80	; 0x50
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7fd ffda 	bl	8000a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2251      	movs	r2, #81	; 0x51
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2140      	movs	r1, #64	; 0x40
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6999      	ldr	r1, [r3, #24]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	400b      	ands	r3, r1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	0011      	movs	r1, r2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	0c1b      	lsrs	r3, r3, #16
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	4013      	ands	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4907      	ldr	r1, [pc, #28]	; (8002b58 <HAL_SPI_Init+0xd0>)
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2251      	movs	r2, #81	; 0x51
 8002b48:	2101      	movs	r1, #1
 8002b4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b002      	add	sp, #8
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	fffff7ff 	.word	0xfffff7ff

08002b5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	001a      	movs	r2, r3
 8002b6a:	1cbb      	adds	r3, r7, #2
 8002b6c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b72:	232b      	movs	r3, #43	; 0x2b
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2250      	movs	r2, #80	; 0x50
 8002b7e:	5c9b      	ldrb	r3, [r3, r2]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_SPI_TransmitReceive+0x2c>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e1a0      	b.n	8002eca <HAL_SPI_TransmitReceive+0x36e>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2250      	movs	r2, #80	; 0x50
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b90:	f7fe fb9c 	bl	80012cc <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b98:	2023      	movs	r0, #35	; 0x23
 8002b9a:	183b      	adds	r3, r7, r0
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	2151      	movs	r1, #81	; 0x51
 8002ba0:	5c52      	ldrb	r2, [r2, r1]
 8002ba2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002baa:	231a      	movs	r3, #26
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	1cba      	adds	r2, r7, #2
 8002bb0:	8812      	ldrh	r2, [r2, #0]
 8002bb2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bb4:	183b      	adds	r3, r7, r0
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d011      	beq.n	8002be0 <HAL_SPI_TransmitReceive+0x84>
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	2382      	movs	r3, #130	; 0x82
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_SPI_TransmitReceive+0x7a>
 8002bce:	183b      	adds	r3, r7, r0
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d004      	beq.n	8002be0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002bd6:	232b      	movs	r3, #43	; 0x2b
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	2202      	movs	r2, #2
 8002bdc:	701a      	strb	r2, [r3, #0]
    goto error;
 8002bde:	e169      	b.n	8002eb4 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <HAL_SPI_TransmitReceive+0x98>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_SPI_TransmitReceive+0x98>
 8002bec:	1cbb      	adds	r3, r7, #2
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002bf4:	232b      	movs	r3, #43	; 0x2b
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
    goto error;
 8002bfc:	e15a      	b.n	8002eb4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2251      	movs	r2, #81	; 0x51
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d003      	beq.n	8002c12 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2251      	movs	r2, #81	; 0x51
 8002c0e:	2105      	movs	r1, #5
 8002c10:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1cba      	adds	r2, r7, #2
 8002c22:	8812      	ldrh	r2, [r2, #0]
 8002c24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1cba      	adds	r2, r7, #2
 8002c2a:	8812      	ldrh	r2, [r2, #0]
 8002c2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1cba      	adds	r2, r7, #2
 8002c38:	8812      	ldrh	r2, [r2, #0]
 8002c3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1cba      	adds	r2, r7, #2
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d007      	beq.n	8002c6e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2140      	movs	r1, #64	; 0x40
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d000      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x120>
 8002c7a:	e07a      	b.n	8002d72 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <HAL_SPI_TransmitReceive+0x132>
 8002c84:	231a      	movs	r3, #26
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d166      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	881a      	ldrh	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	1c9a      	adds	r2, r3, #2
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb2:	e053      	b.n	8002d5c <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d11b      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x19e>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d016      	beq.n	8002cfa <HAL_SPI_TransmitReceive+0x19e>
 8002ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d113      	bne.n	8002cfa <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	1c9a      	adds	r2, r3, #2
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d119      	bne.n	8002d3c <HAL_SPI_TransmitReceive+0x1e0>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d014      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	1c9a      	adds	r2, r3, #2
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d3c:	f7fe fac6 	bl	80012cc <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d807      	bhi.n	8002d5c <HAL_SPI_TransmitReceive+0x200>
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	3301      	adds	r3, #1
 8002d50:	d004      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8002d52:	232b      	movs	r3, #43	; 0x2b
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	2203      	movs	r2, #3
 8002d58:	701a      	strb	r2, [r3, #0]
        goto error;
 8002d5a:	e0ab      	b.n	8002eb4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1a6      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x158>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1a1      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x158>
 8002d70:	e07f      	b.n	8002e72 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_SPI_TransmitReceive+0x22a>
 8002d7a:	231a      	movs	r3, #26
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d000      	beq.n	8002d86 <HAL_SPI_TransmitReceive+0x22a>
 8002d84:	e06b      	b.n	8002e5e <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	330c      	adds	r3, #12
 8002d90:	7812      	ldrb	r2, [r2, #0]
 8002d92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dac:	e057      	b.n	8002e5e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2202      	movs	r2, #2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d11c      	bne.n	8002df6 <HAL_SPI_TransmitReceive+0x29a>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d017      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x29a>
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d114      	bne.n	8002df6 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d119      	bne.n	8002e38 <HAL_SPI_TransmitReceive+0x2dc>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d014      	beq.n	8002e38 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e34:	2301      	movs	r3, #1
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e38:	f7fe fa48 	bl	80012cc <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d802      	bhi.n	8002e4e <HAL_SPI_TransmitReceive+0x2f2>
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x2f8>
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8002e54:	232b      	movs	r3, #43	; 0x2b
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	2203      	movs	r2, #3
 8002e5a:	701a      	strb	r2, [r3, #0]
        goto error;
 8002e5c:	e02a      	b.n	8002eb4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1a2      	bne.n	8002dae <HAL_SPI_TransmitReceive+0x252>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d19d      	bne.n	8002dae <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 fbdf 	bl	800363c <SPI_EndRxTxTransaction>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d007      	beq.n	8002e92 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8002e82:	232b      	movs	r3, #43	; 0x2b
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e90:	e010      	b.n	8002eb4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10b      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	e000      	b.n	8002eb4 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8002eb2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2251      	movs	r2, #81	; 0x51
 8002eb8:	2101      	movs	r1, #1
 8002eba:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2250      	movs	r2, #80	; 0x50
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002ec4:	232b      	movs	r3, #43	; 0x2b
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	781b      	ldrb	r3, [r3, #0]
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b00c      	add	sp, #48	; 0x30
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	1dbb      	adds	r3, r7, #6
 8002ee0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ee2:	2317      	movs	r3, #23
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d112      	bne.n	8002f18 <HAL_SPI_Receive_DMA+0x44>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	2382      	movs	r3, #130	; 0x82
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d10c      	bne.n	8002f18 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2251      	movs	r2, #81	; 0x51
 8002f02:	2104      	movs	r1, #4
 8002f04:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002f06:	1dbb      	adds	r3, r7, #6
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f8b2 	bl	8003078 <HAL_SPI_TransmitReceive_DMA>
 8002f14:	0003      	movs	r3, r0
 8002f16:	e0a2      	b.n	800305e <HAL_SPI_Receive_DMA+0x18a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2250      	movs	r2, #80	; 0x50
 8002f1c:	5c9b      	ldrb	r3, [r3, r2]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_SPI_Receive_DMA+0x52>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e09b      	b.n	800305e <HAL_SPI_Receive_DMA+0x18a>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2250      	movs	r2, #80	; 0x50
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2251      	movs	r2, #81	; 0x51
 8002f32:	5c9b      	ldrb	r3, [r3, r2]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d004      	beq.n	8002f44 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8002f3a:	2317      	movs	r3, #23
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2202      	movs	r2, #2
 8002f40:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f42:	e085      	b.n	8003050 <HAL_SPI_Receive_DMA+0x17c>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_SPI_Receive_DMA+0x7e>
 8002f4a:	1dbb      	adds	r3, r7, #6
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d104      	bne.n	8002f5c <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8002f52:	2317      	movs	r3, #23
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f5a:	e079      	b.n	8003050 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2251      	movs	r2, #81	; 0x51
 8002f60:	2104      	movs	r1, #4
 8002f62:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1dba      	adds	r2, r7, #6
 8002f74:	8812      	ldrh	r2, [r2, #0]
 8002f76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1dba      	adds	r2, r7, #6
 8002f7c:	8812      	ldrh	r2, [r2, #0]
 8002f7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_SPI_Receive_DMA+0xe0>
  {
    SPI_1LINE_RX(hspi);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	492e      	ldr	r1, [pc, #184]	; (8003068 <HAL_SPI_Receive_DMA+0x194>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	; (800306c <HAL_SPI_Receive_DMA+0x198>)
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc0:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <HAL_SPI_Receive_DMA+0x19c>)
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc8:	4a2a      	ldr	r2, [pc, #168]	; (8003074 <HAL_SPI_Receive_DMA+0x1a0>)
 8002fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	0019      	movs	r1, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	f7fe fae8 	bl	80015c0 <HAL_DMA_Start_IT>
 8002ff0:	1e03      	subs	r3, r0, #0
 8002ff2:	d00e      	beq.n	8003012 <HAL_SPI_Receive_DMA+0x13e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003000:	2317      	movs	r3, #23
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2251      	movs	r2, #81	; 0x51
 800300c:	2101      	movs	r1, #1
 800300e:	5499      	strb	r1, [r3, r2]
    goto error;
 8003010:	e01e      	b.n	8003050 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2240      	movs	r2, #64	; 0x40
 800301a:	4013      	ands	r3, r2
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d007      	beq.n	8003030 <HAL_SPI_Receive_DMA+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2140      	movs	r1, #64	; 0x40
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2120      	movs	r1, #32
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2101      	movs	r1, #1
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2250      	movs	r2, #80	; 0x50
 8003054:	2100      	movs	r1, #0
 8003056:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003058:	2317      	movs	r3, #23
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	781b      	ldrb	r3, [r3, #0]
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b006      	add	sp, #24
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	ffffbfff 	.word	0xffffbfff
 800306c:	08003409 	.word	0x08003409
 8003070:	080032ed 	.word	0x080032ed
 8003074:	08003445 	.word	0x08003445

08003078 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	001a      	movs	r2, r3
 8003086:	1cbb      	adds	r3, r7, #2
 8003088:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800308a:	2317      	movs	r3, #23
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2250      	movs	r2, #80	; 0x50
 8003096:	5c9b      	ldrb	r3, [r3, r2]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_SPI_TransmitReceive_DMA+0x28>
 800309c:	2302      	movs	r3, #2
 800309e:	e0f6      	b.n	800328e <HAL_SPI_TransmitReceive_DMA+0x216>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2250      	movs	r2, #80	; 0x50
 80030a4:	2101      	movs	r1, #1
 80030a6:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030a8:	2016      	movs	r0, #22
 80030aa:	183b      	adds	r3, r7, r0
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	2151      	movs	r1, #81	; 0x51
 80030b0:	5c52      	ldrb	r2, [r2, r1]
 80030b2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80030ba:	0001      	movs	r1, r0
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d011      	beq.n	80030e8 <HAL_SPI_TransmitReceive_DMA+0x70>
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	2382      	movs	r3, #130	; 0x82
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d107      	bne.n	80030de <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <HAL_SPI_TransmitReceive_DMA+0x66>
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d004      	beq.n	80030e8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80030de:	2317      	movs	r3, #23
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	2202      	movs	r2, #2
 80030e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80030e6:	e0cb      	b.n	8003280 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_SPI_TransmitReceive_DMA+0x84>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_SPI_TransmitReceive_DMA+0x84>
 80030f4:	1cbb      	adds	r3, r7, #2
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80030fc:	2317      	movs	r3, #23
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
    goto error;
 8003104:	e0bc      	b.n	8003280 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2251      	movs	r2, #81	; 0x51
 800310a:	5c9b      	ldrb	r3, [r3, r2]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b04      	cmp	r3, #4
 8003110:	d003      	beq.n	800311a <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2251      	movs	r2, #81	; 0x51
 8003116:	2105      	movs	r1, #5
 8003118:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1cba      	adds	r2, r7, #2
 800312a:	8812      	ldrh	r2, [r2, #0]
 800312c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1cba      	adds	r2, r7, #2
 8003132:	8812      	ldrh	r2, [r2, #0]
 8003134:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1cba      	adds	r2, r7, #2
 8003140:	8812      	ldrh	r2, [r2, #0]
 8003142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1cba      	adds	r2, r7, #2
 8003148:	8812      	ldrh	r2, [r2, #0]
 800314a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2251      	movs	r2, #81	; 0x51
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b04      	cmp	r3, #4
 8003162:	d108      	bne.n	8003176 <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003168:	4a4b      	ldr	r2, [pc, #300]	; (8003298 <HAL_SPI_TransmitReceive_DMA+0x220>)
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003170:	4a4a      	ldr	r2, [pc, #296]	; (800329c <HAL_SPI_TransmitReceive_DMA+0x224>)
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
 8003174:	e007      	b.n	8003186 <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	4a49      	ldr	r2, [pc, #292]	; (80032a0 <HAL_SPI_TransmitReceive_DMA+0x228>)
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	4a48      	ldr	r2, [pc, #288]	; (80032a4 <HAL_SPI_TransmitReceive_DMA+0x22c>)
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800318c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	2200      	movs	r2, #0
 8003194:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	0019      	movs	r1, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	001a      	movs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f7fe fa07 	bl	80015c0 <HAL_DMA_Start_IT>
 80031b2:	1e03      	subs	r3, r0, #0
 80031b4:	d00e      	beq.n	80031d4 <HAL_SPI_TransmitReceive_DMA+0x15c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	2210      	movs	r2, #16
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80031c2:	2317      	movs	r3, #23
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2251      	movs	r2, #81	; 0x51
 80031ce:	2101      	movs	r1, #1
 80031d0:	5499      	strb	r1, [r3, r2]
    goto error;
 80031d2:	e055      	b.n	8003280 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f0:	2200      	movs	r2, #0
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f8:	2200      	movs	r2, #0
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003200:	2200      	movs	r2, #0
 8003202:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	0019      	movs	r1, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	330c      	adds	r3, #12
 8003214:	001a      	movs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	f7fe f9d0 	bl	80015c0 <HAL_DMA_Start_IT>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d00e      	beq.n	8003242 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	2210      	movs	r2, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003230:	2317      	movs	r3, #23
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2251      	movs	r2, #81	; 0x51
 800323c:	2101      	movs	r1, #1
 800323e:	5499      	strb	r1, [r3, r2]
    goto error;
 8003240:	e01e      	b.n	8003280 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2240      	movs	r2, #64	; 0x40
 800324a:	4013      	ands	r3, r2
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d007      	beq.n	8003260 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2140      	movs	r1, #64	; 0x40
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2120      	movs	r1, #32
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2102      	movs	r1, #2
 800327c:	430a      	orrs	r2, r1
 800327e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2250      	movs	r2, #80	; 0x50
 8003284:	2100      	movs	r1, #0
 8003286:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003288:	2317      	movs	r3, #23
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	781b      	ldrb	r3, [r3, #0]
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b006      	add	sp, #24
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	08003409 	.word	0x08003409
 800329c:	080032ed 	.word	0x080032ed
 80032a0:	08003427 	.word	0x08003427
 80032a4:	08003375 	.word	0x08003375
 80032a8:	08003445 	.word	0x08003445

080032ac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}

080032ec <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fa:	f7fd ffe7 	bl	80012cc <HAL_GetTick>
 80032fe:	0003      	movs	r3, r0
 8003300:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2220      	movs	r2, #32
 800330a:	4013      	ands	r3, r2
 800330c:	2b20      	cmp	r3, #32
 800330e:	d02a      	beq.n	8003366 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2120      	movs	r1, #32
 800331c:	438a      	bics	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2103      	movs	r1, #3
 800332c:	438a      	bics	r2, r1
 800332e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2164      	movs	r1, #100	; 0x64
 8003336:	0018      	movs	r0, r3
 8003338:	f000 f916 	bl	8003568 <SPI_EndRxTransaction>
 800333c:	1e03      	subs	r3, r0, #0
 800333e:	d002      	beq.n	8003346 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2251      	movs	r2, #81	; 0x51
 8003350:	2101      	movs	r1, #1
 8003352:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	2b00      	cmp	r3, #0
 800335a:	d004      	beq.n	8003366 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	0018      	movs	r0, r3
 8003360:	f7ff ffbc 	bl	80032dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003364:	e003      	b.n	800336e <SPI_DMAReceiveCplt+0x82>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	0018      	movs	r0, r3
 800336a:	f002 fce3 	bl	8005d34 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800336e:	46bd      	mov	sp, r7
 8003370:	b004      	add	sp, #16
 8003372:	bd80      	pop	{r7, pc}

08003374 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003382:	f7fd ffa3 	bl	80012cc <HAL_GetTick>
 8003386:	0003      	movs	r3, r0
 8003388:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2220      	movs	r2, #32
 8003392:	4013      	ands	r3, r2
 8003394:	2b20      	cmp	r3, #32
 8003396:	d030      	beq.n	80033fa <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2120      	movs	r1, #32
 80033a4:	438a      	bics	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2164      	movs	r1, #100	; 0x64
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 f944 	bl	800363c <SPI_EndRxTxTransaction>
 80033b4:	1e03      	subs	r3, r0, #0
 80033b6:	d005      	beq.n	80033c4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	2220      	movs	r2, #32
 80033be:	431a      	orrs	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2103      	movs	r1, #3
 80033d0:	438a      	bics	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2251      	movs	r2, #81	; 0x51
 80033e4:	2101      	movs	r1, #1
 80033e6:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7ff ff72 	bl	80032dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80033f8:	e003      	b.n	8003402 <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f7ff ff55 	bl	80032ac <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003402:	46bd      	mov	sp, r7
 8003404:	b004      	add	sp, #16
 8003406:	bd80      	pop	{r7, pc}

08003408 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	0018      	movs	r0, r3
 800341a:	f7ff ff4f 	bl	80032bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b004      	add	sp, #16
 8003424:	bd80      	pop	{r7, pc}

08003426 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	0018      	movs	r0, r3
 8003438:	f7ff ff48 	bl	80032cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b004      	add	sp, #16
 8003442:	bd80      	pop	{r7, pc}

08003444 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2103      	movs	r1, #3
 800345e:	438a      	bics	r2, r1
 8003460:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	2210      	movs	r2, #16
 8003468:	431a      	orrs	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2251      	movs	r2, #81	; 0x51
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff ff2f 	bl	80032dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	1dfb      	adds	r3, r7, #7
 8003496:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003498:	e050      	b.n	800353c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	d04d      	beq.n	800353c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034a0:	f7fd ff14 	bl	80012cc <HAL_GetTick>
 80034a4:	0002      	movs	r2, r0
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d902      	bls.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d142      	bne.n	800353c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	21e0      	movs	r1, #224	; 0xe0
 80034c2:	438a      	bics	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	2382      	movs	r3, #130	; 0x82
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d113      	bne.n	80034fa <SPI_WaitFlagStateUntilTimeout+0x72>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	2380      	movs	r3, #128	; 0x80
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	429a      	cmp	r2, r3
 80034dc:	d005      	beq.n	80034ea <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d107      	bne.n	80034fa <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	438a      	bics	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	429a      	cmp	r2, r3
 8003504:	d110      	bne.n	8003528 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4914      	ldr	r1, [pc, #80]	; (8003564 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8003512:	400a      	ands	r2, r1
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0189      	lsls	r1, r1, #6
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2251      	movs	r2, #81	; 0x51
 800352c:	2101      	movs	r1, #1
 800352e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2250      	movs	r2, #80	; 0x50
 8003534:	2100      	movs	r1, #0
 8003536:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e00f      	b.n	800355c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	4013      	ands	r3, r2
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	425a      	negs	r2, r3
 800354c:	4153      	adcs	r3, r2
 800354e:	b2db      	uxtb	r3, r3
 8003550:	001a      	movs	r2, r3
 8003552:	1dfb      	adds	r3, r7, #7
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d19f      	bne.n	800349a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	0018      	movs	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	b004      	add	sp, #16
 8003562:	bd80      	pop	{r7, pc}
 8003564:	ffffdfff 	.word	0xffffdfff

08003568 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	2382      	movs	r3, #130	; 0x82
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	429a      	cmp	r2, r3
 800357e:	d113      	bne.n	80035a8 <SPI_EndRxTransaction+0x40>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	429a      	cmp	r2, r3
 800358a:	d005      	beq.n	8003598 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	429a      	cmp	r2, r3
 8003596:	d107      	bne.n	80035a8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	438a      	bics	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	2382      	movs	r3, #130	; 0x82
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d12b      	bne.n	800360c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	429a      	cmp	r2, r3
 80035be:	d012      	beq.n	80035e6 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	0013      	movs	r3, r2
 80035ca:	2200      	movs	r2, #0
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	f7ff ff5b 	bl	8003488 <SPI_WaitFlagStateUntilTimeout>
 80035d2:	1e03      	subs	r3, r0, #0
 80035d4:	d02d      	beq.n	8003632 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	2220      	movs	r2, #32
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e026      	b.n	8003634 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	0013      	movs	r3, r2
 80035f0:	2200      	movs	r2, #0
 80035f2:	2101      	movs	r1, #1
 80035f4:	f7ff ff48 	bl	8003488 <SPI_WaitFlagStateUntilTimeout>
 80035f8:	1e03      	subs	r3, r0, #0
 80035fa:	d01a      	beq.n	8003632 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	2220      	movs	r2, #32
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e013      	b.n	8003634 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	0013      	movs	r3, r2
 8003616:	2200      	movs	r2, #0
 8003618:	2101      	movs	r1, #1
 800361a:	f7ff ff35 	bl	8003488 <SPI_WaitFlagStateUntilTimeout>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d007      	beq.n	8003632 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	2220      	movs	r2, #32
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e000      	b.n	8003634 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b004      	add	sp, #16
 800363a:	bd80      	pop	{r7, pc}

0800363c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	2382      	movs	r3, #130	; 0x82
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	429a      	cmp	r2, r3
 8003652:	d112      	bne.n	800367a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	0013      	movs	r3, r2
 800365e:	2200      	movs	r2, #0
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	f7ff ff11 	bl	8003488 <SPI_WaitFlagStateUntilTimeout>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d020      	beq.n	80036ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	2220      	movs	r2, #32
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e019      	b.n	80036ae <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2251      	movs	r2, #81	; 0x51
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b05      	cmp	r3, #5
 8003684:	d112      	bne.n	80036ac <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	0013      	movs	r3, r2
 8003690:	2200      	movs	r2, #0
 8003692:	2101      	movs	r1, #1
 8003694:	f7ff fef8 	bl	8003488 <SPI_WaitFlagStateUntilTimeout>
 8003698:	1e03      	subs	r3, r0, #0
 800369a:	d007      	beq.n	80036ac <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	2220      	movs	r2, #32
 80036a2:	431a      	orrs	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e000      	b.n	80036ae <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e01e      	b.n	8003706 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2239      	movs	r2, #57	; 0x39
 80036cc:	5c9b      	ldrb	r3, [r3, r2]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d107      	bne.n	80036e4 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2238      	movs	r2, #56	; 0x38
 80036d8:	2100      	movs	r1, #0
 80036da:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	0018      	movs	r0, r3
 80036e0:	f7fd fa66 	bl	8000bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2239      	movs	r2, #57	; 0x39
 80036e8:	2102      	movs	r1, #2
 80036ea:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	0019      	movs	r1, r3
 80036f6:	0010      	movs	r0, r2
 80036f8:	f000 f9cc 	bl	8003a94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2239      	movs	r2, #57	; 0x39
 8003700:	2101      	movs	r1, #1
 8003702:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e01e      	b.n	800375e <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2239      	movs	r2, #57	; 0x39
 8003724:	5c9b      	ldrb	r3, [r3, r2]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2238      	movs	r2, #56	; 0x38
 8003730:	2100      	movs	r1, #0
 8003732:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0018      	movs	r0, r3
 8003738:	f000 f815 	bl	8003766 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2239      	movs	r2, #57	; 0x39
 8003740:	2102      	movs	r1, #2
 8003742:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	0019      	movs	r1, r3
 800374e:	0010      	movs	r0, r2
 8003750:	f000 f9a0 	bl	8003a94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2239      	movs	r2, #57	; 0x39
 8003758:	2101      	movs	r1, #1
 800375a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b002      	add	sp, #8
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2238      	movs	r2, #56	; 0x38
 8003788:	5c9b      	ldrb	r3, [r3, r2]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800378e:	2302      	movs	r3, #2
 8003790:	e0af      	b.n	80038f2 <HAL_TIM_PWM_ConfigChannel+0x17a>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2238      	movs	r2, #56	; 0x38
 8003796:	2101      	movs	r1, #1
 8003798:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2239      	movs	r2, #57	; 0x39
 800379e:	2102      	movs	r1, #2
 80037a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b0c      	cmp	r3, #12
 80037a6:	d100      	bne.n	80037aa <HAL_TIM_PWM_ConfigChannel+0x32>
 80037a8:	e076      	b.n	8003898 <HAL_TIM_PWM_ConfigChannel+0x120>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b0c      	cmp	r3, #12
 80037ae:	d900      	bls.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80037b0:	e095      	b.n	80038de <HAL_TIM_PWM_ConfigChannel+0x166>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d04e      	beq.n	8003856 <HAL_TIM_PWM_ConfigChannel+0xde>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d900      	bls.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80037be:	e08e      	b.n	80038de <HAL_TIM_PWM_ConfigChannel+0x166>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_TIM_PWM_ConfigChannel+0x56>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b04      	cmp	r3, #4
 80037ca:	d021      	beq.n	8003810 <HAL_TIM_PWM_ConfigChannel+0x98>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80037cc:	e087      	b.n	80038de <HAL_TIM_PWM_ConfigChannel+0x166>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	0011      	movs	r1, r2
 80037d6:	0018      	movs	r0, r3
 80037d8:	f000 f9ba 	bl	8003b50 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2108      	movs	r1, #8
 80037e8:	430a      	orrs	r2, r1
 80037ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2104      	movs	r1, #4
 80037f8:	438a      	bics	r2, r1
 80037fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6999      	ldr	r1, [r3, #24]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	619a      	str	r2, [r3, #24]
      break;
 800380e:	e067      	b.n	80038e0 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f9d5 	bl	8003bc8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	0109      	lsls	r1, r1, #4
 800382c:	430a      	orrs	r2, r1
 800382e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4930      	ldr	r1, [pc, #192]	; (80038fc <HAL_TIM_PWM_ConfigChannel+0x184>)
 800383c:	400a      	ands	r2, r1
 800383e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6999      	ldr	r1, [r3, #24]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	021a      	lsls	r2, r3, #8
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	619a      	str	r2, [r3, #24]
      break;
 8003854:	e044      	b.n	80038e0 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	0011      	movs	r1, r2
 800385e:	0018      	movs	r0, r3
 8003860:	f000 f9f4 	bl	8003c4c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2108      	movs	r1, #8
 8003870:	430a      	orrs	r2, r1
 8003872:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2104      	movs	r1, #4
 8003880:	438a      	bics	r2, r1
 8003882:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69d9      	ldr	r1, [r3, #28]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	61da      	str	r2, [r3, #28]
      break;
 8003896:	e023      	b.n	80038e0 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	0011      	movs	r1, r2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 fa13 	bl	8003ccc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	0109      	lsls	r1, r1, #4
 80038b4:	430a      	orrs	r2, r1
 80038b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_TIM_PWM_ConfigChannel+0x184>)
 80038c4:	400a      	ands	r2, r1
 80038c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69d9      	ldr	r1, [r3, #28]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	021a      	lsls	r2, r3, #8
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	61da      	str	r2, [r3, #28]
      break;
 80038dc:	e000      	b.n	80038e0 <HAL_TIM_PWM_ConfigChannel+0x168>
      break;
 80038de:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2239      	movs	r2, #57	; 0x39
 80038e4:	2101      	movs	r1, #1
 80038e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2238      	movs	r2, #56	; 0x38
 80038ec:	2100      	movs	r1, #0
 80038ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	0018      	movs	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b004      	add	sp, #16
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	fffffbff 	.word	0xfffffbff

08003900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2238      	movs	r2, #56	; 0x38
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_TIM_ConfigClockSource+0x18>
 8003914:	2302      	movs	r3, #2
 8003916:	e0b7      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x188>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2238      	movs	r2, #56	; 0x38
 800391c:	2101      	movs	r1, #1
 800391e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2239      	movs	r2, #57	; 0x39
 8003924:	2102      	movs	r1, #2
 8003926:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2277      	movs	r2, #119	; 0x77
 8003934:	4393      	bics	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a55      	ldr	r2, [pc, #340]	; (8003a90 <HAL_TIM_ConfigClockSource+0x190>)
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	0192      	lsls	r2, r2, #6
 8003950:	4293      	cmp	r3, r2
 8003952:	d040      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0xd6>
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	0192      	lsls	r2, r2, #6
 8003958:	4293      	cmp	r3, r2
 800395a:	d900      	bls.n	800395e <HAL_TIM_ConfigClockSource+0x5e>
 800395c:	e088      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 800395e:	2280      	movs	r2, #128	; 0x80
 8003960:	0152      	lsls	r2, r2, #5
 8003962:	4293      	cmp	r3, r2
 8003964:	d100      	bne.n	8003968 <HAL_TIM_ConfigClockSource+0x68>
 8003966:	e085      	b.n	8003a74 <HAL_TIM_ConfigClockSource+0x174>
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	0152      	lsls	r2, r2, #5
 800396c:	4293      	cmp	r3, r2
 800396e:	d900      	bls.n	8003972 <HAL_TIM_ConfigClockSource+0x72>
 8003970:	e07e      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003972:	2b70      	cmp	r3, #112	; 0x70
 8003974:	d018      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0xa8>
 8003976:	d900      	bls.n	800397a <HAL_TIM_ConfigClockSource+0x7a>
 8003978:	e07a      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 800397a:	2b60      	cmp	r3, #96	; 0x60
 800397c:	d04f      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x11e>
 800397e:	d900      	bls.n	8003982 <HAL_TIM_ConfigClockSource+0x82>
 8003980:	e076      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003982:	2b50      	cmp	r3, #80	; 0x50
 8003984:	d03b      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0xfe>
 8003986:	d900      	bls.n	800398a <HAL_TIM_ConfigClockSource+0x8a>
 8003988:	e072      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d057      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x13e>
 800398e:	d900      	bls.n	8003992 <HAL_TIM_ConfigClockSource+0x92>
 8003990:	e06e      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003992:	2b30      	cmp	r3, #48	; 0x30
 8003994:	d063      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15e>
 8003996:	d86b      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d060      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15e>
 800399c:	d868      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d05d      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15e>
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d05b      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80039a6:	e063      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f000 fa48 	bl	8003e4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2277      	movs	r2, #119	; 0x77
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	609a      	str	r2, [r3, #8]
      break;
 80039d4:	e04f      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6899      	ldr	r1, [r3, #8]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f000 fa31 	bl	8003e4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2180      	movs	r1, #128	; 0x80
 80039f6:	01c9      	lsls	r1, r1, #7
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
      break;
 80039fc:	e03b      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	f000 f9a4 	bl	8003d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2150      	movs	r1, #80	; 0x50
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 f9fe 	bl	8003e18 <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e02b      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	f000 f9c2 	bl	8003db4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2160      	movs	r1, #96	; 0x60
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 f9ee 	bl	8003e18 <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e01b      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	f000 f984 	bl	8003d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2140      	movs	r1, #64	; 0x40
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 f9de 	bl	8003e18 <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e00b      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	0019      	movs	r1, r3
 8003a68:	0010      	movs	r0, r2
 8003a6a:	f000 f9d5 	bl	8003e18 <TIM_ITRx_SetConfig>
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	e000      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003a74:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2239      	movs	r2, #57	; 0x39
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2238      	movs	r2, #56	; 0x38
 8003a82:	2100      	movs	r1, #0
 8003a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b004      	add	sp, #16
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	ffff00ff 	.word	0xffff00ff

08003a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	05db      	lsls	r3, r3, #23
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d00b      	beq.n	8003ac6 <TIM_Base_SetConfig+0x32>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <TIM_Base_SetConfig+0xac>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <TIM_Base_SetConfig+0x32>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	; (8003b44 <TIM_Base_SetConfig+0xb0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_Base_SetConfig+0x32>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a21      	ldr	r2, [pc, #132]	; (8003b48 <TIM_Base_SetConfig+0xb4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d108      	bne.n	8003ad8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2270      	movs	r2, #112	; 0x70
 8003aca:	4393      	bics	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	05db      	lsls	r3, r3, #23
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d00b      	beq.n	8003afa <TIM_Base_SetConfig+0x66>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <TIM_Base_SetConfig+0xac>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <TIM_Base_SetConfig+0x66>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <TIM_Base_SetConfig+0xb0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d003      	beq.n	8003afa <TIM_Base_SetConfig+0x66>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <TIM_Base_SetConfig+0xb4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <TIM_Base_SetConfig+0xb8>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2280      	movs	r2, #128	; 0x80
 8003b10:	4393      	bics	r3, r2
 8003b12:	001a      	movs	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	615a      	str	r2, [r3, #20]
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b004      	add	sp, #16
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40010800 	.word	0x40010800
 8003b48:	40011400 	.word	0x40011400
 8003b4c:	fffffcff 	.word	0xfffffcff

08003b50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4393      	bics	r3, r2
 8003b62:	001a      	movs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2270      	movs	r2, #112	; 0x70
 8003b7e:	4393      	bics	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2203      	movs	r2, #3
 8003b86:	4393      	bics	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2202      	movs	r2, #2
 8003b98:	4393      	bics	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b006      	add	sp, #24
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	4393      	bics	r3, r2
 8003bda:	001a      	movs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <TIM_OC2_SetConfig+0x7c>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <TIM_OC2_SetConfig+0x80>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2220      	movs	r2, #32
 8003c12:	4393      	bics	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b006      	add	sp, #24
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	ffff8fff 	.word	0xffff8fff
 8003c48:	fffffcff 	.word	0xfffffcff

08003c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <TIM_OC3_SetConfig+0x78>)
 8003c5c:	401a      	ands	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2270      	movs	r2, #112	; 0x70
 8003c78:	4393      	bics	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	4393      	bics	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <TIM_OC3_SetConfig+0x7c>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	621a      	str	r2, [r3, #32]
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b006      	add	sp, #24
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	fffffeff 	.word	0xfffffeff
 8003cc8:	fffffdff 	.word	0xfffffdff

08003ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a1b      	ldr	r2, [pc, #108]	; (8003d48 <TIM_OC4_SetConfig+0x7c>)
 8003cdc:	401a      	ands	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <TIM_OC4_SetConfig+0x80>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <TIM_OC4_SetConfig+0x84>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4a10      	ldr	r2, [pc, #64]	; (8003d54 <TIM_OC4_SetConfig+0x88>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	031b      	lsls	r3, r3, #12
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b006      	add	sp, #24
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	ffffefff 	.word	0xffffefff
 8003d4c:	ffff8fff 	.word	0xffff8fff
 8003d50:	fffffcff 	.word	0xfffffcff
 8003d54:	ffffdfff 	.word	0xffffdfff

08003d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4393      	bics	r3, r2
 8003d72:	001a      	movs	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	22f0      	movs	r2, #240	; 0xf0
 8003d82:	4393      	bics	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	220a      	movs	r2, #10
 8003d94:	4393      	bics	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	621a      	str	r2, [r3, #32]
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b006      	add	sp, #24
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	4393      	bics	r3, r2
 8003dc8:	001a      	movs	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <TIM_TI2_ConfigInputStage+0x60>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	031b      	lsls	r3, r3, #12
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	22a0      	movs	r2, #160	; 0xa0
 8003df0:	4393      	bics	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	621a      	str	r2, [r3, #32]
}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b006      	add	sp, #24
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	ffff0fff 	.word	0xffff0fff

08003e18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2270      	movs	r2, #112	; 0x70
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	2207      	movs	r2, #7
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b004      	add	sp, #16
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <TIM_ETR_SetConfig+0x3c>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	021a      	lsls	r2, r3, #8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	609a      	str	r2, [r3, #8]
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b006      	add	sp, #24
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	ffff00ff 	.word	0xffff00ff

08003e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2238      	movs	r2, #56	; 0x38
 8003e9a:	5c9b      	ldrb	r3, [r3, r2]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e032      	b.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2238      	movs	r2, #56	; 0x38
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2239      	movs	r2, #57	; 0x39
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2270      	movs	r2, #112	; 0x70
 8003ec8:	4393      	bics	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2280      	movs	r2, #128	; 0x80
 8003eda:	4393      	bics	r3, r2
 8003edc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2239      	movs	r2, #57	; 0x39
 8003efc:	2101      	movs	r1, #1
 8003efe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2238      	movs	r2, #56	; 0x38
 8003f04:	2100      	movs	r1, #0
 8003f06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b004      	add	sp, #16
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8003f12:	b590      	push	{r4, r7, lr}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e075      	b.n	8004010 <HAL_TSC_Init+0xfe>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	223c      	movs	r2, #60	; 0x3c
 8003f28:	5c9b      	ldrb	r3, [r3, r2]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d107      	bne.n	8003f40 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	223d      	movs	r2, #61	; 0x3d
 8003f34:	2100      	movs	r1, #0
 8003f36:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f7fc ff18 	bl	8000d70 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	223c      	movs	r2, #60	; 0x3c
 8003f44:	2102      	movs	r1, #2
 8003f46:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6819      	ldr	r1, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003f5e:	431a      	orrs	r2, r3
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8003f66:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8003f6c:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8003f72:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8003f78:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8003f7e:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8003f84:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if ((FunctionalState)htsc->Init.SpreadSpectrum == ENABLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d108      	bne.n	8003faa <HAL_TSC_Init+0x98>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	0249      	lsls	r1, r1, #9
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (uint32_t)(~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	43d2      	mvns	r2, r2
 8003fc0:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fda:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681c      	ldr	r4, [r3, #0]
 8003fe4:	0010      	movs	r0, r2
 8003fe6:	f000 f817 	bl	8004018 <TSC_extract_groups>
 8003fea:	0003      	movs	r3, r0
 8003fec:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (uint32_t)(~(TSC_IT_EOA | TSC_IT_MCE));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2103      	movs	r1, #3
 8003ffa:	438a      	bics	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2203      	movs	r2, #3
 8004004:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	223c      	movs	r2, #60	; 0x3c
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b003      	add	sp, #12
 8004016:	bd90      	pop	{r4, r7, pc}

08004018 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	e011      	b.n	800404e <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	220f      	movs	r2, #15
 8004030:	409a      	lsls	r2, r3
 8004032:	0013      	movs	r3, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4013      	ands	r3, r2
 8004038:	d006      	beq.n	8004048 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800403a:	2201      	movs	r2, #1
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	409a      	lsls	r2, r3
 8004040:	0013      	movs	r3, r2
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	3301      	adds	r3, #1
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b07      	cmp	r3, #7
 8004052:	d9ea      	bls.n	800402a <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8004054:	68fb      	ldr	r3, [r7, #12]
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b004      	add	sp, #16
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <TSL_Init>:
  * @brief  Initializes the TS interface.
  * @param  bank  Array holding all the banks
  * @retval Status
  */
TSL_Status_enum_T TSL_Init(CONST TSL_Bank_T *bank)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  TSL_Status_enum_T retval;

  // Get banks array
  TSL_Globals.Bank_Array = bank;
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <TSL_Init+0x50>)
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	605a      	str	r2, [r3, #4]

  // Initialize the delay that will be used to discharge the capacitors
  TSL_Globals.DelayDischarge = (uint32_t)((TSLPRM_DELAY_DISCHARGE_ALL * (uint32_t)(SystemCoreClock/1000000)) / 72);
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <TSL_Init+0x54>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4911      	ldr	r1, [pc, #68]	; (80040b8 <TSL_Init+0x58>)
 8004074:	0018      	movs	r0, r3
 8004076:	f7fc f847 	bl	8000108 <__udivsi3>
 800407a:	0003      	movs	r3, r0
 800407c:	001a      	movs	r2, r3
 800407e:	0013      	movs	r3, r2
 8004080:	015b      	lsls	r3, r3, #5
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	189b      	adds	r3, r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	2148      	movs	r1, #72	; 0x48
 800408c:	0018      	movs	r0, r3
 800408e:	f7fc f83b 	bl	8000108 <__udivsi3>
 8004092:	0003      	movs	r3, r0
 8004094:	001a      	movs	r2, r3
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <TSL_Init+0x50>)
 8004098:	611a      	str	r2, [r3, #16]
  // Note: The timing configuration (Systick) must be done in the user code.

  // Initialization of the acquisition module
#ifdef __TSL_ACQ_TSC_H
  // Note: The TSC peripheral initialization must be done in the user code.
  retval = TSL_STATUS_OK;
 800409a:	210f      	movs	r1, #15
 800409c:	187b      	adds	r3, r7, r1
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
#else
  retval = TSL_acq_Init();
#endif

  return retval;
 80040a2:	187b      	adds	r3, r7, r1
 80040a4:	781b      	ldrb	r3, [r3, #0]
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b004      	add	sp, #16
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	20000d6c 	.word	0x20000d6c
 80040b4:	20000000 	.word	0x20000000
 80040b8:	000f4240 	.word	0x000f4240

080040bc <TSL_acq_TestFirstReferenceIsValid>:
  * @param[in] pCh Pointer on the channel data information
  * @param[in] new_meas Measure of the last acquisition on this channel
  * @retval Result TRUE if the Reference is valid
  */
TSL_Bool_enum_T TSL_acq_TestFirstReferenceIsValid(TSL_ChannelData_T *pCh, TSL_tMeas_T new_meas)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	000a      	movs	r2, r1
 80040c6:	1cbb      	adds	r3, r7, #2
 80040c8:	801a      	strh	r2, [r3, #0]
  return TSL_TRUE;
 80040ca:	2301      	movs	r3, #1
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b002      	add	sp, #8
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <TSL_obj_GroupInit>:
  * @brief Initialize a group of Objects
  * @param[in] objgrp  Pointer to the group of objects
  * @retval None
  */
void TSL_obj_GroupInit(TSL_ObjectGroup_T *objgrp)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  TSL_tIndex_T idx_obj;
  CONST TSL_Object_T *pobj;
  TSL_tNb_T objgrp_state_mask = 0;
 80040dc:	230e      	movs	r3, #14
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	2200      	movs	r2, #0
 80040e2:	801a      	strh	r2, [r3, #0]

  pobj = objgrp->p_Obj; // First object in the group
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	613b      	str	r3, [r7, #16]

  objgrp->Change = TSL_STATE_NOT_CHANGED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	721a      	strb	r2, [r3, #8]

  // Process all objects
  for (idx_obj = 0; idx_obj < objgrp->NbObjects; idx_obj++)
 80040f0:	2317      	movs	r3, #23
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e034      	b.n	8004164 <TSL_obj_GroupInit+0x90>
  {

    // Assign global object
    TSL_obj_SetGlobalObj(pobj);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 f845 	bl	800418c <TSL_obj_SetGlobalObj>

    switch (pobj->Type)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b10      	cmp	r3, #16
 8004108:	d122      	bne.n	8004150 <TSL_obj_GroupInit+0x7c>
    {
        //------------------------------------------------------------------------
#if TSLPRM_TOTAL_TOUCHKEYS > 0
      case TSL_OBJ_TOUCHKEY:
        // Call the specific method
        TSL_Globals.This_TKey->p_Methods->Init();
 800410a:	4b1f      	ldr	r3, [pc, #124]	; (8004188 <TSL_obj_GroupInit+0xb4>)
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4798      	blx	r3
        // Check if the object has changed of state
        if (TSL_Globals.This_TKey->p_Data->Change)
 8004114:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <TSL_obj_GroupInit+0xb4>)
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	789b      	ldrb	r3, [r3, #2]
 800411c:	2240      	movs	r2, #64	; 0x40
 800411e:	4013      	ands	r3, r2
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <TSL_obj_GroupInit+0x58>
        {
          objgrp->Change = TSL_STATE_CHANGED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	721a      	strb	r2, [r3, #8]
        }
        // Update object group state mask
        objgrp_state_mask |= TSL_Globals.This_TKey->p_SM[TSL_Globals.This_TKey->p_Data->StateId].StateMask;
 800412c:	4b16      	ldr	r3, [pc, #88]	; (8004188 <TSL_obj_GroupInit+0xb4>)
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <TSL_obj_GroupInit+0xb4>)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	18d3      	adds	r3, r2, r3
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b299      	uxth	r1, r3
 8004142:	220e      	movs	r2, #14
 8004144:	18bb      	adds	r3, r7, r2
 8004146:	18ba      	adds	r2, r7, r2
 8004148:	8812      	ldrh	r2, [r2, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	801a      	strh	r2, [r3, #0]
        break;
 800414e:	e000      	b.n	8004152 <TSL_obj_GroupInit+0x7e>
        // Get object state mask from state machine in TSL_Params
        objgrp_state_mask |= TSL_Params.p_LinRotSM[TSL_Globals.This_LinRot->p_Data->StateId].StateMask;
        break;
#endif
      default:
        break;
 8004150:	46c0      	nop			; (mov r8, r8)
    }

    pobj++; // Next object
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3308      	adds	r3, #8
 8004156:	613b      	str	r3, [r7, #16]
  for (idx_obj = 0; idx_obj < objgrp->NbObjects; idx_obj++)
 8004158:	2117      	movs	r1, #23
 800415a:	187b      	adds	r3, r7, r1
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	187b      	adds	r3, r7, r1
 8004160:	3201      	adds	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	2317      	movs	r3, #23
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	889b      	ldrh	r3, [r3, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d3c2      	bcc.n	80040fa <TSL_obj_GroupInit+0x26>
  }

  // Update the object group state mask
  objgrp->StateMask = objgrp_state_mask;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	220e      	movs	r2, #14
 8004178:	18ba      	adds	r2, r7, r2
 800417a:	8812      	ldrh	r2, [r2, #0]
 800417c:	80da      	strh	r2, [r3, #6]
}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	46bd      	mov	sp, r7
 8004182:	b006      	add	sp, #24
 8004184:	bd80      	pop	{r7, pc}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	20000d6c 	.word	0x20000d6c

0800418c <TSL_obj_SetGlobalObj>:
  * @brief Set the global object variable
  * @param[in] pobj  Pointer to the object to process
  * @retval None
  */
void TSL_obj_SetGlobalObj(CONST TSL_Object_T *pobj)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]

  TSL_Globals.This_Obj = pobj;
 8004194:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <TSL_obj_SetGlobalObj+0x2c>)
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	60da      	str	r2, [r3, #12]

  switch (pobj->Type)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	3b10      	subs	r3, #16
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d804      	bhi.n	80041ae <TSL_obj_SetGlobalObj+0x22>
  {
#if TSLPRM_TOTAL_TKEYS > 0
    case TSL_OBJ_TOUCHKEY:
    case TSL_OBJ_TOUCHKEYB:
      TSL_Globals.This_TKey = (TSL_TouchKey_T *)pobj->Elmt;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <TSL_obj_SetGlobalObj+0x2c>)
 80041aa:	615a      	str	r2, [r3, #20]
      break;
 80041ac:	e000      	b.n	80041b0 <TSL_obj_SetGlobalObj+0x24>
    case TSL_OBJ_ROTARYB:
      TSL_Globals.This_LinRot = (TSL_LinRot_T *)pobj->Elmt;
      break;
#endif
    default:
      break;
 80041ae:	46c0      	nop			; (mov r8, r8)
  }
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b002      	add	sp, #8
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000d6c 	.word	0x20000d6c

080041bc <TSL_tim_ProcessIT>:
  * @brief  Management of the timing module interrupt service routine.
  * @param  None
  * @retval None
  */
void TSL_tim_ProcessIT(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  static TSL_tTick_ms_T count_1s = 0;

  // Count 1 global tick every xxx ms (defined by TSLPRM_TICK_FREQ parameter)
  TSL_Globals.Tick_ms++;
 80041c0:	4b12      	ldr	r3, [pc, #72]	; (800420c <TSL_tim_ProcessIT+0x50>)
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	4b10      	ldr	r3, [pc, #64]	; (800420c <TSL_tim_ProcessIT+0x50>)
 80041ca:	801a      	strh	r2, [r3, #0]

  // Check if 1 second has elapsed
  count_1s++;
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <TSL_tim_ProcessIT+0x54>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	3301      	adds	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <TSL_tim_ProcessIT+0x54>)
 80041d6:	801a      	strh	r2, [r3, #0]
  if (count_1s > (TSLPRM_TICK_FREQ - 1))
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <TSL_tim_ProcessIT+0x54>)
 80041da:	881a      	ldrh	r2, [r3, #0]
 80041dc:	23fa      	movs	r3, #250	; 0xfa
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d30f      	bcc.n	8004204 <TSL_tim_ProcessIT+0x48>
  {
    TSL_Globals.Tick_sec++; // 1 global tick every second
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <TSL_tim_ProcessIT+0x50>)
 80041e6:	789b      	ldrb	r3, [r3, #2]
 80041e8:	3301      	adds	r3, #1
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4b07      	ldr	r3, [pc, #28]	; (800420c <TSL_tim_ProcessIT+0x50>)
 80041ee:	709a      	strb	r2, [r3, #2]
    if (TSL_Globals.Tick_sec > 63)  // Due to DTO counter on 6 bits...
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <TSL_tim_ProcessIT+0x50>)
 80041f2:	789b      	ldrb	r3, [r3, #2]
 80041f4:	2b3f      	cmp	r3, #63	; 0x3f
 80041f6:	d902      	bls.n	80041fe <TSL_tim_ProcessIT+0x42>
    {
      TSL_Globals.Tick_sec = 0;
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <TSL_tim_ProcessIT+0x50>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	709a      	strb	r2, [r3, #2]
    }
    count_1s = 0;
 80041fe:	4b04      	ldr	r3, [pc, #16]	; (8004210 <TSL_tim_ProcessIT+0x54>)
 8004200:	2200      	movs	r2, #0
 8004202:	801a      	strh	r2, [r3, #0]
  }
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	20000d6c 	.word	0x20000d6c
 8004210:	20000b58 	.word	0x20000b58

08004214 <TSL_tkey_Init>:
  * @brief  Init parameters with default values from configuration file
  * @param  None
  * @retval None
  */
void TSL_tkey_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  // Thresholds
#if TSLPRM_USE_PROX > 0
  THIS_PROXIN_TH    = TSLPRM_TKEY_PROX_IN_TH;
 8004218:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <TSL_tkey_Init+0x74>)
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	220a      	movs	r2, #10
 8004220:	701a      	strb	r2, [r3, #0]
  THIS_PROXOUT_TH   = TSLPRM_TKEY_PROX_OUT_TH;
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <TSL_tkey_Init+0x74>)
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2205      	movs	r2, #5
 800422a:	705a      	strb	r2, [r3, #1]
#endif
  THIS_DETECTIN_TH  = TSLPRM_TKEY_DETECT_IN_TH;
 800422c:	4b16      	ldr	r3, [pc, #88]	; (8004288 <TSL_tkey_Init+0x74>)
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2278      	movs	r2, #120	; 0x78
 8004234:	709a      	strb	r2, [r3, #2]
  THIS_DETECTOUT_TH = TSLPRM_TKEY_DETECT_OUT_TH;
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <TSL_tkey_Init+0x74>)
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	226e      	movs	r2, #110	; 0x6e
 800423e:	70da      	strb	r2, [r3, #3]
  THIS_CALIB_TH     = TSLPRM_TKEY_CALIB_TH;
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <TSL_tkey_Init+0x74>)
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2278      	movs	r2, #120	; 0x78
 8004248:	711a      	strb	r2, [r3, #4]

  // Debounce counters
  THIS_COUNTER_DEB_CALIB   = TSLPRM_DEBOUNCE_CALIB;
 800424a:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <TSL_tkey_Init+0x74>)
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2203      	movs	r2, #3
 8004252:	715a      	strb	r2, [r3, #5]
#if TSLPRM_USE_PROX > 0
  THIS_COUNTER_DEB_PROX    = TSLPRM_DEBOUNCE_PROX;
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <TSL_tkey_Init+0x74>)
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	719a      	strb	r2, [r3, #6]
#endif
  THIS_COUNTER_DEB_DETECT  = TSLPRM_DEBOUNCE_DETECT;
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <TSL_tkey_Init+0x74>)
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	71da      	strb	r2, [r3, #7]
  THIS_COUNTER_DEB_RELEASE = TSLPRM_DEBOUNCE_RELEASE;
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <TSL_tkey_Init+0x74>)
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	721a      	strb	r2, [r3, #8]
  THIS_COUNTER_DEB_ERROR   = TSLPRM_DEBOUNCE_ERROR;
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <TSL_tkey_Init+0x74>)
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2203      	movs	r2, #3
 800427a:	725a      	strb	r2, [r3, #9]

  // Initial state
  TSL_tkey_SetStateCalibration(TSLPRM_CALIB_DELAY);
 800427c:	2000      	movs	r0, #0
 800427e:	f000 f851 	bl	8004324 <TSL_tkey_SetStateCalibration>
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000d6c 	.word	0x20000d6c

0800428c <TSL_tkey_Process>:
  * @brief  Process the State Machine
  * @param  None
  * @retval None
  */
void TSL_tkey_Process(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  TSL_StateId_enum_T prev_state_id;

  if ((THIS_DATA_READY != 0) || (THIS_STATEID == TSL_STATEID_OFF))
 8004292:	4b23      	ldr	r3, [pc, #140]	; (8004320 <TSL_tkey_Process+0x94>)
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2201      	movs	r2, #1
 800429c:	4013      	ands	r3, r2
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <TSL_tkey_Process+0x24>
 80042a4:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <TSL_tkey_Process+0x94>)
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b13      	cmp	r3, #19
 80042ae:	d133      	bne.n	8004318 <TSL_tkey_Process+0x8c>
  {

    THIS_DATA_READY = TSL_DATA_NOT_READY; // The new data is processed
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <TSL_tkey_Process+0x94>)
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	2101      	movs	r1, #1
 80042ba:	438a      	bics	r2, r1
 80042bc:	701a      	strb	r2, [r3, #0]

    prev_state_id = THIS_STATEID;
 80042be:	4b18      	ldr	r3, [pc, #96]	; (8004320 <TSL_tkey_Process+0x94>)
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	1dfb      	adds	r3, r7, #7
 80042c6:	7812      	ldrb	r2, [r2, #0]
 80042c8:	701a      	strb	r2, [r3, #0]

#if TSLPRM_TOTAL_TOUCHKEYS > 0
    if (TSL_Globals.This_Obj->Type == TSL_OBJ_TOUCHKEY)
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <TSL_tkey_Process+0x94>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d10a      	bne.n	80042ea <TSL_tkey_Process+0x5e>
    {
      // Launch the TKey state function
      TSL_Globals.This_TKey->p_SM[THIS_STATEID].StateFunc();
 80042d4:	4b12      	ldr	r3, [pc, #72]	; (8004320 <TSL_tkey_Process+0x94>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <TSL_tkey_Process+0x94>)
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4798      	blx	r3
      TSL_Params.p_TKeySM[THIS_STATEID].StateFunc();
    }
#endif

    // Check if the new state has changed
    if (THIS_STATEID == prev_state_id)
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <TSL_tkey_Process+0x94>)
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	1dfa      	adds	r2, r7, #7
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d107      	bne.n	800430a <TSL_tkey_Process+0x7e>
    {
      THIS_CHANGE = TSL_STATE_NOT_CHANGED;
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <TSL_tkey_Process+0x94>)
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	789a      	ldrb	r2, [r3, #2]
 8004302:	2140      	movs	r1, #64	; 0x40
 8004304:	438a      	bics	r2, r1
 8004306:	709a      	strb	r2, [r3, #2]
      THIS_STATEID = TSL_STATEID_DETECT;
    }
#endif

  }
}
 8004308:	e006      	b.n	8004318 <TSL_tkey_Process+0x8c>
      THIS_CHANGE = TSL_STATE_CHANGED;
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <TSL_tkey_Process+0x94>)
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	789a      	ldrb	r2, [r3, #2]
 8004312:	2140      	movs	r1, #64	; 0x40
 8004314:	430a      	orrs	r2, r1
 8004316:	709a      	strb	r2, [r3, #2]
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20000d6c 	.word	0x20000d6c

08004324 <TSL_tkey_SetStateCalibration>:
  * @brief  Go in Calibration state
  * @param[in] delay Delay before calibration starts (stabilization of noise filter)
  * @retval None
  */
void TSL_tkey_SetStateCalibration(TSL_tCounter_T delay)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	0002      	movs	r2, r0
 800432c:	1dfb      	adds	r3, r7, #7
 800432e:	701a      	strb	r2, [r3, #0]
  THIS_STATEID = TSL_STATEID_CALIB;
 8004330:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <TSL_tkey_SetStateCalibration+0x88>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
  THIS_CHANGE = TSL_STATE_CHANGED;
 800433a:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <TSL_tkey_SetStateCalibration+0x88>)
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	789a      	ldrb	r2, [r3, #2]
 8004342:	2140      	movs	r1, #64	; 0x40
 8004344:	430a      	orrs	r2, r1
 8004346:	709a      	strb	r2, [r3, #2]
  THIS_OBJ_STATUS = TSL_OBJ_STATUS_ON;
 8004348:	4b18      	ldr	r3, [pc, #96]	; (80043ac <TSL_tkey_SetStateCalibration+0x88>)
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	781a      	ldrb	r2, [r3, #0]
 8004350:	2118      	movs	r1, #24
 8004352:	430a      	orrs	r2, r1
 8004354:	701a      	strb	r2, [r3, #0]

  switch (TSL_Params.NbCalibSamples)
 8004356:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <TSL_tkey_SetStateCalibration+0x8c>)
 8004358:	889b      	ldrh	r3, [r3, #4]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d002      	beq.n	8004364 <TSL_tkey_SetStateCalibration+0x40>
 800435e:	2b10      	cmp	r3, #16
 8004360:	d004      	beq.n	800436c <TSL_tkey_SetStateCalibration+0x48>
 8004362:	e007      	b.n	8004374 <TSL_tkey_SetStateCalibration+0x50>
  {
    case 4:
      CalibDiv = 2;
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <TSL_tkey_SetStateCalibration+0x90>)
 8004366:	2202      	movs	r2, #2
 8004368:	801a      	strh	r2, [r3, #0]
      break;
 800436a:	e00a      	b.n	8004382 <TSL_tkey_SetStateCalibration+0x5e>
    case 16:
      CalibDiv = 4;
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <TSL_tkey_SetStateCalibration+0x90>)
 800436e:	2204      	movs	r2, #4
 8004370:	801a      	strh	r2, [r3, #0]
      break;
 8004372:	e006      	b.n	8004382 <TSL_tkey_SetStateCalibration+0x5e>
    default:
      TSL_Params.NbCalibSamples =  8;
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <TSL_tkey_SetStateCalibration+0x8c>)
 8004376:	2208      	movs	r2, #8
 8004378:	809a      	strh	r2, [r3, #4]
      CalibDiv = 3;
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <TSL_tkey_SetStateCalibration+0x90>)
 800437c:	2203      	movs	r2, #3
 800437e:	801a      	strh	r2, [r3, #0]
      break;
 8004380:	46c0      	nop			; (mov r8, r8)
  }

  // If a noise filter is used, the counter must be initialized to a value
  // different from 0 in order to stabilize the filter.
  THIS_COUNTER_DEB = (TSL_tCounter_T)(delay + (TSL_tCounter_T)TSL_Params.NbCalibSamples);
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <TSL_tkey_SetStateCalibration+0x8c>)
 8004384:	889b      	ldrh	r3, [r3, #4]
 8004386:	b2d9      	uxtb	r1, r3
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <TSL_tkey_SetStateCalibration+0x88>)
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	1dfa      	adds	r2, r7, #7
 8004390:	7812      	ldrb	r2, [r2, #0]
 8004392:	188a      	adds	r2, r1, r2
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	705a      	strb	r2, [r3, #1]
  THIS_REF = 0;
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <TSL_tkey_SetStateCalibration+0x88>)
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2200      	movs	r2, #0
 80043a0:	809a      	strh	r2, [r3, #4]
}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b002      	add	sp, #8
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	20000d6c 	.word	0x20000d6c
 80043b0:	20000014 	.word	0x20000014
 80043b4:	20000b5a 	.word	0x20000b5a

080043b8 <TSL_tkey_GetStateMask>:
  * @brief  Return the current state mask
  * @param  None
  * @retval State mask
  */
TSL_StateMask_enum_T TSL_tkey_GetStateMask(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
  TSL_StateMask_enum_T state_mask = TSL_STATEMASK_UNKNOWN;
 80043be:	1dfb      	adds	r3, r7, #7
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]

#if TSLPRM_TOTAL_TOUCHKEYS > 0
  if (TSL_Globals.This_Obj->Type == TSL_OBJ_TOUCHKEY)
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <TSL_tkey_GetStateMask+0x3c>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b10      	cmp	r3, #16
 80043cc:	d10b      	bne.n	80043e6 <TSL_tkey_GetStateMask+0x2e>
  {
    state_mask = TSL_Globals.This_TKey->p_SM[THIS_STATEID].StateMask;
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <TSL_tkey_GetStateMask+0x3c>)
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <TSL_tkey_GetStateMask+0x3c>)
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	18d2      	adds	r2, r2, r3
 80043e0:	1dfb      	adds	r3, r7, #7
 80043e2:	7812      	ldrb	r2, [r2, #0]
 80043e4:	701a      	strb	r2, [r3, #0]
  {
    state_mask = TSL_Params.p_TKeySM[THIS_STATEID].StateMask;
  }
#endif

  return state_mask;
 80043e6:	1dfb      	adds	r3, r7, #7
 80043e8:	781b      	ldrb	r3, [r3, #0]
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b002      	add	sp, #8
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	20000d6c 	.word	0x20000d6c

080043f8 <TSL_tkey_DebReleaseProxStateProcess>:
  * @brief  Debounce Release processing (previous state = Proximity)
  * @param  None
  * @retval None
  */
void TSL_tkey_DebReleaseProxStateProcess(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 80043fc:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <TSL_tkey_DebReleaseProxStateProcess+0x80>)
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	075b      	lsls	r3, r3, #29
 8004406:	0f9b      	lsrs	r3, r3, #30
 8004408:	b2db      	uxtb	r3, r3
 800440a:	001a      	movs	r2, r3
 800440c:	2302      	movs	r3, #2
 800440e:	4013      	ands	r3, r2
 8004410:	d005      	beq.n	800441e <TSL_tkey_DebReleaseProxStateProcess+0x26>
  {
    THIS_STATEID = TSL_STATEID_PROX; // Go back to the previous state
 8004412:	4b19      	ldr	r3, [pc, #100]	; (8004478 <TSL_tkey_DebReleaseProxStateProcess+0x80>)
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2206      	movs	r2, #6
 800441a:	701a      	strb	r2, [r3, #0]
        THIS_STATEID = TSL_STATEID_RELEASE;
      }
      // else stay in Debounce Release
    }
  }
}
 800441c:	e029      	b.n	8004472 <TSL_tkey_DebReleaseProxStateProcess+0x7a>
    if (THIS_DELTA > THIS_PROXOUT_TH)
 800441e:	4b16      	ldr	r3, [pc, #88]	; (8004478 <TSL_tkey_DebReleaseProxStateProcess+0x80>)
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2208      	movs	r2, #8
 8004426:	5e9b      	ldrsh	r3, [r3, r2]
 8004428:	001a      	movs	r2, r3
 800442a:	4b13      	ldr	r3, [pc, #76]	; (8004478 <TSL_tkey_DebReleaseProxStateProcess+0x80>)
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	785b      	ldrb	r3, [r3, #1]
 8004432:	429a      	cmp	r2, r3
 8004434:	dd05      	ble.n	8004442 <TSL_tkey_DebReleaseProxStateProcess+0x4a>
      THIS_STATEID = TSL_STATEID_PROX; // Go back to the previous state
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <TSL_tkey_DebReleaseProxStateProcess+0x80>)
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2206      	movs	r2, #6
 800443e:	701a      	strb	r2, [r3, #0]
}
 8004440:	e017      	b.n	8004472 <TSL_tkey_DebReleaseProxStateProcess+0x7a>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <TSL_tkey_DebReleaseProxStateProcess+0x80>)
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d006      	beq.n	800445c <TSL_tkey_DebReleaseProxStateProcess+0x64>
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <TSL_tkey_DebReleaseProxStateProcess+0x80>)
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	785a      	ldrb	r2, [r3, #1]
 8004456:	3a01      	subs	r2, #1
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <TSL_tkey_DebReleaseProxStateProcess+0x80>)
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	785b      	ldrb	r3, [r3, #1]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <TSL_tkey_DebReleaseProxStateProcess+0x7a>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <TSL_tkey_DebReleaseProxStateProcess+0x80>)
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2202      	movs	r2, #2
 8004470:	701a      	strb	r2, [r3, #0]
}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000d6c 	.word	0x20000d6c

0800447c <TSL_tkey_DebReleaseDetectStateProcess>:
  * @brief  Debounce Release processing (previous state = Detect)
  * @param  None
  * @retval None
  */
void TSL_tkey_DebReleaseDetectStateProcess(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	075b      	lsls	r3, r3, #29
 800448a:	0f9b      	lsrs	r3, r3, #30
 800448c:	b2db      	uxtb	r3, r3
 800448e:	001a      	movs	r2, r3
 8004490:	2302      	movs	r3, #2
 8004492:	4013      	ands	r3, r2
 8004494:	d005      	beq.n	80044a2 <TSL_tkey_DebReleaseDetectStateProcess+0x26>
  {
    THIS_STATEID = TSL_STATEID_DETECT; // Go back to the previous state
 8004496:	4b22      	ldr	r3, [pc, #136]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	220a      	movs	r2, #10
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e03b      	b.n	800451a <TSL_tkey_DebReleaseDetectStateProcess+0x9e>
  }
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 80044a2:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2208      	movs	r2, #8
 80044aa:	5e9b      	ldrsh	r3, [r3, r2]
 80044ac:	001a      	movs	r2, r3
 80044ae:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	78db      	ldrb	r3, [r3, #3]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	dd05      	ble.n	80044c6 <TSL_tkey_DebReleaseDetectStateProcess+0x4a>
    {
      TEST_DELTA_NEGATIVE;
      THIS_STATEID = TSL_STATEID_DETECT;
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	220a      	movs	r2, #10
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e029      	b.n	800451a <TSL_tkey_DebReleaseDetectStateProcess+0x9e>
    }
    else
    {
#if TSLPRM_USE_PROX > 0
      if (THIS_DELTA > THIS_PROXOUT_TH)
 80044c6:	4b16      	ldr	r3, [pc, #88]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2208      	movs	r2, #8
 80044ce:	5e9b      	ldrsh	r3, [r3, r2]
 80044d0:	001a      	movs	r2, r3
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	785b      	ldrb	r3, [r3, #1]
 80044da:	429a      	cmp	r2, r3
 80044dc:	dd05      	ble.n	80044ea <TSL_tkey_DebReleaseDetectStateProcess+0x6e>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 80044de:	4b10      	ldr	r3, [pc, #64]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2206      	movs	r2, #6
 80044e6:	701a      	strb	r2, [r3, #0]
        return;
 80044e8:	e017      	b.n	800451a <TSL_tkey_DebReleaseDetectStateProcess+0x9e>
      }
#endif
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 80044ea:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d006      	beq.n	8004504 <TSL_tkey_DebReleaseDetectStateProcess+0x88>
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	785a      	ldrb	r2, [r3, #1]
 80044fe:	3a01      	subs	r2, #1
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <TSL_tkey_DebReleaseDetectStateProcess+0x9e>
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <TSL_tkey_DebReleaseDetectStateProcess+0xa4>)
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2202      	movs	r2, #2
 8004518:	701a      	strb	r2, [r3, #0]
      }
      // else stay in Debounce Release
    }
  }
}
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	20000d6c 	.word	0x20000d6c

08004524 <TSL_tkey_DebReleaseTouchStateProcess>:
  * Same as Debounce Release Detect processing
  * @param  None
  * @retval None
  */
void TSL_tkey_DebReleaseTouchStateProcess(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8004528:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	075b      	lsls	r3, r3, #29
 8004532:	0f9b      	lsrs	r3, r3, #30
 8004534:	b2db      	uxtb	r3, r3
 8004536:	001a      	movs	r2, r3
 8004538:	2302      	movs	r3, #2
 800453a:	4013      	ands	r3, r2
 800453c:	d005      	beq.n	800454a <TSL_tkey_DebReleaseTouchStateProcess+0x26>
  {
    THIS_STATEID = TSL_STATEID_TOUCH; // Go back to the previous state
 800453e:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	220c      	movs	r2, #12
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e03b      	b.n	80045c2 <TSL_tkey_DebReleaseTouchStateProcess+0x9e>
  }
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 800454a:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2208      	movs	r2, #8
 8004552:	5e9b      	ldrsh	r3, [r3, r2]
 8004554:	001a      	movs	r2, r3
 8004556:	4b1c      	ldr	r3, [pc, #112]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	78db      	ldrb	r3, [r3, #3]
 800455e:	429a      	cmp	r2, r3
 8004560:	dd05      	ble.n	800456e <TSL_tkey_DebReleaseTouchStateProcess+0x4a>
    {
      TEST_DELTA_NEGATIVE;
      THIS_STATEID = TSL_STATEID_TOUCH;
 8004562:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	220c      	movs	r2, #12
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	e029      	b.n	80045c2 <TSL_tkey_DebReleaseTouchStateProcess+0x9e>
    }
    else
    {
#if TSLPRM_USE_PROX > 0
      if (THIS_DELTA > THIS_PROXOUT_TH)
 800456e:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2208      	movs	r2, #8
 8004576:	5e9b      	ldrsh	r3, [r3, r2]
 8004578:	001a      	movs	r2, r3
 800457a:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	429a      	cmp	r2, r3
 8004584:	dd05      	ble.n	8004592 <TSL_tkey_DebReleaseTouchStateProcess+0x6e>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8004586:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2206      	movs	r2, #6
 800458e:	701a      	strb	r2, [r3, #0]
        return;
 8004590:	e017      	b.n	80045c2 <TSL_tkey_DebReleaseTouchStateProcess+0x9e>
      }
#endif
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d006      	beq.n	80045ac <TSL_tkey_DebReleaseTouchStateProcess+0x88>
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	785a      	ldrb	r2, [r3, #1]
 80045a6:	3a01      	subs	r2, #1
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <TSL_tkey_DebReleaseTouchStateProcess+0x9e>
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <TSL_tkey_DebReleaseTouchStateProcess+0xa4>)
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2202      	movs	r2, #2
 80045c0:	701a      	strb	r2, [r3, #0]
      }
      // else stay in Debounce Release
    }
  }
}
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	20000d6c 	.word	0x20000d6c

080045cc <TSL_tkey_ReleaseStateProcess>:
  * @brief  Release state processing
  * @param  None
  * @retval None
  */
void TSL_tkey_ReleaseStateProcess(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 80045d0:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	075b      	lsls	r3, r3, #29
 80045da:	0f9b      	lsrs	r3, r3, #30
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	001a      	movs	r2, r3
 80045e0:	2302      	movs	r3, #2
 80045e2:	4013      	ands	r3, r2
 80045e4:	d019      	beq.n	800461a <TSL_tkey_ReleaseStateProcess+0x4e>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 80045e6:	4b46      	ldr	r3, [pc, #280]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4b44      	ldr	r3, [pc, #272]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	7a52      	ldrb	r2, [r2, #9]
 80045f4:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 80045f6:	4b42      	ldr	r3, [pc, #264]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d105      	bne.n	800460e <TSL_tkey_ReleaseStateProcess+0x42>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8004602:	4b3f      	ldr	r3, [pc, #252]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	220d      	movs	r2, #13
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e075      	b.n	80046fa <TSL_tkey_ReleaseStateProcess+0x12e>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_ERROR_RELEASE;
 800460e:	4b3c      	ldr	r3, [pc, #240]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	220f      	movs	r2, #15
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	e06f      	b.n	80046fa <TSL_tkey_ReleaseStateProcess+0x12e>
    }
  }
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>=, THIS_DETECTIN_TH)
 800461a:	4b39      	ldr	r3, [pc, #228]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2208      	movs	r2, #8
 8004622:	5e9b      	ldrsh	r3, [r3, r2]
 8004624:	001a      	movs	r2, r3
 8004626:	4b36      	ldr	r3, [pc, #216]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	789b      	ldrb	r3, [r3, #2]
 800462e:	429a      	cmp	r2, r3
 8004630:	db19      	blt.n	8004666 <TSL_tkey_ReleaseStateProcess+0x9a>
    {
      TEST_DELTA_NEGATIVE;
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 8004632:	4b33      	ldr	r3, [pc, #204]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	4b31      	ldr	r3, [pc, #196]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	79d2      	ldrb	r2, [r2, #7]
 8004640:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004642:	4b2f      	ldr	r3, [pc, #188]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <TSL_tkey_ReleaseStateProcess+0x8e>
      {
        THIS_STATEID = TSL_STATEID_DETECT;
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	220a      	movs	r2, #10
 8004656:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
      }
      return;
 8004658:	e04f      	b.n	80046fa <TSL_tkey_ReleaseStateProcess+0x12e>
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 800465a:	4b29      	ldr	r3, [pc, #164]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	220b      	movs	r2, #11
 8004662:	701a      	strb	r2, [r3, #0]
      return;
 8004664:	e049      	b.n	80046fa <TSL_tkey_ReleaseStateProcess+0x12e>
    }

#if TSLPRM_USE_PROX > 0
    if (THIS_DELTA >= THIS_PROXIN_TH)
 8004666:	4b26      	ldr	r3, [pc, #152]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2208      	movs	r2, #8
 800466e:	5e9b      	ldrsh	r3, [r3, r2]
 8004670:	001a      	movs	r2, r3
 8004672:	4b23      	ldr	r3, [pc, #140]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	db19      	blt.n	80046b2 <TSL_tkey_ReleaseStateProcess+0xe6>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	4b1e      	ldr	r3, [pc, #120]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	7992      	ldrb	r2, [r2, #6]
 800468c:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 800468e:	4b1c      	ldr	r3, [pc, #112]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <TSL_tkey_ReleaseStateProcess+0xda>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 800469a:	4b19      	ldr	r3, [pc, #100]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2206      	movs	r2, #6
 80046a2:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_PROX;
      }
      return;
 80046a4:	e029      	b.n	80046fa <TSL_tkey_ReleaseStateProcess+0x12e>
        THIS_STATEID = TSL_STATEID_DEB_PROX;
 80046a6:	4b16      	ldr	r3, [pc, #88]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2207      	movs	r2, #7
 80046ae:	701a      	strb	r2, [r3, #0]
      return;
 80046b0:	e023      	b.n	80046fa <TSL_tkey_ReleaseStateProcess+0x12e>
    }
#endif

    // Check delta for re-calibration
    // Warning: the threshold value is inverted in the macro
    if TEST_DELTA_N(<=, THIS_CALIB_TH)
 80046b2:	4b13      	ldr	r3, [pc, #76]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2208      	movs	r2, #8
 80046ba:	5e9b      	ldrsh	r3, [r3, r2]
 80046bc:	001a      	movs	r2, r3
 80046be:	4b10      	ldr	r3, [pc, #64]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	791b      	ldrb	r3, [r3, #4]
 80046c6:	425b      	negs	r3, r3
 80046c8:	429a      	cmp	r2, r3
 80046ca:	dc16      	bgt.n	80046fa <TSL_tkey_ReleaseStateProcess+0x12e>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_CALIB;
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	7952      	ldrb	r2, [r2, #5]
 80046da:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 80046dc:	4b08      	ldr	r3, [pc, #32]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <TSL_tkey_ReleaseStateProcess+0x124>
      {
        TSL_tkey_SetStateCalibration(0);
 80046e8:	2000      	movs	r0, #0
 80046ea:	f7ff fe1b 	bl	8004324 <TSL_tkey_SetStateCalibration>
 80046ee:	e004      	b.n	80046fa <TSL_tkey_ReleaseStateProcess+0x12e>
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_CALIB;
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <TSL_tkey_ReleaseStateProcess+0x134>)
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	20000d6c 	.word	0x20000d6c

08004704 <TSL_tkey_DebCalibrationStateProcess>:
  * @brief  Debounce Calibration processing (previous state = Release)
  * @param  None
  * @retval None
  */
void TSL_tkey_DebCalibrationStateProcess(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8004708:	4b1e      	ldr	r3, [pc, #120]	; (8004784 <TSL_tkey_DebCalibrationStateProcess+0x80>)
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	075b      	lsls	r3, r3, #29
 8004712:	0f9b      	lsrs	r3, r3, #30
 8004714:	b2db      	uxtb	r3, r3
 8004716:	001a      	movs	r2, r3
 8004718:	2302      	movs	r3, #2
 800471a:	4013      	ands	r3, r2
 800471c:	d005      	beq.n	800472a <TSL_tkey_DebCalibrationStateProcess+0x26>
  {
    THIS_STATEID = TSL_STATEID_RELEASE; // Go back to the previous state
 800471e:	4b19      	ldr	r3, [pc, #100]	; (8004784 <TSL_tkey_DebCalibrationStateProcess+0x80>)
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2202      	movs	r2, #2
 8004726:	701a      	strb	r2, [r3, #0]
    else // Go back to previous state
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
    }
  }
}
 8004728:	e028      	b.n	800477c <TSL_tkey_DebCalibrationStateProcess+0x78>
    if TEST_DELTA_N(<=, THIS_CALIB_TH)
 800472a:	4b16      	ldr	r3, [pc, #88]	; (8004784 <TSL_tkey_DebCalibrationStateProcess+0x80>)
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2208      	movs	r2, #8
 8004732:	5e9b      	ldrsh	r3, [r3, r2]
 8004734:	001a      	movs	r2, r3
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <TSL_tkey_DebCalibrationStateProcess+0x80>)
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	791b      	ldrb	r3, [r3, #4]
 800473e:	425b      	negs	r3, r3
 8004740:	429a      	cmp	r2, r3
 8004742:	dc16      	bgt.n	8004772 <TSL_tkey_DebCalibrationStateProcess+0x6e>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <TSL_tkey_DebCalibrationStateProcess+0x80>)
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <TSL_tkey_DebCalibrationStateProcess+0x5a>
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <TSL_tkey_DebCalibrationStateProcess+0x80>)
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	785a      	ldrb	r2, [r3, #1]
 8004758:	3a01      	subs	r2, #1
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <TSL_tkey_DebCalibrationStateProcess+0x80>)
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	785b      	ldrb	r3, [r3, #1]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d108      	bne.n	800477c <TSL_tkey_DebCalibrationStateProcess+0x78>
        TSL_tkey_SetStateCalibration(0);
 800476a:	2000      	movs	r0, #0
 800476c:	f7ff fdda 	bl	8004324 <TSL_tkey_SetStateCalibration>
}
 8004770:	e004      	b.n	800477c <TSL_tkey_DebCalibrationStateProcess+0x78>
      THIS_STATEID = TSL_STATEID_RELEASE;
 8004772:	4b04      	ldr	r3, [pc, #16]	; (8004784 <TSL_tkey_DebCalibrationStateProcess+0x80>)
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2202      	movs	r2, #2
 800477a:	701a      	strb	r2, [r3, #0]
}
 800477c:	46c0      	nop			; (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	20000d6c 	.word	0x20000d6c

08004788 <TSL_tkey_CalibrationStateProcess>:
  * @brief  Calibration state processing
  * @param  None
  * @retval None
  */
void TSL_tkey_CalibrationStateProcess(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
    THIS_COUNTER_DEB--;
    return; // Skip the sample
  }
#endif

  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 800478e:	4b4e      	ldr	r3, [pc, #312]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	075b      	lsls	r3, r3, #29
 8004798:	0f9b      	lsrs	r3, r3, #30
 800479a:	b2db      	uxtb	r3, r3
 800479c:	001a      	movs	r2, r3
 800479e:	2302      	movs	r3, #2
 80047a0:	4013      	ands	r3, r2
 80047a2:	d019      	beq.n	80047d8 <TSL_tkey_CalibrationStateProcess+0x50>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 80047a4:	4b48      	ldr	r3, [pc, #288]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	4b47      	ldr	r3, [pc, #284]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	7a52      	ldrb	r2, [r2, #9]
 80047b2:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 80047b4:	4b44      	ldr	r3, [pc, #272]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <TSL_tkey_CalibrationStateProcess+0x44>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 80047c0:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	220d      	movs	r2, #13
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e07a      	b.n	80048c2 <TSL_tkey_CalibrationStateProcess+0x13a>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_ERROR_CALIB;
 80047cc:	4b3e      	ldr	r3, [pc, #248]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	220e      	movs	r2, #14
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	e074      	b.n	80048c2 <TSL_tkey_CalibrationStateProcess+0x13a>
  else // Acquisition is OK or has NOISE
  {

    // Get the new measure or Calculate it
#if TSLPRM_USE_MEAS > 0
    new_meas = THIS_MEAS;
 80047d8:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	1dbb      	adds	r3, r7, #6
 80047e0:	8952      	ldrh	r2, [r2, #10]
 80047e2:	801a      	strh	r2, [r3, #0]
#else // Calculate it
    new_meas = TSL_acq_ComputeMeas(THIS_REF, THIS_DELTA);
#endif

    // Verify the first Reference value
    if (THIS_COUNTER_DEB == (TSL_tCounter_T)TSL_Params.NbCalibSamples)
 80047e4:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	785a      	ldrb	r2, [r3, #1]
 80047ec:	4b37      	ldr	r3, [pc, #220]	; (80048cc <TSL_tkey_CalibrationStateProcess+0x144>)
 80047ee:	889b      	ldrh	r3, [r3, #4]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d117      	bne.n	8004826 <TSL_tkey_CalibrationStateProcess+0x9e>
    {
      if (TSL_acq_TestFirstReferenceIsValid(THIS_CHANNEL_DATA, new_meas))
 80047f6:	4b34      	ldr	r3, [pc, #208]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	1dbb      	adds	r3, r7, #6
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	0019      	movs	r1, r3
 8004802:	0010      	movs	r0, r2
 8004804:	f7ff fc5a 	bl	80040bc <TSL_acq_TestFirstReferenceIsValid>
 8004808:	1e03      	subs	r3, r0, #0
 800480a:	d006      	beq.n	800481a <TSL_tkey_CalibrationStateProcess+0x92>
      {
        THIS_REF = new_meas;
 800480c:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	1dba      	adds	r2, r7, #6
 8004814:	8812      	ldrh	r2, [r2, #0]
 8004816:	809a      	strh	r2, [r3, #4]
 8004818:	e024      	b.n	8004864 <TSL_tkey_CalibrationStateProcess+0xdc>
      }
      else
      {
        THIS_REF = 0;
 800481a:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2200      	movs	r2, #0
 8004822:	809a      	strh	r2, [r3, #4]
        return;
 8004824:	e04d      	b.n	80048c2 <TSL_tkey_CalibrationStateProcess+0x13a>
      }
    }
    else
    {
      // Add the measure in temporary Reference
      THIS_REF += new_meas;
 8004826:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	8899      	ldrh	r1, [r3, #4]
 800482e:	4b26      	ldr	r3, [pc, #152]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	1dba      	adds	r2, r7, #6
 8004836:	8812      	ldrh	r2, [r2, #0]
 8004838:	188a      	adds	r2, r1, r2
 800483a:	b292      	uxth	r2, r2
 800483c:	809a      	strh	r2, [r3, #4]

      // Check reference overflow
      if (THIS_REF < new_meas)
 800483e:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	889b      	ldrh	r3, [r3, #4]
 8004846:	1dba      	adds	r2, r7, #6
 8004848:	8812      	ldrh	r2, [r2, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d90a      	bls.n	8004864 <TSL_tkey_CalibrationStateProcess+0xdc>
      {
        THIS_REF = 0; // Suppress the bad reference
 800484e:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2200      	movs	r2, #0
 8004856:	809a      	strh	r2, [r3, #4]
        THIS_STATEID = TSL_STATEID_ERROR;
 8004858:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	220d      	movs	r2, #13
 8004860:	701a      	strb	r2, [r3, #0]
        return;
 8004862:	e02e      	b.n	80048c2 <TSL_tkey_CalibrationStateProcess+0x13a>
      }
    }

    // Check that we have all the needed measurements
    if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8004864:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	785b      	ldrb	r3, [r3, #1]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d006      	beq.n	800487e <TSL_tkey_CalibrationStateProcess+0xf6>
 8004870:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	785a      	ldrb	r2, [r3, #1]
 8004878:	3a01      	subs	r2, #1
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	785b      	ldrb	r3, [r3, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11b      	bne.n	80048c2 <TSL_tkey_CalibrationStateProcess+0x13a>
    {
      // Divide temporary Reference by the number of samples
      THIS_REF >>= CalibDiv;
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	889b      	ldrh	r3, [r3, #4]
 8004892:	001a      	movs	r2, r3
 8004894:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <TSL_tkey_CalibrationStateProcess+0x148>)
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	411a      	asrs	r2, r3
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	b292      	uxth	r2, r2
 80048a2:	809a      	strh	r2, [r3, #4]
      THIS_REFREST = 0;
 80048a4:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	719a      	strb	r2, [r3, #6]
      THIS_DELTA = 0;
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2200      	movs	r2, #0
 80048b6:	811a      	strh	r2, [r3, #8]
      THIS_STATEID = TSL_STATEID_RELEASE;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <TSL_tkey_CalibrationStateProcess+0x140>)
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2202      	movs	r2, #2
 80048c0:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b002      	add	sp, #8
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000d6c 	.word	0x20000d6c
 80048cc:	20000014 	.word	0x20000014
 80048d0:	20000b5a 	.word	0x20000b5a

080048d4 <TSL_tkey_DebProxStateProcess>:
  * @brief  Debounce Proximity processing (previous state = Release)
  * @param  None
  * @retval None
  */
void TSL_tkey_DebProxStateProcess(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 80048d8:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	075b      	lsls	r3, r3, #29
 80048e2:	0f9b      	lsrs	r3, r3, #30
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	001a      	movs	r2, r3
 80048e8:	2302      	movs	r3, #2
 80048ea:	4013      	ands	r3, r2
 80048ec:	d005      	beq.n	80048fa <TSL_tkey_DebProxStateProcess+0x26>
  {
    THIS_STATEID = TSL_STATEID_RELEASE;
 80048ee:	4b2c      	ldr	r3, [pc, #176]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2202      	movs	r2, #2
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e04f      	b.n	800499a <TSL_tkey_DebProxStateProcess+0xc6>
  }
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>=, THIS_DETECTIN_TH)
 80048fa:	4b29      	ldr	r3, [pc, #164]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2208      	movs	r2, #8
 8004902:	5e9b      	ldrsh	r3, [r3, r2]
 8004904:	001a      	movs	r2, r3
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	789b      	ldrb	r3, [r3, #2]
 800490e:	429a      	cmp	r2, r3
 8004910:	db19      	blt.n	8004946 <TSL_tkey_DebProxStateProcess+0x72>
    {
      TEST_DELTA_NEGATIVE;
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 8004912:	4b23      	ldr	r3, [pc, #140]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	4b21      	ldr	r3, [pc, #132]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	79d2      	ldrb	r2, [r2, #7]
 8004920:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004922:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <TSL_tkey_DebProxStateProcess+0x66>
      {
        THIS_STATEID = TSL_STATEID_DETECT;
 800492e:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	220a      	movs	r2, #10
 8004936:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
      }
      return;
 8004938:	e02f      	b.n	800499a <TSL_tkey_DebProxStateProcess+0xc6>
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 800493a:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	220b      	movs	r2, #11
 8004942:	701a      	strb	r2, [r3, #0]
      return;
 8004944:	e029      	b.n	800499a <TSL_tkey_DebProxStateProcess+0xc6>
    }

    if (THIS_DELTA >= THIS_PROXIN_TH)
 8004946:	4b16      	ldr	r3, [pc, #88]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2208      	movs	r2, #8
 800494e:	5e9b      	ldrsh	r3, [r3, r2]
 8004950:	001a      	movs	r2, r3
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	db18      	blt.n	8004990 <TSL_tkey_DebProxStateProcess+0xbc>
    {
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d006      	beq.n	8004978 <TSL_tkey_DebProxStateProcess+0xa4>
 800496a:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	785a      	ldrb	r2, [r3, #1]
 8004972:	3a01      	subs	r2, #1
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	785b      	ldrb	r3, [r3, #1]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <TSL_tkey_DebProxStateProcess+0xc6>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2206      	movs	r2, #6
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e004      	b.n	800499a <TSL_tkey_DebProxStateProcess+0xc6>
      }
      // else stay in Debounce Proximity
    }
    else
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
 8004990:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <TSL_tkey_DebProxStateProcess+0xcc>)
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2202      	movs	r2, #2
 8004998:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	20000d6c 	.word	0x20000d6c

080049a4 <TSL_tkey_DebProxDetectStateProcess>:
  * @brief  Debounce Proximity processing (previous state = Detect)
  * @param  None
  * @retval None
  */
void TSL_tkey_DebProxDetectStateProcess(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 80049a8:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	075b      	lsls	r3, r3, #29
 80049b2:	0f9b      	lsrs	r3, r3, #30
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	001a      	movs	r2, r3
 80049b8:	2302      	movs	r3, #2
 80049ba:	4013      	ands	r3, r2
 80049bc:	d005      	beq.n	80049ca <TSL_tkey_DebProxDetectStateProcess+0x26>
  {
    THIS_STATEID = TSL_STATEID_DETECT;
 80049be:	4b2c      	ldr	r3, [pc, #176]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	220a      	movs	r2, #10
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e04f      	b.n	8004a6a <TSL_tkey_DebProxDetectStateProcess+0xc6>
  }
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 80049ca:	4b29      	ldr	r3, [pc, #164]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2208      	movs	r2, #8
 80049d2:	5e9b      	ldrsh	r3, [r3, r2]
 80049d4:	001a      	movs	r2, r3
 80049d6:	4b26      	ldr	r3, [pc, #152]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	78db      	ldrb	r3, [r3, #3]
 80049de:	429a      	cmp	r2, r3
 80049e0:	dd05      	ble.n	80049ee <TSL_tkey_DebProxDetectStateProcess+0x4a>
    {
      TEST_DELTA_NEGATIVE;
      THIS_STATEID = TSL_STATEID_DETECT;
 80049e2:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	220a      	movs	r2, #10
 80049ea:	701a      	strb	r2, [r3, #0]
      return;
 80049ec:	e03d      	b.n	8004a6a <TSL_tkey_DebProxDetectStateProcess+0xc6>
    }

    if (THIS_DELTA > THIS_PROXOUT_TH)
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2208      	movs	r2, #8
 80049f6:	5e9b      	ldrsh	r3, [r3, r2]
 80049f8:	001a      	movs	r2, r3
 80049fa:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	dd18      	ble.n	8004a38 <TSL_tkey_DebProxDetectStateProcess+0x94>
    {
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8004a06:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	785b      	ldrb	r3, [r3, #1]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <TSL_tkey_DebProxDetectStateProcess+0x7c>
 8004a12:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	785a      	ldrb	r2, [r3, #1]
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004a20:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	785b      	ldrb	r3, [r3, #1]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11e      	bne.n	8004a6a <TSL_tkey_DebProxDetectStateProcess+0xc6>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2206      	movs	r2, #6
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e018      	b.n	8004a6a <TSL_tkey_DebProxDetectStateProcess+0xc6>
      }
      // else stay in Debounce Proximity
    }
    else
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8004a38:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	7a12      	ldrb	r2, [r2, #8]
 8004a46:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <TSL_tkey_DebProxDetectStateProcess+0xbc>
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e004      	b.n	8004a6a <TSL_tkey_DebProxDetectStateProcess+0xc6>
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <TSL_tkey_DebProxDetectStateProcess+0xcc>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2204      	movs	r2, #4
 8004a68:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	20000d6c 	.word	0x20000d6c

08004a74 <TSL_tkey_DebProxTouchStateProcess>:
  * @brief  Debounce Proximity processing (previous state = Touch)
  * @param  None
  * @retval None
  */
void TSL_tkey_DebProxTouchStateProcess(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8004a78:	4b31      	ldr	r3, [pc, #196]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	075b      	lsls	r3, r3, #29
 8004a82:	0f9b      	lsrs	r3, r3, #30
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	001a      	movs	r2, r3
 8004a88:	2302      	movs	r3, #2
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d005      	beq.n	8004a9a <TSL_tkey_DebProxTouchStateProcess+0x26>
  {
    THIS_STATEID = TSL_STATEID_TOUCH;
 8004a8e:	4b2c      	ldr	r3, [pc, #176]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	220c      	movs	r2, #12
 8004a96:	701a      	strb	r2, [r3, #0]
 8004a98:	e04f      	b.n	8004b3a <TSL_tkey_DebProxTouchStateProcess+0xc6>
  }
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 8004a9a:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	5e9b      	ldrsh	r3, [r3, r2]
 8004aa4:	001a      	movs	r2, r3
 8004aa6:	4b26      	ldr	r3, [pc, #152]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	78db      	ldrb	r3, [r3, #3]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	dd05      	ble.n	8004abe <TSL_tkey_DebProxTouchStateProcess+0x4a>
    {
      TEST_DELTA_NEGATIVE;
      THIS_STATEID = TSL_STATEID_TOUCH;
 8004ab2:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	220c      	movs	r2, #12
 8004aba:	701a      	strb	r2, [r3, #0]
      return;
 8004abc:	e03d      	b.n	8004b3a <TSL_tkey_DebProxTouchStateProcess+0xc6>
    }

    if (THIS_DELTA > THIS_PROXOUT_TH)
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	5e9b      	ldrsh	r3, [r3, r2]
 8004ac8:	001a      	movs	r2, r3
 8004aca:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	785b      	ldrb	r3, [r3, #1]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	dd18      	ble.n	8004b08 <TSL_tkey_DebProxTouchStateProcess+0x94>
    {
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8004ad6:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	785b      	ldrb	r3, [r3, #1]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d006      	beq.n	8004af0 <TSL_tkey_DebProxTouchStateProcess+0x7c>
 8004ae2:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	785a      	ldrb	r2, [r3, #1]
 8004aea:	3a01      	subs	r2, #1
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004af0:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11e      	bne.n	8004b3a <TSL_tkey_DebProxTouchStateProcess+0xc6>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2206      	movs	r2, #6
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e018      	b.n	8004b3a <TSL_tkey_DebProxTouchStateProcess+0xc6>
      }
      // else stay in Debounce Proximity
    }
    else
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	7a12      	ldrb	r2, [r2, #8]
 8004b16:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <TSL_tkey_DebProxTouchStateProcess+0xbc>
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e004      	b.n	8004b3a <TSL_tkey_DebProxTouchStateProcess+0xc6>
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <TSL_tkey_DebProxTouchStateProcess+0xcc>)
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2205      	movs	r2, #5
 8004b38:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	20000d6c 	.word	0x20000d6c

08004b44 <TSL_tkey_ProxStateProcess>:
  * @brief  Proximity state processing
  * @param  None
  * @retval None
  */
void TSL_tkey_ProxStateProcess(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
#if TSLPRM_DTO > 0
  TSL_tTick_sec_T tick_detected;
#endif

  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8004b48:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	075b      	lsls	r3, r3, #29
 8004b52:	0f9b      	lsrs	r3, r3, #30
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	001a      	movs	r2, r3
 8004b58:	2302      	movs	r3, #2
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d019      	beq.n	8004b92 <TSL_tkey_ProxStateProcess+0x4e>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8004b5e:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	7a52      	ldrb	r2, [r2, #9]
 8004b6c:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 8004b6e:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	785b      	ldrb	r3, [r3, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <TSL_tkey_ProxStateProcess+0x42>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8004b7a:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	220d      	movs	r2, #13
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	e051      	b.n	8004c2a <TSL_tkey_ProxStateProcess+0xe6>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_ERROR_PROX;
 8004b86:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	e04b      	b.n	8004c2a <TSL_tkey_ProxStateProcess+0xe6>
    }
  }
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>=, THIS_DETECTIN_TH)
 8004b92:	4b27      	ldr	r3, [pc, #156]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2208      	movs	r2, #8
 8004b9a:	5e9b      	ldrsh	r3, [r3, r2]
 8004b9c:	001a      	movs	r2, r3
 8004b9e:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	789b      	ldrb	r3, [r3, #2]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	db19      	blt.n	8004bde <TSL_tkey_ProxStateProcess+0x9a>
    {
      TEST_DELTA_NEGATIVE;
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 8004baa:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	79d2      	ldrb	r2, [r2, #7]
 8004bb8:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004bba:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d105      	bne.n	8004bd2 <TSL_tkey_ProxStateProcess+0x8e>
      {
        THIS_STATEID = TSL_STATEID_DETECT;
 8004bc6:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	220a      	movs	r2, #10
 8004bce:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
      }
      return;
 8004bd0:	e02b      	b.n	8004c2a <TSL_tkey_ProxStateProcess+0xe6>
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 8004bd2:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	220b      	movs	r2, #11
 8004bda:	701a      	strb	r2, [r3, #0]
      return;
 8004bdc:	e025      	b.n	8004c2a <TSL_tkey_ProxStateProcess+0xe6>
    }

    if (THIS_DELTA <= THIS_PROXOUT_TH)
 8004bde:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2208      	movs	r2, #8
 8004be6:	5e9b      	ldrsh	r3, [r3, r2]
 8004be8:	001a      	movs	r2, r3
 8004bea:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	dc19      	bgt.n	8004c2a <TSL_tkey_ProxStateProcess+0xe6>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8004bf6:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	7a12      	ldrb	r2, [r2, #8]
 8004c04:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d105      	bne.n	8004c1e <TSL_tkey_ProxStateProcess+0xda>
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_PROX;
      }
      return;
 8004c1c:	e004      	b.n	8004c28 <TSL_tkey_ProxStateProcess+0xe4>
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_PROX;
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <TSL_tkey_ProxStateProcess+0xec>)
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2203      	movs	r2, #3
 8004c26:	701a      	strb	r2, [r3, #0]
      return;
 8004c28:	46c0      	nop			; (mov r8, r8)
      }
    }
#endif

  }
}
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	20000d6c 	.word	0x20000d6c

08004c34 <TSL_tkey_DebDetectStateProcess>:
  * @brief  Debounce Detect processing (previous state = Release or Proximity)
  * @param  None
  * @retval None
  */
void TSL_tkey_DebDetectStateProcess(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8004c38:	4b31      	ldr	r3, [pc, #196]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	075b      	lsls	r3, r3, #29
 8004c42:	0f9b      	lsrs	r3, r3, #30
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	001a      	movs	r2, r3
 8004c48:	2302      	movs	r3, #2
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d005      	beq.n	8004c5a <TSL_tkey_DebDetectStateProcess+0x26>
  {
    THIS_STATEID = TSL_STATEID_RELEASE;
 8004c4e:	4b2c      	ldr	r3, [pc, #176]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2202      	movs	r2, #2
 8004c56:	701a      	strb	r2, [r3, #0]
#else
      THIS_STATEID = TSL_STATEID_RELEASE;
#endif
    }
  }
}
 8004c58:	e04f      	b.n	8004cfa <TSL_tkey_DebDetectStateProcess+0xc6>
    if TEST_DELTA(>=, THIS_DETECTIN_TH)
 8004c5a:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2208      	movs	r2, #8
 8004c62:	5e9b      	ldrsh	r3, [r3, r2]
 8004c64:	001a      	movs	r2, r3
 8004c66:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	789b      	ldrb	r3, [r3, #2]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	db18      	blt.n	8004ca4 <TSL_tkey_DebDetectStateProcess+0x70>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8004c72:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d006      	beq.n	8004c8c <TSL_tkey_DebDetectStateProcess+0x58>
 8004c7e:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	785a      	ldrb	r2, [r3, #1]
 8004c86:	3a01      	subs	r2, #1
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004c8c:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	785b      	ldrb	r3, [r3, #1]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d130      	bne.n	8004cfa <TSL_tkey_DebDetectStateProcess+0xc6>
        THIS_STATEID = TSL_STATEID_DETECT;
 8004c98:	4b19      	ldr	r3, [pc, #100]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	220a      	movs	r2, #10
 8004ca0:	701a      	strb	r2, [r3, #0]
}
 8004ca2:	e02a      	b.n	8004cfa <TSL_tkey_DebDetectStateProcess+0xc6>
      if (THIS_DELTA >= THIS_PROXIN_TH)
 8004ca4:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2208      	movs	r2, #8
 8004cac:	5e9b      	ldrsh	r3, [r3, r2]
 8004cae:	001a      	movs	r2, r3
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	db19      	blt.n	8004cf0 <TSL_tkey_DebDetectStateProcess+0xbc>
        THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8004cbc:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	7992      	ldrb	r2, [r2, #6]
 8004cca:	705a      	strb	r2, [r3, #1]
        if (THIS_COUNTER_DEB == 0)
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	785b      	ldrb	r3, [r3, #1]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <TSL_tkey_DebDetectStateProcess+0xb0>
          THIS_STATEID = TSL_STATEID_PROX;
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2206      	movs	r2, #6
 8004ce0:	701a      	strb	r2, [r3, #0]
}
 8004ce2:	e00a      	b.n	8004cfa <TSL_tkey_DebDetectStateProcess+0xc6>
          THIS_STATEID = TSL_STATEID_DEB_PROX;
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2207      	movs	r2, #7
 8004cec:	701a      	strb	r2, [r3, #0]
}
 8004cee:	e004      	b.n	8004cfa <TSL_tkey_DebDetectStateProcess+0xc6>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <TSL_tkey_DebDetectStateProcess+0xcc>)
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	701a      	strb	r2, [r3, #0]
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000d6c 	.word	0x20000d6c

08004d04 <TSL_tkey_DetectStateProcess>:
  * @brief  Detect state processing
  * @param  None
  * @retval None
  */
void TSL_tkey_DetectStateProcess(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
#if TSLPRM_DTO > 0
  TSL_tTick_sec_T tick_detected;
#endif

  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8004d08:	4b39      	ldr	r3, [pc, #228]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	075b      	lsls	r3, r3, #29
 8004d12:	0f9b      	lsrs	r3, r3, #30
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	001a      	movs	r2, r3
 8004d18:	2302      	movs	r3, #2
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d019      	beq.n	8004d52 <TSL_tkey_DetectStateProcess+0x4e>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8004d1e:	4b34      	ldr	r3, [pc, #208]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	7a52      	ldrb	r2, [r2, #9]
 8004d2c:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 8004d2e:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <TSL_tkey_DetectStateProcess+0x42>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8004d3a:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	220d      	movs	r2, #13
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	e052      	b.n	8004dec <TSL_tkey_DetectStateProcess+0xe8>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_ERROR_DETECT;
 8004d46:	4b2a      	ldr	r3, [pc, #168]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2211      	movs	r2, #17
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	e04c      	b.n	8004dec <TSL_tkey_DetectStateProcess+0xe8>
    }
  }
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 8004d52:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2208      	movs	r2, #8
 8004d5a:	5e9b      	ldrsh	r3, [r3, r2]
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	78db      	ldrb	r3, [r3, #3]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	dc3f      	bgt.n	8004dea <TSL_tkey_DetectStateProcess+0xe6>
#endif
      return; // Normal operation, stay in Detect state
    }

#if TSLPRM_USE_PROX > 0
    if (THIS_DELTA > THIS_PROXOUT_TH)
 8004d6a:	4b21      	ldr	r3, [pc, #132]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2208      	movs	r2, #8
 8004d72:	5e9b      	ldrsh	r3, [r3, r2]
 8004d74:	001a      	movs	r2, r3
 8004d76:	4b1e      	ldr	r3, [pc, #120]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	dd19      	ble.n	8004db6 <TSL_tkey_DetectStateProcess+0xb2>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8004d82:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	7992      	ldrb	r2, [r2, #6]
 8004d90:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004d92:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d105      	bne.n	8004daa <TSL_tkey_DetectStateProcess+0xa6>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8004d9e:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2206      	movs	r2, #6
 8004da6:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_PROX_DETECT;
      }
      return;
 8004da8:	e020      	b.n	8004dec <TSL_tkey_DetectStateProcess+0xe8>
        THIS_STATEID = TSL_STATEID_DEB_PROX_DETECT;
 8004daa:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2208      	movs	r2, #8
 8004db2:	701a      	strb	r2, [r3, #0]
      return;
 8004db4:	e01a      	b.n	8004dec <TSL_tkey_DetectStateProcess+0xe8>
    }
#endif

    THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8004db6:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	7a12      	ldrb	r2, [r2, #8]
 8004dc4:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d105      	bne.n	8004dde <TSL_tkey_DetectStateProcess+0xda>
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e006      	b.n	8004dec <TSL_tkey_DetectStateProcess+0xe8>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 8004dde:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <TSL_tkey_DetectStateProcess+0xec>)
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2204      	movs	r2, #4
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	e000      	b.n	8004dec <TSL_tkey_DetectStateProcess+0xe8>
      return; // Normal operation, stay in Detect state
 8004dea:	46c0      	nop			; (mov r8, r8)
    }

  }
}
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000d6c 	.word	0x20000d6c

08004df4 <TSL_tkey_TouchStateProcess>:
  * Same as Detect state
  * @param  None
  * @retval None
  */
void TSL_tkey_TouchStateProcess(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
#if TSLPRM_DTO > 0
  TSL_tTick_sec_T tick_detected;
#endif

  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8004df8:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	075b      	lsls	r3, r3, #29
 8004e02:	0f9b      	lsrs	r3, r3, #30
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	001a      	movs	r2, r3
 8004e08:	2302      	movs	r3, #2
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d019      	beq.n	8004e42 <TSL_tkey_TouchStateProcess+0x4e>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8004e0e:	4b34      	ldr	r3, [pc, #208]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	4b32      	ldr	r3, [pc, #200]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	7a52      	ldrb	r2, [r2, #9]
 8004e1c:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	785b      	ldrb	r3, [r3, #1]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <TSL_tkey_TouchStateProcess+0x42>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	220d      	movs	r2, #13
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e052      	b.n	8004edc <TSL_tkey_TouchStateProcess+0xe8>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_ERROR_TOUCH;
 8004e36:	4b2a      	ldr	r3, [pc, #168]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2212      	movs	r2, #18
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e04c      	b.n	8004edc <TSL_tkey_TouchStateProcess+0xe8>
    }
  }
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 8004e42:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	5e9b      	ldrsh	r3, [r3, r2]
 8004e4c:	001a      	movs	r2, r3
 8004e4e:	4b24      	ldr	r3, [pc, #144]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	78db      	ldrb	r3, [r3, #3]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	dc3f      	bgt.n	8004eda <TSL_tkey_TouchStateProcess+0xe6>
#endif
      return; // Normal operation, stay in Touch state
    }

#if TSLPRM_USE_PROX > 0
    if (THIS_DELTA > THIS_PROXOUT_TH)
 8004e5a:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2208      	movs	r2, #8
 8004e62:	5e9b      	ldrsh	r3, [r3, r2]
 8004e64:	001a      	movs	r2, r3
 8004e66:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	dd19      	ble.n	8004ea6 <TSL_tkey_TouchStateProcess+0xb2>
    {
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8004e72:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	4b19      	ldr	r3, [pc, #100]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	7992      	ldrb	r2, [r2, #6]
 8004e80:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8004e82:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d105      	bne.n	8004e9a <TSL_tkey_TouchStateProcess+0xa6>
      {
        THIS_STATEID = TSL_STATEID_PROX;
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2206      	movs	r2, #6
 8004e96:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_PROX_TOUCH;
      }
      return;
 8004e98:	e020      	b.n	8004edc <TSL_tkey_TouchStateProcess+0xe8>
        THIS_STATEID = TSL_STATEID_DEB_PROX_TOUCH;
 8004e9a:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2209      	movs	r2, #9
 8004ea2:	701a      	strb	r2, [r3, #0]
      return;
 8004ea4:	e01a      	b.n	8004edc <TSL_tkey_TouchStateProcess+0xe8>
    }
#endif

    THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	7a12      	ldrb	r2, [r2, #8]
 8004eb4:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <TSL_tkey_TouchStateProcess+0xda>
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
 8004ec2:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	e006      	b.n	8004edc <TSL_tkey_TouchStateProcess+0xe8>
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 8004ece:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <TSL_tkey_TouchStateProcess+0xec>)
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2205      	movs	r2, #5
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	e000      	b.n	8004edc <TSL_tkey_TouchStateProcess+0xe8>
      return; // Normal operation, stay in Touch state
 8004eda:	46c0      	nop			; (mov r8, r8)
    }

  }
}
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20000d6c 	.word	0x20000d6c

08004ee4 <TSL_tkey_DebErrorStateProcess>:
  * @brief  Debounce error state processing
  * @param  None
  * @retval None
  */
void TSL_tkey_DebErrorStateProcess(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
  volatile TSL_StateMask_enum_T mask;

  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8004eea:	4b30      	ldr	r3, [pc, #192]	; (8004fac <TSL_tkey_DebErrorStateProcess+0xc8>)
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	075b      	lsls	r3, r3, #29
 8004ef4:	0f9b      	lsrs	r3, r3, #30
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	001a      	movs	r2, r3
 8004efa:	2302      	movs	r3, #2
 8004efc:	4013      	ands	r3, r2
 8004efe:	d018      	beq.n	8004f32 <TSL_tkey_DebErrorStateProcess+0x4e>
  {
    if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8004f00:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <TSL_tkey_DebErrorStateProcess+0xc8>)
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d006      	beq.n	8004f1a <TSL_tkey_DebErrorStateProcess+0x36>
 8004f0c:	4b27      	ldr	r3, [pc, #156]	; (8004fac <TSL_tkey_DebErrorStateProcess+0xc8>)
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	785a      	ldrb	r2, [r3, #1]
 8004f14:	3a01      	subs	r2, #1
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <TSL_tkey_DebErrorStateProcess+0xc8>)
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d13d      	bne.n	8004fa2 <TSL_tkey_DebErrorStateProcess+0xbe>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8004f26:	4b21      	ldr	r3, [pc, #132]	; (8004fac <TSL_tkey_DebErrorStateProcess+0xc8>)
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	220d      	movs	r2, #13
 8004f2e:	701a      	strb	r2, [r3, #0]
      default:
        TSL_tkey_SetStateCalibration(0);
        break;
    }
  }
}
 8004f30:	e037      	b.n	8004fa2 <TSL_tkey_DebErrorStateProcess+0xbe>
    mask = TSL_tkey_GetStateMask();
 8004f32:	f7ff fa41 	bl	80043b8 <TSL_tkey_GetStateMask>
 8004f36:	0003      	movs	r3, r0
 8004f38:	001a      	movs	r2, r3
 8004f3a:	1dfb      	adds	r3, r7, #7
 8004f3c:	701a      	strb	r2, [r3, #0]
    mask &= (TSL_StateMask_enum_T)(~(TSL_STATE_DEBOUNCE_BIT_MASK | TSL_STATE_ERROR_BIT_MASK));
 8004f3e:	1dfb      	adds	r3, r7, #7
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	225f      	movs	r2, #95	; 0x5f
 8004f46:	4013      	ands	r3, r2
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	1dfb      	adds	r3, r7, #7
 8004f4c:	701a      	strb	r2, [r3, #0]
    switch (mask)
 8004f4e:	1dfb      	adds	r3, r7, #7
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d01a      	beq.n	8004f8e <TSL_tkey_DebErrorStateProcess+0xaa>
 8004f58:	dc1f      	bgt.n	8004f9a <TSL_tkey_DebErrorStateProcess+0xb6>
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d011      	beq.n	8004f82 <TSL_tkey_DebErrorStateProcess+0x9e>
 8004f5e:	dc1c      	bgt.n	8004f9a <TSL_tkey_DebErrorStateProcess+0xb6>
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d002      	beq.n	8004f6a <TSL_tkey_DebErrorStateProcess+0x86>
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d006      	beq.n	8004f76 <TSL_tkey_DebErrorStateProcess+0x92>
 8004f68:	e017      	b.n	8004f9a <TSL_tkey_DebErrorStateProcess+0xb6>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8004f6a:	4b10      	ldr	r3, [pc, #64]	; (8004fac <TSL_tkey_DebErrorStateProcess+0xc8>)
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2202      	movs	r2, #2
 8004f72:	701a      	strb	r2, [r3, #0]
        break;
 8004f74:	e015      	b.n	8004fa2 <TSL_tkey_DebErrorStateProcess+0xbe>
        THIS_STATEID = TSL_STATEID_PROX;
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <TSL_tkey_DebErrorStateProcess+0xc8>)
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2206      	movs	r2, #6
 8004f7e:	701a      	strb	r2, [r3, #0]
        break;
 8004f80:	e00f      	b.n	8004fa2 <TSL_tkey_DebErrorStateProcess+0xbe>
        THIS_STATEID = TSL_STATEID_DETECT;
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <TSL_tkey_DebErrorStateProcess+0xc8>)
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	220a      	movs	r2, #10
 8004f8a:	701a      	strb	r2, [r3, #0]
        break;
 8004f8c:	e009      	b.n	8004fa2 <TSL_tkey_DebErrorStateProcess+0xbe>
        THIS_STATEID = TSL_STATEID_TOUCH;
 8004f8e:	4b07      	ldr	r3, [pc, #28]	; (8004fac <TSL_tkey_DebErrorStateProcess+0xc8>)
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	220c      	movs	r2, #12
 8004f96:	701a      	strb	r2, [r3, #0]
        break;
 8004f98:	e003      	b.n	8004fa2 <TSL_tkey_DebErrorStateProcess+0xbe>
        TSL_tkey_SetStateCalibration(0);
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f7ff f9c2 	bl	8004324 <TSL_tkey_SetStateCalibration>
        break;
 8004fa0:	46c0      	nop			; (mov r8, r8)
}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b002      	add	sp, #8
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	20000d6c 	.word	0x20000d6c

08004fb0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	6039      	str	r1, [r7, #0]
 8004fba:	1dbb      	adds	r3, r7, #6
 8004fbc:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8004fbe:	1dbb      	adds	r3, r7, #6
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc4:	d805      	bhi.n	8004fd2 <ff_convert+0x22>
		c = chr;
 8004fc6:	230e      	movs	r3, #14
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	1dba      	adds	r2, r7, #6
 8004fcc:	8812      	ldrh	r2, [r2, #0]
 8004fce:	801a      	strh	r2, [r3, #0]
 8004fd0:	e037      	b.n	8005042 <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d010      	beq.n	8004ffa <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004fd8:	1dbb      	adds	r3, r7, #6
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	2bff      	cmp	r3, #255	; 0xff
 8004fde:	d807      	bhi.n	8004ff0 <ff_convert+0x40>
 8004fe0:	1dbb      	adds	r3, r7, #6
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	3b80      	subs	r3, #128	; 0x80
 8004fe6:	001a      	movs	r2, r3
 8004fe8:	4b19      	ldr	r3, [pc, #100]	; (8005050 <ff_convert+0xa0>)
 8004fea:	0052      	lsls	r2, r2, #1
 8004fec:	5ad2      	ldrh	r2, [r2, r3]
 8004fee:	e000      	b.n	8004ff2 <ff_convert+0x42>
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	230e      	movs	r3, #14
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	801a      	strh	r2, [r3, #0]
 8004ff8:	e023      	b.n	8005042 <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8004ffa:	230e      	movs	r3, #14
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	2200      	movs	r2, #0
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	e00e      	b.n	8005022 <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 8005004:	210e      	movs	r1, #14
 8005006:	187b      	adds	r3, r7, r1
 8005008:	881a      	ldrh	r2, [r3, #0]
 800500a:	4b11      	ldr	r3, [pc, #68]	; (8005050 <ff_convert+0xa0>)
 800500c:	0052      	lsls	r2, r2, #1
 800500e:	5ad3      	ldrh	r3, [r2, r3]
 8005010:	1dba      	adds	r2, r7, #6
 8005012:	8812      	ldrh	r2, [r2, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d00a      	beq.n	800502e <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 8005018:	187b      	adds	r3, r7, r1
 800501a:	881a      	ldrh	r2, [r3, #0]
 800501c:	187b      	adds	r3, r7, r1
 800501e:	3201      	adds	r2, #1
 8005020:	801a      	strh	r2, [r3, #0]
 8005022:	230e      	movs	r3, #14
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	2b7f      	cmp	r3, #127	; 0x7f
 800502a:	d9eb      	bls.n	8005004 <ff_convert+0x54>
 800502c:	e000      	b.n	8005030 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800502e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 8005030:	210e      	movs	r1, #14
 8005032:	187b      	adds	r3, r7, r1
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	3380      	adds	r3, #128	; 0x80
 8005038:	b29a      	uxth	r2, r3
 800503a:	187b      	adds	r3, r7, r1
 800503c:	21ff      	movs	r1, #255	; 0xff
 800503e:	400a      	ands	r2, r1
 8005040:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 8005042:	230e      	movs	r3, #14
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	881b      	ldrh	r3, [r3, #0]
}
 8005048:	0018      	movs	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	b004      	add	sp, #16
 800504e:	bd80      	pop	{r7, pc}
 8005050:	080075b8 	.word	0x080075b8

08005054 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted */
)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	0002      	movs	r2, r0
 800505c:	1dbb      	adds	r3, r7, #6
 800505e:	801a      	strh	r2, [r3, #0]
									0xFF21,0xFF22,0xFF23,0xFF24,0xFF25,0xFF26,0xFF27,0xFF28,0xFF29,0xFF2A,0xFF2B,0xFF2C,0xFF2D,0xFF2E,0xFF2F,0xFF30,0xFF31,0xFF32,0xFF33,0xFF34,0xFF35,0xFF36,0xFF37,0xFF38,0xFF39,0xFF3A
	};
	UINT i, n, hi, li;


	if (chr < 0x80) {	/* ASCII characters (acceleration) */
 8005060:	1dbb      	adds	r3, r7, #6
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	2b7f      	cmp	r3, #127	; 0x7f
 8005066:	d80d      	bhi.n	8005084 <ff_wtoupper+0x30>
		if (chr >= 0x61 && chr <= 0x7A) chr -= 0x20;
 8005068:	1dbb      	adds	r3, r7, #6
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	2b60      	cmp	r3, #96	; 0x60
 800506e:	d93d      	bls.n	80050ec <ff_wtoupper+0x98>
 8005070:	1dbb      	adds	r3, r7, #6
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	2b7a      	cmp	r3, #122	; 0x7a
 8005076:	d839      	bhi.n	80050ec <ff_wtoupper+0x98>
 8005078:	1dbb      	adds	r3, r7, #6
 800507a:	1dba      	adds	r2, r7, #6
 800507c:	8812      	ldrh	r2, [r2, #0]
 800507e:	3a20      	subs	r2, #32
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	e033      	b.n	80050ec <ff_wtoupper+0x98>

	} else {			/* Non ASCII characters (table search) */
		n = 12; li = 0; hi = sizeof lower / sizeof lower[0];
 8005084:	230c      	movs	r3, #12
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	23f7      	movs	r3, #247	; 0xf7
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	613b      	str	r3, [r7, #16]
		do {
			i = li + (hi - li) / 2;
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	18d3      	adds	r3, r2, r3
 800509e:	60bb      	str	r3, [r7, #8]
			if (chr == lower[i]) break;
 80050a0:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <ff_wtoupper+0xa4>)
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	0052      	lsls	r2, r2, #1
 80050a6:	5ad3      	ldrh	r3, [r2, r3]
 80050a8:	1dba      	adds	r2, r7, #6
 80050aa:	8812      	ldrh	r2, [r2, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d013      	beq.n	80050d8 <ff_wtoupper+0x84>
			if (chr > lower[i]) li = i; else hi = i;
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <ff_wtoupper+0xa4>)
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	0052      	lsls	r2, r2, #1
 80050b6:	5ad3      	ldrh	r3, [r2, r3]
 80050b8:	1dba      	adds	r2, r7, #6
 80050ba:	8812      	ldrh	r2, [r2, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d902      	bls.n	80050c6 <ff_wtoupper+0x72>
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e001      	b.n	80050ca <ff_wtoupper+0x76>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	613b      	str	r3, [r7, #16]
		} while (--n);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1dd      	bne.n	8005092 <ff_wtoupper+0x3e>
 80050d6:	e000      	b.n	80050da <ff_wtoupper+0x86>
			if (chr == lower[i]) break;
 80050d8:	46c0      	nop			; (mov r8, r8)
		if (n) chr = upper[i];
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <ff_wtoupper+0x98>
 80050e0:	1dbb      	adds	r3, r7, #6
 80050e2:	4a06      	ldr	r2, [pc, #24]	; (80050fc <ff_wtoupper+0xa8>)
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	0049      	lsls	r1, r1, #1
 80050e8:	5a8a      	ldrh	r2, [r1, r2]
 80050ea:	801a      	strh	r2, [r3, #0]
	}

	return chr;
 80050ec:	1dbb      	adds	r3, r7, #6
 80050ee:	881b      	ldrh	r3, [r3, #0]
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b006      	add	sp, #24
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	080076b8 	.word	0x080076b8
 80050fc:	08007a94 	.word	0x08007a94

08005100 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	0002      	movs	r2, r0
 8005108:	1dfb      	adds	r3, r7, #7
 800510a:	701a      	strb	r2, [r3, #0]
	if (SD_ff_hw.initialized)
 800510c:	4b05      	ldr	r3, [pc, #20]	; (8005124 <disk_status+0x24>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <disk_status+0x18>
		return 0;
 8005114:	2300      	movs	r3, #0
 8005116:	e000      	b.n	800511a <disk_status+0x1a>

	return STA_NOINIT;
 8005118:	2301      	movs	r3, #1
}
 800511a:	0018      	movs	r0, r3
 800511c:	46bd      	mov	sp, r7
 800511e:	b002      	add	sp, #8
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	20000d84 	.word	0x20000d84

08005128 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	0002      	movs	r2, r0
 8005130:	1dfb      	adds	r3, r7, #7
 8005132:	701a      	strb	r2, [r3, #0]
	if (hwif_init(&SD_ff_hw) == 0)
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <disk_initialize+0x28>)
 8005136:	0018      	movs	r0, r3
 8005138:	f000 fd8b 	bl	8005c52 <hwif_init>
 800513c:	1e03      	subs	r3, r0, #0
 800513e:	d101      	bne.n	8005144 <disk_initialize+0x1c>
		return 0;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <disk_initialize+0x1e>

	return STA_NOINIT;
 8005144:	2301      	movs	r3, #1
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b002      	add	sp, #8
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	20000d84 	.word	0x20000d84

08005154 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	230f      	movs	r3, #15
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	1c02      	adds	r2, r0, #0
 8005166:	701a      	strb	r2, [r3, #0]
	int i;

	for (i=0; i<count; i++)
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e012      	b.n	8005194 <disk_read+0x40>
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	18d1      	adds	r1, r2, r3
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	025b      	lsls	r3, r3, #9
 8005178:	001a      	movs	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	189a      	adds	r2, r3, r2
 800517e:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <disk_read+0x54>)
 8005180:	0018      	movs	r0, r3
 8005182:	f000 fda1 	bl	8005cc8 <sd_read>
 8005186:	1e03      	subs	r3, r0, #0
 8005188:	d001      	beq.n	800518e <disk_read+0x3a>
			return RES_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e007      	b.n	800519e <disk_read+0x4a>
	for (i=0; i<count; i++)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	3301      	adds	r3, #1
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d8e8      	bhi.n	800516e <disk_read+0x1a>

	return RES_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	0018      	movs	r0, r3
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b006      	add	sp, #24
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	20000d84 	.word	0x20000d84

080051ac <spi_init>:
#include "fat_sd_spi.h"


static void spi_init(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
	/* Configure spi using CubeMX!!! */
	spi_set_speed(SD_SPEED_400KHZ);
 80051b0:	2001      	movs	r0, #1
 80051b2:	f000 f803 	bl	80051bc <spi_set_speed>
}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <spi_set_speed>:

static void spi_set_speed(enum sd_speed speed)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08e      	sub	sp, #56	; 0x38
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	0002      	movs	r2, r0
 80051c4:	1dfb      	adds	r3, r7, #7
 80051c6:	701a      	strb	r2, [r3, #0]
	//CHECK YOUR APB1 FREQ!!!
	SPI_InitTypeDef spi;
	int prescaler = SPI_BAUDRATEPRESCALER_8;
 80051c8:	2310      	movs	r3, #16
 80051ca:	637b      	str	r3, [r7, #52]	; 0x34

	if (speed == SD_SPEED_400KHZ)
 80051cc:	1dfb      	adds	r3, r7, #7
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d102      	bne.n	80051da <spi_set_speed+0x1e>
		prescaler = SPI_BAUDRATEPRESCALER_64;
 80051d4:	2328      	movs	r3, #40	; 0x28
 80051d6:	637b      	str	r3, [r7, #52]	; 0x34
 80051d8:	e005      	b.n	80051e6 <spi_set_speed+0x2a>
	else if (speed == SD_SPEED_25MHZ)
 80051da:	1dfb      	adds	r3, r7, #7
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d101      	bne.n	80051e6 <spi_set_speed+0x2a>
		prescaler = SPI_BAUDRATEPRESCALER_8;
 80051e2:	2310      	movs	r3, #16
 80051e4:	637b      	str	r3, [r7, #52]	; 0x34

	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80051e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051e8:	4b04      	ldr	r3, [pc, #16]	; (80051fc <spi_set_speed+0x40>)
 80051ea:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 80051ec:	4b03      	ldr	r3, [pc, #12]	; (80051fc <spi_set_speed+0x40>)
 80051ee:	0018      	movs	r0, r3
 80051f0:	f7fd fc4a 	bl	8002a88 <HAL_SPI_Init>
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b00e      	add	sp, #56	; 0x38
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	200002cc 	.word	0x200002cc

08005200 <spi_txrx>:

static uint8_t spi_txrx(uint8_t data)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b087      	sub	sp, #28
 8005204:	af02      	add	r7, sp, #8
 8005206:	0002      	movs	r2, r0
 8005208:	1dfb      	adds	r3, r7, #7
 800520a:	701a      	strb	r2, [r3, #0]
	uint8_t out = 0;
 800520c:	240f      	movs	r4, #15
 800520e:	193b      	adds	r3, r7, r4
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8005214:	193a      	adds	r2, r7, r4
 8005216:	1df9      	adds	r1, r7, #7
 8005218:	4806      	ldr	r0, [pc, #24]	; (8005234 <spi_txrx+0x34>)
 800521a:	2301      	movs	r3, #1
 800521c:	425b      	negs	r3, r3
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	2301      	movs	r3, #1
 8005222:	f7fd fc9b 	bl	8002b5c <HAL_SPI_TransmitReceive>
	return out;
 8005226:	193b      	adds	r3, r7, r4
 8005228:	781b      	ldrb	r3, [r3, #0]
}
 800522a:	0018      	movs	r0, r3
 800522c:	46bd      	mov	sp, r7
 800522e:	b005      	add	sp, #20
 8005230:	bd90      	pop	{r4, r7, pc}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	200002cc 	.word	0x200002cc

08005238 <crc7_one>:


/* crc helpers */
static uint8_t crc7_one(uint8_t t, uint8_t data)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	0002      	movs	r2, r0
 8005240:	1dfb      	adds	r3, r7, #7
 8005242:	701a      	strb	r2, [r3, #0]
 8005244:	1dbb      	adds	r3, r7, #6
 8005246:	1c0a      	adds	r2, r1, #0
 8005248:	701a      	strb	r2, [r3, #0]
	int i;
	const uint8_t g = 0x89;
 800524a:	230b      	movs	r3, #11
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	2289      	movs	r2, #137	; 0x89
 8005250:	701a      	strb	r2, [r3, #0]
	t ^= data;
 8005252:	1dfb      	adds	r3, r7, #7
 8005254:	1df9      	adds	r1, r7, #7
 8005256:	1dba      	adds	r2, r7, #6
 8005258:	7809      	ldrb	r1, [r1, #0]
 800525a:	7812      	ldrb	r2, [r2, #0]
 800525c:	404a      	eors	r2, r1
 800525e:	701a      	strb	r2, [r3, #0]
	for (i=0; i<8; i++) {
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	e014      	b.n	8005290 <crc7_one+0x58>
		if (t & 0x80)
 8005266:	1dfb      	adds	r3, r7, #7
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	b25b      	sxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	da07      	bge.n	8005280 <crc7_one+0x48>
			t ^= g;
 8005270:	1dfb      	adds	r3, r7, #7
 8005272:	1df9      	adds	r1, r7, #7
 8005274:	220b      	movs	r2, #11
 8005276:	18ba      	adds	r2, r7, r2
 8005278:	7809      	ldrb	r1, [r1, #0]
 800527a:	7812      	ldrb	r2, [r2, #0]
 800527c:	404a      	eors	r2, r1
 800527e:	701a      	strb	r2, [r3, #0]
		t <<= 1;
 8005280:	1dfa      	adds	r2, r7, #7
 8005282:	1dfb      	adds	r3, r7, #7
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	18db      	adds	r3, r3, r3
 8005288:	7013      	strb	r3, [r2, #0]
	for (i=0; i<8; i++) {
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b07      	cmp	r3, #7
 8005294:	dde7      	ble.n	8005266 <crc7_one+0x2e>
	}
	return t;
 8005296:	1dfb      	adds	r3, r7, #7
 8005298:	781b      	ldrb	r3, [r3, #0]
}
 800529a:	0018      	movs	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	b004      	add	sp, #16
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <sd_cmd>:


/*** sd functions - on top of spi code ***/

static void sd_cmd(uint8_t cmd, uint32_t arg)
{
 80052a2:	b5b0      	push	{r4, r5, r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	0002      	movs	r2, r0
 80052aa:	6039      	str	r1, [r7, #0]
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	701a      	strb	r2, [r3, #0]
	uint8_t crc = 0;
 80052b0:	250f      	movs	r5, #15
 80052b2:	197b      	adds	r3, r7, r5
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
	spi_txrx(0x40 | cmd);
 80052b8:	1dfb      	adds	r3, r7, #7
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2240      	movs	r2, #64	; 0x40
 80052be:	4313      	orrs	r3, r2
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7ff ff9c 	bl	8005200 <spi_txrx>
	crc = crc7_one(crc, 0x40 | cmd);
 80052c8:	1dfb      	adds	r3, r7, #7
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2240      	movs	r2, #64	; 0x40
 80052ce:	4313      	orrs	r3, r2
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	197c      	adds	r4, r7, r5
 80052d4:	197b      	adds	r3, r7, r5
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	0011      	movs	r1, r2
 80052da:	0018      	movs	r0, r3
 80052dc:	f7ff ffac 	bl	8005238 <crc7_one>
 80052e0:	0003      	movs	r3, r0
 80052e2:	7023      	strb	r3, [r4, #0]
	spi_txrx(arg >> 24);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	0e1b      	lsrs	r3, r3, #24
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	0018      	movs	r0, r3
 80052ec:	f7ff ff88 	bl	8005200 <spi_txrx>
	crc = crc7_one(crc, arg >> 24);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	0e1b      	lsrs	r3, r3, #24
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	197c      	adds	r4, r7, r5
 80052f8:	197b      	adds	r3, r7, r5
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	0011      	movs	r1, r2
 80052fe:	0018      	movs	r0, r3
 8005300:	f7ff ff9a 	bl	8005238 <crc7_one>
 8005304:	0003      	movs	r3, r0
 8005306:	7023      	strb	r3, [r4, #0]
	spi_txrx(arg >> 16);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	b2db      	uxtb	r3, r3
 800530e:	0018      	movs	r0, r3
 8005310:	f7ff ff76 	bl	8005200 <spi_txrx>
	crc = crc7_one(crc, arg >> 16);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	0c1b      	lsrs	r3, r3, #16
 8005318:	b2da      	uxtb	r2, r3
 800531a:	197c      	adds	r4, r7, r5
 800531c:	197b      	adds	r3, r7, r5
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	0011      	movs	r1, r2
 8005322:	0018      	movs	r0, r3
 8005324:	f7ff ff88 	bl	8005238 <crc7_one>
 8005328:	0003      	movs	r3, r0
 800532a:	7023      	strb	r3, [r4, #0]
	spi_txrx(arg >> 8);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	0a1b      	lsrs	r3, r3, #8
 8005330:	b2db      	uxtb	r3, r3
 8005332:	0018      	movs	r0, r3
 8005334:	f7ff ff64 	bl	8005200 <spi_txrx>
	crc = crc7_one(crc, arg >> 8);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	b2da      	uxtb	r2, r3
 800533e:	197c      	adds	r4, r7, r5
 8005340:	197b      	adds	r3, r7, r5
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	0011      	movs	r1, r2
 8005346:	0018      	movs	r0, r3
 8005348:	f7ff ff76 	bl	8005238 <crc7_one>
 800534c:	0003      	movs	r3, r0
 800534e:	7023      	strb	r3, [r4, #0]
	spi_txrx(arg);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	0018      	movs	r0, r3
 8005356:	f7ff ff53 	bl	8005200 <spi_txrx>
	crc = crc7_one(crc, arg);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	197c      	adds	r4, r7, r5
 8005360:	197b      	adds	r3, r7, r5
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	0011      	movs	r1, r2
 8005366:	0018      	movs	r0, r3
 8005368:	f7ff ff66 	bl	8005238 <crc7_one>
 800536c:	0003      	movs	r3, r0
 800536e:	7023      	strb	r3, [r4, #0]
	//spi_txrx(0x95);
	spi_txrx(crc | 0x1);	/* crc7, for cmd0 */
 8005370:	197b      	adds	r3, r7, r5
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2201      	movs	r2, #1
 8005376:	4313      	orrs	r3, r2
 8005378:	b2db      	uxtb	r3, r3
 800537a:	0018      	movs	r0, r3
 800537c:	f7ff ff40 	bl	8005200 <spi_txrx>
}
 8005380:	46c0      	nop			; (mov r8, r8)
 8005382:	46bd      	mov	sp, r7
 8005384:	b004      	add	sp, #16
 8005386:	bdb0      	pop	{r4, r5, r7, pc}

08005388 <sd_get_r1>:

static uint8_t sd_get_r1()
{
 8005388:	b590      	push	{r4, r7, lr}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
	int tries = 1000;
 800538e:	23fa      	movs	r3, #250	; 0xfa
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	607b      	str	r3, [r7, #4]
	uint8_t r;

	while (tries--) {
 8005394:	e00d      	b.n	80053b2 <sd_get_r1+0x2a>
		r = spi_txrx(0xff);
 8005396:	1cfc      	adds	r4, r7, #3
 8005398:	20ff      	movs	r0, #255	; 0xff
 800539a:	f7ff ff31 	bl	8005200 <spi_txrx>
 800539e:	0003      	movs	r3, r0
 80053a0:	7023      	strb	r3, [r4, #0]
		if ((r & 0x80) == 0)
 80053a2:	1cfb      	adds	r3, r7, #3
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	b25b      	sxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	db02      	blt.n	80053b2 <sd_get_r1+0x2a>
			return r;
 80053ac:	1cfb      	adds	r3, r7, #3
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	e005      	b.n	80053be <sd_get_r1+0x36>
	while (tries--) {
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ec      	bne.n	8005396 <sd_get_r1+0xe>
	}
	return 0xff;
 80053bc:	23ff      	movs	r3, #255	; 0xff
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b003      	add	sp, #12
 80053c4:	bd90      	pop	{r4, r7, pc}

080053c6 <sd_get_r2>:

static uint16_t sd_get_r2()
{
 80053c6:	b590      	push	{r4, r7, lr}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
	int tries = 1000;
 80053cc:	23fa      	movs	r3, #250	; 0xfa
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	607b      	str	r3, [r7, #4]
	uint16_t r;
	while (tries--) {
 80053d2:	e00b      	b.n	80053ec <sd_get_r2+0x26>
		r = spi_txrx(0xff);
 80053d4:	20ff      	movs	r0, #255	; 0xff
 80053d6:	f7ff ff13 	bl	8005200 <spi_txrx>
 80053da:	0003      	movs	r3, r0
 80053dc:	001a      	movs	r2, r3
 80053de:	1cbb      	adds	r3, r7, #2
 80053e0:	801a      	strh	r2, [r3, #0]
		if ((r & 0x80) == 0)
 80053e2:	1cbb      	adds	r3, r7, #2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	2280      	movs	r2, #128	; 0x80
 80053e8:	4013      	ands	r3, r2
 80053ea:	d005      	beq.n	80053f8 <sd_get_r2+0x32>
	while (tries--) {
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	1e5a      	subs	r2, r3, #1
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1ee      	bne.n	80053d4 <sd_get_r2+0xe>
 80053f6:	e000      	b.n	80053fa <sd_get_r2+0x34>
			break;
 80053f8:	46c0      	nop			; (mov r8, r8)
	}
	if (tries < 0)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	da01      	bge.n	8005404 <sd_get_r2+0x3e>
		return 0xff;
 8005400:	23ff      	movs	r3, #255	; 0xff
 8005402:	e00e      	b.n	8005422 <sd_get_r2+0x5c>
	r = r<<8 | spi_txrx(0xff);
 8005404:	1cbb      	adds	r3, r7, #2
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	b21c      	sxth	r4, r3
 800540c:	20ff      	movs	r0, #255	; 0xff
 800540e:	f7ff fef7 	bl	8005200 <spi_txrx>
 8005412:	0003      	movs	r3, r0
 8005414:	b21b      	sxth	r3, r3
 8005416:	4323      	orrs	r3, r4
 8005418:	b21a      	sxth	r2, r3
 800541a:	1cbb      	adds	r3, r7, #2
 800541c:	801a      	strh	r2, [r3, #0]
	return r;
 800541e:	1cbb      	adds	r3, r7, #2
 8005420:	881b      	ldrh	r3, [r3, #0]
}
 8005422:	0018      	movs	r0, r3
 8005424:	46bd      	mov	sp, r7
 8005426:	b003      	add	sp, #12
 8005428:	bd90      	pop	{r4, r7, pc}

0800542a <sd_get_r7>:

/*
 * r1, then 32-bit reply... same format as r3
 */
static uint8_t sd_get_r7(uint32_t *r7)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
	uint32_t r;
	r = sd_get_r1();
 8005432:	f7ff ffa9 	bl	8005388 <sd_get_r1>
 8005436:	0003      	movs	r3, r0
 8005438:	60fb      	str	r3, [r7, #12]
	if (r != 0x01)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d002      	beq.n	8005446 <sd_get_r7+0x1c>
		return r;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	e023      	b.n	800548e <sd_get_r7+0x64>
	r = spi_txrx(0xff) << 24;
 8005446:	20ff      	movs	r0, #255	; 0xff
 8005448:	f7ff feda 	bl	8005200 <spi_txrx>
 800544c:	0003      	movs	r3, r0
 800544e:	061b      	lsls	r3, r3, #24
 8005450:	60fb      	str	r3, [r7, #12]
	r |= spi_txrx(0xff) << 16;
 8005452:	20ff      	movs	r0, #255	; 0xff
 8005454:	f7ff fed4 	bl	8005200 <spi_txrx>
 8005458:	0003      	movs	r3, r0
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	001a      	movs	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
	r |= spi_txrx(0xff) << 8;
 8005464:	20ff      	movs	r0, #255	; 0xff
 8005466:	f7ff fecb 	bl	8005200 <spi_txrx>
 800546a:	0003      	movs	r3, r0
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	001a      	movs	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
	r |= spi_txrx(0xff);
 8005476:	20ff      	movs	r0, #255	; 0xff
 8005478:	f7ff fec2 	bl	8005200 <spi_txrx>
 800547c:	0003      	movs	r3, r0
 800547e:	001a      	movs	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
	*r7 = r;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	601a      	str	r2, [r3, #0]
	return 0x01;
 800548c:	2301      	movs	r3, #1
}
 800548e:	0018      	movs	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	b004      	add	sp, #16
 8005494:	bd80      	pop	{r7, pc}

08005496 <sd_nec>:


/* Nec (=Ncr? which is limited to [0,8]) dummy bytes before lowering CS,
 * as described in sandisk doc, 5.4. */
static void sd_nec()
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
	int i;
	for (i=0; i<8; i++)
 800549c:	2300      	movs	r3, #0
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	e005      	b.n	80054ae <sd_nec+0x18>
		spi_txrx(0xff);
 80054a2:	20ff      	movs	r0, #255	; 0xff
 80054a4:	f7ff feac 	bl	8005200 <spi_txrx>
	for (i=0; i<8; i++)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3301      	adds	r3, #1
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	ddf6      	ble.n	80054a2 <sd_nec+0xc>
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b002      	add	sp, #8
 80054bc:	bd80      	pop	{r7, pc}

080054be <sd_init>:


static int sd_init(hwif *hw)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b08a      	sub	sp, #40	; 0x28
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
	int r;
	uint32_t r7;
	uint32_t r3;
	int tries;

	hw->capabilities = 0;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	60da      	str	r2, [r3, #12]

	/* start with 100-400 kHz clock */
	spi_set_speed(SD_SPEED_400KHZ);
 80054cc:	2001      	movs	r0, #1
 80054ce:	f7ff fe75 	bl	80051bc <spi_set_speed>

	spi_cs_high();
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	0219      	lsls	r1, r3, #8
 80054d6:	23a0      	movs	r3, #160	; 0xa0
 80054d8:	05db      	lsls	r3, r3, #23
 80054da:	2201      	movs	r2, #1
 80054dc:	0018      	movs	r0, r3
 80054de:	f7fc fb2f 	bl	8001b40 <HAL_GPIO_WritePin>
	/* 74+ clocks with CS high */
	for (i=0; i<10; i++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
 80054e6:	e005      	b.n	80054f4 <sd_init+0x36>
		spi_txrx(0xff);
 80054e8:	20ff      	movs	r0, #255	; 0xff
 80054ea:	f7ff fe89 	bl	8005200 <spi_txrx>
	for (i=0; i<10; i++)
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	3301      	adds	r3, #1
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	2b09      	cmp	r3, #9
 80054f8:	ddf6      	ble.n	80054e8 <sd_init+0x2a>

	/* reset */
	spi_cs_low();
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	0219      	lsls	r1, r3, #8
 80054fe:	23a0      	movs	r3, #160	; 0xa0
 8005500:	05db      	lsls	r3, r3, #23
 8005502:	2200      	movs	r2, #0
 8005504:	0018      	movs	r0, r3
 8005506:	f7fc fb1b 	bl	8001b40 <HAL_GPIO_WritePin>
	sd_cmd(0, 0);
 800550a:	2100      	movs	r1, #0
 800550c:	2000      	movs	r0, #0
 800550e:	f7ff fec8 	bl	80052a2 <sd_cmd>
	r = sd_get_r1();
 8005512:	f7ff ff39 	bl	8005388 <sd_get_r1>
 8005516:	0003      	movs	r3, r0
 8005518:	613b      	str	r3, [r7, #16]
	sd_nec();
 800551a:	f7ff ffbc 	bl	8005496 <sd_nec>
	spi_cs_high();
 800551e:	2380      	movs	r3, #128	; 0x80
 8005520:	0219      	lsls	r1, r3, #8
 8005522:	23a0      	movs	r3, #160	; 0xa0
 8005524:	05db      	lsls	r3, r3, #23
 8005526:	2201      	movs	r2, #1
 8005528:	0018      	movs	r0, r3
 800552a:	f7fc fb09 	bl	8001b40 <HAL_GPIO_WritePin>
	if (r == 0xff)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2bff      	cmp	r3, #255	; 0xff
 8005532:	d100      	bne.n	8005536 <sd_init+0x78>
 8005534:	e19b      	b.n	800586e <sd_init+0x3b0>
		goto err_spi;
	if (r != 0x01) {
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d000      	beq.n	800553e <sd_init+0x80>
 800553c:	e1a9      	b.n	8005892 <sd_init+0x3d4>
		goto err;
	}

	/* ask about voltage supply */
	spi_cs_low();
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	0219      	lsls	r1, r3, #8
 8005542:	23a0      	movs	r3, #160	; 0xa0
 8005544:	05db      	lsls	r3, r3, #23
 8005546:	2200      	movs	r2, #0
 8005548:	0018      	movs	r0, r3
 800554a:	f7fc faf9 	bl	8001b40 <HAL_GPIO_WritePin>
	sd_cmd(8, 0x1aa /* VHS = 1 */);
 800554e:	23d5      	movs	r3, #213	; 0xd5
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	0019      	movs	r1, r3
 8005554:	2008      	movs	r0, #8
 8005556:	f7ff fea4 	bl	80052a2 <sd_cmd>
	r = sd_get_r7(&r7);
 800555a:	230c      	movs	r3, #12
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	0018      	movs	r0, r3
 8005560:	f7ff ff63 	bl	800542a <sd_get_r7>
 8005564:	0003      	movs	r3, r0
 8005566:	613b      	str	r3, [r7, #16]
	sd_nec();
 8005568:	f7ff ff95 	bl	8005496 <sd_nec>
	spi_cs_high();
 800556c:	2380      	movs	r3, #128	; 0x80
 800556e:	0219      	lsls	r1, r3, #8
 8005570:	23a0      	movs	r3, #160	; 0xa0
 8005572:	05db      	lsls	r3, r3, #23
 8005574:	2201      	movs	r2, #1
 8005576:	0018      	movs	r0, r3
 8005578:	f7fc fae2 	bl	8001b40 <HAL_GPIO_WritePin>
	hw->capabilities |= CAP_VER2_00;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60da      	str	r2, [r3, #12]
	if (r == 0xff)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2bff      	cmp	r3, #255	; 0xff
 800558c:	d100      	bne.n	8005590 <sd_init+0xd2>
 800558e:	e170      	b.n	8005872 <sd_init+0x3b4>
		goto err_spi;
	if (r == 0x01)
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d00e      	beq.n	80055b4 <sd_init+0xf6>
		;
	else if (r & 0x4) {
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2204      	movs	r2, #4
 800559a:	4013      	ands	r3, r2
 800559c:	d007      	beq.n	80055ae <sd_init+0xf0>
		hw->capabilities &= ~CAP_VER2_00;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	4393      	bics	r3, r2
 80055a6:	001a      	movs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60da      	str	r2, [r3, #12]
 80055ac:	e002      	b.n	80055b4 <sd_init+0xf6>
	} else {
		return -2;
 80055ae:	2302      	movs	r3, #2
 80055b0:	425b      	negs	r3, r3
 80055b2:	e17b      	b.n	80058ac <sd_init+0x3ee>
	}


	/* ask about voltage supply */
	spi_cs_low();
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	0219      	lsls	r1, r3, #8
 80055b8:	23a0      	movs	r3, #160	; 0xa0
 80055ba:	05db      	lsls	r3, r3, #23
 80055bc:	2200      	movs	r2, #0
 80055be:	0018      	movs	r0, r3
 80055c0:	f7fc fabe 	bl	8001b40 <HAL_GPIO_WritePin>
	sd_cmd(58, 0);
 80055c4:	2100      	movs	r1, #0
 80055c6:	203a      	movs	r0, #58	; 0x3a
 80055c8:	f7ff fe6b 	bl	80052a2 <sd_cmd>
	r = sd_get_r3(&r3);
 80055cc:	2308      	movs	r3, #8
 80055ce:	18fb      	adds	r3, r7, r3
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7ff ff2a 	bl	800542a <sd_get_r7>
 80055d6:	0003      	movs	r3, r0
 80055d8:	613b      	str	r3, [r7, #16]
	sd_nec();
 80055da:	f7ff ff5c 	bl	8005496 <sd_nec>
	spi_cs_high();
 80055de:	2380      	movs	r3, #128	; 0x80
 80055e0:	0219      	lsls	r1, r3, #8
 80055e2:	23a0      	movs	r3, #160	; 0xa0
 80055e4:	05db      	lsls	r3, r3, #23
 80055e6:	2201      	movs	r2, #1
 80055e8:	0018      	movs	r0, r3
 80055ea:	f7fc faa9 	bl	8001b40 <HAL_GPIO_WritePin>
	if (r == 0xff)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2bff      	cmp	r3, #255	; 0xff
 80055f2:	d100      	bne.n	80055f6 <sd_init+0x138>
 80055f4:	e13f      	b.n	8005876 <sd_init+0x3b8>
		goto err_spi;
	if (r != 0x01 && !(r & 0x4)) { /* allow it to not be implemented - old cards */
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d006      	beq.n	800560a <sd_init+0x14c>
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2204      	movs	r2, #4
 8005600:	4013      	ands	r3, r2
 8005602:	d102      	bne.n	800560a <sd_init+0x14c>
		return -2;
 8005604:	2302      	movs	r3, #2
 8005606:	425b      	negs	r3, r3
 8005608:	e150      	b.n	80058ac <sd_init+0x3ee>
	}
	else {
		int i;
		for (i=4; i<=23; i++)
 800560a:	2304      	movs	r3, #4
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	e00a      	b.n	8005626 <sd_init+0x168>
			if (r3 & 1<<i)
 8005610:	2201      	movs	r2, #1
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	409a      	lsls	r2, r3
 8005616:	0013      	movs	r3, r2
 8005618:	001a      	movs	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4013      	ands	r3, r2
 800561e:	d106      	bne.n	800562e <sd_init+0x170>
		for (i=4; i<=23; i++)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2b17      	cmp	r3, #23
 800562a:	ddf1      	ble.n	8005610 <sd_init+0x152>
 800562c:	e000      	b.n	8005630 <sd_init+0x172>
				break;
 800562e:	46c0      	nop			; (mov r8, r8)
		for (i=23; i>=4; i--)
 8005630:	2317      	movs	r3, #23
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e00a      	b.n	800564c <sd_init+0x18e>
			if (r3 & 1<<i)
 8005636:	2201      	movs	r2, #1
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	409a      	lsls	r2, r3
 800563c:	0013      	movs	r3, r2
 800563e:	001a      	movs	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4013      	ands	r3, r2
 8005644:	d106      	bne.n	8005654 <sd_init+0x196>
		for (i=23; i>=4; i--)
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	3b01      	subs	r3, #1
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	2b03      	cmp	r3, #3
 8005650:	dcf1      	bgt.n	8005636 <sd_init+0x178>
 8005652:	e000      	b.n	8005656 <sd_init+0x198>
				break;
 8005654:	46c0      	nop			; (mov r8, r8)
		/* CCS shouldn't be valid here yet */
	}


	tries = 1000;
 8005656:	23fa      	movs	r3, #250	; 0xfa
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	623b      	str	r3, [r7, #32]
	uint32_t hcs = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
	/* say we support SDHC */
	if (hw->capabilities & CAP_VER2_00)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	4013      	ands	r3, r2
 8005668:	d002      	beq.n	8005670 <sd_init+0x1b2>
		hcs = 1<<30;
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	05db      	lsls	r3, r3, #23
 800566e:	61bb      	str	r3, [r7, #24]

	/* needs to be polled until in_idle_state becomes 0 */
	do {
		/* send we don't support SDHC */
		spi_cs_low();
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	0219      	lsls	r1, r3, #8
 8005674:	23a0      	movs	r3, #160	; 0xa0
 8005676:	05db      	lsls	r3, r3, #23
 8005678:	2200      	movs	r2, #0
 800567a:	0018      	movs	r0, r3
 800567c:	f7fc fa60 	bl	8001b40 <HAL_GPIO_WritePin>
		/* next cmd is ACMD */
		sd_cmd(55, 0);
 8005680:	2100      	movs	r1, #0
 8005682:	2037      	movs	r0, #55	; 0x37
 8005684:	f7ff fe0d 	bl	80052a2 <sd_cmd>
		r = sd_get_r1();
 8005688:	f7ff fe7e 	bl	8005388 <sd_get_r1>
 800568c:	0003      	movs	r3, r0
 800568e:	613b      	str	r3, [r7, #16]
		sd_nec();
 8005690:	f7ff ff01 	bl	8005496 <sd_nec>
		spi_cs_high();
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	0219      	lsls	r1, r3, #8
 8005698:	23a0      	movs	r3, #160	; 0xa0
 800569a:	05db      	lsls	r3, r3, #23
 800569c:	2201      	movs	r2, #1
 800569e:	0018      	movs	r0, r3
 80056a0:	f7fc fa4e 	bl	8001b40 <HAL_GPIO_WritePin>
		if (r == 0xff)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2bff      	cmp	r3, #255	; 0xff
 80056a8:	d100      	bne.n	80056ac <sd_init+0x1ee>
 80056aa:	e0e6      	b.n	800587a <sd_init+0x3bc>
			goto err_spi;
		/* well... it's probably not idle here, but specs aren't clear */
		if (r & 0xfe) {
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	22fe      	movs	r2, #254	; 0xfe
 80056b0:	4013      	ands	r3, r2
 80056b2:	d000      	beq.n	80056b6 <sd_init+0x1f8>
 80056b4:	e0ef      	b.n	8005896 <sd_init+0x3d8>
			goto err;
		}

		spi_cs_low();
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	0219      	lsls	r1, r3, #8
 80056ba:	23a0      	movs	r3, #160	; 0xa0
 80056bc:	05db      	lsls	r3, r3, #23
 80056be:	2200      	movs	r2, #0
 80056c0:	0018      	movs	r0, r3
 80056c2:	f7fc fa3d 	bl	8001b40 <HAL_GPIO_WritePin>
		sd_cmd(41, hcs);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	0019      	movs	r1, r3
 80056ca:	2029      	movs	r0, #41	; 0x29
 80056cc:	f7ff fde9 	bl	80052a2 <sd_cmd>
		r = sd_get_r1();
 80056d0:	f7ff fe5a 	bl	8005388 <sd_get_r1>
 80056d4:	0003      	movs	r3, r0
 80056d6:	613b      	str	r3, [r7, #16]
		sd_nec();
 80056d8:	f7ff fedd 	bl	8005496 <sd_nec>
		spi_cs_high();
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	0219      	lsls	r1, r3, #8
 80056e0:	23a0      	movs	r3, #160	; 0xa0
 80056e2:	05db      	lsls	r3, r3, #23
 80056e4:	2201      	movs	r2, #1
 80056e6:	0018      	movs	r0, r3
 80056e8:	f7fc fa2a 	bl	8001b40 <HAL_GPIO_WritePin>
		if (r == 0xff)
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	2bff      	cmp	r3, #255	; 0xff
 80056f0:	d100      	bne.n	80056f4 <sd_init+0x236>
 80056f2:	e0c4      	b.n	800587e <sd_init+0x3c0>
			goto err_spi;
		if (r & 0xfe) {
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	22fe      	movs	r2, #254	; 0xfe
 80056f8:	4013      	ands	r3, r2
 80056fa:	d000      	beq.n	80056fe <sd_init+0x240>
 80056fc:	e0cd      	b.n	800589a <sd_init+0x3dc>
			goto err;
		}
	} while (r != 0 && tries--);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <sd_init+0x250>
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	1e5a      	subs	r2, r3, #1
 8005708:	623a      	str	r2, [r7, #32]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1b0      	bne.n	8005670 <sd_init+0x1b2>
	if (tries == -1) {
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	3301      	adds	r3, #1
 8005712:	d100      	bne.n	8005716 <sd_init+0x258>
 8005714:	e0c3      	b.n	800589e <sd_init+0x3e0>

	/* Seems after this card is initialized which means bit 0 of R1
	 * will be cleared. Not too sure. */


	if (hw->capabilities & CAP_VER2_00) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	4013      	ands	r3, r2
 800571e:	d058      	beq.n	80057d2 <sd_init+0x314>
		/* ask about voltage supply */
		spi_cs_low();
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	0219      	lsls	r1, r3, #8
 8005724:	23a0      	movs	r3, #160	; 0xa0
 8005726:	05db      	lsls	r3, r3, #23
 8005728:	2200      	movs	r2, #0
 800572a:	0018      	movs	r0, r3
 800572c:	f7fc fa08 	bl	8001b40 <HAL_GPIO_WritePin>
		sd_cmd(58, 0);
 8005730:	2100      	movs	r1, #0
 8005732:	203a      	movs	r0, #58	; 0x3a
 8005734:	f7ff fdb5 	bl	80052a2 <sd_cmd>
		r = sd_get_r3(&r3);
 8005738:	2308      	movs	r3, #8
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	0018      	movs	r0, r3
 800573e:	f7ff fe74 	bl	800542a <sd_get_r7>
 8005742:	0003      	movs	r3, r0
 8005744:	613b      	str	r3, [r7, #16]
		sd_nec();
 8005746:	f7ff fea6 	bl	8005496 <sd_nec>
		spi_cs_high();
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	0219      	lsls	r1, r3, #8
 800574e:	23a0      	movs	r3, #160	; 0xa0
 8005750:	05db      	lsls	r3, r3, #23
 8005752:	2201      	movs	r2, #1
 8005754:	0018      	movs	r0, r3
 8005756:	f7fc f9f3 	bl	8001b40 <HAL_GPIO_WritePin>
		if (r == 0xff)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2bff      	cmp	r3, #255	; 0xff
 800575e:	d100      	bne.n	8005762 <sd_init+0x2a4>
 8005760:	e08f      	b.n	8005882 <sd_init+0x3c4>
			goto err_spi;
		if (r & 0xfe) {
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	22fe      	movs	r2, #254	; 0xfe
 8005766:	4013      	ands	r3, r2
 8005768:	d002      	beq.n	8005770 <sd_init+0x2b2>
			return -2;
 800576a:	2302      	movs	r3, #2
 800576c:	425b      	negs	r3, r3
 800576e:	e09d      	b.n	80058ac <sd_init+0x3ee>
		}
		else {
#if 1
			int i;
			for (i=4; i<=23; i++)
 8005770:	2304      	movs	r3, #4
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e00a      	b.n	800578c <sd_init+0x2ce>
				if (r3 & 1<<i)
 8005776:	2201      	movs	r2, #1
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	409a      	lsls	r2, r3
 800577c:	0013      	movs	r3, r2
 800577e:	001a      	movs	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	d106      	bne.n	8005794 <sd_init+0x2d6>
			for (i=4; i<=23; i++)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	3301      	adds	r3, #1
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b17      	cmp	r3, #23
 8005790:	ddf1      	ble.n	8005776 <sd_init+0x2b8>
 8005792:	e000      	b.n	8005796 <sd_init+0x2d8>
					break;
 8005794:	46c0      	nop			; (mov r8, r8)
			for (i=23; i>=4; i--)
 8005796:	2317      	movs	r3, #23
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e00a      	b.n	80057b2 <sd_init+0x2f4>
				if (r3 & 1<<i)
 800579c:	2201      	movs	r2, #1
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	409a      	lsls	r2, r3
 80057a2:	0013      	movs	r3, r2
 80057a4:	001a      	movs	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	d106      	bne.n	80057ba <sd_init+0x2fc>
			for (i=23; i>=4; i--)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	dcf1      	bgt.n	800579c <sd_init+0x2de>
 80057b8:	e000      	b.n	80057bc <sd_init+0x2fe>
					break;
 80057ba:	46c0      	nop			; (mov r8, r8)
			/* CCS shouldn't be valid here yet */
			// XXX power up status should be 1 here, since we're finished initializing, but it's not. WHY?
			// that means CCS is invalid, so we'll set CAP_SDHC later
#endif
			if (r3>>30 & 1) {
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	0f9b      	lsrs	r3, r3, #30
 80057c0:	2201      	movs	r2, #1
 80057c2:	4013      	ands	r3, r2
 80057c4:	d005      	beq.n	80057d2 <sd_init+0x314>
				hw->capabilities |= CAP_SDHC;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	2202      	movs	r2, #2
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60da      	str	r2, [r3, #12]
		}
	}


	/* with SDHC block length is fixed to 1024 */
	if ((hw->capabilities & CAP_SDHC) == 0) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2202      	movs	r2, #2
 80057d8:	4013      	ands	r3, r2
 80057da:	d122      	bne.n	8005822 <sd_init+0x364>
		spi_cs_low();
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	0219      	lsls	r1, r3, #8
 80057e0:	23a0      	movs	r3, #160	; 0xa0
 80057e2:	05db      	lsls	r3, r3, #23
 80057e4:	2200      	movs	r2, #0
 80057e6:	0018      	movs	r0, r3
 80057e8:	f7fc f9aa 	bl	8001b40 <HAL_GPIO_WritePin>
		sd_cmd(16, 512);
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	0019      	movs	r1, r3
 80057f2:	2010      	movs	r0, #16
 80057f4:	f7ff fd55 	bl	80052a2 <sd_cmd>
		r = sd_get_r1();
 80057f8:	f7ff fdc6 	bl	8005388 <sd_get_r1>
 80057fc:	0003      	movs	r3, r0
 80057fe:	613b      	str	r3, [r7, #16]
		sd_nec();
 8005800:	f7ff fe49 	bl	8005496 <sd_nec>
		spi_cs_high();
 8005804:	2380      	movs	r3, #128	; 0x80
 8005806:	0219      	lsls	r1, r3, #8
 8005808:	23a0      	movs	r3, #160	; 0xa0
 800580a:	05db      	lsls	r3, r3, #23
 800580c:	2201      	movs	r2, #1
 800580e:	0018      	movs	r0, r3
 8005810:	f7fc f996 	bl	8001b40 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2bff      	cmp	r3, #255	; 0xff
 8005818:	d035      	beq.n	8005886 <sd_init+0x3c8>
			goto err_spi;
		if (r & 0xfe) {
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	22fe      	movs	r2, #254	; 0xfe
 800581e:	4013      	ands	r3, r2
 8005820:	d13f      	bne.n	80058a2 <sd_init+0x3e4>
		}
	}


	/* crc on */
	spi_cs_low();
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	0219      	lsls	r1, r3, #8
 8005826:	23a0      	movs	r3, #160	; 0xa0
 8005828:	05db      	lsls	r3, r3, #23
 800582a:	2200      	movs	r2, #0
 800582c:	0018      	movs	r0, r3
 800582e:	f7fc f987 	bl	8001b40 <HAL_GPIO_WritePin>
	sd_cmd(59, 0);
 8005832:	2100      	movs	r1, #0
 8005834:	203b      	movs	r0, #59	; 0x3b
 8005836:	f7ff fd34 	bl	80052a2 <sd_cmd>
	r = sd_get_r1();
 800583a:	f7ff fda5 	bl	8005388 <sd_get_r1>
 800583e:	0003      	movs	r3, r0
 8005840:	613b      	str	r3, [r7, #16]
	sd_nec();
 8005842:	f7ff fe28 	bl	8005496 <sd_nec>
	spi_cs_high();
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	0219      	lsls	r1, r3, #8
 800584a:	23a0      	movs	r3, #160	; 0xa0
 800584c:	05db      	lsls	r3, r3, #23
 800584e:	2201      	movs	r2, #1
 8005850:	0018      	movs	r0, r3
 8005852:	f7fc f975 	bl	8001b40 <HAL_GPIO_WritePin>
	if (r == 0xff)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2bff      	cmp	r3, #255	; 0xff
 800585a:	d016      	beq.n	800588a <sd_init+0x3cc>
		goto err_spi;
	if (r & 0xfe) {
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	22fe      	movs	r2, #254	; 0xfe
 8005860:	4013      	ands	r3, r2
 8005862:	d120      	bne.n	80058a6 <sd_init+0x3e8>
		goto err;
	}


	/* now we can up the clock to <= 25 MHz */
	spi_set_speed(SD_SPEED_25MHZ);
 8005864:	2002      	movs	r0, #2
 8005866:	f7ff fca9 	bl	80051bc <spi_set_speed>

	return 0;
 800586a:	2300      	movs	r3, #0
 800586c:	e01e      	b.n	80058ac <sd_init+0x3ee>
		goto err_spi;
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	e00c      	b.n	800588c <sd_init+0x3ce>
		goto err_spi;
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	e00a      	b.n	800588c <sd_init+0x3ce>
		goto err_spi;
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	e008      	b.n	800588c <sd_init+0x3ce>
			goto err_spi;
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	e006      	b.n	800588c <sd_init+0x3ce>
			goto err_spi;
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	e004      	b.n	800588c <sd_init+0x3ce>
			goto err_spi;
 8005882:	46c0      	nop			; (mov r8, r8)
 8005884:	e002      	b.n	800588c <sd_init+0x3ce>
			goto err_spi;
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	e000      	b.n	800588c <sd_init+0x3ce>
		goto err_spi;
 800588a:	46c0      	nop			; (mov r8, r8)

 err_spi:
	return -1;
 800588c:	2301      	movs	r3, #1
 800588e:	425b      	negs	r3, r3
 8005890:	e00c      	b.n	80058ac <sd_init+0x3ee>
		goto err;
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	e008      	b.n	80058a8 <sd_init+0x3ea>
			goto err;
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	e006      	b.n	80058a8 <sd_init+0x3ea>
			goto err;
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	e004      	b.n	80058a8 <sd_init+0x3ea>
		goto err;
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	e002      	b.n	80058a8 <sd_init+0x3ea>
			goto err;
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	e000      	b.n	80058a8 <sd_init+0x3ea>
		goto err;
 80058a6:	46c0      	nop			; (mov r8, r8)
 err:
	return -2;
 80058a8:	2302      	movs	r3, #2
 80058aa:	425b      	negs	r3, r3
}
 80058ac:	0018      	movs	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b00a      	add	sp, #40	; 0x28
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <sd_read_status>:

static int sd_read_status(hwif *hw)
{
 80058b4:	b5b0      	push	{r4, r5, r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
	uint16_t r2;

	spi_cs_low();
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	0219      	lsls	r1, r3, #8
 80058c0:	23a0      	movs	r3, #160	; 0xa0
 80058c2:	05db      	lsls	r3, r3, #23
 80058c4:	2200      	movs	r2, #0
 80058c6:	0018      	movs	r0, r3
 80058c8:	f7fc f93a 	bl	8001b40 <HAL_GPIO_WritePin>
	sd_cmd(13, 0);
 80058cc:	2100      	movs	r1, #0
 80058ce:	200d      	movs	r0, #13
 80058d0:	f7ff fce7 	bl	80052a2 <sd_cmd>
	r2 = sd_get_r2();
 80058d4:	250e      	movs	r5, #14
 80058d6:	197c      	adds	r4, r7, r5
 80058d8:	f7ff fd75 	bl	80053c6 <sd_get_r2>
 80058dc:	0003      	movs	r3, r0
 80058de:	8023      	strh	r3, [r4, #0]
	sd_nec();
 80058e0:	f7ff fdd9 	bl	8005496 <sd_nec>
	spi_cs_high();
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	0219      	lsls	r1, r3, #8
 80058e8:	23a0      	movs	r3, #160	; 0xa0
 80058ea:	05db      	lsls	r3, r3, #23
 80058ec:	2201      	movs	r2, #1
 80058ee:	0018      	movs	r0, r3
 80058f0:	f7fc f926 	bl	8001b40 <HAL_GPIO_WritePin>
	if (r2 & 0x8000)
 80058f4:	197b      	adds	r3, r7, r5
 80058f6:	2200      	movs	r2, #0
 80058f8:	5e9b      	ldrsh	r3, [r3, r2]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da02      	bge.n	8005904 <sd_read_status+0x50>
		return -1;
 80058fe:	2301      	movs	r3, #1
 8005900:	425b      	negs	r3, r3
 8005902:	e006      	b.n	8005912 <sd_read_status+0x5e>
	if (r2)
 8005904:	230e      	movs	r3, #14
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <sd_read_status+0x5e>

	return 0;
 800590e:	2300      	movs	r3, #0
 8005910:	e7ff      	b.n	8005912 <sd_read_status+0x5e>
}
 8005912:	0018      	movs	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	b004      	add	sp, #16
 8005918:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800591c <sd_get_data>:

/* 0xfe marks data start, then len bytes of data and crc16 */
static int sd_get_data(hwif *hw, uint8_t *buf, int len)
{
 800591c:	b5b0      	push	{r4, r5, r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
	int tries = 20000;
 8005928:	4b17      	ldr	r3, [pc, #92]	; (8005988 <sd_get_data+0x6c>)
 800592a:	617b      	str	r3, [r7, #20]
	uint8_t r;
	uint16_t _crc16;
	uint16_t calc_crc;
	int i;

	while (tries--) {
 800592c:	e00a      	b.n	8005944 <sd_get_data+0x28>
		r = spi_txrx(0xff);
 800592e:	2513      	movs	r5, #19
 8005930:	197c      	adds	r4, r7, r5
 8005932:	20ff      	movs	r0, #255	; 0xff
 8005934:	f7ff fc64 	bl	8005200 <spi_txrx>
 8005938:	0003      	movs	r3, r0
 800593a:	7023      	strb	r3, [r4, #0]
		if (r == 0xfe)
 800593c:	197b      	adds	r3, r7, r5
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2bfe      	cmp	r3, #254	; 0xfe
 8005942:	d005      	beq.n	8005950 <sd_get_data+0x34>
	while (tries--) {
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	1e5a      	subs	r2, r3, #1
 8005948:	617a      	str	r2, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1ef      	bne.n	800592e <sd_get_data+0x12>
 800594e:	e000      	b.n	8005952 <sd_get_data+0x36>
			break;
 8005950:	46c0      	nop			; (mov r8, r8)
	}
	if (tries < 0)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	da02      	bge.n	800595e <sd_get_data+0x42>
		return -1;
 8005958:	2301      	movs	r3, #1
 800595a:	425b      	negs	r3, r3
 800595c:	e010      	b.n	8005980 <sd_get_data+0x64>

	//for (i=0; i<len; i++)
	//	buf[i] = spi_txrx(0xff);
	dma_complete = 0;
 800595e:	4b0b      	ldr	r3, [pc, #44]	; (800598c <sd_get_data+0x70>)
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	b29a      	uxth	r2, r3
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <sd_get_data+0x74>)
 800596c:	0018      	movs	r0, r3
 800596e:	f7fd fab1 	bl	8002ed4 <HAL_SPI_Receive_DMA>
	while (dma_complete == 0);
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <sd_get_data+0x70>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0fa      	beq.n	8005974 <sd_get_data+0x58>
	//calc_crc = crc16(buf, len);
	//if (_crc16 != calc_crc) {
	//	return -1;
	//}

	return 0;
 800597e:	2300      	movs	r3, #0
}
 8005980:	0018      	movs	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	b006      	add	sp, #24
 8005986:	bdb0      	pop	{r4, r5, r7, pc}
 8005988:	00004e20 	.word	0x00004e20
 800598c:	20000b5c 	.word	0x20000b5c
 8005990:	200002cc 	.word	0x200002cc

08005994 <sd_read_csd>:

	return r;
}

static int sd_read_csd(hwif *hw)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	uint8_t buf[16];
	int r;
	int capacity;

	spi_cs_low();
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	0219      	lsls	r1, r3, #8
 80059a0:	23a0      	movs	r3, #160	; 0xa0
 80059a2:	05db      	lsls	r3, r3, #23
 80059a4:	2200      	movs	r2, #0
 80059a6:	0018      	movs	r0, r3
 80059a8:	f7fc f8ca 	bl	8001b40 <HAL_GPIO_WritePin>
	sd_cmd(9, 0);
 80059ac:	2100      	movs	r1, #0
 80059ae:	2009      	movs	r0, #9
 80059b0:	f7ff fc77 	bl	80052a2 <sd_cmd>
	r = sd_get_r1();
 80059b4:	f7ff fce8 	bl	8005388 <sd_get_r1>
 80059b8:	0003      	movs	r3, r0
 80059ba:	61bb      	str	r3, [r7, #24]
	if (r == 0xff) {
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2bff      	cmp	r3, #255	; 0xff
 80059c0:	d10a      	bne.n	80059d8 <sd_read_csd+0x44>
		spi_cs_high();
 80059c2:	2380      	movs	r3, #128	; 0x80
 80059c4:	0219      	lsls	r1, r3, #8
 80059c6:	23a0      	movs	r3, #160	; 0xa0
 80059c8:	05db      	lsls	r3, r3, #23
 80059ca:	2201      	movs	r2, #1
 80059cc:	0018      	movs	r0, r3
 80059ce:	f7fc f8b7 	bl	8001b40 <HAL_GPIO_WritePin>
		return -1;
 80059d2:	2301      	movs	r3, #1
 80059d4:	425b      	negs	r3, r3
 80059d6:	e086      	b.n	8005ae6 <sd_read_csd+0x152>
	}
	if (r & 0xfe) {
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	22fe      	movs	r2, #254	; 0xfe
 80059dc:	4013      	ands	r3, r2
 80059de:	d00a      	beq.n	80059f6 <sd_read_csd+0x62>
		spi_cs_high();
 80059e0:	2380      	movs	r3, #128	; 0x80
 80059e2:	0219      	lsls	r1, r3, #8
 80059e4:	23a0      	movs	r3, #160	; 0xa0
 80059e6:	05db      	lsls	r3, r3, #23
 80059e8:	2201      	movs	r2, #1
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7fc f8a8 	bl	8001b40 <HAL_GPIO_WritePin>
		return -2;
 80059f0:	2302      	movs	r3, #2
 80059f2:	425b      	negs	r3, r3
 80059f4:	e077      	b.n	8005ae6 <sd_read_csd+0x152>
	}

	r = sd_get_data(hw, buf, 16);
 80059f6:	2308      	movs	r3, #8
 80059f8:	18f9      	adds	r1, r7, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2210      	movs	r2, #16
 80059fe:	0018      	movs	r0, r3
 8005a00:	f7ff ff8c 	bl	800591c <sd_get_data>
 8005a04:	0003      	movs	r3, r0
 8005a06:	61bb      	str	r3, [r7, #24]
	sd_nec();
 8005a08:	f7ff fd45 	bl	8005496 <sd_nec>
	spi_cs_high();
 8005a0c:	2380      	movs	r3, #128	; 0x80
 8005a0e:	0219      	lsls	r1, r3, #8
 8005a10:	23a0      	movs	r3, #160	; 0xa0
 8005a12:	05db      	lsls	r3, r3, #23
 8005a14:	2201      	movs	r2, #1
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7fc f892 	bl	8001b40 <HAL_GPIO_WritePin>
	if (r == -1) {
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	d102      	bne.n	8005a28 <sd_read_csd+0x94>
		return -3;
 8005a22:	2303      	movs	r3, #3
 8005a24:	425b      	negs	r3, r3
 8005a26:	e05e      	b.n	8005ae6 <sd_read_csd+0x152>
	}

	if ((buf[0] >> 6) + 1 == 1) {
 8005a28:	2008      	movs	r0, #8
 8005a2a:	183b      	adds	r3, r7, r0
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	099b      	lsrs	r3, r3, #6
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d125      	bne.n	8005a82 <sd_read_csd+0xee>
	/* CSD v1 */

	capacity = (((buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6)+1) << (2+(((buf[9]&3) << 1) | buf[10]>>7)) << ((buf[5] & 0xf) - 9);
 8005a36:	183b      	adds	r3, r7, r0
 8005a38:	799b      	ldrb	r3, [r3, #6]
 8005a3a:	029a      	lsls	r2, r3, #10
 8005a3c:	23c0      	movs	r3, #192	; 0xc0
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	401a      	ands	r2, r3
 8005a42:	183b      	adds	r3, r7, r0
 8005a44:	79db      	ldrb	r3, [r3, #7]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	183a      	adds	r2, r7, r0
 8005a4c:	7a12      	ldrb	r2, [r2, #8]
 8005a4e:	0992      	lsrs	r2, r2, #6
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	4313      	orrs	r3, r2
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	183b      	adds	r3, r7, r0
 8005a58:	7a5b      	ldrb	r3, [r3, #9]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	2106      	movs	r1, #6
 8005a5e:	400b      	ands	r3, r1
 8005a60:	1839      	adds	r1, r7, r0
 8005a62:	7a89      	ldrb	r1, [r1, #10]
 8005a64:	09c9      	lsrs	r1, r1, #7
 8005a66:	b2c9      	uxtb	r1, r1
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	3302      	adds	r3, #2
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	183b      	adds	r3, r7, r0
 8005a70:	795b      	ldrb	r3, [r3, #5]
 8005a72:	0019      	movs	r1, r3
 8005a74:	230f      	movs	r3, #15
 8005a76:	400b      	ands	r3, r1
 8005a78:	3b09      	subs	r3, #9
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	0013      	movs	r3, r2
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	e014      	b.n	8005aac <sd_read_csd+0x118>
	/* ^ = (c_size+1) * 2**(c_size_mult+2) * 2**(read_bl_len-9) */

	} else {
	/* CSD v2 */
		/* this means the card is HC */
		hw->capabilities |= CAP_SDHC;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2202      	movs	r2, #2
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60da      	str	r2, [r3, #12]

	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 8005a8e:	2108      	movs	r1, #8
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	79db      	ldrb	r3, [r3, #7]
 8005a94:	041a      	lsls	r2, r3, #16
 8005a96:	187b      	adds	r3, r7, r1
 8005a98:	7a1b      	ldrb	r3, [r3, #8]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	187a      	adds	r2, r7, r1
 8005aa0:	7a52      	ldrb	r2, [r2, #9]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61fb      	str	r3, [r7, #28]
	capacity *= 1024; /* in 512 B sectors */
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	61fb      	str	r3, [r7, #28]

	}

	hw->sectors = capacity;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	605a      	str	r2, [r3, #4]

	/* if erase_blk_en = 0, then only this many sectors can be erased at once
	 * this is NOT yet tested */
	hw->erase_sectors = 1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	609a      	str	r2, [r3, #8]
	if (((buf[10]>>6)&1) == 0)
 8005ab8:	2108      	movs	r1, #8
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	7a9b      	ldrb	r3, [r3, #10]
 8005abe:	099b      	lsrs	r3, r3, #6
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d10c      	bne.n	8005ae4 <sd_read_csd+0x150>
		hw->erase_sectors = ((buf[10]&0x3f)<<1 | buf[11]>>7) + 1;
 8005aca:	187b      	adds	r3, r7, r1
 8005acc:	7a9b      	ldrb	r3, [r3, #10]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	227e      	movs	r2, #126	; 0x7e
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	187a      	adds	r2, r7, r1
 8005ad6:	7ad2      	ldrb	r2, [r2, #11]
 8005ad8:	09d2      	lsrs	r2, r2, #7
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	4313      	orrs	r3, r2
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	609a      	str	r2, [r3, #8]

	return 0;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	b008      	add	sp, #32
 8005aec:	bd80      	pop	{r7, pc}

08005aee <sd_read_cid>:

static int sd_read_cid(hwif *hw)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b088      	sub	sp, #32
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
	uint8_t buf[16];
	int r;

	spi_cs_low();
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	0219      	lsls	r1, r3, #8
 8005afa:	23a0      	movs	r3, #160	; 0xa0
 8005afc:	05db      	lsls	r3, r3, #23
 8005afe:	2200      	movs	r2, #0
 8005b00:	0018      	movs	r0, r3
 8005b02:	f7fc f81d 	bl	8001b40 <HAL_GPIO_WritePin>
	sd_cmd(10, 0);
 8005b06:	2100      	movs	r1, #0
 8005b08:	200a      	movs	r0, #10
 8005b0a:	f7ff fbca 	bl	80052a2 <sd_cmd>
	r = sd_get_r1();
 8005b0e:	f7ff fc3b 	bl	8005388 <sd_get_r1>
 8005b12:	0003      	movs	r3, r0
 8005b14:	61fb      	str	r3, [r7, #28]
	if (r == 0xff) {
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	2bff      	cmp	r3, #255	; 0xff
 8005b1a:	d10a      	bne.n	8005b32 <sd_read_cid+0x44>
		spi_cs_high();
 8005b1c:	2380      	movs	r3, #128	; 0x80
 8005b1e:	0219      	lsls	r1, r3, #8
 8005b20:	23a0      	movs	r3, #160	; 0xa0
 8005b22:	05db      	lsls	r3, r3, #23
 8005b24:	2201      	movs	r2, #1
 8005b26:	0018      	movs	r0, r3
 8005b28:	f7fc f80a 	bl	8001b40 <HAL_GPIO_WritePin>
		return -1;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	425b      	negs	r3, r3
 8005b30:	e028      	b.n	8005b84 <sd_read_cid+0x96>
	}
	if (r & 0xfe) {
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	22fe      	movs	r2, #254	; 0xfe
 8005b36:	4013      	ands	r3, r2
 8005b38:	d00a      	beq.n	8005b50 <sd_read_cid+0x62>
		spi_cs_high();
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	0219      	lsls	r1, r3, #8
 8005b3e:	23a0      	movs	r3, #160	; 0xa0
 8005b40:	05db      	lsls	r3, r3, #23
 8005b42:	2201      	movs	r2, #1
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7fb fffb 	bl	8001b40 <HAL_GPIO_WritePin>
		return -2;
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	425b      	negs	r3, r3
 8005b4e:	e019      	b.n	8005b84 <sd_read_cid+0x96>
	}

	r = sd_get_data(hw, buf, 16);
 8005b50:	230c      	movs	r3, #12
 8005b52:	18f9      	adds	r1, r7, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2210      	movs	r2, #16
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f7ff fedf 	bl	800591c <sd_get_data>
 8005b5e:	0003      	movs	r3, r0
 8005b60:	61fb      	str	r3, [r7, #28]
	sd_nec();
 8005b62:	f7ff fc98 	bl	8005496 <sd_nec>
	spi_cs_high();
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	0219      	lsls	r1, r3, #8
 8005b6a:	23a0      	movs	r3, #160	; 0xa0
 8005b6c:	05db      	lsls	r3, r3, #23
 8005b6e:	2201      	movs	r2, #1
 8005b70:	0018      	movs	r0, r3
 8005b72:	f7fb ffe5 	bl	8001b40 <HAL_GPIO_WritePin>
	if (r == -1) {
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	d102      	bne.n	8005b82 <sd_read_cid+0x94>
		return -3;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	425b      	negs	r3, r3
 8005b80:	e000      	b.n	8005b84 <sd_read_cid+0x96>
	}

	return 0;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	0018      	movs	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b008      	add	sp, #32
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <sd_readsector>:


static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
	int r;

	spi_cs_low();
 8005b98:	2380      	movs	r3, #128	; 0x80
 8005b9a:	0219      	lsls	r1, r3, #8
 8005b9c:	23a0      	movs	r3, #160	; 0xa0
 8005b9e:	05db      	lsls	r3, r3, #23
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f7fb ffcc 	bl	8001b40 <HAL_GPIO_WritePin>
	if (hw->capabilities & CAP_SDHC)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	2202      	movs	r2, #2
 8005bae:	4013      	ands	r3, r2
 8005bb0:	d005      	beq.n	8005bbe <sd_readsector+0x32>
		sd_cmd(17, address); /* read single block */
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	0019      	movs	r1, r3
 8005bb6:	2011      	movs	r0, #17
 8005bb8:	f7ff fb73 	bl	80052a2 <sd_cmd>
 8005bbc:	e005      	b.n	8005bca <sd_readsector+0x3e>
	else
		sd_cmd(17, address*512); /* read single block */
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	025b      	lsls	r3, r3, #9
 8005bc2:	0019      	movs	r1, r3
 8005bc4:	2011      	movs	r0, #17
 8005bc6:	f7ff fb6c 	bl	80052a2 <sd_cmd>

	r = sd_get_r1();
 8005bca:	f7ff fbdd 	bl	8005388 <sd_get_r1>
 8005bce:	0003      	movs	r3, r0
 8005bd0:	617b      	str	r3, [r7, #20]
	if (r == 0xff) {
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2bff      	cmp	r3, #255	; 0xff
 8005bd6:	d10b      	bne.n	8005bf0 <sd_readsector+0x64>
		spi_cs_high();
 8005bd8:	2380      	movs	r3, #128	; 0x80
 8005bda:	0219      	lsls	r1, r3, #8
 8005bdc:	23a0      	movs	r3, #160	; 0xa0
 8005bde:	05db      	lsls	r3, r3, #23
 8005be0:	2201      	movs	r2, #1
 8005be2:	0018      	movs	r0, r3
 8005be4:	f7fb ffac 	bl	8001b40 <HAL_GPIO_WritePin>
		r = -1;
 8005be8:	2301      	movs	r3, #1
 8005bea:	425b      	negs	r3, r3
 8005bec:	617b      	str	r3, [r7, #20]
		goto fail;
 8005bee:	e02b      	b.n	8005c48 <sd_readsector+0xbc>
	}
	if (r & 0xfe) {
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	22fe      	movs	r2, #254	; 0xfe
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <sd_readsector+0x84>
		spi_cs_high();
 8005bf8:	2380      	movs	r3, #128	; 0x80
 8005bfa:	0219      	lsls	r1, r3, #8
 8005bfc:	23a0      	movs	r3, #160	; 0xa0
 8005bfe:	05db      	lsls	r3, r3, #23
 8005c00:	2201      	movs	r2, #1
 8005c02:	0018      	movs	r0, r3
 8005c04:	f7fb ff9c 	bl	8001b40 <HAL_GPIO_WritePin>
		r = -2;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	425b      	negs	r3, r3
 8005c0c:	617b      	str	r3, [r7, #20]
		goto fail;
 8005c0e:	e01b      	b.n	8005c48 <sd_readsector+0xbc>
	}

	r = sd_get_data(hw, buf, 512);
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	009a      	lsls	r2, r3, #2
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f7ff fe7f 	bl	800591c <sd_get_data>
 8005c1e:	0003      	movs	r3, r0
 8005c20:	617b      	str	r3, [r7, #20]
	sd_nec();
 8005c22:	f7ff fc38 	bl	8005496 <sd_nec>
	spi_cs_high();
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	0219      	lsls	r1, r3, #8
 8005c2a:	23a0      	movs	r3, #160	; 0xa0
 8005c2c:	05db      	lsls	r3, r3, #23
 8005c2e:	2201      	movs	r2, #1
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7fb ff85 	bl	8001b40 <HAL_GPIO_WritePin>
	if (r == -1) {
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	d103      	bne.n	8005c44 <sd_readsector+0xb8>
		r = -3;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	425b      	negs	r3, r3
 8005c40:	617b      	str	r3, [r7, #20]
		goto fail;
 8005c42:	e001      	b.n	8005c48 <sd_readsector+0xbc>
	}

	return 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e000      	b.n	8005c4a <sd_readsector+0xbe>
 fail:
	return r;
 8005c48:	697b      	ldr	r3, [r7, #20]
}
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b006      	add	sp, #24
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <hwif_init>:


/*** public API - on top of sd/spi code ***/

int hwif_init(hwif* hw)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
	int tries = 10;
 8005c5a:	230a      	movs	r3, #10
 8005c5c:	60fb      	str	r3, [r7, #12]

	if (hw->initialized)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <hwif_init+0x18>
		return 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e02a      	b.n	8005cc0 <hwif_init+0x6e>

	spi_init();
 8005c6a:	f7ff fa9f 	bl	80051ac <spi_init>

	while (tries--) {
 8005c6e:	e005      	b.n	8005c7c <hwif_init+0x2a>
		if (sd_init(hw) == 0)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f7ff fc23 	bl	80054be <sd_init>
 8005c78:	1e03      	subs	r3, r0, #0
 8005c7a:	d005      	beq.n	8005c88 <hwif_init+0x36>
	while (tries--) {
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	1e5a      	subs	r2, r3, #1
 8005c80:	60fa      	str	r2, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f4      	bne.n	8005c70 <hwif_init+0x1e>
 8005c86:	e000      	b.n	8005c8a <hwif_init+0x38>
			break;
 8005c88:	46c0      	nop			; (mov r8, r8)
	}
	if (tries == -1)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	d102      	bne.n	8005c96 <hwif_init+0x44>
		return -1;
 8005c90:	2301      	movs	r3, #1
 8005c92:	425b      	negs	r3, r3
 8005c94:	e014      	b.n	8005cc0 <hwif_init+0x6e>

	/* read status register */
	sd_read_status(hw);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f7ff fe0b 	bl	80058b4 <sd_read_status>

	sd_read_cid(hw);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7ff ff24 	bl	8005aee <sd_read_cid>
	if (sd_read_csd(hw) != 0)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7ff fe73 	bl	8005994 <sd_read_csd>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d002      	beq.n	8005cb8 <hwif_init+0x66>
		return -1;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	425b      	negs	r3, r3
 8005cb6:	e003      	b.n	8005cc0 <hwif_init+0x6e>

	hw->initialized = 1;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
	return 0;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b004      	add	sp, #16
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <sd_read>:

int sd_read(hwif* hw, uint32_t address, uint8_t *buf)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
	int r;
	int tries = 10;
 8005cd4:	230a      	movs	r3, #10
 8005cd6:	613b      	str	r3, [r7, #16]

	r = sd_readsector(hw, address, buf);
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7ff ff54 	bl	8005b8c <sd_readsector>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	617b      	str	r3, [r7, #20]

	while (r < 0 && tries--) {
 8005ce8:	e012      	b.n	8005d10 <sd_read+0x48>
		if (sd_init(hw) != 0)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7ff fbe6 	bl	80054be <sd_init>
 8005cf2:	1e03      	subs	r3, r0, #0
 8005cf4:	d000      	beq.n	8005cf8 <sd_read+0x30>
			continue;
 8005cf6:	e00b      	b.n	8005d10 <sd_read+0x48>

		// read status register
		sd_read_status(hw);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7ff fdda 	bl	80058b4 <sd_read_status>

		r = sd_readsector(hw, address, buf);
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	0018      	movs	r0, r3
 8005d08:	f7ff ff40 	bl	8005b8c <sd_readsector>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	617b      	str	r3, [r7, #20]
	while (r < 0 && tries--) {
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	da04      	bge.n	8005d20 <sd_read+0x58>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1e5a      	subs	r2, r3, #1
 8005d1a:	613a      	str	r2, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e4      	bne.n	8005cea <sd_read+0x22>
	}
	if (tries == -1)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	3301      	adds	r3, #1
 8005d24:	d101      	bne.n	8005d2a <sd_read+0x62>

	return r;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	e7ff      	b.n	8005d2a <sd_read+0x62>
}
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	b006      	add	sp, #24
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_SPI_RxCpltCallback>:
	if (tries == -1)

	return r;
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
    dma_complete = 1;
 8005d3c:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <HAL_SPI_RxCpltCallback+0x18>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]
	return;
 8005d42:	46c0      	nop			; (mov r8, r8)
}
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b002      	add	sp, #8
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	20000b5c 	.word	0x20000b5c

08005d50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005d64:	e007      	b.n	8005d76 <mem_cpy+0x26>
		*d++ = *s++;
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	1c53      	adds	r3, r2, #1
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	6179      	str	r1, [r7, #20]
 8005d72:	7812      	ldrb	r2, [r2, #0]
 8005d74:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	1e5a      	subs	r2, r3, #1
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f2      	bne.n	8005d66 <mem_cpy+0x16>
}
 8005d80:	46c0      	nop			; (mov r8, r8)
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b006      	add	sp, #24
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b086      	sub	sp, #24
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005d9a:	e005      	b.n	8005da8 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	617a      	str	r2, [r7, #20]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	1e5a      	subs	r2, r3, #1
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f4      	bne.n	8005d9c <mem_set+0x12>
}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	46c0      	nop			; (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b006      	add	sp, #24
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005dd4:	46c0      	nop			; (mov r8, r8)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	1e5a      	subs	r2, r3, #1
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00d      	beq.n	8005dfc <mem_cmp+0x40>
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	61fa      	str	r2, [r7, #28]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	0019      	movs	r1, r3
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	61ba      	str	r2, [r7, #24]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	1acb      	subs	r3, r1, r3
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0ec      	beq.n	8005dd6 <mem_cmp+0x1a>
	return r;
 8005dfc:	697b      	ldr	r3, [r7, #20]
}
 8005dfe:	0018      	movs	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b008      	add	sp, #32
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e10:	e002      	b.n	8005e18 <chk_chr+0x12>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3301      	adds	r3, #1
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <chk_chr+0x26>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	001a      	movs	r2, r3
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d1f2      	bne.n	8005e12 <chk_chr+0xc>
	return *str;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
}
 8005e30:	0018      	movs	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b002      	add	sp, #8
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <move_window>:
static
FRESULT move_window (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e42:	240f      	movs	r4, #15
 8005e44:	193b      	adds	r3, r7, r4
 8005e46:	2200      	movs	r2, #0
 8005e48:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d017      	beq.n	8005e84 <move_window+0x4c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e54:	193b      	adds	r3, r7, r4
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d113      	bne.n	8005e84 <move_window+0x4c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	7858      	ldrb	r0, [r3, #1]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3328      	adds	r3, #40	; 0x28
 8005e64:	0019      	movs	r1, r3
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f7ff f973 	bl	8005154 <disk_read>
 8005e6e:	1e03      	subs	r3, r0, #0
 8005e70:	d005      	beq.n	8005e7e <move_window+0x46>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e72:	2301      	movs	r3, #1
 8005e74:	425b      	negs	r3, r3
 8005e76:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e78:	193b      	adds	r3, r7, r4
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
	return res;
 8005e84:	230f      	movs	r3, #15
 8005e86:	18fb      	adds	r3, r7, r3
 8005e88:	781b      	ldrb	r3, [r3, #0]
}
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	b005      	add	sp, #20
 8005e90:	bd90      	pop	{r4, r7, pc}

08005e92 <clust2sect>:

DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	3b02      	subs	r3, #2
 8005ea0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	3b02      	subs	r3, #2
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d301      	bcc.n	8005eb2 <clust2sect+0x20>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e007      	b.n	8005ec2 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	789b      	ldrb	r3, [r3, #2]
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	435a      	muls	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	18d3      	adds	r3, r2, r3
}
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b002      	add	sp, #8
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b086      	sub	sp, #24
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d904      	bls.n	8005ee4 <get_fat+0x1a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <get_fat+0x20>
		val = 1;	/* Internal error */
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e0a8      	b.n	800603c <get_fat+0x172>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005eea:	2301      	movs	r3, #1
 8005eec:	425b      	negs	r3, r3
 8005eee:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d100      	bne.n	8005efa <get_fat+0x30>
 8005ef8:	e06c      	b.n	8005fd4 <get_fat+0x10a>
 8005efa:	dd00      	ble.n	8005efe <get_fat+0x34>
 8005efc:	e094      	b.n	8006028 <get_fat+0x15e>
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d002      	beq.n	8005f08 <get_fat+0x3e>
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d044      	beq.n	8005f90 <get_fat+0xc6>
 8005f06:	e08f      	b.n	8006028 <get_fat+0x15e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	085b      	lsrs	r3, r3, #1
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	18d3      	adds	r3, r2, r3
 8005f14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	0a5b      	lsrs	r3, r3, #9
 8005f1e:	18d2      	adds	r2, r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	0011      	movs	r1, r2
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7ff ff87 	bl	8005e38 <move_window>
 8005f2a:	1e03      	subs	r3, r0, #0
 8005f2c:	d000      	beq.n	8005f30 <get_fat+0x66>
 8005f2e:	e07e      	b.n	800602e <get_fat+0x164>
			wc = fs->win[bc++ % SS(fs)];
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	60fa      	str	r2, [r7, #12]
 8005f36:	05db      	lsls	r3, r3, #23
 8005f38:	0ddb      	lsrs	r3, r3, #23
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	2128      	movs	r1, #40	; 0x28
 8005f3e:	18d3      	adds	r3, r2, r3
 8005f40:	185b      	adds	r3, r3, r1
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	0a5b      	lsrs	r3, r3, #9
 8005f4e:	18d2      	adds	r2, r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	0011      	movs	r1, r2
 8005f54:	0018      	movs	r0, r3
 8005f56:	f7ff ff6f 	bl	8005e38 <move_window>
 8005f5a:	1e03      	subs	r3, r0, #0
 8005f5c:	d169      	bne.n	8006032 <get_fat+0x168>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	05db      	lsls	r3, r3, #23
 8005f62:	0ddb      	lsrs	r3, r3, #23
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	2128      	movs	r1, #40	; 0x28
 8005f68:	18d3      	adds	r3, r2, r3
 8005f6a:	185b      	adds	r3, r3, r1
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	001a      	movs	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d002      	beq.n	8005f86 <get_fat+0xbc>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	091b      	lsrs	r3, r3, #4
 8005f84:	e002      	b.n	8005f8c <get_fat+0xc2>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	051b      	lsls	r3, r3, #20
 8005f8a:	0d1b      	lsrs	r3, r3, #20
 8005f8c:	617b      	str	r3, [r7, #20]
			break;
 8005f8e:	e055      	b.n	800603c <get_fat+0x172>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	0a1b      	lsrs	r3, r3, #8
 8005f98:	18d2      	adds	r2, r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	0011      	movs	r1, r2
 8005f9e:	0018      	movs	r0, r3
 8005fa0:	f7ff ff4a 	bl	8005e38 <move_window>
 8005fa4:	1e03      	subs	r3, r0, #0
 8005fa6:	d146      	bne.n	8006036 <get_fat+0x16c>
			p = &fs->win[clst * 2 % SS(fs)];
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	005a      	lsls	r2, r3, #1
 8005fac:	23ff      	movs	r3, #255	; 0xff
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	3328      	adds	r3, #40	; 0x28
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	18d3      	adds	r3, r2, r3
 8005fb8:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	b21a      	sxth	r2, r3
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	b21b      	sxth	r3, r3
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	b21b      	sxth	r3, r3
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	617b      	str	r3, [r7, #20]
			break;
 8005fd2:	e033      	b.n	800603c <get_fat+0x172>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699a      	ldr	r2, [r3, #24]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	09db      	lsrs	r3, r3, #7
 8005fdc:	18d2      	adds	r2, r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	0011      	movs	r1, r2
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f7ff ff28 	bl	8005e38 <move_window>
 8005fe8:	1e03      	subs	r3, r0, #0
 8005fea:	d126      	bne.n	800603a <get_fat+0x170>
			p = &fs->win[clst * 4 % SS(fs)];
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	009a      	lsls	r2, r3, #2
 8005ff0:	23fe      	movs	r3, #254	; 0xfe
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	3328      	adds	r3, #40	; 0x28
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	18d3      	adds	r3, r2, r3
 8005ffc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3303      	adds	r3, #3
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	061a      	lsls	r2, r3, #24
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3302      	adds	r3, #2
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	041b      	lsls	r3, r3, #16
 800600e:	4313      	orrs	r3, r2
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	3201      	adds	r2, #1
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	0212      	lsls	r2, r2, #8
 8006018:	4313      	orrs	r3, r2
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	4313      	orrs	r3, r2
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	091b      	lsrs	r3, r3, #4
 8006024:	617b      	str	r3, [r7, #20]
			break;
 8006026:	e009      	b.n	800603c <get_fat+0x172>

		default:
			val = 1;	/* Internal error */
 8006028:	2301      	movs	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e006      	b.n	800603c <get_fat+0x172>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	e004      	b.n	800603c <get_fat+0x172>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	e002      	b.n	800603c <get_fat+0x172>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	e000      	b.n	800603c <get_fat+0x172>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800603a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 800603c:	697b      	ldr	r3, [r7, #20]
}
 800603e:	0018      	movs	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	b006      	add	sp, #24
 8006044:	bd80      	pop	{r7, pc}

08006046 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b086      	sub	sp, #24
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	b29a      	uxth	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d005      	beq.n	8006070 <dir_sdi+0x2a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	429a      	cmp	r2, r3
 800606e:	d301      	bcc.n	8006074 <dir_sdi+0x2e>
		return FR_INT_ERR;
 8006070:	2302      	movs	r3, #2
 8006072:	e066      	b.n	8006142 <dir_sdi+0xfc>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d108      	bne.n	800608c <dir_sdi+0x46>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b03      	cmp	r3, #3
 8006082:	d103      	bne.n	800608c <dir_sdi+0x46>
		clst = dp->fs->dirbase;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10d      	bne.n	80060ae <dir_sdi+0x68>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	891b      	ldrh	r3, [r3, #8]
 8006098:	001a      	movs	r2, r3
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	4293      	cmp	r3, r2
 800609e:	d301      	bcc.n	80060a4 <dir_sdi+0x5e>
			return FR_INT_ERR;
 80060a0:	2302      	movs	r3, #2
 80060a2:	e04e      	b.n	8006142 <dir_sdi+0xfc>
		sect = dp->fs->dirbase;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	e02f      	b.n	800610e <dir_sdi+0xc8>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	789b      	ldrb	r3, [r3, #2]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80060b8:	e01c      	b.n	80060f4 <dir_sdi+0xae>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	0011      	movs	r1, r2
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7ff ff01 	bl	8005eca <get_fat>
 80060c8:	0003      	movs	r3, r0
 80060ca:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	3301      	adds	r3, #1
 80060d0:	d101      	bne.n	80060d6 <dir_sdi+0x90>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e035      	b.n	8006142 <dir_sdi+0xfc>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d905      	bls.n	80060e8 <dir_sdi+0xa2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d301      	bcc.n	80060ec <dir_sdi+0xa6>
				return FR_INT_ERR;
 80060e8:	2302      	movs	r3, #2
 80060ea:	e02a      	b.n	8006142 <dir_sdi+0xfc>
			idx -= ic;
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d2de      	bcs.n	80060ba <dir_sdi+0x74>
		}
		sect = clust2sect(dp->fs, clst);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	0011      	movs	r1, r2
 8006104:	0018      	movs	r0, r3
 8006106:	f7ff fec4 	bl	8005e92 <clust2sect>
 800610a:	0003      	movs	r3, r0
 800610c:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <dir_sdi+0xd8>
 800611a:	2302      	movs	r3, #2
 800611c:	e011      	b.n	8006142 <dir_sdi+0xfc>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	091a      	lsrs	r2, r3, #4
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	18d2      	adds	r2, r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3328      	adds	r3, #40	; 0x28
 8006130:	001a      	movs	r2, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	210f      	movs	r1, #15
 8006136:	400b      	ands	r3, r1
 8006138:	015b      	lsls	r3, r3, #5
 800613a:	18d2      	adds	r2, r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	0018      	movs	r0, r3
 8006144:	46bd      	mov	sp, r7
 8006146:	b006      	add	sp, #24
 8006148:	bd80      	pop	{r7, pc}

0800614a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	88db      	ldrh	r3, [r3, #6]
 8006158:	3301      	adds	r3, #1
 800615a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	041b      	lsls	r3, r3, #16
 8006160:	0c1b      	lsrs	r3, r3, #16
 8006162:	d003      	beq.n	800616c <dir_next+0x22>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <dir_next+0x26>
		return FR_NO_FILE;
 800616c:	2304      	movs	r3, #4
 800616e:	e05b      	b.n	8006228 <dir_next+0xde>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	220f      	movs	r2, #15
 8006174:	4013      	ands	r3, r2
 8006176:	d147      	bne.n	8006208 <dir_next+0xbe>
		dp->sect++;					/* Next sector */
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d108      	bne.n	800619c <dir_next+0x52>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	891b      	ldrh	r3, [r3, #8]
 8006190:	001a      	movs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4293      	cmp	r3, r2
 8006196:	d337      	bcc.n	8006208 <dir_next+0xbe>
				return FR_NO_FILE;
 8006198:	2304      	movs	r3, #4
 800619a:	e045      	b.n	8006228 <dir_next+0xde>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	091a      	lsrs	r2, r3, #4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	789b      	ldrb	r3, [r3, #2]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	4013      	ands	r3, r2
 80061aa:	d12d      	bne.n	8006208 <dir_next+0xbe>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	0019      	movs	r1, r3
 80061b6:	0010      	movs	r0, r2
 80061b8:	f7ff fe87 	bl	8005eca <get_fat>
 80061bc:	0003      	movs	r3, r0
 80061be:	60bb      	str	r3, [r7, #8]
				if (clst <= 1) return FR_INT_ERR;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d801      	bhi.n	80061ca <dir_next+0x80>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e02e      	b.n	8006228 <dir_next+0xde>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	3301      	adds	r3, #1
 80061ce:	d101      	bne.n	80061d4 <dir_next+0x8a>
 80061d0:	2301      	movs	r3, #1
 80061d2:	e029      	b.n	8006228 <dir_next+0xde>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d306      	bcc.n	80061ee <dir_next+0xa4>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <dir_next+0xa0>
 80061e6:	2304      	movs	r3, #4
 80061e8:	e01e      	b.n	8006228 <dir_next+0xde>
					return FR_NO_FILE;							/* Report EOT */
 80061ea:	2304      	movs	r3, #4
 80061ec:	e01c      	b.n	8006228 <dir_next+0xde>
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	0011      	movs	r1, r2
 80061fc:	0018      	movs	r0, r3
 80061fe:	f7ff fe48 	bl	8005e92 <clust2sect>
 8006202:	0002      	movs	r2, r0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	b29a      	uxth	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3328      	adds	r3, #40	; 0x28
 8006216:	001a      	movs	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	210f      	movs	r1, #15
 800621c:	400b      	ands	r3, r1
 800621e:	015b      	lsls	r3, r3, #5
 8006220:	18d2      	adds	r2, r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	0018      	movs	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	b004      	add	sp, #16
 800622e:	bd80      	pop	{r7, pc}

08006230 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the SFN entry */
)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	331a      	adds	r3, #26
 800623e:	3301      	adds	r3, #1
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	b21a      	sxth	r2, r3
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	331a      	adds	r3, #26
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b21b      	sxth	r3, r3
 800624e:	4313      	orrs	r3, r2
 8006250:	b21b      	sxth	r3, r3
 8006252:	b29b      	uxth	r3, r3
 8006254:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b03      	cmp	r3, #3
 800625c:	d110      	bne.n	8006280 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	3314      	adds	r3, #20
 8006262:	3301      	adds	r3, #1
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	b21a      	sxth	r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	b21b      	sxth	r3, r3
 8006272:	4313      	orrs	r3, r2
 8006274:	b21b      	sxth	r3, r3
 8006276:	b29b      	uxth	r3, r3
 8006278:	041b      	lsls	r3, r3, #16
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

	return cl;
 8006280:	68fb      	ldr	r3, [r7, #12]
}
 8006282:	0018      	movs	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	b004      	add	sp, #16
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <cmp_lfn>:
static
int cmp_lfn (			/* 1:matched, 0:not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer to be compared */
	BYTE* dir			/* Pointer to the directory entry containing the part of LFN */
)
{
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (LD_WORD(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	331b      	adds	r3, #27
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	021b      	lsls	r3, r3, #8
 800629e:	b21a      	sxth	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	331a      	adds	r3, #26
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	b21b      	sxth	r3, r3
 80062a8:	4313      	orrs	r3, r2
 80062aa:	b21b      	sxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <cmp_lfn+0x28>
 80062b0:	2300      	movs	r3, #0
 80062b2:	e072      	b.n	800639a <cmp_lfn+0x10e>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	001a      	movs	r2, r3
 80062ba:	233f      	movs	r3, #63	; 0x3f
 80062bc:	4013      	ands	r3, r2
 80062be:	1e5a      	subs	r2, r3, #1
 80062c0:	0013      	movs	r3, r2
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	189b      	adds	r3, r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	189b      	adds	r3, r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80062cc:	230e      	movs	r3, #14
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	2201      	movs	r2, #1
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	2300      	movs	r3, #0
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	e047      	b.n	800636a <cmp_lfn+0xde>
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character */
 80062da:	4a32      	ldr	r2, [pc, #200]	; (80063a4 <cmp_lfn+0x118>)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	18d3      	adds	r3, r2, r3
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	18d3      	adds	r3, r2, r3
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	b21a      	sxth	r2, r3
 80062ee:	492d      	ldr	r1, [pc, #180]	; (80063a4 <cmp_lfn+0x118>)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	18cb      	adds	r3, r1, r3
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	0019      	movs	r1, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	185b      	adds	r3, r3, r1
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b21b      	sxth	r3, r3
 8006300:	4313      	orrs	r3, r2
 8006302:	b21a      	sxth	r2, r3
 8006304:	210c      	movs	r1, #12
 8006306:	187b      	adds	r3, r7, r1
 8006308:	801a      	strh	r2, [r3, #0]
		if (wc) {
 800630a:	230e      	movs	r3, #14
 800630c:	18fb      	adds	r3, r7, r3
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01f      	beq.n	8006354 <cmp_lfn+0xc8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2bfe      	cmp	r3, #254	; 0xfe
 8006318:	d813      	bhi.n	8006342 <cmp_lfn+0xb6>
 800631a:	187b      	adds	r3, r7, r1
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	0018      	movs	r0, r3
 8006320:	f7fe fe98 	bl	8005054 <ff_wtoupper>
 8006324:	0003      	movs	r3, r0
 8006326:	001c      	movs	r4, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	617a      	str	r2, [r7, #20]
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	18d3      	adds	r3, r2, r3
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	0018      	movs	r0, r3
 8006338:	f7fe fe8c 	bl	8005054 <ff_wtoupper>
 800633c:	0003      	movs	r3, r0
 800633e:	429c      	cmp	r4, r3
 8006340:	d001      	beq.n	8006346 <cmp_lfn+0xba>
				return 0;					/* Not matched */
 8006342:	2300      	movs	r3, #0
 8006344:	e029      	b.n	800639a <cmp_lfn+0x10e>
			wc = uc;
 8006346:	230e      	movs	r3, #14
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	220c      	movs	r2, #12
 800634c:	18ba      	adds	r2, r7, r2
 800634e:	8812      	ldrh	r2, [r2, #0]
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	e007      	b.n	8006364 <cmp_lfn+0xd8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006354:	230c      	movs	r3, #12
 8006356:	18fb      	adds	r3, r7, r3
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	4a13      	ldr	r2, [pc, #76]	; (80063a8 <cmp_lfn+0x11c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d001      	beq.n	8006364 <cmp_lfn+0xd8>
 8006360:	2300      	movs	r3, #0
 8006362:	e01a      	b.n	800639a <cmp_lfn+0x10e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	3301      	adds	r3, #1
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b0c      	cmp	r3, #12
 800636e:	d9b4      	bls.n	80062da <cmp_lfn+0x4e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	001a      	movs	r2, r3
 8006376:	2340      	movs	r3, #64	; 0x40
 8006378:	4013      	ands	r3, r2
 800637a:	d00d      	beq.n	8006398 <cmp_lfn+0x10c>
 800637c:	230e      	movs	r3, #14
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d008      	beq.n	8006398 <cmp_lfn+0x10c>
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	18d3      	adds	r3, r2, r3
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <cmp_lfn+0x10c>
		return 0;
 8006394:	2300      	movs	r3, #0
 8006396:	e000      	b.n	800639a <cmp_lfn+0x10e>

	return 1;		/* The part of LFN matched */
 8006398:	2301      	movs	r3, #1
}
 800639a:	0018      	movs	r0, r3
 800639c:	46bd      	mov	sp, r7
 800639e:	b007      	add	sp, #28
 80063a0:	bd90      	pop	{r4, r7, pc}
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	08007ef0 	.word	0x08007ef0
 80063a8:	0000ffff 	.word	0x0000ffff

080063ac <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80063b4:	230f      	movs	r3, #15
 80063b6:	18fb      	adds	r3, r7, r3
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 80063bc:	230b      	movs	r3, #11
 80063be:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80063c0:	200f      	movs	r0, #15
 80063c2:	183b      	adds	r3, r7, r0
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	0852      	lsrs	r2, r2, #1
 80063ca:	01db      	lsls	r3, r3, #7
 80063cc:	4313      	orrs	r3, r2
 80063ce:	b2d9      	uxtb	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	183b      	adds	r3, r7, r0
 80063da:	188a      	adds	r2, r1, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	60bb      	str	r3, [r7, #8]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1ea      	bne.n	80063c0 <sum_sfn+0x14>
	return sum;
 80063ea:	183b      	adds	r3, r7, r0
 80063ec:	781b      	ldrb	r3, [r3, #0]
}
 80063ee:	0018      	movs	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b004      	add	sp, #16
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80063f6:	b5b0      	push	{r4, r5, r7, lr}
 80063f8:	b086      	sub	sp, #24
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80063fe:	2517      	movs	r5, #23
 8006400:	197c      	adds	r4, r7, r5
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2100      	movs	r1, #0
 8006406:	0018      	movs	r0, r3
 8006408:	f7ff fe1d 	bl	8006046 <dir_sdi>
 800640c:	0003      	movs	r3, r0
 800640e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8006410:	197b      	adds	r3, r7, r5
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <dir_find+0x28>
 8006418:	197b      	adds	r3, r7, r5
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	e0d3      	b.n	80065c6 <dir_find+0x1d0>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800641e:	2114      	movs	r1, #20
 8006420:	187b      	adds	r3, r7, r1
 8006422:	22ff      	movs	r2, #255	; 0xff
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	2315      	movs	r3, #21
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	187a      	adds	r2, r7, r1
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	4252      	negs	r2, r2
 8006436:	841a      	strh	r2, [r3, #32]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	2517      	movs	r5, #23
 8006442:	197c      	adds	r4, r7, r5
 8006444:	0019      	movs	r1, r3
 8006446:	0010      	movs	r0, r2
 8006448:	f7ff fcf6 	bl	8005e38 <move_window>
 800644c:	0003      	movs	r3, r0
 800644e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8006450:	0029      	movs	r1, r5
 8006452:	187b      	adds	r3, r7, r1
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d000      	beq.n	800645c <dir_find+0x66>
 800645a:	e0ac      	b.n	80065b6 <dir_find+0x1c0>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006462:	2016      	movs	r0, #22
 8006464:	183b      	adds	r3, r7, r0
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	7812      	ldrb	r2, [r2, #0]
 800646a:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800646c:	183b      	adds	r3, r7, r0
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <dir_find+0x86>
 8006474:	187b      	adds	r3, r7, r1
 8006476:	2204      	movs	r2, #4
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e0a1      	b.n	80065c0 <dir_find+0x1ca>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	330b      	adds	r3, #11
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	200f      	movs	r0, #15
 8006484:	183b      	adds	r3, r7, r0
 8006486:	213f      	movs	r1, #63	; 0x3f
 8006488:	400a      	ands	r2, r1
 800648a:	701a      	strb	r2, [r3, #0]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800648c:	2316      	movs	r3, #22
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2be5      	cmp	r3, #229	; 0xe5
 8006494:	d008      	beq.n	80064a8 <dir_find+0xb2>
 8006496:	183b      	adds	r3, r7, r0
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2208      	movs	r2, #8
 800649c:	4013      	ands	r3, r2
 800649e:	d00c      	beq.n	80064ba <dir_find+0xc4>
 80064a0:	183b      	adds	r3, r7, r0
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b0f      	cmp	r3, #15
 80064a6:	d008      	beq.n	80064ba <dir_find+0xc4>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80064a8:	2315      	movs	r3, #21
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	22ff      	movs	r2, #255	; 0xff
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	4252      	negs	r2, r2
 80064b6:	841a      	strh	r2, [r3, #32]
 80064b8:	e06e      	b.n	8006598 <dir_find+0x1a2>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80064ba:	230f      	movs	r3, #15
 80064bc:	18fb      	adds	r3, r7, r3
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b0f      	cmp	r3, #15
 80064c2:	d140      	bne.n	8006546 <dir_find+0x150>
				if (dp->lfn) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d065      	beq.n	8006598 <dir_find+0x1a2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80064cc:	2016      	movs	r0, #22
 80064ce:	183b      	adds	r3, r7, r0
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2240      	movs	r2, #64	; 0x40
 80064d4:	4013      	ands	r3, r2
 80064d6:	d013      	beq.n	8006500 <dir_find+0x10a>
						sum = dir[LDIR_Chksum];
 80064d8:	2314      	movs	r3, #20
 80064da:	18fb      	adds	r3, r7, r3
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	7b52      	ldrb	r2, [r2, #13]
 80064e0:	701a      	strb	r2, [r3, #0]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80064e2:	183b      	adds	r3, r7, r0
 80064e4:	183a      	adds	r2, r7, r0
 80064e6:	7812      	ldrb	r2, [r2, #0]
 80064e8:	2140      	movs	r1, #64	; 0x40
 80064ea:	438a      	bics	r2, r1
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	2315      	movs	r3, #21
 80064f0:	18fb      	adds	r3, r7, r3
 80064f2:	183a      	adds	r2, r7, r0
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	701a      	strb	r2, [r3, #0]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	88da      	ldrh	r2, [r3, #6]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006500:	2316      	movs	r3, #22
 8006502:	18fa      	adds	r2, r7, r3
 8006504:	2415      	movs	r4, #21
 8006506:	193b      	adds	r3, r7, r4
 8006508:	7812      	ldrb	r2, [r2, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d115      	bne.n	800653c <dir_find+0x146>
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	330d      	adds	r3, #13
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2214      	movs	r2, #20
 8006518:	18ba      	adds	r2, r7, r2
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d10d      	bne.n	800653c <dir_find+0x146>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	0011      	movs	r1, r2
 8006528:	0018      	movs	r0, r3
 800652a:	f7ff feaf 	bl	800628c <cmp_lfn>
 800652e:	1e03      	subs	r3, r0, #0
 8006530:	d004      	beq.n	800653c <dir_find+0x146>
 8006532:	193b      	adds	r3, r7, r4
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	3b01      	subs	r3, #1
 8006538:	b2da      	uxtb	r2, r3
 800653a:	e000      	b.n	800653e <dir_find+0x148>
 800653c:	22ff      	movs	r2, #255	; 0xff
 800653e:	2315      	movs	r3, #21
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	e028      	b.n	8006598 <dir_find+0x1a2>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006546:	2315      	movs	r3, #21
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <dir_find+0x170>
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	0018      	movs	r0, r3
 8006554:	f7ff ff2a 	bl	80063ac <sum_sfn>
 8006558:	0003      	movs	r3, r0
 800655a:	001a      	movs	r2, r3
 800655c:	2314      	movs	r3, #20
 800655e:	18fb      	adds	r3, r7, r3
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	4293      	cmp	r3, r2
 8006564:	d029      	beq.n	80065ba <dir_find+0x1c4>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	330b      	adds	r3, #11
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	001a      	movs	r2, r3
 8006570:	2301      	movs	r3, #1
 8006572:	4013      	ands	r3, r2
 8006574:	d108      	bne.n	8006588 <dir_find+0x192>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6999      	ldr	r1, [r3, #24]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	220b      	movs	r2, #11
 800657e:	0018      	movs	r0, r3
 8006580:	f7ff fc1c 	bl	8005dbc <mem_cmp>
 8006584:	1e03      	subs	r3, r0, #0
 8006586:	d01a      	beq.n	80065be <dir_find+0x1c8>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006588:	2315      	movs	r3, #21
 800658a:	18fb      	adds	r3, r7, r3
 800658c:	22ff      	movs	r2, #255	; 0xff
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	4252      	negs	r2, r2
 8006596:	841a      	strh	r2, [r3, #32]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006598:	2517      	movs	r5, #23
 800659a:	197c      	adds	r4, r7, r5
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2100      	movs	r1, #0
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7ff fdd2 	bl	800614a <dir_next>
 80065a6:	0003      	movs	r3, r0
 80065a8:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80065aa:	197b      	adds	r3, r7, r5
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d100      	bne.n	80065b4 <dir_find+0x1be>
 80065b2:	e741      	b.n	8006438 <dir_find+0x42>
 80065b4:	e004      	b.n	80065c0 <dir_find+0x1ca>
		if (res != FR_OK) break;
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	e002      	b.n	80065c0 <dir_find+0x1ca>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	e000      	b.n	80065c0 <dir_find+0x1ca>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80065be:	46c0      	nop			; (mov r8, r8)

	return res;
 80065c0:	2317      	movs	r3, #23
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	781b      	ldrb	r3, [r3, #0]
}
 80065c6:	0018      	movs	r0, r3
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b006      	add	sp, #24
 80065cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080065d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80065d0:	b5b0      	push	{r4, r5, r7, lr}
 80065d2:	b08a      	sub	sp, #40	; 0x28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	e002      	b.n	80065e8 <create_name+0x18>
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3301      	adds	r3, #1
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b2f      	cmp	r3, #47	; 0x2f
 80065ee:	d0f8      	beq.n	80065e2 <create_name+0x12>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b5c      	cmp	r3, #92	; 0x5c
 80065f6:	d0f4      	beq.n	80065e2 <create_name+0x12>
	lfn = dp->lfn;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	61ba      	str	r2, [r7, #24]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	18d3      	adds	r3, r2, r3
 8006610:	781a      	ldrb	r2, [r3, #0]
 8006612:	2124      	movs	r1, #36	; 0x24
 8006614:	187b      	adds	r3, r7, r1
 8006616:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006618:	000a      	movs	r2, r1
 800661a:	18bb      	adds	r3, r7, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	2b1f      	cmp	r3, #31
 8006620:	d93d      	bls.n	800669e <create_name+0xce>
 8006622:	18bb      	adds	r3, r7, r2
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	2b2f      	cmp	r3, #47	; 0x2f
 8006628:	d039      	beq.n	800669e <create_name+0xce>
 800662a:	18bb      	adds	r3, r7, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	2b5c      	cmp	r3, #92	; 0x5c
 8006630:	d035      	beq.n	800669e <create_name+0xce>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2bfe      	cmp	r3, #254	; 0xfe
 8006636:	d901      	bls.n	800663c <create_name+0x6c>
			return FR_INVALID_NAME;
 8006638:	2306      	movs	r3, #6
 800663a:	e1c1      	b.n	80069c0 <create_name+0x3f0>
#if !_LFN_UNICODE
		w &= 0xFF;
 800663c:	2524      	movs	r5, #36	; 0x24
 800663e:	197b      	adds	r3, r7, r5
 8006640:	197a      	adds	r2, r7, r5
 8006642:	8812      	ldrh	r2, [r2, #0]
 8006644:	21ff      	movs	r1, #255	; 0xff
 8006646:	400a      	ands	r2, r1
 8006648:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800664a:	197c      	adds	r4, r7, r5
 800664c:	197b      	adds	r3, r7, r5
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	2101      	movs	r1, #1
 8006652:	0018      	movs	r0, r3
 8006654:	f7fe fcac 	bl	8004fb0 <ff_convert>
 8006658:	0003      	movs	r3, r0
 800665a:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800665c:	197b      	adds	r3, r7, r5
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <create_name+0x98>
 8006664:	2306      	movs	r3, #6
 8006666:	e1ab      	b.n	80069c0 <create_name+0x3f0>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006668:	2224      	movs	r2, #36	; 0x24
 800666a:	18bb      	adds	r3, r7, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	2b7f      	cmp	r3, #127	; 0x7f
 8006670:	d80a      	bhi.n	8006688 <create_name+0xb8>
 8006672:	18bb      	adds	r3, r7, r2
 8006674:	881a      	ldrh	r2, [r3, #0]
 8006676:	4ba6      	ldr	r3, [pc, #664]	; (8006910 <create_name+0x340>)
 8006678:	0011      	movs	r1, r2
 800667a:	0018      	movs	r0, r3
 800667c:	f7ff fbc3 	bl	8005e06 <chk_chr>
 8006680:	1e03      	subs	r3, r0, #0
 8006682:	d001      	beq.n	8006688 <create_name+0xb8>
			return FR_INVALID_NAME;
 8006684:	2306      	movs	r3, #6
 8006686:	e19b      	b.n	80069c0 <create_name+0x3f0>
		lfn[di++] = w;					/* Store the Unicode character */
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	617a      	str	r2, [r7, #20]
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	18d3      	adds	r3, r2, r3
 8006694:	2224      	movs	r2, #36	; 0x24
 8006696:	18ba      	adds	r2, r7, r2
 8006698:	8812      	ldrh	r2, [r2, #0]
 800669a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800669c:	e7b3      	b.n	8006606 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	18d2      	adds	r2, r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80066a8:	2324      	movs	r3, #36	; 0x24
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	2b1f      	cmp	r3, #31
 80066b0:	d801      	bhi.n	80066b6 <create_name+0xe6>
 80066b2:	2204      	movs	r2, #4
 80066b4:	e000      	b.n	80066b8 <create_name+0xe8>
 80066b6:	2200      	movs	r2, #0
 80066b8:	2327      	movs	r3, #39	; 0x27
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80066be:	e016      	b.n	80066ee <create_name+0x11e>
		w = lfn[di - 1];
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	4a94      	ldr	r2, [pc, #592]	; (8006914 <create_name+0x344>)
 80066c4:	4694      	mov	ip, r2
 80066c6:	4463      	add	r3, ip
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	18d2      	adds	r2, r2, r3
 80066ce:	2124      	movs	r1, #36	; 0x24
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	8812      	ldrh	r2, [r2, #0]
 80066d4:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 80066d6:	000a      	movs	r2, r1
 80066d8:	18bb      	adds	r3, r7, r2
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d003      	beq.n	80066e8 <create_name+0x118>
 80066e0:	18bb      	adds	r3, r7, r2
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	2b2e      	cmp	r3, #46	; 0x2e
 80066e6:	d106      	bne.n	80066f6 <create_name+0x126>
		di--;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e5      	bne.n	80066c0 <create_name+0xf0>
 80066f4:	e000      	b.n	80066f8 <create_name+0x128>
		if (w != ' ' && w != '.') break;
 80066f6:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <create_name+0x132>
 80066fe:	2306      	movs	r3, #6
 8006700:	e15e      	b.n	80069c0 <create_name+0x3f0>
	lfn[di] = 0;						/* LFN is created */
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	18d3      	adds	r3, r2, r3
 800670a:	2200      	movs	r2, #0
 800670c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	220b      	movs	r2, #11
 8006714:	2120      	movs	r1, #32
 8006716:	0018      	movs	r0, r3
 8006718:	f7ff fb37 	bl	8005d8a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800671c:	2300      	movs	r3, #0
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	e002      	b.n	8006728 <create_name+0x158>
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	3301      	adds	r3, #1
 8006726:	61bb      	str	r3, [r7, #24]
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	18d3      	adds	r3, r2, r3
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	2b20      	cmp	r3, #32
 8006734:	d0f5      	beq.n	8006722 <create_name+0x152>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	18d3      	adds	r3, r2, r3
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	2b2e      	cmp	r3, #46	; 0x2e
 8006742:	d0ee      	beq.n	8006722 <create_name+0x152>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <create_name+0x190>
 800674a:	2227      	movs	r2, #39	; 0x27
 800674c:	18bb      	adds	r3, r7, r2
 800674e:	18ba      	adds	r2, r7, r2
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	2103      	movs	r1, #3
 8006754:	430a      	orrs	r2, r1
 8006756:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006758:	e002      	b.n	8006760 <create_name+0x190>
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	3b01      	subs	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <create_name+0x1aa>
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	4a6a      	ldr	r2, [pc, #424]	; (8006914 <create_name+0x344>)
 800676a:	4694      	mov	ip, r2
 800676c:	4463      	add	r3, ip
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	18d3      	adds	r3, r2, r3
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	2b2e      	cmp	r3, #46	; 0x2e
 8006778:	d1ef      	bne.n	800675a <create_name+0x18a>

	b = i = 0; ni = 8;
 800677a:	2300      	movs	r3, #0
 800677c:	623b      	str	r3, [r7, #32]
 800677e:	2326      	movs	r3, #38	; 0x26
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	2308      	movs	r3, #8
 8006788:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	61ba      	str	r2, [r7, #24]
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	18d2      	adds	r2, r2, r3
 8006796:	2124      	movs	r1, #36	; 0x24
 8006798:	187b      	adds	r3, r7, r1
 800679a:	8812      	ldrh	r2, [r2, #0]
 800679c:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 800679e:	000a      	movs	r2, r1
 80067a0:	18bb      	adds	r3, r7, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d100      	bne.n	80067aa <create_name+0x1da>
 80067a8:	e0af      	b.n	800690a <create_name+0x33a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80067aa:	18bb      	adds	r3, r7, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	2b20      	cmp	r3, #32
 80067b0:	d007      	beq.n	80067c2 <create_name+0x1f2>
 80067b2:	18bb      	adds	r3, r7, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	2b2e      	cmp	r3, #46	; 0x2e
 80067b8:	d10b      	bne.n	80067d2 <create_name+0x202>
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d007      	beq.n	80067d2 <create_name+0x202>
			cf |= NS_LOSS | NS_LFN; continue;
 80067c2:	2227      	movs	r2, #39	; 0x27
 80067c4:	18bb      	adds	r3, r7, r2
 80067c6:	18ba      	adds	r2, r7, r2
 80067c8:	7812      	ldrb	r2, [r2, #0]
 80067ca:	2103      	movs	r1, #3
 80067cc:	430a      	orrs	r2, r1
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e09a      	b.n	8006908 <create_name+0x338>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80067d2:	6a3a      	ldr	r2, [r7, #32]
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d203      	bcs.n	80067e2 <create_name+0x212>
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d127      	bne.n	8006832 <create_name+0x262>
			if (ni == 11) {				/* Long extension */
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	2b0b      	cmp	r3, #11
 80067e6:	d107      	bne.n	80067f8 <create_name+0x228>
				cf |= NS_LOSS | NS_LFN; break;
 80067e8:	2227      	movs	r2, #39	; 0x27
 80067ea:	18bb      	adds	r3, r7, r2
 80067ec:	18ba      	adds	r2, r7, r2
 80067ee:	7812      	ldrb	r2, [r2, #0]
 80067f0:	2103      	movs	r1, #3
 80067f2:	430a      	orrs	r2, r1
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	e094      	b.n	8006922 <create_name+0x352>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d006      	beq.n	800680e <create_name+0x23e>
 8006800:	2227      	movs	r2, #39	; 0x27
 8006802:	18bb      	adds	r3, r7, r2
 8006804:	18ba      	adds	r2, r7, r2
 8006806:	7812      	ldrb	r2, [r2, #0]
 8006808:	2103      	movs	r1, #3
 800680a:	430a      	orrs	r2, r1
 800680c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	429a      	cmp	r2, r3
 8006814:	d900      	bls.n	8006818 <create_name+0x248>
 8006816:	e083      	b.n	8006920 <create_name+0x350>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	61bb      	str	r3, [r7, #24]
 800681c:	2308      	movs	r3, #8
 800681e:	623b      	str	r3, [r7, #32]
 8006820:	230b      	movs	r3, #11
 8006822:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006824:	2226      	movs	r2, #38	; 0x26
 8006826:	18bb      	adds	r3, r7, r2
 8006828:	18ba      	adds	r2, r7, r2
 800682a:	7812      	ldrb	r2, [r2, #0]
 800682c:	0092      	lsls	r2, r2, #2
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	e06a      	b.n	8006908 <create_name+0x338>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006832:	2524      	movs	r5, #36	; 0x24
 8006834:	197b      	adds	r3, r7, r5
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	2b7f      	cmp	r3, #127	; 0x7f
 800683a:	d91a      	bls.n	8006872 <create_name+0x2a2>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800683c:	197c      	adds	r4, r7, r5
 800683e:	197b      	adds	r3, r7, r5
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	2100      	movs	r1, #0
 8006844:	0018      	movs	r0, r3
 8006846:	f7fe fbb3 	bl	8004fb0 <ff_convert>
 800684a:	0003      	movs	r3, r0
 800684c:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800684e:	197b      	adds	r3, r7, r5
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d006      	beq.n	8006864 <create_name+0x294>
 8006856:	197b      	adds	r3, r7, r5
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	3b80      	subs	r3, #128	; 0x80
 800685c:	4a2e      	ldr	r2, [pc, #184]	; (8006918 <create_name+0x348>)
 800685e:	5cd2      	ldrb	r2, [r2, r3]
 8006860:	197b      	adds	r3, r7, r5
 8006862:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006864:	2227      	movs	r2, #39	; 0x27
 8006866:	18bb      	adds	r3, r7, r2
 8006868:	18ba      	adds	r2, r7, r2
 800686a:	7812      	ldrb	r2, [r2, #0]
 800686c:	2102      	movs	r1, #2
 800686e:	430a      	orrs	r2, r1
 8006870:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006872:	2224      	movs	r2, #36	; 0x24
 8006874:	18bb      	adds	r3, r7, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d008      	beq.n	800688e <create_name+0x2be>
 800687c:	18bb      	adds	r3, r7, r2
 800687e:	881a      	ldrh	r2, [r3, #0]
 8006880:	4b26      	ldr	r3, [pc, #152]	; (800691c <create_name+0x34c>)
 8006882:	0011      	movs	r1, r2
 8006884:	0018      	movs	r0, r3
 8006886:	f7ff fabe 	bl	8005e06 <chk_chr>
 800688a:	1e03      	subs	r3, r0, #0
 800688c:	d00b      	beq.n	80068a6 <create_name+0x2d6>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800688e:	2324      	movs	r3, #36	; 0x24
 8006890:	18fb      	adds	r3, r7, r3
 8006892:	225f      	movs	r2, #95	; 0x5f
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	2227      	movs	r2, #39	; 0x27
 8006898:	18bb      	adds	r3, r7, r2
 800689a:	18ba      	adds	r2, r7, r2
 800689c:	7812      	ldrb	r2, [r2, #0]
 800689e:	2103      	movs	r1, #3
 80068a0:	430a      	orrs	r2, r1
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	e025      	b.n	80068f2 <create_name+0x322>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80068a6:	2224      	movs	r2, #36	; 0x24
 80068a8:	18bb      	adds	r3, r7, r2
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	2b40      	cmp	r3, #64	; 0x40
 80068ae:	d90b      	bls.n	80068c8 <create_name+0x2f8>
 80068b0:	18bb      	adds	r3, r7, r2
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	2b5a      	cmp	r3, #90	; 0x5a
 80068b6:	d807      	bhi.n	80068c8 <create_name+0x2f8>
					b |= 2;
 80068b8:	2226      	movs	r2, #38	; 0x26
 80068ba:	18bb      	adds	r3, r7, r2
 80068bc:	18ba      	adds	r2, r7, r2
 80068be:	7812      	ldrb	r2, [r2, #0]
 80068c0:	2102      	movs	r1, #2
 80068c2:	430a      	orrs	r2, r1
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e014      	b.n	80068f2 <create_name+0x322>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80068c8:	2024      	movs	r0, #36	; 0x24
 80068ca:	183b      	adds	r3, r7, r0
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	2b60      	cmp	r3, #96	; 0x60
 80068d0:	d90f      	bls.n	80068f2 <create_name+0x322>
 80068d2:	183b      	adds	r3, r7, r0
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	2b7a      	cmp	r3, #122	; 0x7a
 80068d8:	d80b      	bhi.n	80068f2 <create_name+0x322>
						b |= 1; w -= 0x20;
 80068da:	2226      	movs	r2, #38	; 0x26
 80068dc:	18bb      	adds	r3, r7, r2
 80068de:	18ba      	adds	r2, r7, r2
 80068e0:	7812      	ldrb	r2, [r2, #0]
 80068e2:	2101      	movs	r1, #1
 80068e4:	430a      	orrs	r2, r1
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	183b      	adds	r3, r7, r0
 80068ea:	183a      	adds	r2, r7, r0
 80068ec:	8812      	ldrh	r2, [r2, #0]
 80068ee:	3a20      	subs	r2, #32
 80068f0:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	1c59      	adds	r1, r3, #1
 80068fa:	6239      	str	r1, [r7, #32]
 80068fc:	18d3      	adds	r3, r2, r3
 80068fe:	2224      	movs	r2, #36	; 0x24
 8006900:	18ba      	adds	r2, r7, r2
 8006902:	8812      	ldrh	r2, [r2, #0]
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006908:	e73f      	b.n	800678a <create_name+0x1ba>
		if (!w) break;					/* Break on end of the LFN */
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	e009      	b.n	8006922 <create_name+0x352>
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	08007588 	.word	0x08007588
 8006914:	7fffffff 	.word	0x7fffffff
 8006918:	08007e70 	.word	0x08007e70
 800691c:	08007594 	.word	0x08007594
			if (si > di) break;			/* No extension */
 8006920:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2be5      	cmp	r3, #229	; 0xe5
 800692a:	d103      	bne.n	8006934 <create_name+0x364>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	2205      	movs	r2, #5
 8006932:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b08      	cmp	r3, #8
 8006938:	d105      	bne.n	8006946 <create_name+0x376>
 800693a:	2226      	movs	r2, #38	; 0x26
 800693c:	18bb      	adds	r3, r7, r2
 800693e:	18ba      	adds	r2, r7, r2
 8006940:	7812      	ldrb	r2, [r2, #0]
 8006942:	0092      	lsls	r2, r2, #2
 8006944:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006946:	2126      	movs	r1, #38	; 0x26
 8006948:	187b      	adds	r3, r7, r1
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	220c      	movs	r2, #12
 800694e:	4013      	ands	r3, r2
 8006950:	2b0c      	cmp	r3, #12
 8006952:	d005      	beq.n	8006960 <create_name+0x390>
 8006954:	187b      	adds	r3, r7, r1
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2203      	movs	r2, #3
 800695a:	4013      	ands	r3, r2
 800695c:	2b03      	cmp	r3, #3
 800695e:	d106      	bne.n	800696e <create_name+0x39e>
		cf |= NS_LFN;
 8006960:	2227      	movs	r2, #39	; 0x27
 8006962:	18bb      	adds	r3, r7, r2
 8006964:	18ba      	adds	r2, r7, r2
 8006966:	7812      	ldrb	r2, [r2, #0]
 8006968:	2102      	movs	r1, #2
 800696a:	430a      	orrs	r2, r1
 800696c:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800696e:	2127      	movs	r1, #39	; 0x27
 8006970:	187b      	adds	r3, r7, r1
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2202      	movs	r2, #2
 8006976:	4013      	ands	r3, r2
 8006978:	d11a      	bne.n	80069b0 <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800697a:	2326      	movs	r3, #38	; 0x26
 800697c:	18fb      	adds	r3, r7, r3
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2203      	movs	r2, #3
 8006982:	4013      	ands	r3, r2
 8006984:	2b01      	cmp	r3, #1
 8006986:	d105      	bne.n	8006994 <create_name+0x3c4>
 8006988:	187b      	adds	r3, r7, r1
 800698a:	187a      	adds	r2, r7, r1
 800698c:	7812      	ldrb	r2, [r2, #0]
 800698e:	2110      	movs	r1, #16
 8006990:	430a      	orrs	r2, r1
 8006992:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006994:	2326      	movs	r3, #38	; 0x26
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	220c      	movs	r2, #12
 800699c:	4013      	ands	r3, r2
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d106      	bne.n	80069b0 <create_name+0x3e0>
 80069a2:	2227      	movs	r2, #39	; 0x27
 80069a4:	18bb      	adds	r3, r7, r2
 80069a6:	18ba      	adds	r2, r7, r2
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	2108      	movs	r1, #8
 80069ac:	430a      	orrs	r2, r1
 80069ae:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	330b      	adds	r3, #11
 80069b6:	2227      	movs	r2, #39	; 0x27
 80069b8:	18ba      	adds	r2, r7, r2
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80069be:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80069c0:	0018      	movs	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b00a      	add	sp, #40	; 0x28
 80069c6:	bdb0      	pop	{r4, r5, r7, pc}

080069c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80069c8:	b5b0      	push	{r4, r5, r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b2f      	cmp	r3, #47	; 0x2f
 80069d8:	d003      	beq.n	80069e2 <follow_path+0x1a>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b5c      	cmp	r3, #92	; 0x5c
 80069e0:	d102      	bne.n	80069e8 <follow_path+0x20>
		path++;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	3301      	adds	r3, #1
 80069e6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b1f      	cmp	r3, #31
 80069f4:	d80c      	bhi.n	8006a10 <follow_path+0x48>
		res = dir_sdi(dp, 0);
 80069f6:	230f      	movs	r3, #15
 80069f8:	18fc      	adds	r4, r7, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2100      	movs	r1, #0
 80069fe:	0018      	movs	r0, r3
 8006a00:	f7ff fb21 	bl	8006046 <dir_sdi>
 8006a04:	0003      	movs	r3, r0
 8006a06:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	615a      	str	r2, [r3, #20]
 8006a0e:	e050      	b.n	8006ab2 <follow_path+0xea>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a10:	250f      	movs	r5, #15
 8006a12:	197c      	adds	r4, r7, r5
 8006a14:	003a      	movs	r2, r7
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	0011      	movs	r1, r2
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f7ff fdd8 	bl	80065d0 <create_name>
 8006a20:	0003      	movs	r3, r0
 8006a22:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006a24:	197b      	adds	r3, r7, r5
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d13d      	bne.n	8006aa8 <follow_path+0xe0>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006a2c:	197c      	adds	r4, r7, r5
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	0018      	movs	r0, r3
 8006a32:	f7ff fce0 	bl	80063f6 <dir_find>
 8006a36:	0003      	movs	r3, r0
 8006a38:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	210e      	movs	r1, #14
 8006a40:	187b      	adds	r3, r7, r1
 8006a42:	7ad2      	ldrb	r2, [r2, #11]
 8006a44:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8006a46:	197b      	adds	r3, r7, r5
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00c      	beq.n	8006a68 <follow_path+0xa0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006a4e:	197b      	adds	r3, r7, r5
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d12a      	bne.n	8006aac <follow_path+0xe4>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006a56:	187b      	adds	r3, r7, r1
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	d125      	bne.n	8006aac <follow_path+0xe4>
 8006a60:	197b      	adds	r3, r7, r5
 8006a62:	2205      	movs	r2, #5
 8006a64:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8006a66:	e021      	b.n	8006aac <follow_path+0xe4>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a68:	230e      	movs	r3, #14
 8006a6a:	18fb      	adds	r3, r7, r3
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2204      	movs	r2, #4
 8006a70:	4013      	ands	r3, r2
 8006a72:	d11d      	bne.n	8006ab0 <follow_path+0xe8>
			dir = dp->dir;						/* Follow the sub-directory */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	330b      	adds	r3, #11
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	001a      	movs	r2, r3
 8006a82:	2310      	movs	r3, #16
 8006a84:	4013      	ands	r3, r2
 8006a86:	d104      	bne.n	8006a92 <follow_path+0xca>
				res = FR_NO_PATH; break;
 8006a88:	230f      	movs	r3, #15
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	2205      	movs	r2, #5
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	e00f      	b.n	8006ab2 <follow_path+0xea>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	0011      	movs	r1, r2
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f7ff fbc8 	bl	8006230 <ld_clust>
 8006aa0:	0002      	movs	r2, r0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006aa6:	e7b3      	b.n	8006a10 <follow_path+0x48>
			if (res != FR_OK) break;
 8006aa8:	46c0      	nop			; (mov r8, r8)
 8006aaa:	e002      	b.n	8006ab2 <follow_path+0xea>
				break;
 8006aac:	46c0      	nop			; (mov r8, r8)
 8006aae:	e000      	b.n	8006ab2 <follow_path+0xea>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ab0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 8006ab2:	230f      	movs	r3, #15
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	781b      	ldrb	r3, [r3, #0]
}
 8006ab8:	0018      	movs	r0, r3
 8006aba:	46bd      	mov	sp, r7
 8006abc:	b004      	add	sp, #16
 8006abe:	bdb0      	pop	{r4, r5, r7, pc}

08006ac0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	425b      	negs	r3, r3
 8006acc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d031      	beq.n	8006b3a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	e002      	b.n	8006ae4 <get_ldnumber+0x24>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b1f      	cmp	r3, #31
 8006aea:	d903      	bls.n	8006af4 <get_ldnumber+0x34>
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b3a      	cmp	r3, #58	; 0x3a
 8006af2:	d1f4      	bne.n	8006ade <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b3a      	cmp	r3, #58	; 0x3a
 8006afa:	d11c      	bne.n	8006b36 <get_ldnumber+0x76>
			tp = *path;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	60fa      	str	r2, [r7, #12]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	3b30      	subs	r3, #48	; 0x30
 8006b0c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b09      	cmp	r3, #9
 8006b12:	d80e      	bhi.n	8006b32 <get_ldnumber+0x72>
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d10a      	bne.n	8006b32 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d107      	bne.n	8006b32 <get_ldnumber+0x72>
					vol = (int)i;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	e002      	b.n	8006b3c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006b3a:	693b      	ldr	r3, [r7, #16]
}
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b006      	add	sp, #24
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <check_fs>:
static
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	711a      	strb	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	4252      	negs	r2, r2
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	0011      	movs	r1, r2
 8006b62:	0018      	movs	r0, r3
 8006b64:	f7ff f968 	bl	8005e38 <move_window>
 8006b68:	1e03      	subs	r3, r0, #0
 8006b6a:	d001      	beq.n	8006b70 <check_fs+0x2c>
		return 3;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e04b      	b.n	8006c08 <check_fs+0xc4>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a27      	ldr	r2, [pc, #156]	; (8006c10 <check_fs+0xcc>)
 8006b74:	4694      	mov	ip, r2
 8006b76:	4463      	add	r3, ip
 8006b78:	3301      	adds	r3, #1
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	b21a      	sxth	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4923      	ldr	r1, [pc, #140]	; (8006c10 <check_fs+0xcc>)
 8006b84:	5c5b      	ldrb	r3, [r3, r1]
 8006b86:	b21b      	sxth	r3, r3
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	b21b      	sxth	r3, r3
 8006b8c:	4a21      	ldr	r2, [pc, #132]	; (8006c14 <check_fs+0xd0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d001      	beq.n	8006b96 <check_fs+0x52>
		return 2;
 8006b92:	2302      	movs	r3, #2
 8006b94:	e038      	b.n	8006c08 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	335e      	adds	r3, #94	; 0x5e
 8006b9a:	3303      	adds	r3, #3
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	061a      	lsls	r2, r3, #24
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	335e      	adds	r3, #94	; 0x5e
 8006ba4:	3302      	adds	r3, #2
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	041b      	lsls	r3, r3, #16
 8006baa:	4313      	orrs	r3, r2
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	325e      	adds	r2, #94	; 0x5e
 8006bb0:	3201      	adds	r2, #1
 8006bb2:	7812      	ldrb	r2, [r2, #0]
 8006bb4:	0212      	lsls	r2, r2, #8
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	215e      	movs	r1, #94	; 0x5e
 8006bbc:	5c52      	ldrb	r2, [r2, r1]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	4a14      	ldr	r2, [pc, #80]	; (8006c18 <check_fs+0xd4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d101      	bne.n	8006bce <check_fs+0x8a>
		return 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	e01c      	b.n	8006c08 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	337a      	adds	r3, #122	; 0x7a
 8006bd2:	3303      	adds	r3, #3
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	061a      	lsls	r2, r3, #24
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	337a      	adds	r3, #122	; 0x7a
 8006bdc:	3302      	adds	r3, #2
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	4313      	orrs	r3, r2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	327a      	adds	r2, #122	; 0x7a
 8006be8:	3201      	adds	r2, #1
 8006bea:	7812      	ldrb	r2, [r2, #0]
 8006bec:	0212      	lsls	r2, r2, #8
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	217a      	movs	r1, #122	; 0x7a
 8006bf4:	5c52      	ldrb	r2, [r2, r1]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	0a1b      	lsrs	r3, r3, #8
 8006bfc:	4a06      	ldr	r2, [pc, #24]	; (8006c18 <check_fs+0xd4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d101      	bne.n	8006c06 <check_fs+0xc2>
		return 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e000      	b.n	8006c08 <check_fs+0xc4>

	return 1;
 8006c06:	2301      	movs	r3, #1
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b002      	add	sp, #8
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	00000226 	.word	0x00000226
 8006c14:	ffffaa55 	.word	0xffffaa55
 8006c18:	00544146 	.word	0x00544146

08006c1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006c1c:	b5b0      	push	{r4, r5, r7, lr}
 8006c1e:	b096      	sub	sp, #88	; 0x58
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	1dfb      	adds	r3, r7, #7
 8006c28:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	0018      	movs	r0, r3
 8006c34:	f7ff ff44 	bl	8006ac0 <get_ldnumber>
 8006c38:	0003      	movs	r3, r0
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da01      	bge.n	8006c46 <find_volume+0x2a>
 8006c42:	230b      	movs	r3, #11
 8006c44:	e204      	b.n	8007050 <find_volume+0x434>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c46:	4bbe      	ldr	r3, [pc, #760]	; (8006f40 <find_volume+0x324>)
 8006c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c4a:	0092      	lsls	r2, r2, #2
 8006c4c:	58d3      	ldr	r3, [r2, r3]
 8006c4e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <find_volume+0x3e>
 8006c56:	230c      	movs	r3, #12
 8006c58:	e1fa      	b.n	8007050 <find_volume+0x434>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c5e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00f      	beq.n	8006c88 <find_volume+0x6c>
		stat = disk_status(fs->drv);
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	2537      	movs	r5, #55	; 0x37
 8006c6e:	197c      	adds	r4, r7, r5
 8006c70:	0018      	movs	r0, r3
 8006c72:	f7fe fa45 	bl	8005100 <disk_status>
 8006c76:	0003      	movs	r3, r0
 8006c78:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006c7a:	197b      	adds	r3, r7, r5
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	4013      	ands	r3, r2
 8006c82:	d101      	bne.n	8006c88 <find_volume+0x6c>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
 8006c84:	2300      	movs	r3, #0
 8006c86:	e1e3      	b.n	8007050 <find_volume+0x434>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	2537      	movs	r5, #55	; 0x37
 8006c9c:	197c      	adds	r4, r7, r5
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f7fe fa42 	bl	8005128 <disk_initialize>
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006ca8:	197b      	adds	r3, r7, r5
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2201      	movs	r2, #1
 8006cae:	4013      	ands	r3, r2
 8006cb0:	d001      	beq.n	8006cb6 <find_volume+0x9a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e1cc      	b.n	8007050 <find_volume+0x434>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006cba:	2557      	movs	r5, #87	; 0x57
 8006cbc:	197c      	adds	r4, r7, r5
 8006cbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	0011      	movs	r1, r2
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f7ff ff3d 	bl	8006b44 <check_fs>
 8006cca:	0003      	movs	r3, r0
 8006ccc:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006cce:	197b      	adds	r3, r7, r5
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d157      	bne.n	8006d86 <find_volume+0x16a>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cda:	e029      	b.n	8006d30 <find_volume+0x114>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	3328      	adds	r3, #40	; 0x28
 8006ce0:	001a      	movs	r2, r3
 8006ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	33bf      	adds	r3, #191	; 0xbf
 8006ce8:	33ff      	adds	r3, #255	; 0xff
 8006cea:	18d3      	adds	r3, r2, r3
 8006cec:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d012      	beq.n	8006d1e <find_volume+0x102>
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	330b      	adds	r3, #11
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	061a      	lsls	r2, r3, #24
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	330a      	adds	r3, #10
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	041b      	lsls	r3, r3, #16
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0c:	3209      	adds	r2, #9
 8006d0e:	7812      	ldrb	r2, [r2, #0]
 8006d10:	0212      	lsls	r2, r2, #8
 8006d12:	4313      	orrs	r3, r2
 8006d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d16:	3208      	adds	r2, #8
 8006d18:	7812      	ldrb	r2, [r2, #0]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	e000      	b.n	8006d20 <find_volume+0x104>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2214      	movs	r2, #20
 8006d22:	18ba      	adds	r2, r7, r2
 8006d24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d26:	0089      	lsls	r1, r1, #2
 8006d28:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d9d2      	bls.n	8006cdc <find_volume+0xc0>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006d36:	2300      	movs	r3, #0
 8006d38:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <find_volume+0x12a>
 8006d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d42:	3b01      	subs	r3, #1
 8006d44:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006d46:	2314      	movs	r3, #20
 8006d48:	18fb      	adds	r3, r7, r3
 8006d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d4c:	0092      	lsls	r2, r2, #2
 8006d4e:	58d3      	ldr	r3, [r2, r3]
 8006d50:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d008      	beq.n	8006d6a <find_volume+0x14e>
 8006d58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	0011      	movs	r1, r2
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7ff fef0 	bl	8006b44 <check_fs>
 8006d64:	0003      	movs	r3, r0
 8006d66:	001a      	movs	r2, r3
 8006d68:	e000      	b.n	8006d6c <find_volume+0x150>
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	2157      	movs	r1, #87	; 0x57
 8006d6e:	187b      	adds	r3, r7, r1
 8006d70:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006d72:	187b      	adds	r3, r7, r1
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <find_volume+0x16a>
 8006d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d9df      	bls.n	8006d46 <find_volume+0x12a>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006d86:	2357      	movs	r3, #87	; 0x57
 8006d88:	18fb      	adds	r3, r7, r3
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d101      	bne.n	8006d94 <find_volume+0x178>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e15d      	b.n	8007050 <find_volume+0x434>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006d94:	2357      	movs	r3, #87	; 0x57
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <find_volume+0x186>
 8006d9e:	230d      	movs	r3, #13
 8006da0:	e156      	b.n	8007050 <find_volume+0x434>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	2234      	movs	r2, #52	; 0x34
 8006da6:	5c9b      	ldrb	r3, [r3, r2]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	b21a      	sxth	r2, r3
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	2133      	movs	r1, #51	; 0x33
 8006db0:	5c5b      	ldrb	r3, [r3, r1]
 8006db2:	b21b      	sxth	r3, r3
 8006db4:	4313      	orrs	r3, r2
 8006db6:	b21a      	sxth	r2, r3
 8006db8:	2380      	movs	r3, #128	; 0x80
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d001      	beq.n	8006dc4 <find_volume+0x1a8>
		return FR_NO_FILESYSTEM;
 8006dc0:	230d      	movs	r3, #13
 8006dc2:	e145      	b.n	8007050 <find_volume+0x434>

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	223f      	movs	r2, #63	; 0x3f
 8006dc8:	5c9b      	ldrb	r3, [r3, r2]
 8006dca:	021b      	lsls	r3, r3, #8
 8006dcc:	b21a      	sxth	r2, r3
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	213e      	movs	r1, #62	; 0x3e
 8006dd2:	5c5b      	ldrb	r3, [r3, r1]
 8006dd4:	b21b      	sxth	r3, r3
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	b21b      	sxth	r3, r3
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 8006dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d112      	bne.n	8006e0a <find_volume+0x1ee>
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	224f      	movs	r2, #79	; 0x4f
 8006de8:	5c9b      	ldrb	r3, [r3, r2]
 8006dea:	061a      	lsls	r2, r3, #24
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	214e      	movs	r1, #78	; 0x4e
 8006df0:	5c5b      	ldrb	r3, [r3, r1]
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	4313      	orrs	r3, r2
 8006df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006df8:	214d      	movs	r1, #77	; 0x4d
 8006dfa:	5c52      	ldrb	r2, [r2, r1]
 8006dfc:	0212      	lsls	r2, r2, #8
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e02:	214c      	movs	r1, #76	; 0x4c
 8006e04:	5c52      	ldrb	r2, [r2, r1]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e0e:	611a      	str	r2, [r3, #16]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	2238      	movs	r2, #56	; 0x38
 8006e14:	5c9a      	ldrb	r2, [r3, r2]
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	78db      	ldrb	r3, [r3, #3]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d005      	beq.n	8006e2e <find_volume+0x212>
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	78db      	ldrb	r3, [r3, #3]
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d001      	beq.n	8006e2e <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8006e2a:	230d      	movs	r3, #13
 8006e2c:	e110      	b.n	8007050 <find_volume+0x434>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	78db      	ldrb	r3, [r3, #3]
 8006e32:	001a      	movs	r2, r3
 8006e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e36:	4353      	muls	r3, r2
 8006e38:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	2235      	movs	r2, #53	; 0x35
 8006e3e:	5c9a      	ldrb	r2, [r3, r2]
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e46:	789b      	ldrb	r3, [r3, #2]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d007      	beq.n	8006e5c <find_volume+0x240>
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	789b      	ldrb	r3, [r3, #2]
 8006e50:	001a      	movs	r2, r3
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	789b      	ldrb	r3, [r3, #2]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	4013      	ands	r3, r2
 8006e5a:	d001      	beq.n	8006e60 <find_volume+0x244>
		return FR_NO_FILESYSTEM;
 8006e5c:	230d      	movs	r3, #13
 8006e5e:	e0f7      	b.n	8007050 <find_volume+0x434>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e62:	223a      	movs	r2, #58	; 0x3a
 8006e64:	5c9b      	ldrb	r3, [r3, r2]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	b21a      	sxth	r2, r3
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	2139      	movs	r1, #57	; 0x39
 8006e6e:	5c5b      	ldrb	r3, [r3, r1]
 8006e70:	b21b      	sxth	r3, r3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	b21b      	sxth	r3, r3
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	891b      	ldrh	r3, [r3, #8]
 8006e80:	220f      	movs	r2, #15
 8006e82:	4013      	ands	r3, r2
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <find_volume+0x272>
		return FR_NO_FILESYSTEM;
 8006e8a:	230d      	movs	r3, #13
 8006e8c:	e0e0      	b.n	8007050 <find_volume+0x434>

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	223c      	movs	r2, #60	; 0x3c
 8006e92:	5c9b      	ldrb	r3, [r3, r2]
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	b21a      	sxth	r2, r3
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	213b      	movs	r1, #59	; 0x3b
 8006e9c:	5c5b      	ldrb	r3, [r3, r1]
 8006e9e:	b21b      	sxth	r3, r3
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	b21b      	sxth	r3, r3
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 8006ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d112      	bne.n	8006ed4 <find_volume+0x2b8>
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	224b      	movs	r2, #75	; 0x4b
 8006eb2:	5c9b      	ldrb	r3, [r3, r2]
 8006eb4:	061a      	lsls	r2, r3, #24
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	214a      	movs	r1, #74	; 0x4a
 8006eba:	5c5b      	ldrb	r3, [r3, r1]
 8006ebc:	041b      	lsls	r3, r3, #16
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ec2:	2149      	movs	r1, #73	; 0x49
 8006ec4:	5c52      	ldrb	r2, [r2, r1]
 8006ec6:	0212      	lsls	r2, r2, #8
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ecc:	2148      	movs	r1, #72	; 0x48
 8006ece:	5c52      	ldrb	r2, [r2, r1]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	2237      	movs	r2, #55	; 0x37
 8006ed8:	5c9b      	ldrb	r3, [r3, r2]
 8006eda:	021b      	lsls	r3, r3, #8
 8006edc:	b21a      	sxth	r2, r3
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	2136      	movs	r1, #54	; 0x36
 8006ee2:	5c5b      	ldrb	r3, [r3, r1]
 8006ee4:	b21b      	sxth	r3, r3
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	b21a      	sxth	r2, r3
 8006eea:	212e      	movs	r1, #46	; 0x2e
 8006eec:	187b      	adds	r3, r7, r1
 8006eee:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006ef0:	187b      	adds	r3, r7, r1
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <find_volume+0x2e0>
 8006ef8:	230d      	movs	r3, #13
 8006efa:	e0a9      	b.n	8007050 <find_volume+0x434>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006efc:	232e      	movs	r3, #46	; 0x2e
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	881a      	ldrh	r2, [r3, #0]
 8006f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f04:	18d3      	adds	r3, r2, r3
 8006f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f08:	8912      	ldrh	r2, [r2, #8]
 8006f0a:	0912      	lsrs	r2, r2, #4
 8006f0c:	b292      	uxth	r2, r2
 8006f0e:	189b      	adds	r3, r3, r2
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d201      	bcs.n	8006f1e <find_volume+0x302>
 8006f1a:	230d      	movs	r3, #13
 8006f1c:	e098      	b.n	8007050 <find_volume+0x434>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	1ad2      	subs	r2, r2, r3
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	789b      	ldrb	r3, [r3, #2]
 8006f28:	0019      	movs	r1, r3
 8006f2a:	0010      	movs	r0, r2
 8006f2c:	f7f9 f8ec 	bl	8000108 <__udivsi3>
 8006f30:	0003      	movs	r3, r0
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d104      	bne.n	8006f44 <find_volume+0x328>
 8006f3a:	230d      	movs	r3, #13
 8006f3c:	e088      	b.n	8007050 <find_volume+0x434>
 8006f3e:	46c0      	nop			; (mov r8, r8)
 8006f40:	20000b60 	.word	0x20000b60
	fmt = FS_FAT12;
 8006f44:	2157      	movs	r1, #87	; 0x57
 8006f46:	187b      	adds	r3, r7, r1
 8006f48:	2201      	movs	r2, #1
 8006f4a:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	4a42      	ldr	r2, [pc, #264]	; (8007058 <find_volume+0x43c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d902      	bls.n	8006f5a <find_volume+0x33e>
 8006f54:	187b      	adds	r3, r7, r1
 8006f56:	2202      	movs	r2, #2
 8006f58:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	4a3f      	ldr	r2, [pc, #252]	; (800705c <find_volume+0x440>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d903      	bls.n	8006f6a <find_volume+0x34e>
 8006f62:	2357      	movs	r3, #87	; 0x57
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	2203      	movs	r2, #3
 8006f68:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	1c9a      	adds	r2, r3, #2
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	60da      	str	r2, [r3, #12]
	fs->volbase = bsect;								/* Volume start sector */
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f76:	615a      	str	r2, [r3, #20]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006f78:	232e      	movs	r3, #46	; 0x2e
 8006f7a:	18fb      	adds	r3, r7, r3
 8006f7c:	881a      	ldrh	r2, [r3, #0]
 8006f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f80:	18d2      	adds	r2, r2, r3
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 8006f86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	18d2      	adds	r2, r2, r3
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
 8006f90:	2357      	movs	r3, #87	; 0x57
 8006f92:	18fb      	adds	r3, r7, r3
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d11e      	bne.n	8006fd8 <find_volume+0x3bc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	891b      	ldrh	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <find_volume+0x38a>
 8006fa2:	230d      	movs	r3, #13
 8006fa4:	e054      	b.n	8007050 <find_volume+0x434>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	2257      	movs	r2, #87	; 0x57
 8006faa:	5c9b      	ldrb	r3, [r3, r2]
 8006fac:	061a      	lsls	r2, r3, #24
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	2156      	movs	r1, #86	; 0x56
 8006fb2:	5c5b      	ldrb	r3, [r3, r1]
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fba:	2155      	movs	r1, #85	; 0x55
 8006fbc:	5c52      	ldrb	r2, [r2, r1]
 8006fbe:	0212      	lsls	r2, r2, #8
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc4:	2154      	movs	r1, #84	; 0x54
 8006fc6:	5c52      	ldrb	r2, [r2, r1]
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	61da      	str	r2, [r3, #28]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fd6:	e020      	b.n	800701a <find_volume+0x3fe>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	891b      	ldrh	r3, [r3, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <find_volume+0x3c8>
 8006fe0:	230d      	movs	r3, #13
 8006fe2:	e035      	b.n	8007050 <find_volume+0x434>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fea:	18d2      	adds	r2, r2, r3
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	61da      	str	r2, [r3, #28]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ff0:	2357      	movs	r3, #87	; 0x57
 8006ff2:	18fb      	adds	r3, r7, r3
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d103      	bne.n	8007002 <find_volume+0x3e6>
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	e00a      	b.n	8007018 <find_volume+0x3fc>
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	0013      	movs	r3, r2
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	189b      	adds	r3, r3, r2
 800700c:	085a      	lsrs	r2, r3, #1
 800700e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	2101      	movs	r1, #1
 8007014:	400b      	ands	r3, r1
 8007016:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007018:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	691a      	ldr	r2, [r3, #16]
 800701e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007020:	490f      	ldr	r1, [pc, #60]	; (8007060 <find_volume+0x444>)
 8007022:	468c      	mov	ip, r1
 8007024:	4463      	add	r3, ip
 8007026:	0a5b      	lsrs	r3, r3, #9
 8007028:	429a      	cmp	r2, r3
 800702a:	d201      	bcs.n	8007030 <find_volume+0x414>
		return FR_NO_FILESYSTEM;
 800702c:	230d      	movs	r3, #13
 800702e:	e00f      	b.n	8007050 <find_volume+0x434>
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	2257      	movs	r2, #87	; 0x57
 8007034:	18ba      	adds	r2, r7, r2
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800703a:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <find_volume+0x448>)
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	3301      	adds	r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	4b08      	ldr	r3, [pc, #32]	; (8007064 <find_volume+0x448>)
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	4b07      	ldr	r3, [pc, #28]	; (8007064 <find_volume+0x448>)
 8007048:	881a      	ldrh	r2, [r3, #0]
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	0018      	movs	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	b016      	add	sp, #88	; 0x58
 8007056:	bdb0      	pop	{r4, r5, r7, pc}
 8007058:	00000ff5 	.word	0x00000ff5
 800705c:	0000fff5 	.word	0x0000fff5
 8007060:	000001ff 	.word	0x000001ff
 8007064:	20000b64 	.word	0x20000b64

08007068 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d01a      	beq.n	80070b0 <validate+0x48>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d016      	beq.n	80070b0 <validate+0x48>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d011      	beq.n	80070b0 <validate+0x48>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	88da      	ldrh	r2, [r3, #6]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	889b      	ldrh	r3, [r3, #4]
 8007096:	429a      	cmp	r2, r3
 8007098:	d10a      	bne.n	80070b0 <validate+0x48>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	0018      	movs	r0, r3
 80070a2:	f7fe f82d 	bl	8005100 <disk_status>
 80070a6:	0003      	movs	r3, r0
 80070a8:	001a      	movs	r2, r3
 80070aa:	2301      	movs	r3, #1
 80070ac:	4013      	ands	r3, r2
 80070ae:	d001      	beq.n	80070b4 <validate+0x4c>
		return FR_INVALID_OBJECT;
 80070b0:	2309      	movs	r3, #9
 80070b2:	e000      	b.n	80070b6 <validate+0x4e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	0018      	movs	r0, r3
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b004      	add	sp, #16
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80070c0:	b5b0      	push	{r4, r5, r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	1dfb      	adds	r3, r7, #7
 80070cc:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80070d2:	2310      	movs	r3, #16
 80070d4:	18fb      	adds	r3, r7, r3
 80070d6:	0018      	movs	r0, r3
 80070d8:	f7ff fcf2 	bl	8006ac0 <get_ldnumber>
 80070dc:	0003      	movs	r3, r0
 80070de:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	da01      	bge.n	80070ea <f_mount+0x2a>
 80070e6:	230b      	movs	r3, #11
 80070e8:	e02c      	b.n	8007144 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80070ea:	4b18      	ldr	r3, [pc, #96]	; (800714c <f_mount+0x8c>)
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	0092      	lsls	r2, r2, #2
 80070f0:	58d3      	ldr	r3, [r2, r3]
 80070f2:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <f_mount+0x40>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <f_mount+0x4c>
		fs->fs_type = 0;				/* Clear new fs object */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800710c:	68f9      	ldr	r1, [r7, #12]
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <f_mount+0x8c>)
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	0092      	lsls	r2, r2, #2
 8007114:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <f_mount+0x64>
 800711c:	1dfb      	adds	r3, r7, #7
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d001      	beq.n	8007128 <f_mount+0x68>
 8007124:	2300      	movs	r3, #0
 8007126:	e00d      	b.n	8007144 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007128:	2517      	movs	r5, #23
 800712a:	197c      	adds	r4, r7, r5
 800712c:	2308      	movs	r3, #8
 800712e:	18f9      	adds	r1, r7, r3
 8007130:	230c      	movs	r3, #12
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	2200      	movs	r2, #0
 8007136:	0018      	movs	r0, r3
 8007138:	f7ff fd70 	bl	8006c1c <find_volume>
 800713c:	0003      	movs	r3, r0
 800713e:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8007140:	197b      	adds	r3, r7, r5
 8007142:	781b      	ldrb	r3, [r3, #0]
}
 8007144:	0018      	movs	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	b008      	add	sp, #32
 800714a:	bdb0      	pop	{r4, r5, r7, pc}
 800714c:	20000b60 	.word	0x20000b60

08007150 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007152:	b093      	sub	sp, #76	; 0x4c
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	1dfb      	adds	r3, r7, #7
 800715c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <f_open+0x18>
 8007164:	2309      	movs	r3, #9
 8007166:	e082      	b.n	800726e <f_open+0x11e>
	fp->fs = 0;			/* Clear file object */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
 800716e:	1dfb      	adds	r3, r7, #7
 8007170:	1dfa      	adds	r2, r7, #7
 8007172:	7812      	ldrb	r2, [r2, #0]
 8007174:	2101      	movs	r1, #1
 8007176:	400a      	ands	r2, r1
 8007178:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, 0);
 800717a:	2647      	movs	r6, #71	; 0x47
 800717c:	19bc      	adds	r4, r7, r6
 800717e:	2308      	movs	r3, #8
 8007180:	18f9      	adds	r1, r7, r3
 8007182:	251c      	movs	r5, #28
 8007184:	197b      	adds	r3, r7, r5
 8007186:	2200      	movs	r2, #0
 8007188:	0018      	movs	r0, r3
 800718a:	f7ff fd47 	bl	8006c1c <find_volume>
 800718e:	0003      	movs	r3, r0
 8007190:	7023      	strb	r3, [r4, #0]
#endif
	if (res == FR_OK) {
 8007192:	19bb      	adds	r3, r7, r6
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d166      	bne.n	8007268 <f_open+0x118>
		INIT_BUF(dj);
 800719a:	197b      	adds	r3, r7, r5
 800719c:	2210      	movs	r2, #16
 800719e:	18ba      	adds	r2, r7, r2
 80071a0:	619a      	str	r2, [r3, #24]
 80071a2:	197b      	adds	r3, r7, r5
 80071a4:	4a34      	ldr	r2, [pc, #208]	; (8007278 <f_open+0x128>)
 80071a6:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);	/* Follow the file path */
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	19bc      	adds	r4, r7, r6
 80071ac:	197b      	adds	r3, r7, r5
 80071ae:	0011      	movs	r1, r2
 80071b0:	0018      	movs	r0, r3
 80071b2:	f7ff fc09 	bl	80069c8 <follow_path>
 80071b6:	0003      	movs	r3, r0
 80071b8:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 80071ba:	002a      	movs	r2, r5
 80071bc:	18bb      	adds	r3, r7, r2
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	643b      	str	r3, [r7, #64]	; 0x40
			if (!fp->lockid) res = FR_INT_ERR;
#endif
		}

#else				/* R/O configuration */
		if (res == FR_OK) {					/* Follow succeeded */
 80071c2:	19bb      	adds	r3, r7, r6
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d114      	bne.n	80071f4 <f_open+0xa4>
			dir = dj.dir;
 80071ca:	18bb      	adds	r3, r7, r2
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	643b      	str	r3, [r7, #64]	; 0x40
			if (!dir) {						/* Current directory itself */
 80071d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <f_open+0x8e>
				res = FR_INVALID_NAME;
 80071d6:	19bb      	adds	r3, r7, r6
 80071d8:	2206      	movs	r2, #6
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	e00a      	b.n	80071f4 <f_open+0xa4>
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
 80071de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e0:	330b      	adds	r3, #11
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	001a      	movs	r2, r3
 80071e6:	2310      	movs	r3, #16
 80071e8:	4013      	ands	r3, r2
 80071ea:	d003      	beq.n	80071f4 <f_open+0xa4>
					res = FR_NO_FILE;
 80071ec:	2347      	movs	r3, #71	; 0x47
 80071ee:	18fb      	adds	r3, r7, r3
 80071f0:	2204      	movs	r2, #4
 80071f2:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80071f4:	2347      	movs	r3, #71	; 0x47
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d134      	bne.n	8007268 <f_open+0x118>
			fp->flag = mode;					/* File access mode */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1dfa      	adds	r2, r7, #7
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800720c:	241c      	movs	r4, #28
 800720e:	193b      	adds	r3, r7, r4
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007214:	0011      	movs	r1, r2
 8007216:	0018      	movs	r0, r3
 8007218:	f7ff f80a 	bl	8006230 <ld_clust>
 800721c:	0002      	movs	r2, r0
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007224:	331f      	adds	r3, #31
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	061a      	lsls	r2, r3, #24
 800722a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722c:	331e      	adds	r3, #30
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	041b      	lsls	r3, r3, #16
 8007232:	4313      	orrs	r3, r2
 8007234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007236:	321d      	adds	r2, #29
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	0212      	lsls	r2, r2, #8
 800723c:	4313      	orrs	r3, r2
 800723e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007240:	321c      	adds	r2, #28
 8007242:	7812      	ldrb	r2, [r2, #0]
 8007244:	431a      	orrs	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007256:	193b      	adds	r3, r7, r4
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	88da      	ldrh	r2, [r3, #6]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007268:	2347      	movs	r3, #71	; 0x47
 800726a:	18fb      	adds	r3, r7, r3
 800726c:	781b      	ldrb	r3, [r3, #0]
}
 800726e:	0018      	movs	r0, r3
 8007270:	46bd      	mov	sp, r7
 8007272:	b013      	add	sp, #76	; 0x4c
 8007274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	20000b68 	.word	0x20000b68

0800727c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800727c:	b5b0      	push	{r4, r5, r7, lr}
 800727e:	b08c      	sub	sp, #48	; 0x30
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007294:	251f      	movs	r5, #31
 8007296:	197c      	adds	r4, r7, r5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	0018      	movs	r0, r3
 800729c:	f7ff fee4 	bl	8007068 <validate>
 80072a0:	0003      	movs	r3, r0
 80072a2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80072a4:	197b      	adds	r3, r7, r5
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <f_read+0x36>
 80072ac:	197b      	adds	r3, r7, r5
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	e0e0      	b.n	8007474 <f_read+0x1f8>
	if (fp->err)								/* Check error */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	79db      	ldrb	r3, [r3, #7]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <f_read+0x44>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	79db      	ldrb	r3, [r3, #7]
 80072be:	e0d9      	b.n	8007474 <f_read+0x1f8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	799b      	ldrb	r3, [r3, #6]
 80072c4:	001a      	movs	r2, r3
 80072c6:	2301      	movs	r3, #1
 80072c8:	4013      	ands	r3, r2
 80072ca:	d101      	bne.n	80072d0 <f_read+0x54>
		LEAVE_FF(fp->fs, FR_DENIED);
 80072cc:	2307      	movs	r3, #7
 80072ce:	e0d1      	b.n	8007474 <f_read+0x1f8>
	remain = fp->fsize - fp->fptr;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d800      	bhi.n	80072e6 <f_read+0x6a>
 80072e4:	e0c1      	b.n	800746a <f_read+0x1ee>
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80072ea:	e0be      	b.n	800746a <f_read+0x1ee>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	05db      	lsls	r3, r3, #23
 80072f2:	0ddb      	lsrs	r3, r3, #23
 80072f4:	d000      	beq.n	80072f8 <f_read+0x7c>
 80072f6:	e07a      	b.n	80073ee <f_read+0x172>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	0a5b      	lsrs	r3, r3, #9
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	789b      	ldrb	r3, [r3, #2]
 8007306:	3b01      	subs	r3, #1
 8007308:	b2d9      	uxtb	r1, r3
 800730a:	2017      	movs	r0, #23
 800730c:	183b      	adds	r3, r7, r0
 800730e:	400a      	ands	r2, r1
 8007310:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
 8007312:	183b      	adds	r3, r7, r0
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d124      	bne.n	8007364 <f_read+0xe8>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <f_read+0xae>
					clst = fp->sclust;			/* Follow from the origin */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007328:	e009      	b.n	800733e <f_read+0xc2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	0019      	movs	r1, r3
 8007334:	0010      	movs	r0, r2
 8007336:	f7fe fdc8 	bl	8005eca <get_fat>
 800733a:	0003      	movs	r3, r0
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	2b01      	cmp	r3, #1
 8007342:	d804      	bhi.n	800734e <f_read+0xd2>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2202      	movs	r2, #2
 8007348:	71da      	strb	r2, [r3, #7]
 800734a:	2302      	movs	r3, #2
 800734c:	e092      	b.n	8007474 <f_read+0x1f8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	3301      	adds	r3, #1
 8007352:	d104      	bne.n	800735e <f_read+0xe2>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	71da      	strb	r2, [r3, #7]
 800735a:	2301      	movs	r3, #1
 800735c:	e08a      	b.n	8007474 <f_read+0x1f8>
				fp->clust = clst;				/* Update current cluster */
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007362:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	0019      	movs	r1, r3
 800736e:	0010      	movs	r0, r2
 8007370:	f7fe fd8f 	bl	8005e92 <clust2sect>
 8007374:	0003      	movs	r3, r0
 8007376:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d104      	bne.n	8007388 <f_read+0x10c>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2202      	movs	r2, #2
 8007382:	71da      	strb	r2, [r3, #7]
 8007384:	2302      	movs	r3, #2
 8007386:	e075      	b.n	8007474 <f_read+0x1f8>
			sect += csect;
 8007388:	2117      	movs	r1, #23
 800738a:	187b      	adds	r3, r7, r1
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	18d3      	adds	r3, r2, r3
 8007392:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	0a5b      	lsrs	r3, r3, #9
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2b00      	cmp	r3, #0
 800739e:	d023      	beq.n	80073e8 <f_read+0x16c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80073a0:	187b      	adds	r3, r7, r1
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	18d2      	adds	r2, r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	789b      	ldrb	r3, [r3, #2]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d907      	bls.n	80073c2 <f_read+0x146>
					cc = fp->fs->csize - csect;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	789b      	ldrb	r3, [r3, #2]
 80073b8:	001a      	movs	r2, r3
 80073ba:	187b      	adds	r3, r7, r1
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	7858      	ldrb	r0, [r3, #1]
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	6a39      	ldr	r1, [r7, #32]
 80073ce:	f7fd fec1 	bl	8005154 <disk_read>
 80073d2:	1e03      	subs	r3, r0, #0
 80073d4:	d004      	beq.n	80073e0 <f_read+0x164>
					ABORT(fp->fs, FR_DISK_ERR);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	71da      	strb	r2, [r3, #7]
 80073dc:	2301      	movs	r3, #1
 80073de:	e049      	b.n	8007474 <f_read+0x1f8>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	025b      	lsls	r3, r3, #9
 80073e4:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80073e6:	e02c      	b.n	8007442 <f_read+0x1c6>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	05db      	lsls	r3, r3, #23
 80073f4:	0ddb      	lsrs	r3, r3, #23
 80073f6:	2280      	movs	r2, #128	; 0x80
 80073f8:	0092      	lsls	r2, r2, #2
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80073fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d901      	bls.n	800740a <f_read+0x18e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	0019      	movs	r1, r3
 8007414:	0010      	movs	r0, r2
 8007416:	f7fe fd0f 	bl	8005e38 <move_window>
 800741a:	1e03      	subs	r3, r0, #0
 800741c:	d004      	beq.n	8007428 <f_read+0x1ac>
			ABORT(fp->fs, FR_DISK_ERR);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	71da      	strb	r2, [r3, #7]
 8007424:	2301      	movs	r3, #1
 8007426:	e025      	b.n	8007474 <f_read+0x1f8>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	05db      	lsls	r3, r3, #23
 8007432:	0ddb      	lsrs	r3, r3, #23
 8007434:	3328      	adds	r3, #40	; 0x28
 8007436:	18d1      	adds	r1, r2, r3
 8007438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	0018      	movs	r0, r3
 800743e:	f7fe fc87 	bl	8005d50 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007442:	6a3a      	ldr	r2, [r7, #32]
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	18d3      	adds	r3, r2, r3
 8007448:	623b      	str	r3, [r7, #32]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689a      	ldr	r2, [r3, #8]
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	18d2      	adds	r2, r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	609a      	str	r2, [r3, #8]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	18d2      	adds	r2, r2, r3
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d000      	beq.n	8007472 <f_read+0x1f6>
 8007470:	e73c      	b.n	80072ec <f_read+0x70>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007472:	2300      	movs	r3, #0
}
 8007474:	0018      	movs	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	b00c      	add	sp, #48	; 0x30
 800747a:	bdb0      	pop	{r4, r5, r7, pc}

0800747c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800747c:	b5b0      	push	{r4, r5, r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007484:	250f      	movs	r5, #15
 8007486:	197c      	adds	r4, r7, r5
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	0018      	movs	r0, r3
 800748c:	f7ff fdec 	bl	8007068 <validate>
 8007490:	0003      	movs	r3, r0
 8007492:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8007494:	197b      	adds	r3, r7, r5
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d102      	bne.n	80074a2 <f_close+0x26>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80074a2:	230f      	movs	r3, #15
 80074a4:	18fb      	adds	r3, r7, r3
 80074a6:	781b      	ldrb	r3, [r3, #0]
}
 80074a8:	0018      	movs	r0, r3
 80074aa:	46bd      	mov	sp, r7
 80074ac:	b004      	add	sp, #16
 80074ae:	bdb0      	pop	{r4, r5, r7, pc}

080074b0 <MX_TOUCHSENSING_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* TOUCHSENSING init function */
void MX_TOUCHSENSING_Init(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
/***************************************/
   /**
  */

  tsl_user_Init();
 80074b4:	f000 f804 	bl	80074c0 <tsl_user_Init>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80074b8:	46c0      	nop			; (mov r8, r8)
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <tsl_user_Init>:
  * @brief  Initialize the STMTouch Driver
  * @param  None
  * @retval None
  */
void tsl_user_Init(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  TSL_obj_GroupInit(&MyObjGroup); /* Init Objects */
 80074c4:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <tsl_user_Init+0x20>)
 80074c6:	0018      	movs	r0, r3
 80074c8:	f7fc fe04 	bl	80040d4 <TSL_obj_GroupInit>

  TSL_Init(MyBanks); /* Init acquisition module */
 80074cc:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <tsl_user_Init+0x24>)
 80074ce:	0018      	movs	r0, r3
 80074d0:	f7fc fdc6 	bl	8004060 <TSL_Init>

  tsl_user_SetThresholds(); /* Init thresholds for each object individually (optional) */
 80074d4:	f000 f808 	bl	80074e8 <tsl_user_SetThresholds>
}
 80074d8:	46c0      	nop			; (mov r8, r8)
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	20000004 	.word	0x20000004
 80074e4:	08008050 	.word	0x08008050

080074e8 <tsl_user_SetThresholds>:
  * @brief  Set thresholds for each object (optional).
  * @param  None
  * @retval None
  */
void tsl_user_SetThresholds(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* Example: Decrease the Detect thresholds for the TKEY 0
  MyTKeys_Param[0].DetectInTh -= 10;
  MyTKeys_Param[0].DetectOutTh -= 10;
  */
/* USER CODE END Tsl_user_SetThresholds */
  }
 80074ec:	46c0      	nop			; (mov r8, r8)
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <MyTKeys_ErrorStateProcess>:
  * @brief  Executed when a sensor is in Error state
  * @param  None
  * @retval None
  */
  void MyTKeys_ErrorStateProcess(void)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MyTKeys_ErrorStateProcess */
  /* Add here your own processing when a sensor is in Error state */
/* USER CODE END MyTKeys_ErrorStateProcess */
}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <MyTKeys_OffStateProcess>:
  * @brief  Executed when a sensor is in Off state
  * @param  None
  * @retval None
  */
void MyTKeys_OffStateProcess(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MyTKeys_OffStateProcess */
  /* Add here your own processing when a sensor is in Off state */
/* USER CODE END MyTKeys_OffStateProcess */
}
 8007500:	46c0      	nop			; (mov r8, r8)
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <__libc_init_array>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	2600      	movs	r6, #0
 800750c:	4d0c      	ldr	r5, [pc, #48]	; (8007540 <__libc_init_array+0x38>)
 800750e:	4c0d      	ldr	r4, [pc, #52]	; (8007544 <__libc_init_array+0x3c>)
 8007510:	1b64      	subs	r4, r4, r5
 8007512:	10a4      	asrs	r4, r4, #2
 8007514:	42a6      	cmp	r6, r4
 8007516:	d109      	bne.n	800752c <__libc_init_array+0x24>
 8007518:	2600      	movs	r6, #0
 800751a:	f000 f821 	bl	8007560 <_init>
 800751e:	4d0a      	ldr	r5, [pc, #40]	; (8007548 <__libc_init_array+0x40>)
 8007520:	4c0a      	ldr	r4, [pc, #40]	; (800754c <__libc_init_array+0x44>)
 8007522:	1b64      	subs	r4, r4, r5
 8007524:	10a4      	asrs	r4, r4, #2
 8007526:	42a6      	cmp	r6, r4
 8007528:	d105      	bne.n	8007536 <__libc_init_array+0x2e>
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	00b3      	lsls	r3, r6, #2
 800752e:	58eb      	ldr	r3, [r5, r3]
 8007530:	4798      	blx	r3
 8007532:	3601      	adds	r6, #1
 8007534:	e7ee      	b.n	8007514 <__libc_init_array+0xc>
 8007536:	00b3      	lsls	r3, r6, #2
 8007538:	58eb      	ldr	r3, [r5, r3]
 800753a:	4798      	blx	r3
 800753c:	3601      	adds	r6, #1
 800753e:	e7f2      	b.n	8007526 <__libc_init_array+0x1e>
 8007540:	080083e0 	.word	0x080083e0
 8007544:	080083e0 	.word	0x080083e0
 8007548:	080083e0 	.word	0x080083e0
 800754c:	080083e4 	.word	0x080083e4

08007550 <memset>:
 8007550:	0003      	movs	r3, r0
 8007552:	1882      	adds	r2, r0, r2
 8007554:	4293      	cmp	r3, r2
 8007556:	d100      	bne.n	800755a <memset+0xa>
 8007558:	4770      	bx	lr
 800755a:	7019      	strb	r1, [r3, #0]
 800755c:	3301      	adds	r3, #1
 800755e:	e7f9      	b.n	8007554 <memset+0x4>

08007560 <_init>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007566:	bc08      	pop	{r3}
 8007568:	469e      	mov	lr, r3
 800756a:	4770      	bx	lr

0800756c <_fini>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	46c0      	nop			; (mov r8, r8)
 8007570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007572:	bc08      	pop	{r3}
 8007574:	469e      	mov	lr, r3
 8007576:	4770      	bx	lr
