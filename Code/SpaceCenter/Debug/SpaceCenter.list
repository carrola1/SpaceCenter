
SpaceCenter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000510c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080051cc  080051cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005250  08005250  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005258  08005258  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005260  08005260  00015260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08005268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bdc  20000104  0800536c  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce0  0800536c  00020ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000228a8  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c04  00000000  00000000  000429d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  000475d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  00048760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019594  00000000  00000000  00049fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cbd  00000000  00000000  0006356c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009038b  00000000  00000000  0007c229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c5b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004008  00000000  00000000  0010c608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000d061  00000000  00000000  00110610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000104 	.word	0x20000104
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080051b4 	.word	0x080051b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000108 	.word	0x20000108
 8000104:	080051b4 	.word	0x080051b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <_ZN9LedButtonC1EP12GPIO_TypeDeftS1_t>:
#include "LedButton.hpp"

LedButton::LedButton(GPIO_TypeDef* ledGpioIn, uint16_t ledGpioPinIn, 
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	1dbb      	adds	r3, r7, #6
 80004aa:	801a      	strh	r2, [r3, #0]
                      GPIO_TypeDef* buttonGpioIn, uint16_t buttonGpioPinIn) {
  ledGpio = ledGpioIn;
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	601a      	str	r2, [r3, #0]
  ledGpioPin = ledGpioPinIn;
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	1dba      	adds	r2, r7, #6
 80004b6:	8812      	ldrh	r2, [r2, #0]
 80004b8:	809a      	strh	r2, [r3, #4]
  buttonGpio = buttonGpioIn;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	609a      	str	r2, [r3, #8]
  buttonGpioPin = buttonGpioPinIn;
 80004c0:	68fa      	ldr	r2, [r7, #12]
 80004c2:	2318      	movs	r3, #24
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	8193      	strh	r3, [r2, #12]
  buttonState = NOT_PRESSED;
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2200      	movs	r2, #0
 80004ce:	739a      	strb	r2, [r3, #14]
  ledState = OFF;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2200      	movs	r2, #0
 80004d4:	73da      	strb	r2, [r3, #15]
  timeLast = 0;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  debounceButton = false;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2200      	movs	r2, #0
 80004e0:	751a      	strb	r2, [r3, #20]
}
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	0018      	movs	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b004      	add	sp, #16
 80004ea:	bd80      	pop	{r7, pc}

080004ec <_ZN9LedButtonD1Ev>:

LedButton::~LedButton() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
}
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	0018      	movs	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}

080004fe <_ZN9LedButton11setLedStateE13LedState_enum>:

void LedButton::setLedState(LedState_enum state) {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	000a      	movs	r2, r1
 8000508:	1cfb      	adds	r3, r7, #3
 800050a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(ledGpio, ledGpioPin, static_cast<GPIO_PinState>(state));
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6818      	ldr	r0, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	8899      	ldrh	r1, [r3, #4]
 8000514:	1cfb      	adds	r3, r7, #3
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	f002 fc9b 	bl	8002e54 <HAL_GPIO_WritePin>
  ledState = state;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	1cfa      	adds	r2, r7, #3
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	73da      	strb	r2, [r3, #15]
}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}

0800052e <_ZN9LedButton17updateButtonStateEv>:

LedState_enum LedButton::getLedState() {
  return ledState;
}

void LedButton::updateButtonState() {
 800052e:	b5b0      	push	{r4, r5, r7, lr}
 8000530:	b086      	sub	sp, #24
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
  if (debounceButton == false) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7d1b      	ldrb	r3, [r3, #20]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d11f      	bne.n	800057e <_ZN9LedButton17updateButtonStateEv+0x50>
	ButtonState_enum newButtonState = static_cast<ButtonState_enum>(HAL_GPIO_ReadPin(buttonGpio, buttonGpioPin));
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	689a      	ldr	r2, [r3, #8]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	899b      	ldrh	r3, [r3, #12]
 8000546:	250f      	movs	r5, #15
 8000548:	197c      	adds	r4, r7, r5
 800054a:	0019      	movs	r1, r3
 800054c:	0010      	movs	r0, r2
 800054e:	f002 fc7b 	bl	8002e48 <HAL_GPIO_ReadPin>
 8000552:	0003      	movs	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]
    if (newButtonState != buttonState) {
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	7b9b      	ldrb	r3, [r3, #14]
 800055a:	197a      	adds	r2, r7, r5
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	429a      	cmp	r2, r3
 8000560:	d007      	beq.n	8000572 <_ZN9LedButton17updateButtonStateEv+0x44>
      debounceButton = true;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2201      	movs	r2, #1
 8000566:	751a      	strb	r2, [r3, #20]
      timeLast = HAL_GetTick();
 8000568:	f002 fa74 	bl	8002a54 <HAL_GetTick>
 800056c:	0002      	movs	r2, r0
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	611a      	str	r2, [r3, #16]
    }
    buttonState = newButtonState;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	220f      	movs	r2, #15
 8000576:	18ba      	adds	r2, r7, r2
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	739a      	strb	r2, [r3, #14]
    uint32_t timeDiff = timeNew - timeLast;
    if (timeDiff >= BUTTON_DEBOUNCE_MS) {
      debounceButton = false;
    }
  }
}
 800057c:	e00e      	b.n	800059c <_ZN9LedButton17updateButtonStateEv+0x6e>
    uint32_t timeNew = HAL_GetTick();
 800057e:	f002 fa69 	bl	8002a54 <HAL_GetTick>
 8000582:	0003      	movs	r3, r0
 8000584:	617b      	str	r3, [r7, #20]
    uint32_t timeDiff = timeNew - timeLast;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	691b      	ldr	r3, [r3, #16]
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	613b      	str	r3, [r7, #16]
    if (timeDiff >= BUTTON_DEBOUNCE_MS) {
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	2bc7      	cmp	r3, #199	; 0xc7
 8000594:	d902      	bls.n	800059c <_ZN9LedButton17updateButtonStateEv+0x6e>
      debounceButton = false;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	751a      	strb	r2, [r3, #20]
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b006      	add	sp, #24
 80005a2:	bdb0      	pop	{r4, r5, r7, pc}

080005a4 <_ZN9LedButton14getButtonStateEv>:

ButtonState_enum LedButton::getButtonState() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  return buttonState;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7b9b      	ldrb	r3, [r3, #14]
}
 80005b0:	0018      	movs	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b002      	add	sp, #8
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>:
// Peripheral usage
#include "NeoPixel.hpp"
#include <stdlib.h>

NeoPixel::NeoPixel(uint16_t n, TIM_HandleTypeDef &timHandle, uint32_t timChannel, DMA_HandleTypeDef &dmaHandle) 
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	200a      	movs	r0, #10
 80005c6:	183b      	adds	r3, r7, r0
 80005c8:	1c0a      	adds	r2, r1, #0
 80005ca:	801a      	strh	r2, [r3, #0]
        : htim(timHandle), hdma(dmaHandle), timCh{timChannel} {
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	615a      	str	r2, [r3, #20]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	69ba      	ldr	r2, [r7, #24]
 80005d6:	619a      	str	r2, [r3, #24]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	61da      	str	r2, [r3, #28]
  updateLength(n);
 80005de:	183b      	adds	r3, r7, r0
 80005e0:	881a      	ldrh	r2, [r3, #0]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	0011      	movs	r1, r2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 f80e 	bl	8000608 <_ZN8NeoPixel12updateLengthEt>
}
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	0018      	movs	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b004      	add	sp, #16
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_ZN8NeoPixelD1Ev>:

NeoPixel::~NeoPixel() {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
}
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b002      	add	sp, #8
 8000606:	bd80      	pop	{r7, pc}

08000608 <_ZN8NeoPixel12updateLengthEt>:

void NeoPixel::updateLength(uint16_t n) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	000a      	movs	r2, r1
 8000612:	1cbb      	adds	r3, r7, #2
 8000614:	801a      	strh	r2, [r3, #0]

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * 3;
 8000616:	1cbb      	adds	r3, r7, #2
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	1c1a      	adds	r2, r3, #0
 800061c:	1892      	adds	r2, r2, r2
 800061e:	18d3      	adds	r3, r2, r3
 8000620:	b29a      	uxth	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	809a      	strh	r2, [r3, #4]
  pixels = (uint8_t *)malloc(numBytes);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	889b      	ldrh	r3, [r3, #4]
 800062a:	0018      	movs	r0, r3
 800062c:	f004 fc74 	bl	8004f18 <malloc>
 8000630:	0003      	movs	r3, r0
 8000632:	001a      	movs	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	609a      	str	r2, [r3, #8]
  wrBufLen = n*3*8+8;
 8000638:	1cbb      	adds	r3, r7, #2
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	2218      	movs	r2, #24
 800063e:	4353      	muls	r3, r2
 8000640:	b29b      	uxth	r3, r3
 8000642:	3308      	adds	r3, #8
 8000644:	b29a      	uxth	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	801a      	strh	r2, [r3, #0]
  wr_buf = (uint8_t *)malloc(wrBufLen);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	0018      	movs	r0, r3
 8000650:	f004 fc62 	bl	8004f18 <malloc>
 8000654:	0003      	movs	r3, r0
 8000656:	001a      	movs	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	60da      	str	r2, [r3, #12]
  numLEDs = n;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	1cba      	adds	r2, r7, #2
 8000660:	8812      	ldrh	r2, [r2, #0]
 8000662:	805a      	strh	r2, [r3, #2]
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}

0800066c <_ZN8NeoPixel13setPixelColorEthhh>:

void NeoPixel::setPixelColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	000c      	movs	r4, r1
 8000676:	0010      	movs	r0, r2
 8000678:	0019      	movs	r1, r3
 800067a:	1cbb      	adds	r3, r7, #2
 800067c:	1c22      	adds	r2, r4, #0
 800067e:	801a      	strh	r2, [r3, #0]
 8000680:	1c7b      	adds	r3, r7, #1
 8000682:	1c02      	adds	r2, r0, #0
 8000684:	701a      	strb	r2, [r3, #0]
 8000686:	003b      	movs	r3, r7
 8000688:	1c0a      	adds	r2, r1, #0
 800068a:	701a      	strb	r2, [r3, #0]
  pixels[n * 3] = g;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6899      	ldr	r1, [r3, #8]
 8000690:	1cbb      	adds	r3, r7, #2
 8000692:	881a      	ldrh	r2, [r3, #0]
 8000694:	0013      	movs	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	189b      	adds	r3, r3, r2
 800069a:	18cb      	adds	r3, r1, r3
 800069c:	003a      	movs	r2, r7
 800069e:	7812      	ldrb	r2, [r2, #0]
 80006a0:	701a      	strb	r2, [r3, #0]
  pixels[n * 3 + 1] = r;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6899      	ldr	r1, [r3, #8]
 80006a6:	1cbb      	adds	r3, r7, #2
 80006a8:	881a      	ldrh	r2, [r3, #0]
 80006aa:	0013      	movs	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	189b      	adds	r3, r3, r2
 80006b0:	3301      	adds	r3, #1
 80006b2:	18cb      	adds	r3, r1, r3
 80006b4:	1c7a      	adds	r2, r7, #1
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	701a      	strb	r2, [r3, #0]
  pixels[n * 3 + 2] = b;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6899      	ldr	r1, [r3, #8]
 80006be:	1cbb      	adds	r3, r7, #2
 80006c0:	881a      	ldrh	r2, [r3, #0]
 80006c2:	0013      	movs	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	189b      	adds	r3, r3, r2
 80006c8:	3302      	adds	r3, #2
 80006ca:	18ca      	adds	r2, r1, r3
 80006cc:	2318      	movs	r3, #24
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	7013      	strb	r3, [r2, #0]
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b003      	add	sp, #12
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <_ZN8NeoPixel4showEv>:

void NeoPixel::show(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

  for(uint16_t j = 0; j < numBytes; j++) {
 80006e4:	2316      	movs	r3, #22
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	2200      	movs	r2, #0
 80006ea:	801a      	strh	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	889b      	ldrh	r3, [r3, #4]
 80006f0:	2216      	movs	r2, #22
 80006f2:	18ba      	adds	r2, r7, r2
 80006f4:	8812      	ldrh	r2, [r2, #0]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d22d      	bcs.n	8000756 <_ZN8NeoPixel4showEv+0x7a>
	  for(uint_fast8_t i = 0; i < 8; i++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	2b07      	cmp	r3, #7
 8000702:	d821      	bhi.n	8000748 <_ZN8NeoPixel4showEv+0x6c>
		  wr_buf[i+8*j   ] = PWM_LO << (((pixels[j]  << i) & 0x80) > 0);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	2316      	movs	r3, #22
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	18d3      	adds	r3, r2, r3
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	001a      	movs	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	409a      	lsls	r2, r3
 8000718:	0013      	movs	r3, r2
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	4013      	ands	r3, r2
 800071e:	2b00      	cmp	r3, #0
 8000720:	dd01      	ble.n	8000726 <_ZN8NeoPixel4showEv+0x4a>
 8000722:	2118      	movs	r1, #24
 8000724:	e000      	b.n	8000728 <_ZN8NeoPixel4showEv+0x4c>
 8000726:	210c      	movs	r1, #12
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68da      	ldr	r2, [r3, #12]
 800072c:	2316      	movs	r3, #22
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	0018      	movs	r0, r3
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	18c3      	adds	r3, r0, r3
 800073a:	18d3      	adds	r3, r2, r3
 800073c:	1c0a      	adds	r2, r1, #0
 800073e:	701a      	strb	r2, [r3, #0]
	  for(uint_fast8_t i = 0; i < 8; i++) {
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	3301      	adds	r3, #1
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	e7da      	b.n	80006fe <_ZN8NeoPixel4showEv+0x22>
  for(uint16_t j = 0; j < numBytes; j++) {
 8000748:	2116      	movs	r1, #22
 800074a:	187b      	adds	r3, r7, r1
 800074c:	881a      	ldrh	r2, [r3, #0]
 800074e:	187b      	adds	r3, r7, r1
 8000750:	3201      	adds	r2, #1
 8000752:	801a      	strh	r2, [r3, #0]
 8000754:	e7ca      	b.n	80006ec <_ZN8NeoPixel4showEv+0x10>
	  }
  }
  for(uint_fast8_t i = 0; i < 8; i++) {
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2b07      	cmp	r3, #7
 800075e:	d80e      	bhi.n	800077e <_ZN8NeoPixel4showEv+0xa2>
	  wr_buf[i+8*numBytes   ] = 0;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68da      	ldr	r2, [r3, #12]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	889b      	ldrh	r3, [r3, #4]
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	0019      	movs	r1, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	18cb      	adds	r3, r1, r3
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
  for(uint_fast8_t i = 0; i < 8; i++) {
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e7ed      	b.n	800075a <_ZN8NeoPixel4showEv+0x7e>
  }
  HAL_TIM_PWM_Start_DMA(&htim, timCh, (uint32_t *)wr_buf, wrBufLen);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6958      	ldr	r0, [r3, #20]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	69d9      	ldr	r1, [r3, #28]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	68da      	ldr	r2, [r3, #12]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	f003 fc8c 	bl	80040aa <HAL_TIM_PWM_Start_DMA>
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b006      	add	sp, #24
 8000798:	bd80      	pop	{r7, pc}

0800079a <_ZN10TouchBoardC1Ev>:
#include "TouchBoard.hpp"

TouchBoard::TouchBoard() {
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
  myTouchState = NOT_TOUCHED;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	739a      	strb	r2, [r3, #14]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	dc1c      	bgt.n	80007ec <_ZN10TouchBoardC1Ev+0x52>
    pixelColors[i].r = 0;
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	0013      	movs	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	189b      	adds	r3, r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	545a      	strb	r2, [r3, r1]
    pixelColors[i].g = 0;
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	0013      	movs	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	189b      	adds	r3, r3, r2
 80007ca:	18cb      	adds	r3, r1, r3
 80007cc:	3301      	adds	r3, #1
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
    pixelColors[i].b = 0;
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	0013      	movs	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	189b      	adds	r3, r3, r2
 80007dc:	18cb      	adds	r3, r1, r3
 80007de:	3302      	adds	r3, #2
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	e7df      	b.n	80007ac <_ZN10TouchBoardC1Ev+0x12>
  }
}
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	0018      	movs	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b004      	add	sp, #16
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_ZN10TouchBoardD1Ev>:

TouchBoard::~TouchBoard() {
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
}
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}

08000808 <_ZN10TouchBoard16setAllPixelColorEhhh>:
  pixelColors[pixel_num].r = r;
  pixelColors[pixel_num].g = g;
  pixelColors[pixel_num].b = b;
}

void TouchBoard::setAllPixelColor(uint8_t r, uint8_t g, uint8_t b) {
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	000c      	movs	r4, r1
 8000812:	0010      	movs	r0, r2
 8000814:	0019      	movs	r1, r3
 8000816:	1cfb      	adds	r3, r7, #3
 8000818:	1c22      	adds	r2, r4, #0
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	1cbb      	adds	r3, r7, #2
 800081e:	1c02      	adds	r2, r0, #0
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	1c7b      	adds	r3, r7, #1
 8000824:	1c0a      	adds	r2, r1, #0
 8000826:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b01      	cmp	r3, #1
 8000830:	dc1f      	bgt.n	8000872 <_ZN10TouchBoard16setAllPixelColorEhhh+0x6a>
    pixelColors[i].r = r;
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	0013      	movs	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	189b      	adds	r3, r3, r2
 800083c:	1cfa      	adds	r2, r7, #3
 800083e:	7812      	ldrb	r2, [r2, #0]
 8000840:	545a      	strb	r2, [r3, r1]
    pixelColors[i].g = g;
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	0013      	movs	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	189b      	adds	r3, r3, r2
 800084c:	18cb      	adds	r3, r1, r3
 800084e:	3301      	adds	r3, #1
 8000850:	1cba      	adds	r2, r7, #2
 8000852:	7812      	ldrb	r2, [r2, #0]
 8000854:	701a      	strb	r2, [r3, #0]
    pixelColors[i].b = b;
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	0013      	movs	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	189b      	adds	r3, r3, r2
 8000860:	18cb      	adds	r3, r1, r3
 8000862:	3302      	adds	r3, #2
 8000864:	1c7a      	adds	r2, r7, #1
 8000866:	7812      	ldrb	r2, [r2, #0]
 8000868:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e7dc      	b.n	800082c <_ZN10TouchBoard16setAllPixelColorEhhh+0x24>
  }
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b005      	add	sp, #20
 8000878:	bd90      	pop	{r4, r7, pc}
	...

0800087c <_ZN10TouchBoard13getPixelColorEh>:

PixelColor_s TouchBoard::getPixelColor(uint8_t pixel_ind) {
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	000a      	movs	r2, r1
 8000886:	1cfb      	adds	r3, r7, #3
 8000888:	701a      	strb	r2, [r3, #0]
  return pixelColors[pixel_ind];
 800088a:	1cfb      	adds	r3, r7, #3
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	240c      	movs	r4, #12
 8000890:	1938      	adds	r0, r7, r4
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	0013      	movs	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	189b      	adds	r3, r3, r2
 800089a:	18cb      	adds	r3, r1, r3
 800089c:	2203      	movs	r2, #3
 800089e:	0019      	movs	r1, r3
 80008a0:	f004 fb4e 	bl	8004f40 <memcpy>
 80008a4:	193a      	adds	r2, r7, r4
 80008a6:	2300      	movs	r3, #0
 80008a8:	7811      	ldrb	r1, [r2, #0]
 80008aa:	20ff      	movs	r0, #255	; 0xff
 80008ac:	4001      	ands	r1, r0
 80008ae:	20ff      	movs	r0, #255	; 0xff
 80008b0:	4383      	bics	r3, r0
 80008b2:	430b      	orrs	r3, r1
 80008b4:	7851      	ldrb	r1, [r2, #1]
 80008b6:	20ff      	movs	r0, #255	; 0xff
 80008b8:	4001      	ands	r1, r0
 80008ba:	0209      	lsls	r1, r1, #8
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <_ZN10TouchBoard13getPixelColorEh+0x5c>)
 80008be:	4003      	ands	r3, r0
 80008c0:	430b      	orrs	r3, r1
 80008c2:	7892      	ldrb	r2, [r2, #2]
 80008c4:	21ff      	movs	r1, #255	; 0xff
 80008c6:	400a      	ands	r2, r1
 80008c8:	0412      	lsls	r2, r2, #16
 80008ca:	4904      	ldr	r1, [pc, #16]	; (80008dc <_ZN10TouchBoard13getPixelColorEh+0x60>)
 80008cc:	400b      	ands	r3, r1
 80008ce:	4313      	orrs	r3, r2
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b005      	add	sp, #20
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	ffff00ff 	.word	0xffff00ff
 80008dc:	ff00ffff 	.word	0xff00ffff

080008e0 <_ZN10TouchBoard12setTouchGPIOEP12GPIO_TypeDeft>:

void TouchBoard::setTouchGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIOpin) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	1dbb      	adds	r3, r7, #6
 80008ec:	801a      	strh	r2, [r3, #0]
  myGpioPort = GPIOx;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	609a      	str	r2, [r3, #8]
  myGpioPin = GPIOpin;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	1dba      	adds	r2, r7, #6
 80008f8:	8812      	ldrh	r2, [r2, #0]
 80008fa:	819a      	strh	r2, [r3, #12]
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b004      	add	sp, #16
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZN10TouchBoard16updateTouchStateEv>:

void TouchBoard::updateTouchState() {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(myGpioPort, myGpioPin) == GPIO_PIN_RESET) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	899b      	ldrh	r3, [r3, #12]
 8000914:	0019      	movs	r1, r3
 8000916:	0010      	movs	r0, r2
 8000918:	f002 fa96 	bl	8002e48 <HAL_GPIO_ReadPin>
 800091c:	0003      	movs	r3, r0
 800091e:	425a      	negs	r2, r3
 8000920:	4153      	adcs	r3, r2
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d003      	beq.n	8000930 <_ZN10TouchBoard16updateTouchStateEv+0x2c>
    myTouchState = TOUCHED;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	739a      	strb	r2, [r3, #14]
  } else {
    myTouchState = NOT_TOUCHED;
  }
}
 800092e:	e002      	b.n	8000936 <_ZN10TouchBoard16updateTouchStateEv+0x32>
    myTouchState = NOT_TOUCHED;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2201      	movs	r2, #1
 8000934:	739a      	strb	r2, [r3, #14]
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}

0800093e <_ZN10TouchBoard13getTouchStateEv>:

TouchState_enum TouchBoard::getTouchState() {
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  return myTouchState;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7b9b      	ldrb	r3, [r3, #14]
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}

08000952 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>:
#include "TouchBoardGroup.hpp"
#include "TouchGpioMap.h"
#include "stm32l0xx_hal.h"

TouchBoardGroup::TouchBoardGroup(uint8_t n, TIM_HandleTypeDef &timHandle,
 8000968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096a:	b08b      	sub	sp, #44	; 0x2c
 800096c:	af02      	add	r7, sp, #8
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	260b      	movs	r6, #11
 8000976:	19bb      	adds	r3, r7, r6
 8000978:	1c0a      	adds	r2, r1, #0
 800097a:	701a      	strb	r2, [r3, #0]
                                  uint32_t timChannel, DMA_HandleTypeDef &dmaHandle) 
                : ledArray((uint16_t)(n*NUM_PIXELS_PER_BOARD), timHandle, timChannel, dmaHandle),
                  touchStates(n), touchBoards(n) {
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	1d18      	adds	r0, r3, #4
 8000980:	19bb      	adds	r3, r7, r6
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b29b      	uxth	r3, r3
 8000986:	18db      	adds	r3, r3, r3
 8000988:	b299      	uxth	r1, r3
 800098a:	683c      	ldr	r4, [r7, #0]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	0023      	movs	r3, r4
 8000994:	f7ff fe10 	bl	80005b8 <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3328      	adds	r3, #40	; 0x28
 800099c:	001c      	movs	r4, r3
 800099e:	19bb      	adds	r3, r7, r6
 80009a0:	781d      	ldrb	r5, [r3, #0]
 80009a2:	2314      	movs	r3, #20
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f973 	bl	8000c92 <_ZNSaI10TouchBoardEC1Ev>
 80009ac:	2314      	movs	r3, #20
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	001a      	movs	r2, r3
 80009b2:	0029      	movs	r1, r5
 80009b4:	0020      	movs	r0, r4
 80009b6:	f000 f986 	bl	8000cc6 <_ZNSt6vectorI10TouchBoardSaIS0_EEC1EjRKS1_>
 80009ba:	2314      	movs	r3, #20
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f974 	bl	8000cac <_ZNSaI10TouchBoardED1Ev>
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3334      	adds	r3, #52	; 0x34
 80009c8:	001c      	movs	r4, r3
 80009ca:	19bb      	adds	r3, r7, r6
 80009cc:	781d      	ldrb	r5, [r3, #0]
 80009ce:	2318      	movs	r3, #24
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 f9b0 	bl	8000d38 <_ZNSaI15TouchState_enumEC1Ev>
 80009d8:	2318      	movs	r3, #24
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	001a      	movs	r2, r3
 80009de:	0029      	movs	r1, r5
 80009e0:	0020      	movs	r0, r4
 80009e2:	f000 f9c3 	bl	8000d6c <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>
 80009e6:	2318      	movs	r3, #24
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f9b1 	bl	8000d52 <_ZNSaI15TouchState_enumED1Ev>
  numBoards = n;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	19ba      	adds	r2, r7, r6
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	701a      	strb	r2, [r3, #0]
  numPixels = n*NUM_PIXELS_PER_BOARD;
 80009f8:	19bb      	adds	r3, r7, r6
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	18db      	adds	r3, r3, r3
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	705a      	strb	r2, [r3, #1]
  for (int i=0; i<numBoards; i++) {
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	4293      	cmp	r3, r2
 8000a12:	da1f      	bge.n	8000a54 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0xec>
    touchBoards[i].setTouchGPIO(touchGpioMap_Port[i], touchGpioMap_Pin[i]);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3328      	adds	r3, #40	; 0x28
 8000a18:	69fa      	ldr	r2, [r7, #28]
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 f9de 	bl	8000dde <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0xf8>)
 8000a24:	69fa      	ldr	r2, [r7, #28]
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	58d1      	ldr	r1, [r2, r3]
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0xfc>)
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	0052      	lsls	r2, r2, #1
 8000a30:	5ad3      	ldrh	r3, [r2, r3]
 8000a32:	001a      	movs	r2, r3
 8000a34:	f7ff ff54 	bl	80008e0 <_ZN10TouchBoard12setTouchGPIOEP12GPIO_TypeDeft>
    touchStates[i] = NOT_TOUCHED;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3334      	adds	r3, #52	; 0x34
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 f9da 	bl	8000dfa <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>
 8000a46:	0003      	movs	r3, r0
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<numBoards; i++) {
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
 8000a52:	e7d9      	b.n	8000a08 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0xa0>
  }
}
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b009      	add	sp, #36	; 0x24
 8000a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000060 	.word	0x20000060

08000a68 <_ZN15TouchBoardGroupD1Ev>:

TouchBoardGroup::~TouchBoardGroup() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3334      	adds	r3, #52	; 0x34
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 f997 	bl	8000da8 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3328      	adds	r3, #40	; 0x28
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 f93f 	bl	8000d02 <_ZNSt6vectorI10TouchBoardSaIS0_EED1Ev>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3304      	adds	r3, #4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff fdb4 	bl	80005f6 <_ZN8NeoPixelD1Ev>
}
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN15TouchBoardGroup16setAllPixelColorEhhh>:

void TouchBoardGroup::setPixelColor(uint8_t board_num, uint8_t pixel_ind, uint8_t r, uint8_t g, uint8_t b) {
  touchBoards[board_num].setPixelColor(pixel_ind, r, g, b);
}

void TouchBoardGroup::setAllPixelColor(uint8_t r, uint8_t g, uint8_t b) {
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	000c      	movs	r4, r1
 8000aa2:	0010      	movs	r0, r2
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	1cfb      	adds	r3, r7, #3
 8000aa8:	1c22      	adds	r2, r4, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	1cbb      	adds	r3, r7, #2
 8000aae:	1c02      	adds	r2, r0, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	1c7b      	adds	r3, r7, #1
 8000ab4:	1c0a      	adds	r2, r1, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<numBoards; i++) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	da15      	bge.n	8000af4 <_ZN15TouchBoardGroup16setAllPixelColorEhhh+0x5c>
    touchBoards[i].setAllPixelColor(r, g, b);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3328      	adds	r3, #40	; 0x28
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 f984 	bl	8000dde <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000ad6:	0004      	movs	r4, r0
 8000ad8:	1c7b      	adds	r3, r7, #1
 8000ada:	7818      	ldrb	r0, [r3, #0]
 8000adc:	1cbb      	adds	r3, r7, #2
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	1cfb      	adds	r3, r7, #3
 8000ae2:	7819      	ldrb	r1, [r3, #0]
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	0020      	movs	r0, r4
 8000ae8:	f7ff fe8e 	bl	8000808 <_ZN10TouchBoard16setAllPixelColorEhhh>
  for (int i=0; i<numBoards; i++) {
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e7e3      	b.n	8000abc <_ZN15TouchBoardGroup16setAllPixelColorEhhh+0x24>
  }
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b005      	add	sp, #20
 8000afa:	bd90      	pop	{r4, r7, pc}

08000afc <_ZN15TouchBoardGroup13setBoardColorEhhhh>:

void TouchBoardGroup::setBoardColor(uint8_t board_num, uint8_t r, uint8_t g, uint8_t b) {
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	000c      	movs	r4, r1
 8000b06:	0010      	movs	r0, r2
 8000b08:	0019      	movs	r1, r3
 8000b0a:	1cfb      	adds	r3, r7, #3
 8000b0c:	1c22      	adds	r2, r4, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	1cbb      	adds	r3, r7, #2
 8000b12:	1c02      	adds	r2, r0, #0
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	1c7b      	adds	r3, r7, #1
 8000b18:	1c0a      	adds	r2, r1, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
  touchBoards[board_num].setAllPixelColor(r, g, b);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3328      	adds	r3, #40	; 0x28
 8000b20:	001a      	movs	r2, r3
 8000b22:	1cfb      	adds	r3, r7, #3
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0019      	movs	r1, r3
 8000b28:	0010      	movs	r0, r2
 8000b2a:	f000 f958 	bl	8000dde <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000b2e:	0004      	movs	r4, r0
 8000b30:	2318      	movs	r3, #24
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	7818      	ldrb	r0, [r3, #0]
 8000b36:	1c7b      	adds	r3, r7, #1
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	1cbb      	adds	r3, r7, #2
 8000b3c:	7819      	ldrb	r1, [r3, #0]
 8000b3e:	0003      	movs	r3, r0
 8000b40:	0020      	movs	r0, r4
 8000b42:	f7ff fe61 	bl	8000808 <_ZN10TouchBoard16setAllPixelColorEhhh>
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b003      	add	sp, #12
 8000b4c:	bd90      	pop	{r4, r7, pc}

08000b4e <_ZN15TouchBoardGroup10showPixelsEv>:
  touchBoards[board_num].setAllPixelColor(255, 0, 0);
  showPixels();
  HAL_Delay(40);
}

void TouchBoardGroup::showPixels() {
 8000b4e:	b5b0      	push	{r4, r5, r7, lr}
 8000b50:	b088      	sub	sp, #32
 8000b52:	af02      	add	r7, sp, #8
 8000b54:	6078      	str	r0, [r7, #4]
  for (int i=0; i<numBoards; i++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	001a      	movs	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	4293      	cmp	r3, r2
 8000b64:	da3b      	bge.n	8000bde <_ZN15TouchBoardGroup10showPixelsEv+0x90>
    for (int j=0; j<NUM_PIXELS_PER_BOARD; j++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	dc32      	bgt.n	8000bd6 <_ZN15TouchBoardGroup10showPixelsEv+0x88>
      PixelColor_s tempColor = touchBoards[i].getPixelColor(j);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3328      	adds	r3, #40	; 0x28
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 f930 	bl	8000dde <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000b7e:	0002      	movs	r2, r0
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	0019      	movs	r1, r3
 8000b86:	0010      	movs	r0, r2
 8000b88:	f7ff fe78 	bl	800087c <_ZN10TouchBoard13getPixelColorEh>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	001a      	movs	r2, r3
 8000b90:	240c      	movs	r4, #12
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	1c11      	adds	r1, r2, #0
 8000b96:	7019      	strb	r1, [r3, #0]
 8000b98:	0411      	lsls	r1, r2, #16
 8000b9a:	0e09      	lsrs	r1, r1, #24
 8000b9c:	7059      	strb	r1, [r3, #1]
 8000b9e:	0212      	lsls	r2, r2, #8
 8000ba0:	0e12      	lsrs	r2, r2, #24
 8000ba2:	709a      	strb	r2, [r3, #2]
      ledArray.setPixelColor(i*NUM_PIXELS_PER_BOARD+j, tempColor.r, tempColor.g, tempColor.b);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	1d18      	adds	r0, r3, #4
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	18db      	adds	r3, r3, r3
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	b299      	uxth	r1, r3
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	0025      	movs	r5, r4
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	785c      	ldrb	r4, [r3, #1]
 8000bc2:	197b      	adds	r3, r7, r5
 8000bc4:	789b      	ldrb	r3, [r3, #2]
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	0023      	movs	r3, r4
 8000bca:	f7ff fd4f 	bl	800066c <_ZN8NeoPixel13setPixelColorEthhh>
    for (int j=0; j<NUM_PIXELS_PER_BOARD; j++) {
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	e7c9      	b.n	8000b6a <_ZN15TouchBoardGroup10showPixelsEv+0x1c>
  for (int i=0; i<numBoards; i++) {
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e7bd      	b.n	8000b5a <_ZN15TouchBoardGroup10showPixelsEv+0xc>
    }
  }
  ledArray.show();
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3304      	adds	r3, #4
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fd7a 	bl	80006dc <_ZN8NeoPixel4showEv>
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b006      	add	sp, #24
 8000bee:	bdb0      	pop	{r4, r5, r7, pc}

08000bf0 <_ZN15TouchBoardGroup17updateTouchStatesEv>:

PixelColor_s TouchBoardGroup::getPixelColor(uint8_t board_num, uint8_t pixel_ind) {
  return touchBoards[board_num].getPixelColor(pixel_ind);
}

void TouchBoardGroup::updateTouchStates() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  for (int i=0; i<numBoards; i++) {
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4293      	cmp	r3, r2
 8000c06:	da0e      	bge.n	8000c26 <_ZN15TouchBoardGroup17updateTouchStatesEv+0x36>
    touchBoards[i].updateTouchState();
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3328      	adds	r3, #40	; 0x28
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	0011      	movs	r1, r2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f000 f8e4 	bl	8000dde <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000c16:	0003      	movs	r3, r0
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fe73 	bl	8000904 <_ZN10TouchBoard16updateTouchStateEv>
  for (int i=0; i<numBoards; i++) {
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	e7ea      	b.n	8000bfc <_ZN15TouchBoardGroup17updateTouchStatesEv+0xc>
  }
}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b004      	add	sp, #16
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_ZN15TouchBoardGroup14getTouchStatesEv>:

std::vector<TouchState_enum> TouchBoardGroup::getTouchStates() {
 8000c2e:	b5b0      	push	{r4, r5, r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
  for (int i=0; i<numBoards; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	001a      	movs	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4293      	cmp	r3, r2
 8000c46:	da18      	bge.n	8000c7a <_ZN15TouchBoardGroup14getTouchStatesEv+0x4c>
    touchStates[i] = touchBoards[i].getTouchState();
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	3328      	adds	r3, #40	; 0x28
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 f8c4 	bl	8000dde <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000c56:	0005      	movs	r5, r0
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	3334      	adds	r3, #52	; 0x34
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 f8ca 	bl	8000dfa <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>
 8000c66:	0004      	movs	r4, r0
 8000c68:	0028      	movs	r0, r5
 8000c6a:	f7ff fe68 	bl	800093e <_ZN10TouchBoard13getTouchStateEv>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	7023      	strb	r3, [r4, #0]
  for (int i=0; i<numBoards; i++) {
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	e7e0      	b.n	8000c3c <_ZN15TouchBoardGroup14getTouchStatesEv+0xe>
  }
  return touchStates;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	3334      	adds	r3, #52	; 0x34
 8000c7e:	001a      	movs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 f8c5 	bl	8000e14 <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS2_>
}
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bdb0      	pop	{r4, r5, r7, pc}

08000c92 <_ZNSaI10TouchBoardEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f000 f8f7 	bl	8000e90 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1Ev>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b002      	add	sp, #8
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_ZNSaI10TouchBoardED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 f8f3 	bl	8000ea2 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardED1Ev>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_ZNSt6vectorI10TouchBoardSaIS0_EEC1EjRKS1_>:
       *
       *  This constructor fills the %vector with @a __n default
       *  constructed elements.
       */
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8000cc6:	b590      	push	{r4, r7, lr}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8000cd2:	68fc      	ldr	r4, [r7, #12]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	0011      	movs	r1, r2
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 f8ea 	bl	8000eb4 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_>
 8000ce0:	0001      	movs	r1, r0
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	0020      	movs	r0, r4
 8000ce8:	f000 f919 	bl	8000f1e <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EEC1EjRKS1_>
      { _M_default_initialize(__n); }
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 f944 	bl	8000f80 <_ZNSt6vectorI10TouchBoardSaIS0_EE21_M_default_initializeEj>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b005      	add	sp, #20
 8000d00:	bd90      	pop	{r4, r7, pc}

08000d02 <_ZNSt6vectorI10TouchBoardSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000d02:	b5b0      	push	{r4, r5, r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681c      	ldr	r4, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 f94b 	bl	8000fb0 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>
 8000d1a:	0003      	movs	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	0029      	movs	r1, r5
 8000d20:	0020      	movs	r0, r4
 8000d22:	f000 f94e 	bl	8000fc2 <_ZSt8_DestroyIP10TouchBoardS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 f90f 	bl	8000f4c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EED1Ev>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b002      	add	sp, #8
 8000d36:	bdb0      	pop	{r4, r5, r7, pc}

08000d38 <_ZNSaI15TouchState_enumEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 f94d 	bl	8000fe2 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1Ev>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_ZNSaI15TouchState_enumED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 f949 	bl	8000ff4 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumED1Ev>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8000d78:	68fc      	ldr	r4, [r7, #12]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 f941 	bl	8001008 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_>
 8000d86:	0001      	movs	r1, r0
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	0020      	movs	r0, r4
 8000d8e:	f000 f970 	bl	8001072 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>
      { _M_default_initialize(__n); }
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f000 f99a 	bl	80010d2 <_ZNSt6vectorI15TouchState_enumSaIS0_EE21_M_default_initializeEj>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b005      	add	sp, #20
 8000da6:	bd90      	pop	{r4, r7, pc}

08000da8 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681c      	ldr	r4, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 f9a1 	bl	8001102 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8000dc0:	0003      	movs	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	0029      	movs	r1, r5
 8000dc6:	0020      	movs	r0, r4
 8000dc8:	f000 f9a4 	bl	8001114 <_ZSt8_DestroyIP15TouchState_enumS0_EvT_S2_RSaIT0_E>
      }
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 f966 	bl	80010a0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EED1Ev>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bdb0      	pop	{r4, r5, r7, pc}

08000dde <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	18d3      	adds	r3, r2, r3
      }
 8000df2:	0018      	movs	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	18d3      	adds	r3, r2, r3
      }
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b002      	add	sp, #8
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8000e1e:	687c      	ldr	r4, [r7, #4]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 f986 	bl	8001134 <_ZNKSt6vectorI15TouchState_enumSaIS0_EE4sizeEv>
 8000e28:	0005      	movs	r5, r0
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 f99d 	bl	800116c <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8000e32:	0002      	movs	r2, r0
 8000e34:	260c      	movs	r6, #12
 8000e36:	19bb      	adds	r3, r7, r6
 8000e38:	0011      	movs	r1, r2
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 f987 	bl	800114e <_ZN9__gnu_cxx14__alloc_traitsISaI15TouchState_enumES1_E17_S_select_on_copyERKS2_>
 8000e40:	19bb      	adds	r3, r7, r6
 8000e42:	001a      	movs	r2, r3
 8000e44:	0029      	movs	r1, r5
 8000e46:	0020      	movs	r0, r4
 8000e48:	f000 f913 	bl	8001072 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>
 8000e4c:	19bb      	adds	r3, r7, r6
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff ff7f 	bl	8000d52 <_ZNSaI15TouchState_enumED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 f991 	bl	800117e <_ZNKSt6vectorI15TouchState_enumSaIS0_EE5beginEv>
 8000e5c:	0005      	movs	r5, r0
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 f9a0 	bl	80011a6 <_ZNKSt6vectorI15TouchState_enumSaIS0_EE3endEv>
 8000e66:	0006      	movs	r6, r0
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 f947 	bl	8001102 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8000e74:	0003      	movs	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8000e76:	0022      	movs	r2, r4
 8000e78:	0031      	movs	r1, r6
 8000e7a:	0028      	movs	r0, r5
 8000e7c:	f000 f9a7 	bl	80011ce <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>
 8000e80:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	605a      	str	r2, [r3, #4]
      }
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b005      	add	sp, #20
 8000e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e90 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8000eb4:	b5b0      	push	{r4, r5, r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	250c      	movs	r5, #12
 8000ec2:	197b      	adds	r3, r7, r5
 8000ec4:	0011      	movs	r1, r2
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 f9b0 	bl	800122c <_ZNSaI10TouchBoardEC1ERKS0_>
 8000ecc:	197b      	adds	r3, r7, r5
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 f990 	bl	80011f4 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	419b      	sbcs	r3, r3
 8000edc:	425b      	negs	r3, r3
 8000ede:	b2dc      	uxtb	r4, r3
 8000ee0:	197b      	adds	r3, r7, r5
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f7ff fee2 	bl	8000cac <_ZNSaI10TouchBoardED1Ev>
 8000ee8:	2c00      	cmp	r4, #0
 8000eea:	d003      	beq.n	8000ef4 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_+0x40>
	  __throw_length_error(
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f003 ffd7 	bl	8004ea2 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8000ef4:	687b      	ldr	r3, [r7, #4]
      }
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b004      	add	sp, #16
 8000efc:	bdb0      	pop	{r4, r5, r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	080051cc 	.word	0x080051cc

08000f04 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff fecc 	bl	8000cac <_ZNSaI10TouchBoardED1Ev>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EEC1EjRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f000 f98b 	bl	800124c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 f999 	bl	8001274 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_M_create_storageEj>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b004      	add	sp, #16
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8000f64:	001a      	movs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 f9a0 	bl	80012ae <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j>
      }
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ffc7 	bl	8000f04 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implD1Ev>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	0018      	movs	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_ZNSt6vectorI10TouchBoardSaIS0_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f000 f80d 	bl	8000fb0 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>
 8000f96:	0002      	movs	r2, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f000 f999 	bl	80012d4 <_ZSt27__uninitialized_default_n_aIP10TouchBoardjS0_ET_S2_T0_RSaIT1_E>
 8000fa2:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	605a      	str	r2, [r3, #4]
      }
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b003      	add	sp, #12
 8000fae:	bd90      	pop	{r4, r7, pc}

08000fb0 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZSt8_DestroyIP10TouchBoardS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 f98e 	bl	80012f6 <_ZSt8_DestroyIP10TouchBoardEvT_S2_>
    }
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b004      	add	sp, #16
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b002      	add	sp, #8
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	250c      	movs	r5, #12
 8001016:	197b      	adds	r3, r7, r5
 8001018:	0011      	movs	r1, r2
 800101a:	0018      	movs	r0, r3
 800101c:	f000 f996 	bl	800134c <_ZNSaI15TouchState_enumEC1ERKS0_>
 8001020:	197b      	adds	r3, r7, r5
 8001022:	0018      	movs	r0, r3
 8001024:	f000 f976 	bl	8001314 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_>
 8001028:	0002      	movs	r2, r0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	419b      	sbcs	r3, r3
 8001030:	425b      	negs	r3, r3
 8001032:	b2dc      	uxtb	r4, r3
 8001034:	197b      	adds	r3, r7, r5
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff fe8b 	bl	8000d52 <_ZNSaI15TouchState_enumED1Ev>
 800103c:	2c00      	cmp	r4, #0
 800103e:	d003      	beq.n	8001048 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_+0x40>
	  __throw_length_error(
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8001042:	0018      	movs	r0, r3
 8001044:	f003 ff2d 	bl	8004ea2 <_ZSt20__throw_length_errorPKc>
	return __n;
 8001048:	687b      	ldr	r3, [r7, #4]
      }
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bdb0      	pop	{r4, r5, r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	080051cc 	.word	0x080051cc

08001058 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fe75 	bl	8000d52 <_ZNSaI15TouchState_enumED1Ev>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}

08001072 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f000 f971 	bl	800136c <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f000 f97f 	bl	8001394 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_M_create_storageEj>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80010b6:	001a      	movs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 f986 	bl	80013cc <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j>
      }
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff ffc8 	bl	8001058 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implD1Ev>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_ZNSt6vectorI15TouchState_enumSaIS0_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 80010d2:	b590      	push	{r4, r7, lr}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 f80d 	bl	8001102 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 80010e8:	0002      	movs	r2, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	0019      	movs	r1, r3
 80010ee:	0020      	movs	r0, r4
 80010f0:	f000 f97f 	bl	80013f2 <_ZSt27__uninitialized_default_n_aIP15TouchState_enumjS0_ET_S2_T0_RSaIT1_E>
 80010f4:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	605a      	str	r2, [r3, #4]
      }
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b003      	add	sp, #12
 8001100:	bd90      	pop	{r4, r7, pc}

08001102 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZSt8_DestroyIP15TouchState_enumS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	0011      	movs	r1, r2
 8001126:	0018      	movs	r0, r3
 8001128:	f000 f974 	bl	8001414 <_ZSt8_DestroyIP15TouchState_enumEvT_S2_>
    }
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b004      	add	sp, #16
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZNKSt6vectorI15TouchState_enumSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZN9__gnu_cxx14__alloc_traitsISaI15TouchState_enumES1_E17_S_select_on_copyERKS2_>:
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	0011      	movs	r1, r2
 800115e:	0018      	movs	r0, r3
 8001160:	f000 f967 	bl	8001432 <_ZNSt16allocator_traitsISaI15TouchState_enumEE37select_on_container_copy_constructionERKS1_>
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	0018      	movs	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}

0800117e <_ZNKSt6vectorI15TouchState_enumSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800117e:	b580      	push	{r7, lr}
 8001180:	b084      	sub	sp, #16
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	230c      	movs	r3, #12
 800118e:	18fa      	adds	r2, r7, r3
 8001190:	2308      	movs	r3, #8
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	0011      	movs	r1, r2
 8001196:	0018      	movs	r0, r3
 8001198:	f000 f95a 	bl	8001450 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b004      	add	sp, #16
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZNKSt6vectorI15TouchState_enumSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	230c      	movs	r3, #12
 80011b6:	18fa      	adds	r2, r7, r3
 80011b8:	2308      	movs	r3, #8
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 f946 	bl	8001450 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b004      	add	sp, #16
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f942 	bl	800146c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
 80011e8:	0003      	movs	r3, r0
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 80011fe:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	0018      	movs	r0, r3
 8001204:	f000 f947 	bl	8001496 <_ZNSt16allocator_traitsISaI10TouchBoardEE8max_sizeERKS1_>
 8001208:	0003      	movs	r3, r0
 800120a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800120c:	2308      	movs	r3, #8
 800120e:	18fa      	adds	r2, r7, r3
 8001210:	230c      	movs	r3, #12
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	0011      	movs	r1, r2
 8001216:	0018      	movs	r0, r3
 8001218:	f000 f94a 	bl	80014b0 <_ZSt3minIjERKT_S2_S2_>
 800121c:	0003      	movs	r3, r0
 800121e:	681b      	ldr	r3, [r3, #0]
      }
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b004      	add	sp, #16
 8001226:	bd80      	pop	{r7, pc}
 8001228:	07ffffff 	.word	0x07ffffff

0800122c <_ZNSaI10TouchBoardEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	0011      	movs	r1, r2
 800123c:	0018      	movs	r0, r3
 800123e:	f000 f949 	bl	80014d4 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1ERKS2_>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	0011      	movs	r1, r2
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff ffe5 	bl	800122c <_ZNSaI10TouchBoardEC1ERKS0_>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	0018      	movs	r0, r3
 8001266:	f000 f93f 	bl	80014e8 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}

08001274 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	0011      	movs	r1, r2
 8001284:	0018      	movs	r0, r3
 8001286:	f000 f941 	bl	800150c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj>
 800128a:	0002      	movs	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	18d2      	adds	r2, r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	609a      	str	r2, [r3, #8]
      }
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
	if (__p)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 f935 	bl	8001536 <_ZNSt16allocator_traitsISaI10TouchBoardEE10deallocateERS1_PS0_j>
      }
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b004      	add	sp, #16
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_ZSt27__uninitialized_default_n_aIP10TouchBoardjS0_ET_S2_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	0011      	movs	r1, r2
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 f935 	bl	8001556 <_ZSt25__uninitialized_default_nIP10TouchBoardjET_S2_T0_>
 80012ec:	0003      	movs	r3, r0
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b004      	add	sp, #16
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZSt8_DestroyIP10TouchBoardEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	0011      	movs	r1, r2
 8001306:	0018      	movs	r0, r3
 8001308:	f000 f939 	bl	800157e <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_>
    }
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b002      	add	sp, #8
 8001312:	bd80      	pop	{r7, pc}

08001314 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800131e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	0018      	movs	r0, r3
 8001324:	f000 f944 	bl	80015b0 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8max_sizeERKS1_>
 8001328:	0003      	movs	r3, r0
 800132a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800132c:	2308      	movs	r3, #8
 800132e:	18fa      	adds	r2, r7, r3
 8001330:	230c      	movs	r3, #12
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	0011      	movs	r1, r2
 8001336:	0018      	movs	r0, r3
 8001338:	f000 f8ba 	bl	80014b0 <_ZSt3minIjERKT_S2_S2_>
 800133c:	0003      	movs	r3, r0
 800133e:	681b      	ldr	r3, [r3, #0]
      }
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	b004      	add	sp, #16
 8001346:	bd80      	pop	{r7, pc}
 8001348:	7fffffff 	.word	0x7fffffff

0800134c <_ZNSaI15TouchState_enumEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	0011      	movs	r1, r2
 800135c:	0018      	movs	r0, r3
 800135e:	f000 f934 	bl	80015ca <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1ERKS2_>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}

0800136c <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0011      	movs	r1, r2
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff ffe5 	bl	800134c <_ZNSaI15TouchState_enumEC1ERKS0_>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0018      	movs	r0, r3
 8001386:	f000 f92a 	bl	80015de <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}

08001394 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	0011      	movs	r1, r2
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 f92c 	bl	8001602 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj>
 80013aa:	0002      	movs	r2, r0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	18d2      	adds	r2, r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
      }
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	if (__p)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f000 f921 	bl	800162c <_ZNSt16allocator_traitsISaI15TouchState_enumEE10deallocateERS1_PS0_j>
      }
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZSt27__uninitialized_default_n_aIP15TouchState_enumjS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	0011      	movs	r1, r2
 8001404:	0018      	movs	r0, r3
 8001406:	f000 f921 	bl	800164c <_ZSt25__uninitialized_default_nIP15TouchState_enumjET_S2_T0_>
 800140a:	0003      	movs	r3, r0
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b004      	add	sp, #16
 8001412:	bd80      	pop	{r7, pc}

08001414 <_ZSt8_DestroyIP15TouchState_enumEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f000 f925 	bl	8001674 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15TouchState_enumEEvT_S4_>
    }
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}

08001432 <_ZNSt16allocator_traitsISaI15TouchState_enumEE37select_on_container_copy_constructionERKS1_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff ff82 	bl	800134c <_ZNSaI15TouchState_enumEC1ERKS0_>
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	46bd      	mov	sp, r7
 800144c:	b002      	add	sp, #8
 800144e:	bd80      	pop	{r7, pc}

08001450 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}

0800146c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001478:	2317      	movs	r3, #23
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
	__uninit_copy(__first, __last, __result);
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	0018      	movs	r0, r3
 8001488:	f000 f8fd 	bl	8001686 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>
 800148c:	0003      	movs	r3, r0
    }
 800148e:	0018      	movs	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	b006      	add	sp, #24
 8001494:	bd80      	pop	{r7, pc}

08001496 <_ZNSt16allocator_traitsISaI10TouchBoardEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 f901 	bl	80016a8 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv>
 80014a6:	0003      	movs	r3, r0
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d201      	bcs.n	80014ca <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	e000      	b.n	80014cc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80014ca:	687b      	ldr	r3, [r7, #4]
    }
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b002      	add	sp, #8
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b002      	add	sp, #8
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
	{ }
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj+0x20>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	0011      	movs	r1, r2
 8001522:	0018      	movs	r0, r3
 8001524:	f000 f8cc 	bl	80016c0 <_ZNSt16allocator_traitsISaI10TouchBoardEE8allocateERS1_j>
 8001528:	0003      	movs	r3, r0
 800152a:	e000      	b.n	800152e <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj+0x22>
 800152c:	2300      	movs	r3, #0
      }
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b002      	add	sp, #8
 8001534:	bd80      	pop	{r7, pc}

08001536 <_ZNSt16allocator_traitsISaI10TouchBoardEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	0018      	movs	r0, r3
 800154a:	f000 f8c9 	bl	80016e0 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE10deallocateEPS1_j>
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b004      	add	sp, #16
 8001554:	bd80      	pop	{r7, pc}

08001556 <_ZSt25__uninitialized_default_nIP10TouchBoardjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8001560:	230f      	movs	r3, #15
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
	__uninit_default_n(__first, __n);
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	0011      	movs	r1, r2
 800156e:	0018      	movs	r0, r3
 8001570:	f000 f8c4 	bl	80016fc <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_>
 8001574:	0003      	movs	r3, r0
    }
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}

0800157e <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d00b      	beq.n	80015a8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_+0x2a>
	    std::_Destroy(std::__addressof(*__first));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	0018      	movs	r0, r3
 8001594:	f000 f8d0 	bl	8001738 <_ZSt11__addressofI10TouchBoardEPT_RS1_>
 8001598:	0003      	movs	r3, r0
 800159a:	0018      	movs	r0, r3
 800159c:	f000 f8d5 	bl	800174a <_ZSt8_DestroyI10TouchBoardEvPT_>
	  for (; __first != __last; ++__first)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3310      	adds	r3, #16
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	e7ef      	b.n	8001588 <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_+0xa>
	}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 f8d2 	bl	8001764 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv>
 80015c0:	0003      	movs	r3, r0
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1ERKS2_>:
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}

080015de <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
	{ }
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b002      	add	sp, #8
 8001600:	bd80      	pop	{r7, pc}

08001602 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj+0x20>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	0011      	movs	r1, r2
 8001618:	0018      	movs	r0, r3
 800161a:	f000 f8af 	bl	800177c <_ZNSt16allocator_traitsISaI15TouchState_enumEE8allocateERS1_j>
 800161e:	0003      	movs	r3, r0
 8001620:	e000      	b.n	8001624 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj+0x22>
 8001622:	2300      	movs	r3, #0
      }
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}

0800162c <_ZNSt16allocator_traitsISaI15TouchState_enumEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	0018      	movs	r0, r3
 8001640:	f000 f8ac 	bl	800179c <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE10deallocateEPS1_j>
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b004      	add	sp, #16
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZSt25__uninitialized_default_nIP15TouchState_enumjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8001656:	230f      	movs	r3, #15
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
	__uninit_default_n(__first, __n);
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	0011      	movs	r1, r2
 8001664:	0018      	movs	r0, r3
 8001666:	f000 f8a7 	bl	80017b8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchState_enumjEET_S4_T0_>
 800166a:	0003      	movs	r3, r0
    }
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	b004      	add	sp, #16
 8001672:	bd80      	pop	{r7, pc}

08001674 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15TouchState_enumEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}

08001686 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001686:	b580      	push	{r7, lr}
 8001688:	b084      	sub	sp, #16
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	0018      	movs	r0, r3
 800169a:	f000 f8a1 	bl	80017e0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
 800169e:	0003      	movs	r3, r0
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv>:
#endif
	::operator delete(__p);
      }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv+0x14>)
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	07ffffff 	.word	0x07ffffff

080016c0 <_ZNSt16allocator_traitsISaI10TouchBoardEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 f89f 	bl	8001814 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv>
 80016d6:	0003      	movs	r3, r0
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	0018      	movs	r0, r3
 80016f0:	f003 fbbe 	bl	8004e70 <_ZdlPv>
      }
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b004      	add	sp, #16
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	  _ForwardIterator __cur = __first;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]
	      for (; __n > 0; --__n, (void) ++__cur)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00e      	beq.n	800172e <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_+0x32>
		std::_Construct(std::__addressof(*__cur));
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	0018      	movs	r0, r3
 8001714:	f000 f810 	bl	8001738 <_ZSt11__addressofI10TouchBoardEPT_RS1_>
 8001718:	0003      	movs	r3, r0
 800171a:	0018      	movs	r0, r3
 800171c:	f000 f898 	bl	8001850 <_ZSt10_ConstructI10TouchBoardJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3310      	adds	r3, #16
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e7ed      	b.n	800170a <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_+0xe>
	      return __cur;
 800172e:	68fb      	ldr	r3, [r7, #12]
	}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b004      	add	sp, #16
 8001736:	bd80      	pop	{r7, pc}

08001738 <_ZSt11__addressofI10TouchBoardEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}

0800174a <_ZSt8_DestroyI10TouchBoardEvPT_>:
    _Destroy(_Tp* __pointer)
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff f84e 	bl	80007f6 <_ZN10TouchBoardD1Ev>
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv+0x14>)
      }
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b002      	add	sp, #8
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	7fffffff 	.word	0x7fffffff

0800177c <_ZNSt16allocator_traitsISaI15TouchState_enumEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001786:	6839      	ldr	r1, [r7, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	0018      	movs	r0, r3
 800178e:	f000 f870 	bl	8001872 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv>
 8001792:	0003      	movs	r3, r0
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b002      	add	sp, #8
 800179a:	bd80      	pop	{r7, pc}

0800179c <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f003 fb60 	bl	8004e70 <_ZdlPv>
      }
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b004      	add	sp, #16
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchState_enumjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 80017c2:	210f      	movs	r1, #15
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	187a      	adds	r2, r7, r1
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f000 f86b 	bl	80018ac <_ZSt6fill_nIP15TouchState_enumjS0_ET_S2_T0_RKT1_>
 80017d6:	0003      	movs	r3, r0
	}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b004      	add	sp, #16
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 f877 	bl	80018e2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEET_S9_>
 80017f4:	0004      	movs	r4, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f000 f872 	bl	80018e2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEET_S9_>
 80017fe:	0001      	movs	r1, r0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	001a      	movs	r2, r3
 8001804:	0020      	movs	r0, r4
 8001806:	f000 f875 	bl	80018f4 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_>
 800180a:	0003      	movs	r3, r0
    }
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b005      	add	sp, #20
 8001812:	bd90      	pop	{r4, r7, pc}

08001814 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff ff40 	bl	80016a8 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv>
 8001828:	0002      	movs	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	429a      	cmp	r2, r3
 800182e:	419b      	sbcs	r3, r3
 8001830:	425b      	negs	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001838:	f003 fb30 	bl	8004e9c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	0018      	movs	r0, r3
 8001842:	f003 fb19 	bl	8004e78 <_Znwj>
 8001846:	0003      	movs	r3, r0
      }
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b004      	add	sp, #16
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZSt10_ConstructI10TouchBoardJEEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0019      	movs	r1, r3
 800185c:	2010      	movs	r0, #16
 800185e:	f7ff f878 	bl	8000952 <_ZnwjPv>
 8001862:	0003      	movs	r3, r0
 8001864:	0018      	movs	r0, r3
 8001866:	f7fe ff98 	bl	800079a <_ZN10TouchBoardC1Ev>
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}

08001872 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff6f 	bl	8001764 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv>
 8001886:	0002      	movs	r2, r0
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	429a      	cmp	r2, r3
 800188c:	419b      	sbcs	r3, r3
 800188e:	425b      	negs	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001896:	f003 fb01 	bl	8004e9c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	0018      	movs	r0, r3
 800189e:	f003 faeb 	bl	8004e78 <_Znwj>
 80018a2:	0003      	movs	r3, r0
      }
 80018a4:	0018      	movs	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b004      	add	sp, #16
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZSt6fill_nIP15TouchState_enumjS0_ET_S2_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)
      __glibcxx_requires_can_increment(__first, __n);

      return std::__niter_wrap(__first,
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 f83f 	bl	800193e <_ZSt12__niter_baseIP15TouchState_enumET_S2_>
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	0019      	movs	r1, r3
 80018c6:	f000 f843 	bl	8001950 <_ZSt10__fill_n_aIP15TouchState_enumjS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_>
 80018ca:	0002      	movs	r2, r0
 80018cc:	230c      	movs	r3, #12
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	0011      	movs	r1, r2
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 f857 	bl	8001986 <_ZSt12__niter_wrapIP15TouchState_enumET_RKS2_S2_>
 80018d8:	0003      	movs	r3, r0
		std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b004      	add	sp, #16
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEET_S9_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80018f4:	b5b0      	push	{r4, r5, r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	0018      	movs	r0, r3
 8001904:	f000 f849 	bl	800199a <_ZSt12__niter_baseIPK15TouchState_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8001908:	0004      	movs	r4, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	0018      	movs	r0, r3
 800190e:	f000 f844 	bl	800199a <_ZSt12__niter_baseIPK15TouchState_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8001912:	0005      	movs	r5, r0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	0018      	movs	r0, r3
 8001918:	f000 f811 	bl	800193e <_ZSt12__niter_baseIP15TouchState_enumET_S2_>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	0029      	movs	r1, r5
 8001922:	0020      	movs	r0, r4
 8001924:	f000 f847 	bl	80019b6 <_ZSt13__copy_move_aILb0EPK15TouchState_enumPS0_ET1_T0_S5_S4_>
 8001928:	0002      	movs	r2, r0
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	0011      	movs	r1, r2
 800192e:	0018      	movs	r0, r3
 8001930:	f000 f829 	bl	8001986 <_ZSt12__niter_wrapIP15TouchState_enumET_RKS2_S2_>
 8001934:	0003      	movs	r3, r0
    }
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bdb0      	pop	{r4, r5, r7, pc}

0800193e <_ZSt12__niter_baseIP15TouchState_enumET_S2_>:
    __niter_base(_Iterator __it)
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0018      	movs	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZSt10__fill_n_aIP15TouchState_enumjS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
      for (__decltype(__n + 0) __niter = __n;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	617b      	str	r3, [r7, #20]
	   __niter > 0; --__niter, (void) ++__first)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00a      	beq.n	800197c <_ZSt10__fill_n_aIP15TouchState_enumjS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_+0x2c>
	*__first = __value;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	701a      	strb	r2, [r3, #0]
      for (__decltype(__n + 0) __niter = __n;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3b01      	subs	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3301      	adds	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	e7f1      	b.n	8001960 <_ZSt10__fill_n_aIP15TouchState_enumjS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT1_E7__valueET_E6__typeES7_T0_RKS5_+0x10>
      return __first;
 800197c:	68fb      	ldr	r3, [r7, #12]
    }
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b006      	add	sp, #24
 8001984:	bd80      	pop	{r7, pc}

08001986 <_ZSt12__niter_wrapIP15TouchState_enumET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}

0800199a <_ZSt12__niter_baseIPK15TouchState_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	0018      	movs	r0, r3
 80019a6:	f000 f81b 	bl	80019e0 <_ZNK9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEE4baseEv>
 80019aa:	0003      	movs	r3, r0
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_ZSt13__copy_move_aILb0EPK15TouchState_enumPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80019c2:	2317      	movs	r3, #23
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
			      _Category>::__copy_m(__first, __last, __result);
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 f80e 	bl	80019f2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchState_enumEEPT_PKS4_S7_S5_>
 80019d6:	0003      	movs	r3, r0
    }
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b006      	add	sp, #24
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_ZNK9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b002      	add	sp, #8
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchState_enumEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchState_enumEEPT_PKS4_S7_S5_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	68f9      	ldr	r1, [r7, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f003 fa9d 	bl	8004f52 <memmove>
	  return __result + _Num;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	18d3      	adds	r3, r2, r3
	}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b006      	add	sp, #24
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_ZN9WavPlayerC1ER17I2S_HandleTypeDef>:
#include "WavPlayer.hpp"

WavPlayer::WavPlayer(I2S_HandleTypeDef &hi2s) : i2sHandle(hi2s) {
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	705a      	strb	r2, [r3, #1]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	709a      	strb	r2, [r3, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	605a      	str	r2, [r3, #4]
}
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZN9WavPlayerD1Ev>:

WavPlayer::~WavPlayer() {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
}
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b002      	add	sp, #8
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a66:	f000 ffd5 	bl	8002a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6a:	f000 f8e9 	bl	8001c40 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6e:	f000 fa91 	bl	8001f94 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001a72:	f000 fa61 	bl	8001f38 <_ZL11MX_DMA_Initv>
  MX_I2S2_Init();
 8001a76:	f000 f947 	bl	8001d08 <_ZL12MX_I2S2_Initv>
  MX_SPI1_Init();
 8001a7a:	f000 f973 	bl	8001d64 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 8001a7e:	f000 f9ad 	bl	8001ddc <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  // Mount SD Card
  HAL_GPIO_WritePin(SD_SPI1_CS_N_GPIO_Port, SD_SPI1_CS_N_Pin, GPIO_PIN_SET);
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	0219      	lsls	r1, r3, #8
 8001a86:	23a0      	movs	r3, #160	; 0xa0
 8001a88:	05db      	lsls	r3, r3, #23
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f001 f9e1 	bl	8002e54 <HAL_GPIO_WritePin>
  FRESULT fr;
  fr = f_mount(&FatFs, "", 1);
 8001a92:	230f      	movs	r3, #15
 8001a94:	18fc      	adds	r4, r7, r3
 8001a96:	495f      	ldr	r1, [pc, #380]	; (8001c14 <main+0x1b4>)
 8001a98:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <main+0x1b8>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f003 f9c1 	bl	8004e24 <f_mount>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	7023      	strb	r3, [r4, #0]

  // Set LED defaults
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	485c      	ldr	r0, [pc, #368]	; (8001c1c <main+0x1bc>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	0019      	movs	r1, r3
 8001ab0:	f001 f9d0 	bl	8002e54 <HAL_GPIO_WritePin>

  touchGroup0.setAllPixelColor(0,0,255);
 8001ab4:	485a      	ldr	r0, [pc, #360]	; (8001c20 <main+0x1c0>)
 8001ab6:	23ff      	movs	r3, #255	; 0xff
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	f7fe ffec 	bl	8000a98 <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
  touchGroup0.showPixels();
 8001ac0:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <main+0x1c0>)
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff f843 	bl	8000b4e <_ZN15TouchBoardGroup10showPixelsEv>

  for (int i=0; i<72; i++) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b47      	cmp	r3, #71	; 0x47
 8001ad0:	dc0c      	bgt.n	8001aec <main+0x8c>
    rocketStream.setPixelColor(i, 0, 0, 255);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	b299      	uxth	r1, r3
 8001ad6:	4853      	ldr	r0, [pc, #332]	; (8001c24 <main+0x1c4>)
 8001ad8:	23ff      	movs	r3, #255	; 0xff
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f7fe fdc4 	bl	800066c <_ZN8NeoPixel13setPixelColorEthhh>
  for (int i=0; i<72; i++) {
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e7ef      	b.n	8001acc <main+0x6c>
  }
  rocketStream.show();
 8001aec:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <main+0x1c4>)
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe fdf4 	bl	80006dc <_ZN8NeoPixel4showEv>
  //audioPlayer.play_atomic("01_Blues_Clues.wav");

  while (1)
  {

    switch(state) {
 8001af4:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <main+0x1c8>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <main+0xa2>
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d007      	beq.n	8001b10 <main+0xb0>
 8001b00:	e084      	b.n	8001c0c <main+0x1ac>
      ///////////////////////////////////////////////////////////////////////////////////
      // Off State
      // Press a button to turn on
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_off:
        state = ST_awake;
 8001b02:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <main+0x1c8>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
        HAL_Delay(200);
 8001b08:	20c8      	movs	r0, #200	; 0xc8
 8001b0a:	f000 ffa9 	bl	8002a60 <HAL_Delay>
        break;
 8001b0e:	e080      	b.n	8001c12 <main+0x1b2>
      // Awake State
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_awake:

    	// Buttons
        buttonL.updateButtonState();
 8001b10:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <main+0x1cc>)
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7fe fd0b 	bl	800052e <_ZN9LedButton17updateButtonStateEv>
        buttonR.updateButtonState();
 8001b18:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <main+0x1d0>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7fe fd07 	bl	800052e <_ZN9LedButton17updateButtonStateEv>
        buttonStateL = buttonL.getButtonState();
 8001b20:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <main+0x1cc>)
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7fe fd3e 	bl	80005a4 <_ZN9LedButton14getButtonStateEv>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <main+0x1d4>)
 8001b2e:	701a      	strb	r2, [r3, #0]
        buttonStateR = buttonR.getButtonState();
 8001b30:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <main+0x1d0>)
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7fe fd36 	bl	80005a4 <_ZN9LedButton14getButtonStateEv>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <main+0x1d8>)
 8001b3e:	701a      	strb	r2, [r3, #0]
        if (buttonStateL == PRESSED) {
 8001b40:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <main+0x1d4>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <main+0xf4>
        	buttonL.setLedState(ON);
 8001b48:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <main+0x1cc>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7fe fcd6 	bl	80004fe <_ZN9LedButton11setLedStateE13LedState_enum>
 8001b52:	e004      	b.n	8001b5e <main+0xfe>
        } else {
        	buttonL.setLedState(OFF);
 8001b54:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <main+0x1cc>)
 8001b56:	2100      	movs	r1, #0
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7fe fcd0 	bl	80004fe <_ZN9LedButton11setLedStateE13LedState_enum>
        }
        if (buttonStateR == PRESSED) {
 8001b5e:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <main+0x1d8>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d105      	bne.n	8001b72 <main+0x112>
			buttonR.setLedState(ON);
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <main+0x1d0>)
 8001b68:	2101      	movs	r1, #1
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7fe fcc7 	bl	80004fe <_ZN9LedButton11setLedStateE13LedState_enum>
 8001b70:	e004      	b.n	8001b7c <main+0x11c>
		} else {
			buttonR.setLedState(OFF);
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <main+0x1d0>)
 8001b74:	2100      	movs	r1, #0
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7fe fcc1 	bl	80004fe <_ZN9LedButton11setLedStateE13LedState_enum>
		}

    	touchGroup0.updateTouchStates();
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <main+0x1c0>)
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7ff f836 	bl	8000bf0 <_ZN15TouchBoardGroup17updateTouchStatesEv>
        touchStates = touchGroup0.getTouchStates();
 8001b84:	003b      	movs	r3, r7
 8001b86:	4a26      	ldr	r2, [pc, #152]	; (8001c20 <main+0x1c0>)
 8001b88:	0011      	movs	r1, r2
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f7ff f84f 	bl	8000c2e <_ZN15TouchBoardGroup14getTouchStatesEv>
 8001b90:	003a      	movs	r2, r7
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <main+0x1dc>)
 8001b94:	0011      	movs	r1, r2
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 fb6d 	bl	8002276 <_ZNSt6vectorI15TouchState_enumSaIS0_EEaSEOS2_>
 8001b9c:	003b      	movs	r3, r7
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f7ff f902 	bl	8000da8 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>

        for (int i=0; i<NUM_BOARDS; i++) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b17      	cmp	r3, #23
 8001bac:	dc23      	bgt.n	8001bf6 <main+0x196>
          if (touchStates[i] == TOUCHED) {
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <main+0x1dc>)
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff f920 	bl	8000dfa <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	425a      	negs	r2, r3
 8001bc0:	4153      	adcs	r3, r2
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d009      	beq.n	8001bdc <main+0x17c>
            touchGroup0.setBoardColor(i, 255, 100, 0);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	b2d9      	uxtb	r1, r3
 8001bcc:	4814      	ldr	r0, [pc, #80]	; (8001c20 <main+0x1c0>)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2364      	movs	r3, #100	; 0x64
 8001bd4:	22ff      	movs	r2, #255	; 0xff
 8001bd6:	f7fe ff91 	bl	8000afc <_ZN15TouchBoardGroup13setBoardColorEhhhh>
 8001bda:	e008      	b.n	8001bee <main+0x18e>
          } else {
            touchGroup0.setBoardColor(i, 0, 100, 255);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	b2d9      	uxtb	r1, r3
 8001be0:	480f      	ldr	r0, [pc, #60]	; (8001c20 <main+0x1c0>)
 8001be2:	23ff      	movs	r3, #255	; 0xff
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2364      	movs	r3, #100	; 0x64
 8001be8:	2200      	movs	r2, #0
 8001bea:	f7fe ff87 	bl	8000afc <_ZN15TouchBoardGroup13setBoardColorEhhhh>
        for (int i=0; i<NUM_BOARDS; i++) {
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	e7d8      	b.n	8001ba8 <main+0x148>
          }
        }
        touchGroup0.showPixels();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <main+0x1c0>)
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7fe ffa8 	bl	8000b4e <_ZN15TouchBoardGroup10showPixelsEv>
        rocketStream.show();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <main+0x1c4>)
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7fe fd6b 	bl	80006dc <_ZN8NeoPixel4showEv>
        HAL_Delay(100);
 8001c06:	2064      	movs	r0, #100	; 0x64
 8001c08:	f000 ff2a 	bl	8002a60 <HAL_Delay>

      default:
        state = ST_awake;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <main+0x1c8>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]


	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001c12:	e76f      	b.n	8001af4 <main+0x94>
 8001c14:	08005200 	.word	0x08005200
 8001c18:	200003a4 	.word	0x200003a4
 8001c1c:	50001c00 	.word	0x50001c00
 8001c20:	200005cc 	.word	0x200005cc
 8001c24:	20000c48 	.word	0x20000c48
 8001c28:	20000c9a 	.word	0x20000c9a
 8001c2c:	20000c68 	.word	0x20000c68
 8001c30:	20000c80 	.word	0x20000c80
 8001c34:	20000c98 	.word	0x20000c98
 8001c38:	20000c99 	.word	0x20000c99
 8001c3c:	2000060c 	.word	0x2000060c

08001c40 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b095      	sub	sp, #84	; 0x54
 8001c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c46:	2418      	movs	r4, #24
 8001c48:	193b      	adds	r3, r7, r4
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	2338      	movs	r3, #56	; 0x38
 8001c4e:	001a      	movs	r2, r3
 8001c50:	2100      	movs	r1, #0
 8001c52:	f003 f991 	bl	8004f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	0018      	movs	r0, r3
 8001c5a:	2314      	movs	r3, #20
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	f003 f98a 	bl	8004f78 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c64:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <_Z18SystemClock_Configv+0xc0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <_Z18SystemClock_Configv+0xc4>)
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <_Z18SystemClock_Configv+0xc0>)
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	0109      	lsls	r1, r1, #4
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c76:	0021      	movs	r1, r4
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	2201      	movs	r2, #1
 8001c82:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	2210      	movs	r2, #16
 8001c88:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	2200      	movs	r2, #0
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	02d2      	lsls	r2, r2, #11
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	03d2      	lsls	r2, r2, #15
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f001 f99b 	bl	8002fe4 <HAL_RCC_OscConfig>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	4193      	sbcs	r3, r2
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8001cba:	f000 fad7 	bl	800226c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2101      	movs	r1, #1
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f001 fc0b 	bl	80034fc <HAL_RCC_ClockConfig>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	1e5a      	subs	r2, r3, #1
 8001cea:	4193      	sbcs	r3, r2
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001cf2:	f000 fabb 	bl	800226c <Error_Handler>
  }
}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b015      	add	sp, #84	; 0x54
 8001cfc:	bd90      	pop	{r4, r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	40007000 	.word	0x40007000
 8001d04:	ffffe7ff 	.word	0xffffe7ff

08001d08 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <_ZL12MX_I2S2_Initv+0x50>)
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <_ZL12MX_I2S2_Initv+0x54>)
 8001d10:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <_ZL12MX_I2S2_Initv+0x50>)
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <_ZL12MX_I2S2_Initv+0x50>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <_ZL12MX_I2S2_Initv+0x50>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <_ZL12MX_I2S2_Initv+0x50>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <_ZL12MX_I2S2_Initv+0x50>)
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <_ZL12MX_I2S2_Initv+0x58>)
 8001d30:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <_ZL12MX_I2S2_Initv+0x50>)
 8001d34:	2208      	movs	r2, #8
 8001d36:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <_ZL12MX_I2S2_Initv+0x50>)
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f001 f890 	bl	8002e60 <HAL_I2S_Init>
 8001d40:	0003      	movs	r3, r0
 8001d42:	1e5a      	subs	r2, r3, #1
 8001d44:	4193      	sbcs	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <_ZL12MX_I2S2_Initv+0x48>
  {
    Error_Handler();
 8001d4c:	f000 fa8e 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	20000120 	.word	0x20000120
 8001d5c:	40003800 	.word	0x40003800
 8001d60:	0000ac44 	.word	0x0000ac44

08001d64 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <_ZL12MX_SPI1_Initv+0x74>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001d70:	2282      	movs	r2, #130	; 0x82
 8001d72:	0052      	lsls	r2, r2, #1
 8001d74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001d98:	2208      	movs	r2, #8
 8001d9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <_ZL12MX_SPI1_Initv+0x70>)
 8001db6:	0018      	movs	r0, r3
 8001db8:	f001 fd26 	bl	8003808 <HAL_SPI_Init>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	1e5a      	subs	r2, r3, #1
 8001dc0:	4193      	sbcs	r3, r2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <_ZL12MX_SPI1_Initv+0x68>
  {
    Error_Handler();
 8001dc8:	f000 fa50 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	200001a4 	.word	0x200001a4
 8001dd8:	40013000 	.word	0x40013000

08001ddc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	2318      	movs	r3, #24
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	0018      	movs	r0, r3
 8001de8:	2310      	movs	r3, #16
 8001dea:	001a      	movs	r2, r3
 8001dec:	2100      	movs	r1, #0
 8001dee:	f003 f8c3 	bl	8004f78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df2:	2310      	movs	r3, #16
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	0018      	movs	r0, r3
 8001df8:	2308      	movs	r3, #8
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f003 f8bb 	bl	8004f78 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e02:	003b      	movs	r3, r7
 8001e04:	0018      	movs	r0, r3
 8001e06:	2310      	movs	r3, #16
 8001e08:	001a      	movs	r2, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f003 f8b4 	bl	8004f78 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e10:	4b48      	ldr	r3, [pc, #288]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	05d2      	lsls	r2, r2, #23
 8001e16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e18:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1e:	4b45      	ldr	r3, [pc, #276]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8001e24:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001e26:	2227      	movs	r2, #39	; 0x27
 8001e28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2a:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e30:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f002 f83c 	bl	8003eb6 <HAL_TIM_Base_Init>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	1e5a      	subs	r2, r3, #1
 8001e42:	4193      	sbcs	r3, r2
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8001e4a:	f000 fa0f 	bl	800226c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4e:	2118      	movs	r1, #24
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	0152      	lsls	r2, r2, #5
 8001e56:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e58:	187a      	adds	r2, r7, r1
 8001e5a:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001e5c:	0011      	movs	r1, r2
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f002 f9b6 	bl	80041d0 <HAL_TIM_ConfigClockSource>
 8001e64:	0003      	movs	r3, r0
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	4193      	sbcs	r3, r2
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8001e70:	f000 f9fc 	bl	800226c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e74:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001e76:	0018      	movs	r0, r3
 8001e78:	f002 f8f3 	bl	8004062 <HAL_TIM_PWM_Init>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	1e5a      	subs	r2, r3, #1
 8001e80:	4193      	sbcs	r3, r2
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8001e88:	f000 f9f0 	bl	800226c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	2200      	movs	r2, #0
 8001e98:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e9a:	187a      	adds	r2, r7, r1
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f002 fac3 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	1e5a      	subs	r2, r3, #1
 8001eaa:	4193      	sbcs	r3, r2
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8001eb2:	f000 f9db 	bl	800226c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb6:	003b      	movs	r3, r7
 8001eb8:	2260      	movs	r2, #96	; 0x60
 8001eba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ebc:	003b      	movs	r3, r7
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec2:	003b      	movs	r3, r7
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001ec8:	003b      	movs	r3, r7
 8001eca:	2204      	movs	r2, #4
 8001ecc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ece:	0039      	movs	r1, r7
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f002 f8ed 	bl	80040b4 <HAL_TIM_PWM_ConfigChannel>
 8001eda:	0003      	movs	r3, r0
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	4193      	sbcs	r3, r2
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8001ee6:	f000 f9c1 	bl	800226c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eea:	0039      	movs	r1, r7
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001eee:	2208      	movs	r2, #8
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f002 f8df 	bl	80040b4 <HAL_TIM_PWM_ConfigChannel>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	1e5a      	subs	r2, r3, #1
 8001efa:	4193      	sbcs	r3, r2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8001f02:	f000 f9b3 	bl	800226c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f06:	0039      	movs	r1, r7
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f002 f8d1 	bl	80040b4 <HAL_TIM_PWM_ConfigChannel>
 8001f12:	0003      	movs	r3, r0
 8001f14:	1e5a      	subs	r2, r3, #1
 8001f16:	4193      	sbcs	r3, r2
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <_ZL12MX_TIM2_Initv+0x146>
  {
    Error_Handler();
 8001f1e:	f000 f9a5 	bl	800226c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <_ZL12MX_TIM2_Initv+0x158>)
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 fc71 	bl	800280c <HAL_TIM_MspPostInit>

}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b00a      	add	sp, #40	; 0x28
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	2000028c 	.word	0x2000028c

08001f38 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <_ZL11MX_DMA_Initv+0x58>)
 8001f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_ZL11MX_DMA_Initv+0x58>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	430a      	orrs	r2, r1
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_ZL11MX_DMA_Initv+0x58>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4013      	ands	r3, r2
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2009      	movs	r0, #9
 8001f5c:	f000 fd92 	bl	8002a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f60:	2009      	movs	r0, #9
 8001f62:	f000 fdb9 	bl	8002ad8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	f000 fd8a 	bl	8002a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001f70:	200a      	movs	r0, #10
 8001f72:	f000 fdb1 	bl	8002ad8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	200b      	movs	r0, #11
 8001f7c:	f000 fd82 	bl	8002a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001f80:	200b      	movs	r0, #11
 8001f82:	f000 fda9 	bl	8002ad8 <HAL_NVIC_EnableIRQ>

}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b002      	add	sp, #8
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	40021000 	.word	0x40021000

08001f94 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b08d      	sub	sp, #52	; 0x34
 8001f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9a:	241c      	movs	r4, #28
 8001f9c:	193b      	adds	r3, r7, r4
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	2314      	movs	r3, #20
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	f002 ffe7 	bl	8004f78 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001faa:	4ba7      	ldr	r3, [pc, #668]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fae:	4ba6      	ldr	r3, [pc, #664]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fb6:	4ba4      	ldr	r3, [pc, #656]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	2210      	movs	r2, #16
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	4ba1      	ldr	r3, [pc, #644]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc6:	4ba0      	ldr	r3, [pc, #640]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001fc8:	2104      	movs	r1, #4
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fce:	4b9e      	ldr	r3, [pc, #632]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fda:	4b9b      	ldr	r3, [pc, #620]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fde:	4b9a      	ldr	r3, [pc, #616]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001fe0:	2180      	movs	r1, #128	; 0x80
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fe6:	4b98      	ldr	r3, [pc, #608]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4b95      	ldr	r3, [pc, #596]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff6:	4b94      	ldr	r3, [pc, #592]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ffe:	4b92      	ldr	r3, [pc, #584]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	2201      	movs	r2, #1
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b8f      	ldr	r3, [pc, #572]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 800200c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200e:	4b8e      	ldr	r3, [pc, #568]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002010:	2102      	movs	r1, #2
 8002012:	430a      	orrs	r2, r1
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
 8002016:	4b8c      	ldr	r3, [pc, #560]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002022:	4b89      	ldr	r3, [pc, #548]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002026:	4b88      	ldr	r3, [pc, #544]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002028:	2108      	movs	r1, #8
 800202a:	430a      	orrs	r2, r1
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
 800202e:	4b86      	ldr	r3, [pc, #536]	; (8002248 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	2208      	movs	r2, #8
 8002034:	4013      	ands	r3, r2
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin, GPIO_PIN_RESET);
 800203a:	4b84      	ldr	r3, [pc, #528]	; (800224c <_ZL12MX_GPIO_Initv+0x2b8>)
 800203c:	2200      	movs	r2, #0
 800203e:	2120      	movs	r1, #32
 8002040:	0018      	movs	r0, r3
 8002042:	f000 ff07 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin, GPIO_PIN_RESET);
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	01db      	lsls	r3, r3, #7
 800204a:	4881      	ldr	r0, [pc, #516]	; (8002250 <_ZL12MX_GPIO_Initv+0x2bc>)
 800204c:	2200      	movs	r2, #0
 800204e:	0019      	movs	r1, r3
 8002050:	f000 ff00 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	487e      	ldr	r0, [pc, #504]	; (8002254 <_ZL12MX_GPIO_Initv+0x2c0>)
 800205a:	2200      	movs	r2, #0
 800205c:	0019      	movs	r1, r3
 800205e:	f000 fef9 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AUDIO_SD_N_L_Pin|AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
 8002062:	23c0      	movs	r3, #192	; 0xc0
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	487c      	ldr	r0, [pc, #496]	; (8002258 <_ZL12MX_GPIO_Initv+0x2c4>)
 8002068:	2200      	movs	r2, #0
 800206a:	0019      	movs	r1, r3
 800206c:	f000 fef2 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI1_CS_N_GPIO_Port, SD_SPI1_CS_N_Pin, GPIO_PIN_RESET);
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	0219      	lsls	r1, r3, #8
 8002074:	23a0      	movs	r3, #160	; 0xa0
 8002076:	05db      	lsls	r3, r3, #23
 8002078:	2200      	movs	r2, #0
 800207a:	0018      	movs	r0, r3
 800207c:	f000 feea 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_L_Pin SD_DET_A_Pin SD_DET_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_L_Pin|SD_DET_A_Pin|SD_DET_B_Pin;
 8002080:	193b      	adds	r3, r7, r4
 8002082:	22c8      	movs	r2, #200	; 0xc8
 8002084:	0052      	lsls	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002088:	193b      	adds	r3, r7, r4
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	193b      	adds	r3, r7, r4
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002094:	193b      	adds	r3, r7, r4
 8002096:	4a6d      	ldr	r2, [pc, #436]	; (800224c <_ZL12MX_GPIO_Initv+0x2b8>)
 8002098:	0019      	movs	r1, r3
 800209a:	0010      	movs	r0, r2
 800209c:	f000 fe12 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_L_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_L_Pin;
 80020a0:	193b      	adds	r3, r7, r4
 80020a2:	2220      	movs	r2, #32
 80020a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a6:	193b      	adds	r3, r7, r4
 80020a8:	2201      	movs	r2, #1
 80020aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	193b      	adds	r3, r7, r4
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	193b      	adds	r3, r7, r4
 80020b4:	2200      	movs	r2, #0
 80020b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_L_GPIO_Port, &GPIO_InitStruct);
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	4a64      	ldr	r2, [pc, #400]	; (800224c <_ZL12MX_GPIO_Initv+0x2b8>)
 80020bc:	0019      	movs	r1, r3
 80020be:	0010      	movs	r0, r2
 80020c0:	f000 fe00 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_R_Pin TOUCH_STAR_0_Pin TOUCH_STAR_1_Pin TOUCH_STAR_2_Pin
                           TOUCH_STAR_15_Pin TOUCH_STAR_16_Pin TOUCH_STAR_17_Pin */
  GPIO_InitStruct.Pin = BUTTON_R_Pin|TOUCH_STAR_0_Pin|TOUCH_STAR_1_Pin|TOUCH_STAR_2_Pin
 80020c4:	193b      	adds	r3, r7, r4
 80020c6:	4a65      	ldr	r2, [pc, #404]	; (800225c <_ZL12MX_GPIO_Initv+0x2c8>)
 80020c8:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_15_Pin|TOUCH_STAR_16_Pin|TOUCH_STAR_17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ca:	193b      	adds	r3, r7, r4
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	193b      	adds	r3, r7, r4
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	4a5d      	ldr	r2, [pc, #372]	; (8002250 <_ZL12MX_GPIO_Initv+0x2bc>)
 80020da:	0019      	movs	r1, r3
 80020dc:	0010      	movs	r0, r2
 80020de:	f000 fdf1 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_R_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_R_Pin;
 80020e2:	0021      	movs	r1, r4
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	01d2      	lsls	r2, r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ec:	000c      	movs	r4, r1
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	2201      	movs	r2, #1
 80020f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	193b      	adds	r3, r7, r4
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_R_GPIO_Port, &GPIO_InitStruct);
 8002100:	193b      	adds	r3, r7, r4
 8002102:	4a53      	ldr	r2, [pc, #332]	; (8002250 <_ZL12MX_GPIO_Initv+0x2bc>)
 8002104:	0019      	movs	r1, r3
 8002106:	0010      	movs	r0, r2
 8002108:	f000 fddc 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 800210c:	0021      	movs	r1, r4
 800210e:	187b      	adds	r3, r7, r1
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	00d2      	lsls	r2, r2, #3
 8002114:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002116:	000c      	movs	r4, r1
 8002118:	193b      	adds	r3, r7, r4
 800211a:	2201      	movs	r2, #1
 800211c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	193b      	adds	r3, r7, r4
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	193b      	adds	r3, r7, r4
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800212a:	193b      	adds	r3, r7, r4
 800212c:	4a49      	ldr	r2, [pc, #292]	; (8002254 <_ZL12MX_GPIO_Initv+0x2c0>)
 800212e:	0019      	movs	r1, r3
 8002130:	0010      	movs	r0, r2
 8002132:	f000 fdc7 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_G7_1_SAMP_Pin */
  GPIO_InitStruct.Pin = TOUCH_G7_1_SAMP_Pin;
 8002136:	193b      	adds	r3, r7, r4
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	193b      	adds	r3, r7, r4
 800213e:	2202      	movs	r2, #2
 8002140:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	193b      	adds	r3, r7, r4
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	193b      	adds	r3, r7, r4
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800214e:	193b      	adds	r3, r7, r4
 8002150:	2203      	movs	r2, #3
 8002152:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(TOUCH_G7_1_SAMP_GPIO_Port, &GPIO_InitStruct);
 8002154:	193b      	adds	r3, r7, r4
 8002156:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <_ZL12MX_GPIO_Initv+0x2bc>)
 8002158:	0019      	movs	r1, r3
 800215a:	0010      	movs	r0, r2
 800215c:	f000 fdb2 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_STAR_3_Pin TOUCH_STAR_4_Pin TOUCH_STAR_5_Pin TOUCH_STAR_6_Pin
                           TOUCH_STAR_7_Pin TOUCH_STAR_8_Pin TOUCH_STAR_18_Pin TOUCH_STAR_19_Pin
                           TOUCH_STAR_20_Pin */
  GPIO_InitStruct.Pin = TOUCH_STAR_3_Pin|TOUCH_STAR_4_Pin|TOUCH_STAR_5_Pin|TOUCH_STAR_6_Pin
 8002160:	193b      	adds	r3, r7, r4
 8002162:	4a3f      	ldr	r2, [pc, #252]	; (8002260 <_ZL12MX_GPIO_Initv+0x2cc>)
 8002164:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_7_Pin|TOUCH_STAR_8_Pin|TOUCH_STAR_18_Pin|TOUCH_STAR_19_Pin
                          |TOUCH_STAR_20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002166:	193b      	adds	r3, r7, r4
 8002168:	2200      	movs	r2, #0
 800216a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	193b      	adds	r3, r7, r4
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	193a      	adds	r2, r7, r4
 8002174:	23a0      	movs	r3, #160	; 0xa0
 8002176:	05db      	lsls	r3, r3, #23
 8002178:	0011      	movs	r1, r2
 800217a:	0018      	movs	r0, r3
 800217c:	f000 fda2 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_STAR_9_Pin TOUCH_STAR_10_Pin TOUCH_STAR_11_Pin TOUCH_STAR_12_Pin
                           TOUCH_STAR_13_Pin TOUCH_STAR_14_Pin TOUCH_STAR_21_Pin TOUCH_STAR_22_Pin
                           TOUCH_STAR_23_Pin */
  GPIO_InitStruct.Pin = TOUCH_STAR_9_Pin|TOUCH_STAR_10_Pin|TOUCH_STAR_11_Pin|TOUCH_STAR_12_Pin
 8002180:	193b      	adds	r3, r7, r4
 8002182:	4a38      	ldr	r2, [pc, #224]	; (8002264 <_ZL12MX_GPIO_Initv+0x2d0>)
 8002184:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_13_Pin|TOUCH_STAR_14_Pin|TOUCH_STAR_21_Pin|TOUCH_STAR_22_Pin
                          |TOUCH_STAR_23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002186:	193b      	adds	r3, r7, r4
 8002188:	2200      	movs	r2, #0
 800218a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	193b      	adds	r3, r7, r4
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	193b      	adds	r3, r7, r4
 8002194:	4a34      	ldr	r2, [pc, #208]	; (8002268 <_ZL12MX_GPIO_Initv+0x2d4>)
 8002196:	0019      	movs	r1, r3
 8002198:	0010      	movs	r0, r2
 800219a:	f000 fd93 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_L_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_L_Pin;
 800219e:	0021      	movs	r1, r4
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	00d2      	lsls	r2, r2, #3
 80021a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	000c      	movs	r4, r1
 80021aa:	193b      	adds	r3, r7, r4
 80021ac:	2201      	movs	r2, #1
 80021ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	193b      	adds	r3, r7, r4
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	193b      	adds	r3, r7, r4
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_L_GPIO_Port, &GPIO_InitStruct);
 80021bc:	193b      	adds	r3, r7, r4
 80021be:	4a26      	ldr	r2, [pc, #152]	; (8002258 <_ZL12MX_GPIO_Initv+0x2c4>)
 80021c0:	0019      	movs	r1, r3
 80021c2:	0010      	movs	r0, r2
 80021c4:	f000 fd7e 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_R_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_R_Pin;
 80021c8:	0021      	movs	r1, r4
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d2:	000c      	movs	r4, r1
 80021d4:	193b      	adds	r3, r7, r4
 80021d6:	2201      	movs	r2, #1
 80021d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	193b      	adds	r3, r7, r4
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_R_GPIO_Port, &GPIO_InitStruct);
 80021e6:	193b      	adds	r3, r7, r4
 80021e8:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <_ZL12MX_GPIO_Initv+0x2c4>)
 80021ea:	0019      	movs	r1, r3
 80021ec:	0010      	movs	r0, r2
 80021ee:	f000 fd69 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 80021f2:	0021      	movs	r1, r4
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	0212      	lsls	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	000c      	movs	r4, r1
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	193b      	adds	r3, r7, r4
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 800220a:	193b      	adds	r3, r7, r4
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <_ZL12MX_GPIO_Initv+0x2c4>)
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f000 fd57 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI1_CS_N_Pin */
  GPIO_InitStruct.Pin = SD_SPI1_CS_N_Pin;
 8002216:	0021      	movs	r1, r4
 8002218:	187b      	adds	r3, r7, r1
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	0212      	lsls	r2, r2, #8
 800221e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	187b      	adds	r3, r7, r1
 8002222:	2201      	movs	r2, #1
 8002224:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	187b      	adds	r3, r7, r1
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	187b      	adds	r3, r7, r1
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_SPI1_CS_N_GPIO_Port, &GPIO_InitStruct);
 8002232:	187a      	adds	r2, r7, r1
 8002234:	23a0      	movs	r3, #160	; 0xa0
 8002236:	05db      	lsls	r3, r3, #23
 8002238:	0011      	movs	r1, r2
 800223a:	0018      	movs	r0, r3
 800223c:	f000 fd42 	bl	8002cc4 <HAL_GPIO_Init>

}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b00d      	add	sp, #52	; 0x34
 8002246:	bd90      	pop	{r4, r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	50001000 	.word	0x50001000
 8002250:	50000800 	.word	0x50000800
 8002254:	50001c00 	.word	0x50001c00
 8002258:	50000c00 	.word	0x50000c00
 800225c:	0000238e 	.word	0x0000238e
 8002260:	00001cee 	.word	0x00001cee
 8002264:	000070d7 	.word	0x000070d7
 8002268:	50000400 	.word	0x50000400

0800226c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002270:	b672      	cpsid	i
}
 8002272:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002274:	e7fe      	b.n	8002274 <Error_Handler+0x8>

08002276 <_ZNSt6vectorI15TouchState_enumSaIS0_EEaSEOS2_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8002276:	b590      	push	{r4, r7, lr}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8002280:	230f      	movs	r3, #15
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	0018      	movs	r0, r3
 800228c:	f000 f80b 	bl	80022a6 <_ZSt4moveIRSt6vectorI15TouchState_enumSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002290:	0001      	movs	r1, r0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	1c22      	adds	r2, r4, #0
 8002296:	0018      	movs	r0, r3
 8002298:	f000 f80e 	bl	80022b8 <_ZNSt6vectorI15TouchState_enumSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>
	return *this;
 800229c:	687b      	ldr	r3, [r7, #4]
      }
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b005      	add	sp, #20
 80022a4:	bd90      	pop	{r4, r7, pc}

080022a6 <_ZSt4moveIRSt6vectorI15TouchState_enumSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_ZNSt6vectorI15TouchState_enumSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	701a      	strb	r2, [r3, #0]
      {
	vector __tmp(get_allocator());
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	241c      	movs	r4, #28
 80022ca:	193b      	adds	r3, r7, r4
 80022cc:	0011      	movs	r1, r2
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 f82d 	bl	800232e <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE13get_allocatorEv>
 80022d4:	193a      	adds	r2, r7, r4
 80022d6:	2510      	movs	r5, #16
 80022d8:	197b      	adds	r3, r7, r5
 80022da:	0011      	movs	r1, r2
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 f839 	bl	8002354 <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS1_>
 80022e2:	193b      	adds	r3, r7, r4
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7fe fd34 	bl	8000d52 <_ZNSaI15TouchState_enumED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	0011      	movs	r1, r2
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 f83f 	bl	8002374 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	197b      	adds	r3, r7, r5
 80022fa:	0011      	movs	r1, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f000 f839 	bl	8002374 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	0018      	movs	r0, r3
 8002306:	f7fe fefc 	bl	8001102 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 800230a:	0004      	movs	r4, r0
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	0018      	movs	r0, r3
 8002310:	f7fe fef7 	bl	8001102 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8002314:	0003      	movs	r3, r0
 8002316:	0019      	movs	r1, r3
 8002318:	0020      	movs	r0, r4
 800231a:	f000 f84b 	bl	80023b4 <_ZSt15__alloc_on_moveISaI15TouchState_enumEEvRT_S3_>
	vector __tmp(get_allocator());
 800231e:	197b      	adds	r3, r7, r5
 8002320:	0018      	movs	r0, r3
 8002322:	f7fe fd41 	bl	8000da8 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
      }
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	46bd      	mov	sp, r7
 800232a:	b008      	add	sp, #32
 800232c:	bdb0      	pop	{r4, r5, r7, pc}

0800232e <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	0018      	movs	r0, r3
 800233c:	f7fe ff16 	bl	800116c <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8002340:	0002      	movs	r2, r0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	0011      	movs	r1, r2
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff f800 	bl	800134c <_ZNSaI15TouchState_enumEC1ERKS0_>
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}

08002354 <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS1_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	0011      	movs	r1, r2
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f833 	bl	80023d0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1ERKS1_>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}

08002374 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 800237e:	240c      	movs	r4, #12
 8002380:	193b      	adds	r3, r7, r4
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff f92b 	bl	80015de <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	193b      	adds	r3, r7, r4
 800238c:	0011      	movs	r1, r2
 800238e:	0018      	movs	r0, r3
 8002390:	f000 f82e 	bl	80023f0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	  _M_copy_data(__x);
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0011      	movs	r1, r2
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f828 	bl	80023f0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	  __x._M_copy_data(__tmp);
 80023a0:	193a      	adds	r2, r7, r4
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	0011      	movs	r1, r2
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 f822 	bl	80023f0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b007      	add	sp, #28
 80023b2:	bd90      	pop	{r4, r7, pc}

080023b4 <_ZSt15__alloc_on_moveISaI15TouchState_enumEEvRT_S3_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
 80023be:	6839      	ldr	r1, [r7, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 f829 	bl	800241a <_ZSt18__do_alloc_on_moveISaI15TouchState_enumEEvRT_S3_St17integral_constantIbLb1EE>
    }
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	0011      	movs	r1, r2
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7fe ffc3 	bl	800136c <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	609a      	str	r2, [r3, #8]
	}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b002      	add	sp, #8
 8002418:	bd80      	pop	{r7, pc}

0800241a <_ZSt18__do_alloc_on_moveISaI15TouchState_enumEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	701a      	strb	r2, [r3, #0]
    { __one = std::move(__two); }
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	0018      	movs	r0, r3
 800242c:	f000 f804 	bl	8002438 <_ZSt4moveIRSaI15TouchState_enumEEONSt16remove_referenceIT_E4typeEOS4_>
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b004      	add	sp, #16
 8002436:	bd80      	pop	{r7, pc}

08002438 <_ZSt4moveIRSaI15TouchState_enumEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b002      	add	sp, #8
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b087      	sub	sp, #28
 8002450:	af02      	add	r7, sp, #8
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d140      	bne.n	80024de <_Z41__static_initialization_and_destruction_0ii+0x92>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4a31      	ldr	r2, [pc, #196]	; (8002524 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d13c      	bne.n	80024de <_Z41__static_initialization_and_destruction_0ii+0x92>
TouchBoardGroup touchGroup0 = TouchBoardGroup(NUM_BOARDS, htim2, TIM_CHANNEL_1, hdma_tim2_ch1);
 8002464:	4a30      	ldr	r2, [pc, #192]	; (8002528 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002466:	4831      	ldr	r0, [pc, #196]	; (800252c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2300      	movs	r3, #0
 800246e:	2118      	movs	r1, #24
 8002470:	f7fe fa7a 	bl	8000968 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
std::vector<TouchState_enum> touchStates(NUM_BOARDS);
 8002474:	240c      	movs	r4, #12
 8002476:	193b      	adds	r3, r7, r4
 8002478:	0018      	movs	r0, r3
 800247a:	f7fe fc5d 	bl	8000d38 <_ZNSaI15TouchState_enumEC1Ev>
 800247e:	193a      	adds	r2, r7, r4
 8002480:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002482:	2118      	movs	r1, #24
 8002484:	0018      	movs	r0, r3
 8002486:	f7fe fc71 	bl	8000d6c <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>
 800248a:	193b      	adds	r3, r7, r4
 800248c:	0018      	movs	r0, r3
 800248e:	f7fe fc60 	bl	8000d52 <_ZNSaI15TouchState_enumED1Ev>
WavPlayer audioPlayer = WavPlayer(hi2s2);
 8002492:	4a29      	ldr	r2, [pc, #164]	; (8002538 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002496:	0011      	movs	r1, r2
 8002498:	0018      	movs	r0, r3
 800249a:	f7ff fac4 	bl	8001a26 <_ZN9WavPlayerC1ER17I2S_HandleTypeDef>
NeoPixel rocketStream = NeoPixel(72, htim2, TIM_CHANNEL_3, hdma_tim2_ch3);
 800249e:	4a22      	ldr	r2, [pc, #136]	; (8002528 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80024a0:	4827      	ldr	r0, [pc, #156]	; (8002540 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80024a2:	4b28      	ldr	r3, [pc, #160]	; (8002544 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2308      	movs	r3, #8
 80024a8:	2148      	movs	r1, #72	; 0x48
 80024aa:	f7fe f885 	bl	80005b8 <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
LedButton buttonL = LedButton(BUTTON_L_GPIO_Port, BUTTON_L_Pin, BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin);
 80024ae:	4a26      	ldr	r2, [pc, #152]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80024b0:	4925      	ldr	r1, [pc, #148]	; (8002548 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80024b2:	4826      	ldr	r0, [pc, #152]	; (800254c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80024b4:	2320      	movs	r3, #32
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	0013      	movs	r3, r2
 80024ba:	2210      	movs	r2, #16
 80024bc:	f7fd ffee 	bl	800049c <_ZN9LedButtonC1EP12GPIO_TypeDeftS1_t>
LedButton buttonR = LedButton(BUTTON_R_GPIO_Port, BUTTON_R_Pin, BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin);
 80024c0:	4c23      	ldr	r4, [pc, #140]	; (8002550 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	019a      	lsls	r2, r3, #6
 80024c6:	4922      	ldr	r1, [pc, #136]	; (8002550 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80024c8:	4822      	ldr	r0, [pc, #136]	; (8002554 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	01db      	lsls	r3, r3, #7
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	0023      	movs	r3, r4
 80024d2:	f7fd ffe3 	bl	800049c <_ZN9LedButtonC1EP12GPIO_TypeDeftS1_t>
uint16_t inactivity_timer = inactivity_timeout;
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11b      	bne.n	800251c <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d117      	bne.n	800251c <_Z41__static_initialization_and_destruction_0ii+0xd0>
LedButton buttonR = LedButton(BUTTON_R_GPIO_Port, BUTTON_R_Pin, BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin);
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7fd fffc 	bl	80004ec <_ZN9LedButtonD1Ev>
LedButton buttonL = LedButton(BUTTON_L_GPIO_Port, BUTTON_L_Pin, BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin);
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7fd fff8 	bl	80004ec <_ZN9LedButtonD1Ev>
NeoPixel rocketStream = NeoPixel(72, htim2, TIM_CHANNEL_3, hdma_tim2_ch3);
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80024fe:	0018      	movs	r0, r3
 8002500:	f7fe f879 	bl	80005f6 <_ZN8NeoPixelD1Ev>
WavPlayer audioPlayer = WavPlayer(hi2s2);
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff faa0 	bl	8001a4c <_ZN9WavPlayerD1Ev>
std::vector<TouchState_enum> touchStates(NUM_BOARDS);
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800250e:	0018      	movs	r0, r3
 8002510:	f7fe fc4a 	bl	8000da8 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
TouchBoardGroup touchGroup0 = TouchBoardGroup(NUM_BOARDS, htim2, TIM_CHANNEL_1, hdma_tim2_ch1);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002516:	0018      	movs	r0, r3
 8002518:	f7fe faa6 	bl	8000a68 <_ZN15TouchBoardGroupD1Ev>
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b005      	add	sp, #20
 8002522:	bd90      	pop	{r4, r7, pc}
 8002524:	0000ffff 	.word	0x0000ffff
 8002528:	2000028c 	.word	0x2000028c
 800252c:	200005cc 	.word	0x200005cc
 8002530:	200002cc 	.word	0x200002cc
 8002534:	2000060c 	.word	0x2000060c
 8002538:	20000120 	.word	0x20000120
 800253c:	20000618 	.word	0x20000618
 8002540:	20000c48 	.word	0x20000c48
 8002544:	20000314 	.word	0x20000314
 8002548:	50001000 	.word	0x50001000
 800254c:	20000c68 	.word	0x20000c68
 8002550:	50000800 	.word	0x50000800
 8002554:	20000c80 	.word	0x20000c80
 8002558:	20000090 	.word	0x20000090
 800255c:	20000c9c 	.word	0x20000c9c

08002560 <_GLOBAL__sub_I_hi2s2>:
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <_GLOBAL__sub_I_hi2s2+0x14>)
 8002566:	0019      	movs	r1, r3
 8002568:	2001      	movs	r0, #1
 800256a:	f7ff ff6f 	bl	800244c <_Z41__static_initialization_and_destruction_0ii>
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	0000ffff 	.word	0x0000ffff

08002578 <_GLOBAL__sub_D_hi2s2>:
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <_GLOBAL__sub_D_hi2s2+0x14>)
 800257e:	0019      	movs	r1, r3
 8002580:	2000      	movs	r0, #0
 8002582:	f7ff ff63 	bl	800244c <_Z41__static_initialization_and_destruction_0ii>
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	0000ffff 	.word	0x0000ffff

08002590 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002590:	2201      	movs	r2, #1
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_MspInit+0x18>)
 8002594:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002596:	430a      	orrs	r2, r1
 8002598:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800259e:	0552      	lsls	r2, r2, #21
 80025a0:	430a      	orrs	r2, r1
 80025a2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a4:	4770      	bx	lr
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80025ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ae:	0005      	movs	r5, r0
 80025b0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b2:	2214      	movs	r2, #20
 80025b4:	2100      	movs	r1, #0
 80025b6:	a803      	add	r0, sp, #12
 80025b8:	f002 fcde 	bl	8004f78 <memset>
  if(hi2s->Instance==SPI2)
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_I2S_MspInit+0xa8>)
 80025be:	682a      	ldr	r2, [r5, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d145      	bne.n	8002650 <HAL_I2S_MspInit+0xa4>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025c4:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	2602      	movs	r6, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025c8:	4b23      	ldr	r3, [pc, #140]	; (8002658 <HAL_I2S_MspInit+0xac>)
 80025ca:	01d2      	lsls	r2, r2, #7
 80025cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PD0     ------> I2S2_WS
    PD1     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2700      	movs	r7, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025d0:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d2:	2108      	movs	r1, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025da:	4332      	orrs	r2, r6
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80025e0:	481e      	ldr	r0, [pc, #120]	; (800265c <HAL_I2S_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e2:	4032      	ands	r2, r6
 80025e4:	9201      	str	r2, [sp, #4]
 80025e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	430a      	orrs	r2, r1
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f2:	400b      	ands	r3, r1
 80025f4:	9302      	str	r3, [sp, #8]
 80025f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 80025f8:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80025fa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002604:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 8002606:	f000 fb5d 	bl	8002cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800260a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800260c:	4814      	ldr	r0, [pc, #80]	; (8002660 <HAL_I2S_MspInit+0xb4>)
 800260e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
 8002610:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002614:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800261a:	f000 fb53 	bl	8002cc4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel7;
 800261e:	4c11      	ldr	r4, [pc, #68]	; (8002664 <HAL_I2S_MspInit+0xb8>)
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_I2S_MspInit+0xbc>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002622:	0020      	movs	r0, r4
    hdma_spi2_tx.Instance = DMA1_Channel7;
 8002624:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002626:	2310      	movs	r3, #16
 8002628:	60a3      	str	r3, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800262a:	3370      	adds	r3, #112	; 0x70
 800262c:	6123      	str	r3, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800262e:	3380      	adds	r3, #128	; 0x80
 8002630:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	00db      	lsls	r3, r3, #3
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 8002636:	6066      	str	r6, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002638:	60e7      	str	r7, [r4, #12]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800263a:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800263c:	61e7      	str	r7, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800263e:	6227      	str	r7, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002640:	f000 fa70 	bl	8002b24 <HAL_DMA_Init>
 8002644:	42b8      	cmp	r0, r7
 8002646:	d001      	beq.n	800264c <HAL_I2S_MspInit+0xa0>
    {
      Error_Handler();
 8002648:	f7ff fe10 	bl	800226c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800264c:	62ec      	str	r4, [r5, #44]	; 0x2c
 800264e:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002650:	b009      	add	sp, #36	; 0x24
 8002652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002654:	40003800 	.word	0x40003800
 8002658:	40021000 	.word	0x40021000
 800265c:	50000400 	.word	0x50000400
 8002660:	50000c00 	.word	0x50000c00
 8002664:	2000015c 	.word	0x2000015c
 8002668:	40020080 	.word	0x40020080

0800266c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	0005      	movs	r5, r0
 8002670:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002672:	2214      	movs	r2, #20
 8002674:	2100      	movs	r1, #0
 8002676:	a801      	add	r0, sp, #4
 8002678:	f002 fc7e 	bl	8004f78 <memset>
  if(hspi->Instance==SPI1)
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_SPI_MspInit+0xb0>)
 800267e:	682a      	ldr	r2, [r5, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d149      	bne.n	8002718 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	4b26      	ldr	r3, [pc, #152]	; (8002720 <HAL_SPI_MspInit+0xb4>)
 8002688:	0152      	lsls	r2, r2, #5
 800268a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2600      	movs	r6, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800268e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002690:	2110      	movs	r1, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002692:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002696:	4823      	ldr	r0, [pc, #140]	; (8002724 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002698:	430a      	orrs	r2, r1
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a0:	400b      	ands	r3, r1
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
 80026a6:	23e0      	movs	r3, #224	; 0xe0
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ac:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ae:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
 80026b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b8:	f000 fb04 	bl	8002cc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80026bc:	4c1a      	ldr	r4, [pc, #104]	; (8002728 <HAL_SPI_MspInit+0xbc>)
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_SPI_MspInit+0xc0>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80026c0:	0020      	movs	r0, r4
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80026c2:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c8:	337f      	adds	r3, #127	; 0x7f
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ca:	60a6      	str	r6, [r4, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026cc:	60e6      	str	r6, [r4, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026ce:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d0:	6166      	str	r6, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d2:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80026d4:	61e6      	str	r6, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026d6:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80026d8:	f000 fa24 	bl	8002b24 <HAL_DMA_Init>
 80026dc:	42b0      	cmp	r0, r6
 80026de:	d001      	beq.n	80026e4 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 80026e0:	f7ff fdc4 	bl	800226c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_SPI_MspInit+0xc4>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80026e6:	64ec      	str	r4, [r5, #76]	; 0x4c
 80026e8:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80026ea:	4c12      	ldr	r4, [pc, #72]	; (8002734 <HAL_SPI_MspInit+0xc8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026ec:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80026ee:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80026f0:	2301      	movs	r3, #1
 80026f2:	6063      	str	r3, [r4, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026f4:	330f      	adds	r3, #15
 80026f6:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f8:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80026fa:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026fc:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026fe:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002700:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002702:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002704:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002706:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002708:	f000 fa0c 	bl	8002b24 <HAL_DMA_Init>
 800270c:	2800      	cmp	r0, #0
 800270e:	d001      	beq.n	8002714 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8002710:	f7ff fdac 	bl	800226c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002714:	64ac      	str	r4, [r5, #72]	; 0x48
 8002716:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002718:	b006      	add	sp, #24
 800271a:	bd70      	pop	{r4, r5, r6, pc}
 800271c:	40013000 	.word	0x40013000
 8002720:	40021000 	.word	0x40021000
 8002724:	50001000 	.word	0x50001000
 8002728:	200001fc 	.word	0x200001fc
 800272c:	4002001c 	.word	0x4002001c
 8002730:	40020030 	.word	0x40020030
 8002734:	20000244 	.word	0x20000244

08002738 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	6802      	ldr	r2, [r0, #0]
{
 800273c:	b570      	push	{r4, r5, r6, lr}
  if(htim_base->Instance==TIM2)
 800273e:	05db      	lsls	r3, r3, #23
{
 8002740:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM2)
 8002742:	429a      	cmp	r2, r3
 8002744:	d152      	bne.n	80027ec <HAL_TIM_Base_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002746:	2301      	movs	r3, #1
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <HAL_TIM_Base_MspInit+0xb8>)

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800274a:	4c2a      	ldr	r4, [pc, #168]	; (80027f4 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800274c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800274e:	0020      	movs	r0, r4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002750:	430b      	orrs	r3, r1
 8002752:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002754:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <HAL_TIM_Base_MspInit+0xc0>)
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002756:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002758:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 800275a:	2308      	movs	r3, #8
 800275c:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800275e:	18db      	adds	r3, r3, r3
 8002760:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002762:	2300      	movs	r3, #0
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002764:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002766:	3281      	adds	r2, #129	; 0x81
 8002768:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800276a:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800276c:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800276e:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002770:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002772:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002774:	f000 f9d6 	bl	8002b24 <HAL_DMA_Init>
 8002778:	2800      	cmp	r0, #0
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_MspInit+0x48>
    {
      Error_Handler();
 800277c:	f7ff fd76 	bl	800226c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002780:	622c      	str	r4, [r5, #32]

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_TIM_Base_MspInit+0xc4>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002784:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002786:	4c1e      	ldr	r4, [pc, #120]	; (8002800 <HAL_TIM_Base_MspInit+0xc8>)
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002788:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 800278a:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 800278c:	2308      	movs	r3, #8
 800278e:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002790:	18db      	adds	r3, r3, r3
 8002792:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002794:	2300      	movs	r3, #0
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002796:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002798:	3281      	adds	r2, #129	; 0x81
 800279a:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800279c:	0020      	movs	r0, r4
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800279e:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027a0:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027a2:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80027a4:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80027a6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80027a8:	f000 f9bc 	bl	8002b24 <HAL_DMA_Init>
 80027ac:	2800      	cmp	r0, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_TIM_Base_MspInit+0x7c>
    {
      Error_Handler();
 80027b0:	f7ff fd5c 	bl	800226c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);

    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_TIM_Base_MspInit+0xcc>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80027b6:	62ac      	str	r4, [r5, #40]	; 0x28
 80027b8:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 80027ba:	4c13      	ldr	r4, [pc, #76]	; (8002808 <HAL_TIM_Base_MspInit+0xd0>)
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80027bc:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 80027be:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 80027c0:	2308      	movs	r3, #8
 80027c2:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027c4:	18db      	adds	r3, r3, r3
 80027c6:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c8:	2300      	movs	r3, #0
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80027ca:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027cc:	3281      	adds	r2, #129	; 0x81
 80027ce:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 80027d0:	0020      	movs	r0, r4
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d2:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027d4:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027d6:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 80027d8:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80027da:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 80027dc:	f000 f9a2 	bl	8002b24 <HAL_DMA_Init>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_TIM_Base_MspInit+0xb0>
    {
      Error_Handler();
 80027e4:	f7ff fd42 	bl	800226c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 80027e8:	62ec      	str	r4, [r5, #44]	; 0x2c
 80027ea:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027ec:	bd70      	pop	{r4, r5, r6, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	40021000 	.word	0x40021000
 80027f4:	200002cc 	.word	0x200002cc
 80027f8:	40020058 	.word	0x40020058
 80027fc:	40020008 	.word	0x40020008
 8002800:	20000314 	.word	0x20000314
 8002804:	40020044 	.word	0x40020044
 8002808:	2000035c 	.word	0x2000035c

0800280c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800280c:	b510      	push	{r4, lr}
 800280e:	0004      	movs	r4, r0
 8002810:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	2214      	movs	r2, #20
 8002814:	2100      	movs	r1, #0
 8002816:	a801      	add	r0, sp, #4
 8002818:	f002 fbae 	bl	8004f78 <memset>
  if(htim->Instance==TIM2)
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	6822      	ldr	r2, [r4, #0]
 8002820:	05db      	lsls	r3, r3, #23
 8002822:	429a      	cmp	r2, r3
 8002824:	d115      	bne.n	8002852 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002826:	2010      	movs	r0, #16
 8002828:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <HAL_TIM_MspPostInit+0x4c>)
 800282a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800282c:	4301      	orrs	r1, r0
 800282e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002830:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM2;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002832:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002834:	4003      	ands	r3, r0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
 800283a:	23d0      	movs	r3, #208	; 0xd0
 800283c:	015b      	lsls	r3, r3, #5
 800283e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002846:	4805      	ldr	r0, [pc, #20]	; (800285c <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM2;
 800284c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800284e:	f000 fa39 	bl	8002cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002852:	b006      	add	sp, #24
 8002854:	bd10      	pop	{r4, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	40021000 	.word	0x40021000
 800285c:	50001000 	.word	0x50001000

08002860 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002860:	4770      	bx	lr

08002862 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002862:	e7fe      	b.n	8002862 <HardFault_Handler>

08002864 <SVC_Handler>:
 8002864:	4770      	bx	lr

08002866 <PendSV_Handler>:
 8002866:	4770      	bx	lr

08002868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002868:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800286a:	f000 f8e7 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800286e:	bd10      	pop	{r4, pc}

08002870 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002870:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002872:	4802      	ldr	r0, [pc, #8]	; (800287c <DMA1_Channel1_IRQHandler+0xc>)
 8002874:	f000 f9da 	bl	8002c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002878:	bd10      	pop	{r4, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	20000314 	.word	0x20000314

08002880 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002880:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002882:	4803      	ldr	r0, [pc, #12]	; (8002890 <DMA1_Channel2_3_IRQHandler+0x10>)
 8002884:	f000 f9d2 	bl	8002c2c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <DMA1_Channel2_3_IRQHandler+0x14>)
 800288a:	f000 f9cf 	bl	8002c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800288e:	bd10      	pop	{r4, pc}
 8002890:	200001fc 	.word	0x200001fc
 8002894:	20000244 	.word	0x20000244

08002898 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002898:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <DMA1_Channel4_5_6_7_IRQHandler+0x18>)
 800289c:	f000 f9c6 	bl	8002c2c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80028a0:	4804      	ldr	r0, [pc, #16]	; (80028b4 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 80028a2:	f000 f9c3 	bl	8002c2c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80028a6:	4804      	ldr	r0, [pc, #16]	; (80028b8 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 80028a8:	f000 f9c0 	bl	8002c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	2000035c 	.word	0x2000035c
 80028b4:	200002cc 	.word	0x200002cc
 80028b8:	2000015c 	.word	0x2000015c

080028bc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80028bc:	2001      	movs	r0, #1
 80028be:	4770      	bx	lr

080028c0 <_kill>:

int _kill(int pid, int sig)
{
 80028c0:	b510      	push	{r4, lr}
	errno = EINVAL;
 80028c2:	f002 faff 	bl	8004ec4 <__errno>
 80028c6:	2316      	movs	r3, #22
 80028c8:	6003      	str	r3, [r0, #0]
	return -1;
 80028ca:	2001      	movs	r0, #1
}
 80028cc:	4240      	negs	r0, r0
 80028ce:	bd10      	pop	{r4, pc}

080028d0 <_exit>:

void _exit (int status)
{
 80028d0:	b510      	push	{r4, lr}
	errno = EINVAL;
 80028d2:	f002 faf7 	bl	8004ec4 <__errno>
 80028d6:	2316      	movs	r3, #22
 80028d8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80028da:	e7fe      	b.n	80028da <_exit+0xa>

080028dc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028dc:	4a0b      	ldr	r2, [pc, #44]	; (800290c <_sbrk+0x30>)
 80028de:	490c      	ldr	r1, [pc, #48]	; (8002910 <_sbrk+0x34>)
{
 80028e0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e2:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e4:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <_sbrk+0x38>)
{
 80028e6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80028e8:	6810      	ldr	r0, [r2, #0]
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d101      	bne.n	80028f2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80028ee:	480a      	ldr	r0, [pc, #40]	; (8002918 <_sbrk+0x3c>)
 80028f0:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028f2:	6810      	ldr	r0, [r2, #0]
 80028f4:	18c3      	adds	r3, r0, r3
 80028f6:	428b      	cmp	r3, r1
 80028f8:	d906      	bls.n	8002908 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80028fa:	f002 fae3 	bl	8004ec4 <__errno>
 80028fe:	230c      	movs	r3, #12
 8002900:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002902:	2001      	movs	r0, #1
 8002904:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002906:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002908:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800290a:	e7fc      	b.n	8002906 <_sbrk+0x2a>
 800290c:	00000400 	.word	0x00000400
 8002910:	20005000 	.word	0x20005000
 8002914:	20000ca0 	.word	0x20000ca0
 8002918:	20000ce0 	.word	0x20000ce0

0800291c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800291c:	2280      	movs	r2, #128	; 0x80
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <SystemInit+0x44>)
 8002920:	0052      	lsls	r2, r2, #1
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	490e      	ldr	r1, [pc, #56]	; (8002964 <SystemInit+0x48>)
 800292c:	400a      	ands	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	490d      	ldr	r1, [pc, #52]	; (8002968 <SystemInit+0x4c>)
 8002934:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002936:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002938:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	438a      	bics	r2, r1
 800293e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	490a      	ldr	r1, [pc, #40]	; (800296c <SystemInit+0x50>)
 8002944:	400a      	ands	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	4909      	ldr	r1, [pc, #36]	; (8002970 <SystemInit+0x54>)
 800294c:	400a      	ands	r2, r1
 800294e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <SystemInit+0x58>)
 8002958:	0512      	lsls	r2, r2, #20
 800295a:	609a      	str	r2, [r3, #8]
#endif
}
 800295c:	4770      	bx	lr
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40021000 	.word	0x40021000
 8002964:	88ff400c 	.word	0x88ff400c
 8002968:	fef6fff6 	.word	0xfef6fff6
 800296c:	fffbffff 	.word	0xfffbffff
 8002970:	ff02ffff 	.word	0xff02ffff
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002978:	480d      	ldr	r0, [pc, #52]	; (80029b0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800297a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800297c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800297e:	e003      	b.n	8002988 <LoopCopyDataInit>

08002980 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002982:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002984:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002986:	3104      	adds	r1, #4

08002988 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002988:	480b      	ldr	r0, [pc, #44]	; (80029b8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <LoopForever+0xe>)
  adds  r2, r0, r1
 800298c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800298e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002990:	d3f6      	bcc.n	8002980 <CopyDataInit>
  ldr  r2, =_sbss
 8002992:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002994:	e002      	b.n	800299c <LoopFillZerobss>

08002996 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002996:	2300      	movs	r3, #0
  str  r3, [r2]
 8002998:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800299a:	3204      	adds	r2, #4

0800299c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <LoopForever+0x16>)
  cmp  r2, r3
 800299e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029a0:	d3f9      	bcc.n	8002996 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80029a2:	f7ff ffbb 	bl	800291c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029a6:	f002 fa93 	bl	8004ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029aa:	f7ff f859 	bl	8001a60 <main>

080029ae <LoopForever>:

LoopForever:
    b LoopForever
 80029ae:	e7fe      	b.n	80029ae <LoopForever>
   ldr   r0, =_estack
 80029b0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80029b4:	08005268 	.word	0x08005268
  ldr  r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029bc:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 80029c0:	20000104 	.word	0x20000104
  ldr  r3, = _ebss
 80029c4:	20000ce0 	.word	0x20000ce0

080029c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c8:	e7fe      	b.n	80029c8 <ADC1_COMP_IRQHandler>
	...

080029cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029d0:	20fa      	movs	r0, #250	; 0xfa
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_InitTick+0x3c>)
 80029d4:	0080      	lsls	r0, r0, #2
 80029d6:	7819      	ldrb	r1, [r3, #0]
 80029d8:	f7fd fb96 	bl	8000108 <__udivsi3>
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_InitTick+0x40>)
 80029de:	0001      	movs	r1, r0
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	f7fd fb91 	bl	8000108 <__udivsi3>
 80029e6:	f000 f883 	bl	8002af0 <HAL_SYSTICK_Config>
 80029ea:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80029ec:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ee:	2c00      	cmp	r4, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f2:	2d03      	cmp	r5, #3
 80029f4:	d807      	bhi.n	8002a06 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f6:	3802      	subs	r0, #2
 80029f8:	0022      	movs	r2, r4
 80029fa:	0029      	movs	r1, r5
 80029fc:	f000 f842 	bl	8002a84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a00:	0020      	movs	r0, r4
 8002a02:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_InitTick+0x44>)
 8002a04:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	20000098 	.word	0x20000098
 8002a0c:	20000094 	.word	0x20000094
 8002a10:	2000009c 	.word	0x2000009c

08002a14 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002a14:	2340      	movs	r3, #64	; 0x40
 8002a16:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <HAL_Init+0x24>)
{
 8002a18:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002a1a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a1c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a22:	f7ff ffd3 	bl	80029cc <HAL_InitTick>
 8002a26:	1e04      	subs	r4, r0, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_Init+0x1e>
    HAL_MspInit();
 8002a2a:	f7ff fdb1 	bl	8002590 <HAL_MspInit>
}
 8002a2e:	0020      	movs	r0, r4
 8002a30:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002a32:	2401      	movs	r4, #1
 8002a34:	e7fb      	b.n	8002a2e <HAL_Init+0x1a>
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	40022000 	.word	0x40022000

08002a3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a3c:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <HAL_IncTick+0x10>)
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <HAL_IncTick+0x14>)
 8002a40:	6811      	ldr	r1, [r2, #0]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	185b      	adds	r3, r3, r1
 8002a46:	6013      	str	r3, [r2, #0]
}
 8002a48:	4770      	bx	lr
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	20000cbc 	.word	0x20000cbc
 8002a50:	20000098 	.word	0x20000098

08002a54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a54:	4b01      	ldr	r3, [pc, #4]	; (8002a5c <HAL_GetTick+0x8>)
 8002a56:	6818      	ldr	r0, [r3, #0]
}
 8002a58:	4770      	bx	lr
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	20000cbc 	.word	0x20000cbc

08002a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a64:	f7ff fff6 	bl	8002a54 <HAL_GetTick>
 8002a68:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a6a:	1c63      	adds	r3, r4, #1
 8002a6c:	d002      	beq.n	8002a74 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_Delay+0x20>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a74:	f7ff ffee 	bl	8002a54 <HAL_GetTick>
 8002a78:	1b40      	subs	r0, r0, r5
 8002a7a:	42a0      	cmp	r0, r4
 8002a7c:	d3fa      	bcc.n	8002a74 <HAL_Delay+0x14>
  {
  }
}
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	20000098 	.word	0x20000098

08002a84 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a84:	b530      	push	{r4, r5, lr}
 8002a86:	25ff      	movs	r5, #255	; 0xff
 8002a88:	2403      	movs	r4, #3
 8002a8a:	002a      	movs	r2, r5
 8002a8c:	4004      	ands	r4, r0
 8002a8e:	00e4      	lsls	r4, r4, #3
 8002a90:	40a2      	lsls	r2, r4
 8002a92:	0189      	lsls	r1, r1, #6
 8002a94:	4029      	ands	r1, r5
 8002a96:	43d2      	mvns	r2, r2
 8002a98:	40a1      	lsls	r1, r4
 8002a9a:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	db0a      	blt.n	8002ab6 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aa0:	24c0      	movs	r4, #192	; 0xc0
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_NVIC_SetPriority+0x4c>)
 8002aa4:	0880      	lsrs	r0, r0, #2
 8002aa6:	0080      	lsls	r0, r0, #2
 8002aa8:	18c0      	adds	r0, r0, r3
 8002aaa:	00a4      	lsls	r4, r4, #2
 8002aac:	5903      	ldr	r3, [r0, r4]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	4311      	orrs	r1, r2
 8002ab2:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002ab4:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ab6:	200f      	movs	r0, #15
 8002ab8:	4003      	ands	r3, r0
 8002aba:	3b08      	subs	r3, #8
 8002abc:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <HAL_NVIC_SetPriority+0x50>)
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	181b      	adds	r3, r3, r0
 8002ac4:	69d8      	ldr	r0, [r3, #28]
 8002ac6:	4002      	ands	r2, r0
 8002ac8:	4311      	orrs	r1, r2
 8002aca:	61d9      	str	r1, [r3, #28]
 8002acc:	e7f2      	b.n	8002ab4 <HAL_NVIC_SetPriority+0x30>
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	e000e100 	.word	0xe000e100
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	db05      	blt.n	8002ae8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002adc:	231f      	movs	r3, #31
 8002ade:	4018      	ands	r0, r3
 8002ae0:	3b1e      	subs	r3, #30
 8002ae2:	4083      	lsls	r3, r0
 8002ae4:	4a01      	ldr	r2, [pc, #4]	; (8002aec <HAL_NVIC_EnableIRQ+0x14>)
 8002ae6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ae8:	4770      	bx	lr
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	e000e100 	.word	0xe000e100

08002af0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	1e43      	subs	r3, r0, #1
 8002af4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d20d      	bcs.n	8002b18 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002afc:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afe:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b00:	4807      	ldr	r0, [pc, #28]	; (8002b20 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b02:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b04:	6a03      	ldr	r3, [r0, #32]
 8002b06:	0609      	lsls	r1, r1, #24
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b10:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b12:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b14:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b16:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b18:	4770      	bx	lr
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	e000e010 	.word	0xe000e010
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002b28:	2001      	movs	r0, #1
  if(hdma == NULL)
 8002b2a:	2c00      	cmp	r4, #0
 8002b2c:	d035      	beq.n	8002b9a <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b2e:	6825      	ldr	r5, [r4, #0]
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <HAL_DMA_Init+0x78>)
 8002b32:	2114      	movs	r1, #20
 8002b34:	18e8      	adds	r0, r5, r3
 8002b36:	f7fd fae7 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b3c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8002b3e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b40:	2302      	movs	r3, #2
 8002b42:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b44:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b46:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b48:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b4c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b4e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8002b50:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b52:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002b54:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b56:	433b      	orrs	r3, r7
 8002b58:	6967      	ldr	r7, [r4, #20]
 8002b5a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5c:	69a7      	ldr	r7, [r4, #24]
 8002b5e:	433b      	orrs	r3, r7
 8002b60:	69e7      	ldr	r7, [r4, #28]
 8002b62:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b64:	6a27      	ldr	r7, [r4, #32]
 8002b66:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8002b68:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b6a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	01db      	lsls	r3, r3, #7
 8002b70:	4299      	cmp	r1, r3
 8002b72:	d00c      	beq.n	8002b8e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b74:	251c      	movs	r5, #28
 8002b76:	4028      	ands	r0, r5
 8002b78:	3d0d      	subs	r5, #13
 8002b7a:	4085      	lsls	r5, r0
 8002b7c:	490a      	ldr	r1, [pc, #40]	; (8002ba8 <HAL_DMA_Init+0x84>)
 8002b7e:	680b      	ldr	r3, [r1, #0]
 8002b80:	43ab      	bics	r3, r5
 8002b82:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b84:	6863      	ldr	r3, [r4, #4]
 8002b86:	680d      	ldr	r5, [r1, #0]
 8002b88:	4083      	lsls	r3, r0
 8002b8a:	432b      	orrs	r3, r5
 8002b8c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b90:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b92:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b94:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8002b96:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002b98:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8002b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b9c:	bffdfff8 	.word	0xbffdfff8
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	ffff800f 	.word	0xffff800f
 8002ba8:	400200a8 	.word	0x400200a8

08002bac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bae:	1d45      	adds	r5, r0, #5
{
 8002bb0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8002bb2:	7feb      	ldrb	r3, [r5, #31]
{
 8002bb4:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002bb6:	2002      	movs	r0, #2
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d029      	beq.n	8002c10 <HAL_DMA_Start_IT+0x64>
 8002bbc:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bbe:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8002bc0:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bc2:	7ffb      	ldrb	r3, [r7, #31]
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	469c      	mov	ip, r3
 8002bc8:	4660      	mov	r0, ip
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2801      	cmp	r0, #1
 8002bce:	d12a      	bne.n	8002c26 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bd0:	3001      	adds	r0, #1
 8002bd2:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bd4:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd6:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002bd8:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8002bda:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002bdc:	361c      	adds	r6, #28
 8002bde:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8002be0:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002be2:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8002be4:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002be6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002be8:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bea:	9b01      	ldr	r3, [sp, #4]
 8002bec:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bee:	68a3      	ldr	r3, [r4, #8]
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d10e      	bne.n	8002c12 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bf4:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bf6:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00c      	beq.n	8002c18 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bfe:	230e      	movs	r3, #14
 8002c00:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c02:	4313      	orrs	r3, r2
 8002c04:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8002c06:	2301      	movs	r3, #1
 8002c08:	6802      	ldr	r2, [r0, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2000      	movs	r0, #0
}
 8002c10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002c12:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002c14:	60c2      	str	r2, [r0, #12]
 8002c16:	e7ef      	b.n	8002bf8 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c18:	2204      	movs	r2, #4
 8002c1a:	6803      	ldr	r3, [r0, #0]
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c20:	6802      	ldr	r2, [r0, #0]
 8002c22:	230a      	movs	r3, #10
 8002c24:	e7ed      	b.n	8002c02 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8002c26:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8002c28:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8002c2a:	e7f1      	b.n	8002c10 <HAL_DMA_Start_IT+0x64>

08002c2c <HAL_DMA_IRQHandler>:
{
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002c2e:	221c      	movs	r2, #28
 8002c30:	2704      	movs	r7, #4
 8002c32:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c34:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002c36:	4032      	ands	r2, r6
 8002c38:	003e      	movs	r6, r7
 8002c3a:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c3c:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002c3e:	6803      	ldr	r3, [r0, #0]
 8002c40:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002c42:	4235      	tst	r5, r6
 8002c44:	d00d      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x36>
 8002c46:	423c      	tst	r4, r7
 8002c48:	d00b      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	0692      	lsls	r2, r2, #26
 8002c4e:	d402      	bmi.n	8002c56 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	43ba      	bics	r2, r7
 8002c54:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8002c56:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002c58:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d019      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002c5e:	4798      	blx	r3
  return;
 8002c60:	e017      	b.n	8002c92 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002c62:	2702      	movs	r7, #2
 8002c64:	003e      	movs	r6, r7
 8002c66:	4096      	lsls	r6, r2
 8002c68:	4235      	tst	r5, r6
 8002c6a:	d013      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x68>
 8002c6c:	423c      	tst	r4, r7
 8002c6e:	d011      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	0692      	lsls	r2, r2, #26
 8002c74:	d406      	bmi.n	8002c84 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c76:	240a      	movs	r4, #10
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	43a2      	bics	r2, r4
 8002c7c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	2201      	movs	r2, #1
 8002c80:	1d83      	adds	r3, r0, #6
 8002c82:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8002c84:	2200      	movs	r2, #0
 8002c86:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c88:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002c8a:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8002c8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d1e5      	bne.n	8002c5e <HAL_DMA_IRQHandler+0x32>
}
 8002c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002c94:	2608      	movs	r6, #8
 8002c96:	0037      	movs	r7, r6
 8002c98:	4097      	lsls	r7, r2
 8002c9a:	423d      	tst	r5, r7
 8002c9c:	d0f9      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x66>
 8002c9e:	4234      	tst	r4, r6
 8002ca0:	d0f7      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ca2:	250e      	movs	r5, #14
 8002ca4:	681c      	ldr	r4, [r3, #0]
 8002ca6:	43ac      	bics	r4, r5
 8002ca8:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002caa:	2301      	movs	r3, #1
 8002cac:	001c      	movs	r4, r3
 8002cae:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8002cb0:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cb2:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cb4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	1d43      	adds	r3, r0, #5
 8002cbc:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002cbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cc0:	e7e5      	b.n	8002c8e <HAL_DMA_IRQHandler+0x62>
	...

08002cc4 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_GPIO_Init+0x164>)
{
 8002cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002cc8:	1882      	adds	r2, r0, r2
 8002cca:	1e54      	subs	r4, r2, #1
 8002ccc:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8002cce:	2300      	movs	r3, #0
{
 8002cd0:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002cd2:	3205      	adds	r2, #5
 8002cd4:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cd6:	680a      	ldr	r2, [r1, #0]
 8002cd8:	0014      	movs	r4, r2
 8002cda:	40dc      	lsrs	r4, r3
 8002cdc:	d101      	bne.n	8002ce2 <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8002cde:	b007      	add	sp, #28
 8002ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002ce2:	2401      	movs	r4, #1
 8002ce4:	0025      	movs	r5, r4
 8002ce6:	46a4      	mov	ip, r4
 8002ce8:	409d      	lsls	r5, r3
 8002cea:	0014      	movs	r4, r2
 8002cec:	402c      	ands	r4, r5
 8002cee:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8002cf0:	422a      	tst	r2, r5
 8002cf2:	d100      	bne.n	8002cf6 <HAL_GPIO_Init+0x32>
 8002cf4:	e096      	b.n	8002e24 <HAL_GPIO_Init+0x160>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cf6:	2403      	movs	r4, #3
 8002cf8:	684a      	ldr	r2, [r1, #4]
 8002cfa:	005e      	lsls	r6, r3, #1
 8002cfc:	9201      	str	r2, [sp, #4]
 8002cfe:	4022      	ands	r2, r4
 8002d00:	40b4      	lsls	r4, r6
 8002d02:	43e4      	mvns	r4, r4
 8002d04:	9403      	str	r4, [sp, #12]
 8002d06:	1e54      	subs	r4, r2, #1
 8002d08:	4564      	cmp	r4, ip
 8002d0a:	d82a      	bhi.n	8002d62 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8002d0c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002d0e:	9c03      	ldr	r4, [sp, #12]
 8002d10:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d12:	68cc      	ldr	r4, [r1, #12]
 8002d14:	40b4      	lsls	r4, r6
 8002d16:	433c      	orrs	r4, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d18:	4667      	mov	r7, ip
        GPIOx->OSPEEDR = temp;
 8002d1a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d1c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d1e:	43ac      	bics	r4, r5
 8002d20:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d22:	9c01      	ldr	r4, [sp, #4]
 8002d24:	0924      	lsrs	r4, r4, #4
 8002d26:	403c      	ands	r4, r7
 8002d28:	409c      	lsls	r4, r3
 8002d2a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002d2c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8002d2e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d30:	9c03      	ldr	r4, [sp, #12]
 8002d32:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d34:	688c      	ldr	r4, [r1, #8]
 8002d36:	40b4      	lsls	r4, r6
 8002d38:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8002d3a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3c:	2a02      	cmp	r2, #2
 8002d3e:	d112      	bne.n	8002d66 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3U];
 8002d40:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002d42:	2507      	movs	r5, #7
 8002d44:	00a4      	lsls	r4, r4, #2
 8002d46:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3U];
 8002d48:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002d4a:	9404      	str	r4, [sp, #16]
 8002d4c:	240f      	movs	r4, #15
 8002d4e:	401d      	ands	r5, r3
 8002d50:	00ad      	lsls	r5, r5, #2
 8002d52:	40ac      	lsls	r4, r5
 8002d54:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002d56:	690c      	ldr	r4, [r1, #16]
 8002d58:	40ac      	lsls	r4, r5
 8002d5a:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8002d5c:	9c04      	ldr	r4, [sp, #16]
 8002d5e:	6227      	str	r7, [r4, #32]
 8002d60:	e001      	b.n	8002d66 <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d62:	2a03      	cmp	r2, #3
 8002d64:	d1e3      	bne.n	8002d2e <HAL_GPIO_Init+0x6a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d66:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8002d68:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d6a:	9d03      	ldr	r5, [sp, #12]
 8002d6c:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d6e:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8002d70:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d72:	22c0      	movs	r2, #192	; 0xc0
 8002d74:	9c01      	ldr	r4, [sp, #4]
 8002d76:	0292      	lsls	r2, r2, #10
 8002d78:	4214      	tst	r4, r2
 8002d7a:	d053      	beq.n	8002e24 <HAL_GPIO_Init+0x160>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7c:	2501      	movs	r5, #1
 8002d7e:	4c2b      	ldr	r4, [pc, #172]	; (8002e2c <HAL_GPIO_Init+0x168>)
 8002d80:	46ac      	mov	ip, r5
 8002d82:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002d84:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d86:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002d88:	001d      	movs	r5, r3
 8002d8a:	260f      	movs	r6, #15
 8002d8c:	403d      	ands	r5, r7
 8002d8e:	00ad      	lsls	r5, r5, #2
 8002d90:	40ae      	lsls	r6, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8002d94:	4a26      	ldr	r2, [pc, #152]	; (8002e30 <HAL_GPIO_Init+0x16c>)
 8002d96:	089c      	lsrs	r4, r3, #2
 8002d98:	00a4      	lsls	r4, r4, #2
 8002d9a:	18a4      	adds	r4, r4, r2
 8002d9c:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002d9e:	43b2      	bics	r2, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002da0:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002da2:	9203      	str	r2, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002da4:	05f6      	lsls	r6, r6, #23
 8002da6:	2200      	movs	r2, #0
 8002da8:	42b0      	cmp	r0, r6
 8002daa:	d010      	beq.n	8002dce <HAL_GPIO_Init+0x10a>
 8002dac:	4e21      	ldr	r6, [pc, #132]	; (8002e34 <HAL_GPIO_Init+0x170>)
 8002dae:	4662      	mov	r2, ip
 8002db0:	42b0      	cmp	r0, r6
 8002db2:	d00c      	beq.n	8002dce <HAL_GPIO_Init+0x10a>
 8002db4:	4e20      	ldr	r6, [pc, #128]	; (8002e38 <HAL_GPIO_Init+0x174>)
 8002db6:	1892      	adds	r2, r2, r2
 8002db8:	42b0      	cmp	r0, r6
 8002dba:	d008      	beq.n	8002dce <HAL_GPIO_Init+0x10a>
 8002dbc:	4e1f      	ldr	r6, [pc, #124]	; (8002e3c <HAL_GPIO_Init+0x178>)
 8002dbe:	003a      	movs	r2, r7
 8002dc0:	42b0      	cmp	r0, r6
 8002dc2:	d004      	beq.n	8002dce <HAL_GPIO_Init+0x10a>
 8002dc4:	4e1e      	ldr	r6, [pc, #120]	; (8002e40 <HAL_GPIO_Init+0x17c>)
 8002dc6:	4462      	add	r2, ip
 8002dc8:	42b0      	cmp	r0, r6
 8002dca:	d000      	beq.n	8002dce <HAL_GPIO_Init+0x10a>
 8002dcc:	9a05      	ldr	r2, [sp, #20]
 8002dce:	40aa      	lsls	r2, r5
 8002dd0:	9d03      	ldr	r5, [sp, #12]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd2:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002dd4:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd6:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8002dd8:	4a1a      	ldr	r2, [pc, #104]	; (8002e44 <HAL_GPIO_Init+0x180>)
        temp &= ~((uint32_t)iocurrent);
 8002dda:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8002ddc:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8002dde:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8002de2:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002de4:	03ff      	lsls	r7, r7, #15
 8002de6:	d401      	bmi.n	8002dec <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8002de8:	0035      	movs	r5, r6
 8002dea:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8002dec:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002dee:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8002df0:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df2:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8002df4:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df6:	03bf      	lsls	r7, r7, #14
 8002df8:	d401      	bmi.n	8002dfe <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8002dfa:	0035      	movs	r5, r6
 8002dfc:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8002dfe:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002e00:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002e02:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e04:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8002e06:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e08:	02ff      	lsls	r7, r7, #11
 8002e0a:	d401      	bmi.n	8002e10 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8002e0c:	0035      	movs	r5, r6
 8002e0e:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8002e10:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002e12:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8002e14:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e16:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8002e18:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e1a:	02bf      	lsls	r7, r7, #10
 8002e1c:	d401      	bmi.n	8002e22 <HAL_GPIO_Init+0x15e>
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	4025      	ands	r5, r4
 8002e20:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002e22:	60d6      	str	r6, [r2, #12]
    position++;
 8002e24:	3301      	adds	r3, #1
 8002e26:	e756      	b.n	8002cd6 <HAL_GPIO_Init+0x12>
 8002e28:	afffe400 	.word	0xafffe400
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40010000 	.word	0x40010000
 8002e34:	50000400 	.word	0x50000400
 8002e38:	50000800 	.word	0x50000800
 8002e3c:	50000c00 	.word	0x50000c00
 8002e40:	50001000 	.word	0x50001000
 8002e44:	40010400 	.word	0x40010400

08002e48 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e48:	6900      	ldr	r0, [r0, #16]
 8002e4a:	4008      	ands	r0, r1
 8002e4c:	1e41      	subs	r1, r0, #1
 8002e4e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002e50:	b2c0      	uxtb	r0, r0
}
 8002e52:	4770      	bx	lr

08002e54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e54:	2a00      	cmp	r2, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e58:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002e5a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8002e5c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002e5e:	e7fc      	b.n	8002e5a <HAL_GPIO_WritePin+0x6>

08002e60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e62:	0004      	movs	r4, r0
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
  {
    return HAL_ERROR;
 8002e64:	2001      	movs	r0, #1
  if (hi2s == NULL)
 8002e66:	2c00      	cmp	r4, #0
 8002e68:	d046      	beq.n	8002ef8 <HAL_I2S_Init+0x98>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002e6a:	0026      	movs	r6, r4
 8002e6c:	3635      	adds	r6, #53	; 0x35
 8002e6e:	7833      	ldrb	r3, [r6, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <HAL_I2S_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002e76:	0023      	movs	r3, r4
 8002e78:	3334      	adds	r3, #52	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002e7a:	0020      	movs	r0, r4
    hi2s->Lock = HAL_UNLOCKED;
 8002e7c:	701a      	strb	r2, [r3, #0]
    HAL_I2S_MspInit(hi2s);
 8002e7e:	f7ff fb95 	bl	80025ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002e82:	2002      	movs	r0, #2
 8002e84:	7030      	strb	r0, [r6, #0]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	4931      	ldr	r1, [pc, #196]	; (8002f50 <HAL_I2S_Init+0xf0>)
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	9101      	str	r1, [sp, #4]
 8002e8e:	400a      	ands	r2, r1
 8002e90:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002e92:	6218      	str	r0, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002e94:	6963      	ldr	r3, [r4, #20]
 8002e96:	4283      	cmp	r3, r0
 8002e98:	d036      	beq.n	8002f08 <HAL_I2S_Init+0xa8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002e9a:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002e9c:	2510      	movs	r5, #16
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d000      	beq.n	8002ea4 <HAL_I2S_Init+0x44>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002ea2:	196d      	adds	r5, r5, r5
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002ea4:	68a3      	ldr	r3, [r4, #8]
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d800      	bhi.n	8002eac <HAL_I2S_Init+0x4c>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002eaa:	006d      	lsls	r5, r5, #1
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8002eac:	f000 f852 	bl	8002f54 <HAL_RCC_GetSysClockFreq>

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	6922      	ldr	r2, [r4, #16]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d11f      	bne.n	8002efa <HAL_I2S_Init+0x9a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002eba:	68e3      	ldr	r3, [r4, #12]
 8002ebc:	6967      	ldr	r7, [r4, #20]
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ebe:	00a9      	lsls	r1, r5, #2
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d100      	bne.n	8002ec6 <HAL_I2S_Init+0x66>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ec4:	00e9      	lsls	r1, r5, #3
 8002ec6:	f7fd f91f 	bl	8000108 <__udivsi3>
 8002eca:	230a      	movs	r3, #10
 8002ecc:	0039      	movs	r1, r7
 8002ece:	4358      	muls	r0, r3
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ed0:	f7fd f91a 	bl	8000108 <__udivsi3>
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ed4:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ed6:	3005      	adds	r0, #5
    tmp = tmp / 10U;
 8002ed8:	f7fd f916 	bl	8000108 <__udivsi3>
 8002edc:	0002      	movs	r2, r0

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002ede:	2001      	movs	r0, #1
 8002ee0:	0011      	movs	r1, r2

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ee2:	4382      	bics	r2, r0
 8002ee4:	0853      	lsrs	r3, r2, #1
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002ee6:	4001      	ands	r1, r0
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ee8:	1e9a      	subs	r2, r3, #2
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002eea:	0209      	lsls	r1, r1, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002eec:	2afd      	cmp	r2, #253	; 0xfd
 8002eee:	d90c      	bls.n	8002f0a <HAL_I2S_Init+0xaa>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	63a3      	str	r3, [r4, #56]	; 0x38

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8002ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002efa:	0029      	movs	r1, r5
 8002efc:	f7fd f904 	bl	8000108 <__udivsi3>
 8002f00:	230a      	movs	r3, #10
 8002f02:	6961      	ldr	r1, [r4, #20]
 8002f04:	4358      	muls	r0, r3
 8002f06:	e7e3      	b.n	8002ed0 <HAL_I2S_Init+0x70>
    i2sodd = 0U;
 8002f08:	2100      	movs	r1, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	6921      	ldr	r1, [r4, #16]
 8002f0e:	6822      	ldr	r2, [r4, #0]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002f14:	68a1      	ldr	r1, [r4, #8]
 8002f16:	69d0      	ldr	r0, [r2, #28]
 8002f18:	6863      	ldr	r3, [r4, #4]
 8002f1a:	9d01      	ldr	r5, [sp, #4]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	4028      	ands	r0, r5
 8002f20:	4303      	orrs	r3, r0
 8002f22:	68e0      	ldr	r0, [r4, #12]
 8002f24:	4303      	orrs	r3, r0
 8002f26:	69a0      	ldr	r0, [r4, #24]
 8002f28:	4303      	orrs	r3, r0
 8002f2a:	2080      	movs	r0, #128	; 0x80
 8002f2c:	0100      	lsls	r0, r0, #4
 8002f2e:	4303      	orrs	r3, r0
 8002f30:	61d3      	str	r3, [r2, #28]
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	4399      	bics	r1, r3
 8002f36:	2930      	cmp	r1, #48	; 0x30
 8002f38:	d104      	bne.n	8002f44 <HAL_I2S_Init+0xe4>
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	69d1      	ldr	r1, [r2, #28]
 8002f3e:	015b      	lsls	r3, r3, #5
 8002f40:	430b      	orrs	r3, r1
 8002f42:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f44:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f46:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f48:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f4a:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 8002f4c:	e7d4      	b.n	8002ef8 <HAL_I2S_Init+0x98>
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	fffff040 	.word	0xfffff040

08002f54 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f54:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002f56:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x78>)
{
 8002f58:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8002f5a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002f5c:	4022      	ands	r2, r4
 8002f5e:	2a08      	cmp	r2, #8
 8002f60:	d031      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x72>
 8002f62:	2a0c      	cmp	r2, #12
 8002f64:	d009      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x26>
 8002f66:	2a04      	cmp	r2, #4
 8002f68:	d125      	bne.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f6a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8002f6c:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f6e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002f70:	17c0      	asrs	r0, r0, #31
 8002f72:	4018      	ands	r0, r3
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x80>)
 8002f76:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8002f78:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f7a:	02a2      	lsls	r2, r4, #10
 8002f7c:	4816      	ldr	r0, [pc, #88]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x84>)
 8002f7e:	0f12      	lsrs	r2, r2, #28
 8002f80:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f82:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f84:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f86:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f88:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f8c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8e:	4211      	tst	r1, r2
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x88>)
 8002f94:	2300      	movs	r3, #0
 8002f96:	2100      	movs	r1, #0
 8002f98:	f7fd f962 	bl	8000260 <__aeabi_lmul>
 8002f9c:	0022      	movs	r2, r4
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f7fd f93e 	bl	8000220 <__aeabi_uldivmod>
 8002fa4:	e7e8      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2310      	movs	r3, #16
 8002faa:	421a      	tst	r2, r3
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002fae:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002fb0:	e7f0      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002fb2:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x80>)
 8002fb4:	e7ee      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002fb6:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002fb8:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002fba:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002fbc:	041b      	lsls	r3, r3, #16
 8002fbe:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	4098      	lsls	r0, r3
  return sysclockfreq;
 8002fc4:	e7d8      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8002fc6:	4805      	ldr	r0, [pc, #20]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x88>)
 8002fc8:	e7d6      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x24>
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	ff48e500 	.word	0xff48e500
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	08005245 	.word	0x08005245
 8002fdc:	007a1200 	.word	0x007a1200
 8002fe0:	003d0900 	.word	0x003d0900

08002fe4 <HAL_RCC_OscConfig>:
{
 8002fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe6:	0005      	movs	r5, r0
 8002fe8:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d059      	beq.n	80030a2 <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fee:	230c      	movs	r3, #12
 8002ff0:	4cb8      	ldr	r4, [pc, #736]	; (80032d4 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff2:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff6:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	025b      	lsls	r3, r3, #9
 8002ffe:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003000:	07d2      	lsls	r2, r2, #31
 8003002:	d442      	bmi.n	800308a <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	079b      	lsls	r3, r3, #30
 8003008:	d500      	bpl.n	800300c <HAL_RCC_OscConfig+0x28>
 800300a:	e08b      	b.n	8003124 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	06db      	lsls	r3, r3, #27
 8003010:	d529      	bpl.n	8003066 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003012:	2e00      	cmp	r6, #0
 8003014:	d000      	beq.n	8003018 <HAL_RCC_OscConfig+0x34>
 8003016:	e0e4      	b.n	80031e2 <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	059b      	lsls	r3, r3, #22
 800301c:	d502      	bpl.n	8003024 <HAL_RCC_OscConfig+0x40>
 800301e:	69eb      	ldr	r3, [r5, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d03e      	beq.n	80030a2 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003024:	6862      	ldr	r2, [r4, #4]
 8003026:	49ac      	ldr	r1, [pc, #688]	; (80032d8 <HAL_RCC_OscConfig+0x2f4>)
 8003028:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800302a:	400a      	ands	r2, r1
 800302c:	431a      	orrs	r2, r3
 800302e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003030:	6861      	ldr	r1, [r4, #4]
 8003032:	6a2a      	ldr	r2, [r5, #32]
 8003034:	0209      	lsls	r1, r1, #8
 8003036:	0a09      	lsrs	r1, r1, #8
 8003038:	0612      	lsls	r2, r2, #24
 800303a:	430a      	orrs	r2, r1
 800303c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	0b5b      	lsrs	r3, r3, #13
 8003042:	3301      	adds	r3, #1
 8003044:	0212      	lsls	r2, r2, #8
 8003046:	409a      	lsls	r2, r3
 8003048:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800304a:	68e1      	ldr	r1, [r4, #12]
 800304c:	060a      	lsls	r2, r1, #24
 800304e:	49a3      	ldr	r1, [pc, #652]	; (80032dc <HAL_RCC_OscConfig+0x2f8>)
 8003050:	0f12      	lsrs	r2, r2, #28
 8003052:	5c8a      	ldrb	r2, [r1, r2]
 8003054:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003056:	4aa2      	ldr	r2, [pc, #648]	; (80032e0 <HAL_RCC_OscConfig+0x2fc>)
 8003058:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800305a:	4ba2      	ldr	r3, [pc, #648]	; (80032e4 <HAL_RCC_OscConfig+0x300>)
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	f7ff fcb5 	bl	80029cc <HAL_InitTick>
        if(status != HAL_OK)
 8003062:	2800      	cmp	r0, #0
 8003064:	d134      	bne.n	80030d0 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003066:	682b      	ldr	r3, [r5, #0]
 8003068:	071b      	lsls	r3, r3, #28
 800306a:	d500      	bpl.n	800306e <HAL_RCC_OscConfig+0x8a>
 800306c:	e0f0      	b.n	8003250 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306e:	682b      	ldr	r3, [r5, #0]
 8003070:	075b      	lsls	r3, r3, #29
 8003072:	d500      	bpl.n	8003076 <HAL_RCC_OscConfig+0x92>
 8003074:	e112      	b.n	800329c <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003076:	682b      	ldr	r3, [r5, #0]
 8003078:	069b      	lsls	r3, r3, #26
 800307a:	d500      	bpl.n	800307e <HAL_RCC_OscConfig+0x9a>
 800307c:	e199      	b.n	80033b2 <HAL_RCC_OscConfig+0x3ce>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800307e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003080:	2b00      	cmp	r3, #0
 8003082:	d000      	beq.n	8003086 <HAL_RCC_OscConfig+0xa2>
 8003084:	e1c8      	b.n	8003418 <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 8003086:	2000      	movs	r0, #0
 8003088:	e022      	b.n	80030d0 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800308a:	2e08      	cmp	r6, #8
 800308c:	d003      	beq.n	8003096 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800308e:	2e0c      	cmp	r6, #12
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_OscConfig+0xc2>
 8003092:	2f00      	cmp	r7, #0
 8003094:	d007      	beq.n	80030a6 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	039b      	lsls	r3, r3, #14
 800309a:	d5b3      	bpl.n	8003004 <HAL_RCC_OscConfig+0x20>
 800309c:	686b      	ldr	r3, [r5, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1b0      	bne.n	8003004 <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 80030a2:	2001      	movs	r0, #1
 80030a4:	e014      	b.n	80030d0 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a6:	686a      	ldr	r2, [r5, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d113      	bne.n	80030d4 <HAL_RCC_OscConfig+0xf0>
 80030ac:	6822      	ldr	r2, [r4, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80030b2:	f7ff fccf 	bl	8002a54 <HAL_GetTick>
 80030b6:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030b8:	2280      	movs	r2, #128	; 0x80
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	0292      	lsls	r2, r2, #10
 80030be:	4213      	tst	r3, r2
 80030c0:	d1a0      	bne.n	8003004 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c2:	f7ff fcc7 	bl	8002a54 <HAL_GetTick>
 80030c6:	9b01      	ldr	r3, [sp, #4]
 80030c8:	1ac0      	subs	r0, r0, r3
 80030ca:	2864      	cmp	r0, #100	; 0x64
 80030cc:	d9f4      	bls.n	80030b8 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 80030ce:	2003      	movs	r0, #3
}
 80030d0:	b007      	add	sp, #28
 80030d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d4:	21a0      	movs	r1, #160	; 0xa0
 80030d6:	02c9      	lsls	r1, r1, #11
 80030d8:	428a      	cmp	r2, r1
 80030da:	d105      	bne.n	80030e8 <HAL_RCC_OscConfig+0x104>
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	6821      	ldr	r1, [r4, #0]
 80030e0:	02d2      	lsls	r2, r2, #11
 80030e2:	430a      	orrs	r2, r1
 80030e4:	6022      	str	r2, [r4, #0]
 80030e6:	e7e1      	b.n	80030ac <HAL_RCC_OscConfig+0xc8>
 80030e8:	6821      	ldr	r1, [r4, #0]
 80030ea:	487f      	ldr	r0, [pc, #508]	; (80032e8 <HAL_RCC_OscConfig+0x304>)
 80030ec:	4001      	ands	r1, r0
 80030ee:	6021      	str	r1, [r4, #0]
 80030f0:	6821      	ldr	r1, [r4, #0]
 80030f2:	400b      	ands	r3, r1
 80030f4:	9305      	str	r3, [sp, #20]
 80030f6:	9b05      	ldr	r3, [sp, #20]
 80030f8:	497c      	ldr	r1, [pc, #496]	; (80032ec <HAL_RCC_OscConfig+0x308>)
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	400b      	ands	r3, r1
 80030fe:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003100:	2a00      	cmp	r2, #0
 8003102:	d1d6      	bne.n	80030b2 <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8003104:	f7ff fca6 	bl	8002a54 <HAL_GetTick>
 8003108:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800310a:	2280      	movs	r2, #128	; 0x80
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	0292      	lsls	r2, r2, #10
 8003110:	4213      	tst	r3, r2
 8003112:	d100      	bne.n	8003116 <HAL_RCC_OscConfig+0x132>
 8003114:	e776      	b.n	8003004 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003116:	f7ff fc9d 	bl	8002a54 <HAL_GetTick>
 800311a:	9b01      	ldr	r3, [sp, #4]
 800311c:	1ac0      	subs	r0, r0, r3
 800311e:	2864      	cmp	r0, #100	; 0x64
 8003120:	d9f3      	bls.n	800310a <HAL_RCC_OscConfig+0x126>
 8003122:	e7d4      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003124:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8003126:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003128:	4213      	tst	r3, r2
 800312a:	d003      	beq.n	8003134 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800312c:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800312e:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003130:	4311      	orrs	r1, r2
 8003132:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003134:	2e04      	cmp	r6, #4
 8003136:	d003      	beq.n	8003140 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003138:	2e0c      	cmp	r6, #12
 800313a:	d124      	bne.n	8003186 <HAL_RCC_OscConfig+0x1a2>
 800313c:	2f00      	cmp	r7, #0
 800313e:	d122      	bne.n	8003186 <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003140:	6822      	ldr	r2, [r4, #0]
 8003142:	0752      	lsls	r2, r2, #29
 8003144:	d501      	bpl.n	800314a <HAL_RCC_OscConfig+0x166>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ab      	beq.n	80030a2 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	6861      	ldr	r1, [r4, #4]
 800314c:	692a      	ldr	r2, [r5, #16]
 800314e:	4868      	ldr	r0, [pc, #416]	; (80032f0 <HAL_RCC_OscConfig+0x30c>)
 8003150:	0212      	lsls	r2, r2, #8
 8003152:	4001      	ands	r1, r0
 8003154:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003156:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003158:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	438a      	bics	r2, r1
 800315e:	4313      	orrs	r3, r2
 8003160:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003162:	f7ff fef7 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8003166:	68e3      	ldr	r3, [r4, #12]
 8003168:	4a5c      	ldr	r2, [pc, #368]	; (80032dc <HAL_RCC_OscConfig+0x2f8>)
 800316a:	061b      	lsls	r3, r3, #24
 800316c:	0f1b      	lsrs	r3, r3, #28
 800316e:	5cd3      	ldrb	r3, [r2, r3]
 8003170:	40d8      	lsrs	r0, r3
 8003172:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <HAL_RCC_OscConfig+0x2fc>)
 8003174:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003176:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_RCC_OscConfig+0x300>)
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	f7ff fc27 	bl	80029cc <HAL_InitTick>
      if(status != HAL_OK)
 800317e:	2800      	cmp	r0, #0
 8003180:	d100      	bne.n	8003184 <HAL_RCC_OscConfig+0x1a0>
 8003182:	e743      	b.n	800300c <HAL_RCC_OscConfig+0x28>
 8003184:	e7a4      	b.n	80030d0 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 8003186:	2b00      	cmp	r3, #0
 8003188:	d019      	beq.n	80031be <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800318a:	2109      	movs	r1, #9
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	438a      	bics	r2, r1
 8003190:	4313      	orrs	r3, r2
 8003192:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003194:	f7ff fc5e 	bl	8002a54 <HAL_GetTick>
 8003198:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800319a:	2204      	movs	r2, #4
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	4213      	tst	r3, r2
 80031a0:	d007      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	6862      	ldr	r2, [r4, #4]
 80031a4:	692b      	ldr	r3, [r5, #16]
 80031a6:	4952      	ldr	r1, [pc, #328]	; (80032f0 <HAL_RCC_OscConfig+0x30c>)
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	400a      	ands	r2, r1
 80031ac:	4313      	orrs	r3, r2
 80031ae:	6063      	str	r3, [r4, #4]
 80031b0:	e72c      	b.n	800300c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b2:	f7ff fc4f 	bl	8002a54 <HAL_GetTick>
 80031b6:	1bc0      	subs	r0, r0, r7
 80031b8:	2802      	cmp	r0, #2
 80031ba:	d9ee      	bls.n	800319a <HAL_RCC_OscConfig+0x1b6>
 80031bc:	e787      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 80031be:	2201      	movs	r2, #1
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	4393      	bics	r3, r2
 80031c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80031c6:	f7ff fc45 	bl	8002a54 <HAL_GetTick>
 80031ca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031cc:	2204      	movs	r2, #4
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	4213      	tst	r3, r2
 80031d2:	d100      	bne.n	80031d6 <HAL_RCC_OscConfig+0x1f2>
 80031d4:	e71a      	b.n	800300c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d6:	f7ff fc3d 	bl	8002a54 <HAL_GetTick>
 80031da:	1bc0      	subs	r0, r0, r7
 80031dc:	2802      	cmp	r0, #2
 80031de:	d9f5      	bls.n	80031cc <HAL_RCC_OscConfig+0x1e8>
 80031e0:	e775      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031e2:	69eb      	ldr	r3, [r5, #28]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d020      	beq.n	800322a <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4313      	orrs	r3, r2
 80031f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80031f2:	f7ff fc2f 	bl	8002a54 <HAL_GetTick>
 80031f6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	0092      	lsls	r2, r2, #2
 80031fe:	4213      	tst	r3, r2
 8003200:	d00d      	beq.n	800321e <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003202:	6863      	ldr	r3, [r4, #4]
 8003204:	4a34      	ldr	r2, [pc, #208]	; (80032d8 <HAL_RCC_OscConfig+0x2f4>)
 8003206:	4013      	ands	r3, r2
 8003208:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800320a:	4313      	orrs	r3, r2
 800320c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800320e:	6862      	ldr	r2, [r4, #4]
 8003210:	6a2b      	ldr	r3, [r5, #32]
 8003212:	0212      	lsls	r2, r2, #8
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	0a12      	lsrs	r2, r2, #8
 8003218:	4313      	orrs	r3, r2
 800321a:	6063      	str	r3, [r4, #4]
 800321c:	e723      	b.n	8003066 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800321e:	f7ff fc19 	bl	8002a54 <HAL_GetTick>
 8003222:	1bc0      	subs	r0, r0, r7
 8003224:	2802      	cmp	r0, #2
 8003226:	d9e7      	bls.n	80031f8 <HAL_RCC_OscConfig+0x214>
 8003228:	e751      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	4a31      	ldr	r2, [pc, #196]	; (80032f4 <HAL_RCC_OscConfig+0x310>)
 800322e:	4013      	ands	r3, r2
 8003230:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003232:	f7ff fc0f 	bl	8002a54 <HAL_GetTick>
 8003236:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	0092      	lsls	r2, r2, #2
 800323e:	4213      	tst	r3, r2
 8003240:	d100      	bne.n	8003244 <HAL_RCC_OscConfig+0x260>
 8003242:	e710      	b.n	8003066 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003244:	f7ff fc06 	bl	8002a54 <HAL_GetTick>
 8003248:	1bc0      	subs	r0, r0, r7
 800324a:	2802      	cmp	r0, #2
 800324c:	d9f4      	bls.n	8003238 <HAL_RCC_OscConfig+0x254>
 800324e:	e73e      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003250:	696a      	ldr	r2, [r5, #20]
 8003252:	2301      	movs	r3, #1
 8003254:	2a00      	cmp	r2, #0
 8003256:	d010      	beq.n	800327a <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8003258:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800325a:	4313      	orrs	r3, r2
 800325c:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800325e:	f7ff fbf9 	bl	8002a54 <HAL_GetTick>
 8003262:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003264:	2202      	movs	r2, #2
 8003266:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003268:	4213      	tst	r3, r2
 800326a:	d000      	beq.n	800326e <HAL_RCC_OscConfig+0x28a>
 800326c:	e6ff      	b.n	800306e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326e:	f7ff fbf1 	bl	8002a54 <HAL_GetTick>
 8003272:	1bc0      	subs	r0, r0, r7
 8003274:	2802      	cmp	r0, #2
 8003276:	d9f5      	bls.n	8003264 <HAL_RCC_OscConfig+0x280>
 8003278:	e729      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 800327a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800327c:	439a      	bics	r2, r3
 800327e:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003280:	f7ff fbe8 	bl	8002a54 <HAL_GetTick>
 8003284:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003286:	2202      	movs	r2, #2
 8003288:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800328a:	4213      	tst	r3, r2
 800328c:	d100      	bne.n	8003290 <HAL_RCC_OscConfig+0x2ac>
 800328e:	e6ee      	b.n	800306e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003290:	f7ff fbe0 	bl	8002a54 <HAL_GetTick>
 8003294:	1bc0      	subs	r0, r0, r7
 8003296:	2802      	cmp	r0, #2
 8003298:	d9f5      	bls.n	8003286 <HAL_RCC_OscConfig+0x2a2>
 800329a:	e718      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800329e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80032a2:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80032a4:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	421a      	tst	r2, r3
 80032a8:	d104      	bne.n	80032b4 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80032aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80032ac:	4313      	orrs	r3, r2
 80032ae:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80032b0:	2301      	movs	r3, #1
 80032b2:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	4f10      	ldr	r7, [pc, #64]	; (80032f8 <HAL_RCC_OscConfig+0x314>)
 80032b8:	0052      	lsls	r2, r2, #1
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	4213      	tst	r3, r2
 80032be:	d01d      	beq.n	80032fc <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c0:	2280      	movs	r2, #128	; 0x80
 80032c2:	68ab      	ldr	r3, [r5, #8]
 80032c4:	0052      	lsls	r2, r2, #1
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d12e      	bne.n	8003328 <HAL_RCC_OscConfig+0x344>
 80032ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80032cc:	4313      	orrs	r3, r2
 80032ce:	6523      	str	r3, [r4, #80]	; 0x50
 80032d0:	e04f      	b.n	8003372 <HAL_RCC_OscConfig+0x38e>
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	40021000 	.word	0x40021000
 80032d8:	ffff1fff 	.word	0xffff1fff
 80032dc:	08005235 	.word	0x08005235
 80032e0:	20000094 	.word	0x20000094
 80032e4:	2000009c 	.word	0x2000009c
 80032e8:	fffeffff 	.word	0xfffeffff
 80032ec:	fffbffff 	.word	0xfffbffff
 80032f0:	ffffe0ff 	.word	0xffffe0ff
 80032f4:	fffffeff 	.word	0xfffffeff
 80032f8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	0052      	lsls	r2, r2, #1
 8003302:	4313      	orrs	r3, r2
 8003304:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003306:	f7ff fba5 	bl	8002a54 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800330e:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	9303      	str	r3, [sp, #12]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	9a03      	ldr	r2, [sp, #12]
 8003316:	4213      	tst	r3, r2
 8003318:	d1d2      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331a:	f7ff fb9b 	bl	8002a54 <HAL_GetTick>
 800331e:	9b02      	ldr	r3, [sp, #8]
 8003320:	1ac0      	subs	r0, r0, r3
 8003322:	2864      	cmp	r0, #100	; 0x64
 8003324:	d9f5      	bls.n	8003312 <HAL_RCC_OscConfig+0x32e>
 8003326:	e6d2      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003328:	2b00      	cmp	r3, #0
 800332a:	d116      	bne.n	800335a <HAL_RCC_OscConfig+0x376>
 800332c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800332e:	4a6b      	ldr	r2, [pc, #428]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003330:	4013      	ands	r3, r2
 8003332:	6523      	str	r3, [r4, #80]	; 0x50
 8003334:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003336:	4a6a      	ldr	r2, [pc, #424]	; (80034e0 <HAL_RCC_OscConfig+0x4fc>)
 8003338:	4013      	ands	r3, r2
 800333a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800333c:	f7ff fb8a 	bl	8002a54 <HAL_GetTick>
 8003340:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003342:	2280      	movs	r2, #128	; 0x80
 8003344:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	4213      	tst	r3, r2
 800334a:	d01a      	beq.n	8003382 <HAL_RCC_OscConfig+0x39e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7ff fb82 	bl	8002a54 <HAL_GetTick>
 8003350:	4b64      	ldr	r3, [pc, #400]	; (80034e4 <HAL_RCC_OscConfig+0x500>)
 8003352:	1bc0      	subs	r0, r0, r7
 8003354:	4298      	cmp	r0, r3
 8003356:	d9f4      	bls.n	8003342 <HAL_RCC_OscConfig+0x35e>
 8003358:	e6b9      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335a:	21a0      	movs	r1, #160	; 0xa0
 800335c:	00c9      	lsls	r1, r1, #3
 800335e:	428b      	cmp	r3, r1
 8003360:	d118      	bne.n	8003394 <HAL_RCC_OscConfig+0x3b0>
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	430b      	orrs	r3, r1
 800336a:	6523      	str	r3, [r4, #80]	; 0x50
 800336c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800336e:	431a      	orrs	r2, r3
 8003370:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003372:	f7ff fb6f 	bl	8002a54 <HAL_GetTick>
 8003376:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	4213      	tst	r3, r2
 8003380:	d010      	beq.n	80033a4 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8003382:	9b01      	ldr	r3, [sp, #4]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d000      	beq.n	800338a <HAL_RCC_OscConfig+0x3a6>
 8003388:	e675      	b.n	8003076 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 800338a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800338c:	4a56      	ldr	r2, [pc, #344]	; (80034e8 <HAL_RCC_OscConfig+0x504>)
 800338e:	4013      	ands	r3, r2
 8003390:	63a3      	str	r3, [r4, #56]	; 0x38
 8003392:	e670      	b.n	8003076 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003394:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003396:	4a51      	ldr	r2, [pc, #324]	; (80034dc <HAL_RCC_OscConfig+0x4f8>)
 8003398:	4013      	ands	r3, r2
 800339a:	6523      	str	r3, [r4, #80]	; 0x50
 800339c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800339e:	4a50      	ldr	r2, [pc, #320]	; (80034e0 <HAL_RCC_OscConfig+0x4fc>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	e794      	b.n	80032ce <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7ff fb56 	bl	8002a54 <HAL_GetTick>
 80033a8:	4b4e      	ldr	r3, [pc, #312]	; (80034e4 <HAL_RCC_OscConfig+0x500>)
 80033aa:	1bc0      	subs	r0, r0, r7
 80033ac:	4298      	cmp	r0, r3
 80033ae:	d9e3      	bls.n	8003378 <HAL_RCC_OscConfig+0x394>
 80033b0:	e68d      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033b2:	69a9      	ldr	r1, [r5, #24]
 80033b4:	2301      	movs	r3, #1
 80033b6:	4a4d      	ldr	r2, [pc, #308]	; (80034ec <HAL_RCC_OscConfig+0x508>)
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d018      	beq.n	80033ee <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_HSI48_ENABLE();
 80033bc:	68a1      	ldr	r1, [r4, #8]
 80033be:	4319      	orrs	r1, r3
 80033c0:	60a1      	str	r1, [r4, #8]
 80033c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6363      	str	r3, [r4, #52]	; 0x34
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	6a11      	ldr	r1, [r2, #32]
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	430b      	orrs	r3, r1
 80033d0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80033d2:	f7ff fb3f 	bl	8002a54 <HAL_GetTick>
 80033d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033d8:	2202      	movs	r2, #2
 80033da:	68a3      	ldr	r3, [r4, #8]
 80033dc:	4213      	tst	r3, r2
 80033de:	d000      	beq.n	80033e2 <HAL_RCC_OscConfig+0x3fe>
 80033e0:	e64d      	b.n	800307e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e2:	f7ff fb37 	bl	8002a54 <HAL_GetTick>
 80033e6:	1bc0      	subs	r0, r0, r7
 80033e8:	2802      	cmp	r0, #2
 80033ea:	d9f5      	bls.n	80033d8 <HAL_RCC_OscConfig+0x3f4>
 80033ec:	e66f      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 80033ee:	68a1      	ldr	r1, [r4, #8]
 80033f0:	4399      	bics	r1, r3
 80033f2:	60a1      	str	r1, [r4, #8]
 80033f4:	6a13      	ldr	r3, [r2, #32]
 80033f6:	493e      	ldr	r1, [pc, #248]	; (80034f0 <HAL_RCC_OscConfig+0x50c>)
 80033f8:	400b      	ands	r3, r1
 80033fa:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80033fc:	f7ff fb2a 	bl	8002a54 <HAL_GetTick>
 8003400:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003402:	2202      	movs	r2, #2
 8003404:	68a3      	ldr	r3, [r4, #8]
 8003406:	4213      	tst	r3, r2
 8003408:	d100      	bne.n	800340c <HAL_RCC_OscConfig+0x428>
 800340a:	e638      	b.n	800307e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340c:	f7ff fb22 	bl	8002a54 <HAL_GetTick>
 8003410:	1bc0      	subs	r0, r0, r7
 8003412:	2802      	cmp	r0, #2
 8003414:	d9f5      	bls.n	8003402 <HAL_RCC_OscConfig+0x41e>
 8003416:	e65a      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003418:	2e0c      	cmp	r6, #12
 800341a:	d043      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800341c:	4a35      	ldr	r2, [pc, #212]	; (80034f4 <HAL_RCC_OscConfig+0x510>)
 800341e:	2b02      	cmp	r3, #2
 8003420:	d12e      	bne.n	8003480 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_DISABLE();
 8003422:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003424:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003426:	4013      	ands	r3, r2
 8003428:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800342a:	f7ff fb13 	bl	8002a54 <HAL_GetTick>
 800342e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003430:	04bf      	lsls	r7, r7, #18
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	423b      	tst	r3, r7
 8003436:	d11d      	bne.n	8003474 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003438:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800343a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800343c:	68e2      	ldr	r2, [r4, #12]
 800343e:	430b      	orrs	r3, r1
 8003440:	492d      	ldr	r1, [pc, #180]	; (80034f8 <HAL_RCC_OscConfig+0x514>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003442:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003444:	400a      	ands	r2, r1
 8003446:	4313      	orrs	r3, r2
 8003448:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800344a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800344c:	4313      	orrs	r3, r2
 800344e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	045b      	lsls	r3, r3, #17
 8003456:	4313      	orrs	r3, r2
 8003458:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800345a:	f7ff fafb 	bl	8002a54 <HAL_GetTick>
 800345e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	4233      	tst	r3, r6
 8003464:	d000      	beq.n	8003468 <HAL_RCC_OscConfig+0x484>
 8003466:	e60e      	b.n	8003086 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003468:	f7ff faf4 	bl	8002a54 <HAL_GetTick>
 800346c:	1b40      	subs	r0, r0, r5
 800346e:	2802      	cmp	r0, #2
 8003470:	d9f6      	bls.n	8003460 <HAL_RCC_OscConfig+0x47c>
 8003472:	e62c      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7ff faee 	bl	8002a54 <HAL_GetTick>
 8003478:	1b80      	subs	r0, r0, r6
 800347a:	2802      	cmp	r0, #2
 800347c:	d9d9      	bls.n	8003432 <HAL_RCC_OscConfig+0x44e>
 800347e:	e626      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8003480:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003482:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003484:	4013      	ands	r3, r2
 8003486:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003488:	f7ff fae4 	bl	8002a54 <HAL_GetTick>
 800348c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800348e:	04b6      	lsls	r6, r6, #18
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	4233      	tst	r3, r6
 8003494:	d100      	bne.n	8003498 <HAL_RCC_OscConfig+0x4b4>
 8003496:	e5f6      	b.n	8003086 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003498:	f7ff fadc 	bl	8002a54 <HAL_GetTick>
 800349c:	1b40      	subs	r0, r0, r5
 800349e:	2802      	cmp	r0, #2
 80034a0:	d9f6      	bls.n	8003490 <HAL_RCC_OscConfig+0x4ac>
 80034a2:	e614      	b.n	80030ce <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 80034a4:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d100      	bne.n	80034ac <HAL_RCC_OscConfig+0x4c8>
 80034aa:	e611      	b.n	80030d0 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ac:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80034ae:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80034b2:	0252      	lsls	r2, r2, #9
 80034b4:	401a      	ands	r2, r3
 80034b6:	428a      	cmp	r2, r1
 80034b8:	d000      	beq.n	80034bc <HAL_RCC_OscConfig+0x4d8>
 80034ba:	e5f2      	b.n	80030a2 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034bc:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034c0:	0392      	lsls	r2, r2, #14
 80034c2:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c4:	428a      	cmp	r2, r1
 80034c6:	d000      	beq.n	80034ca <HAL_RCC_OscConfig+0x4e6>
 80034c8:	e5eb      	b.n	80030a2 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80034ca:	22c0      	movs	r2, #192	; 0xc0
 80034cc:	0412      	lsls	r2, r2, #16
 80034ce:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80034d0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d100      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4f4>
 80034d6:	e5d6      	b.n	8003086 <HAL_RCC_OscConfig+0xa2>
 80034d8:	e5e3      	b.n	80030a2 <HAL_RCC_OscConfig+0xbe>
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	fffffeff 	.word	0xfffffeff
 80034e0:	fffffbff 	.word	0xfffffbff
 80034e4:	00001388 	.word	0x00001388
 80034e8:	efffffff 	.word	0xefffffff
 80034ec:	40010000 	.word	0x40010000
 80034f0:	ffffdfff 	.word	0xffffdfff
 80034f4:	feffffff 	.word	0xfeffffff
 80034f8:	ff02ffff 	.word	0xff02ffff

080034fc <HAL_RCC_ClockConfig>:
{
 80034fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034fe:	1e04      	subs	r4, r0, #0
 8003500:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8003504:	2001      	movs	r0, #1
}
 8003506:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	2601      	movs	r6, #1
 800350a:	4d5b      	ldr	r5, [pc, #364]	; (8003678 <HAL_RCC_ClockConfig+0x17c>)
 800350c:	9a01      	ldr	r2, [sp, #4]
 800350e:	682b      	ldr	r3, [r5, #0]
 8003510:	4033      	ands	r3, r6
 8003512:	4293      	cmp	r3, r2
 8003514:	d331      	bcc.n	800357a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	0793      	lsls	r3, r2, #30
 800351a:	d443      	bmi.n	80035a4 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351c:	07d3      	lsls	r3, r2, #31
 800351e:	d449      	bmi.n	80035b4 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003520:	2601      	movs	r6, #1
 8003522:	682b      	ldr	r3, [r5, #0]
 8003524:	9a01      	ldr	r2, [sp, #4]
 8003526:	4033      	ands	r3, r6
 8003528:	4293      	cmp	r3, r2
 800352a:	d909      	bls.n	8003540 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	43b3      	bics	r3, r6
 8003530:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003532:	f7ff fa8f 	bl	8002a54 <HAL_GetTick>
 8003536:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003538:	682b      	ldr	r3, [r5, #0]
 800353a:	4233      	tst	r3, r6
 800353c:	d000      	beq.n	8003540 <HAL_RCC_ClockConfig+0x44>
 800353e:	e08c      	b.n	800365a <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	6822      	ldr	r2, [r4, #0]
 8003542:	4d4e      	ldr	r5, [pc, #312]	; (800367c <HAL_RCC_ClockConfig+0x180>)
 8003544:	0753      	lsls	r3, r2, #29
 8003546:	d500      	bpl.n	800354a <HAL_RCC_ClockConfig+0x4e>
 8003548:	e08f      	b.n	800366a <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354a:	0713      	lsls	r3, r2, #28
 800354c:	d506      	bpl.n	800355c <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800354e:	68ea      	ldr	r2, [r5, #12]
 8003550:	6923      	ldr	r3, [r4, #16]
 8003552:	494b      	ldr	r1, [pc, #300]	; (8003680 <HAL_RCC_ClockConfig+0x184>)
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	400a      	ands	r2, r1
 8003558:	4313      	orrs	r3, r2
 800355a:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800355c:	f7ff fcfa 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8003560:	68eb      	ldr	r3, [r5, #12]
 8003562:	4a48      	ldr	r2, [pc, #288]	; (8003684 <HAL_RCC_ClockConfig+0x188>)
 8003564:	061b      	lsls	r3, r3, #24
 8003566:	0f1b      	lsrs	r3, r3, #28
 8003568:	5cd3      	ldrb	r3, [r2, r3]
 800356a:	40d8      	lsrs	r0, r3
 800356c:	4b46      	ldr	r3, [pc, #280]	; (8003688 <HAL_RCC_ClockConfig+0x18c>)
 800356e:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003570:	4b46      	ldr	r3, [pc, #280]	; (800368c <HAL_RCC_ClockConfig+0x190>)
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	f7ff fa2a 	bl	80029cc <HAL_InitTick>
  if(status != HAL_OK)
 8003578:	e7c5      	b.n	8003506 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	682b      	ldr	r3, [r5, #0]
 800357c:	9a01      	ldr	r2, [sp, #4]
 800357e:	43b3      	bics	r3, r6
 8003580:	4313      	orrs	r3, r2
 8003582:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003584:	f7ff fa66 	bl	8002a54 <HAL_GetTick>
 8003588:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	682b      	ldr	r3, [r5, #0]
 800358c:	9a01      	ldr	r2, [sp, #4]
 800358e:	4033      	ands	r3, r6
 8003590:	4293      	cmp	r3, r2
 8003592:	d0c0      	beq.n	8003516 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7ff fa5e 	bl	8002a54 <HAL_GetTick>
 8003598:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <HAL_RCC_ClockConfig+0x194>)
 800359a:	1bc0      	subs	r0, r0, r7
 800359c:	4298      	cmp	r0, r3
 800359e:	d9f4      	bls.n	800358a <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80035a0:	2003      	movs	r0, #3
 80035a2:	e7b0      	b.n	8003506 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a4:	20f0      	movs	r0, #240	; 0xf0
 80035a6:	4935      	ldr	r1, [pc, #212]	; (800367c <HAL_RCC_ClockConfig+0x180>)
 80035a8:	68cb      	ldr	r3, [r1, #12]
 80035aa:	4383      	bics	r3, r0
 80035ac:	68a0      	ldr	r0, [r4, #8]
 80035ae:	4303      	orrs	r3, r0
 80035b0:	60cb      	str	r3, [r1, #12]
 80035b2:	e7b3      	b.n	800351c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b4:	4e31      	ldr	r6, [pc, #196]	; (800367c <HAL_RCC_ClockConfig+0x180>)
 80035b6:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035b8:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ba:	2a02      	cmp	r2, #2
 80035bc:	d118      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035be:	039b      	lsls	r3, r3, #14
 80035c0:	d5a0      	bpl.n	8003504 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	2103      	movs	r1, #3
 80035c4:	68f3      	ldr	r3, [r6, #12]
 80035c6:	438b      	bics	r3, r1
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80035cc:	f7ff fa42 	bl	8002a54 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d0:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80035d2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d118      	bne.n	800360a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035d8:	220c      	movs	r2, #12
 80035da:	68f3      	ldr	r3, [r6, #12]
 80035dc:	4013      	ands	r3, r2
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d09e      	beq.n	8003520 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e2:	f7ff fa37 	bl	8002a54 <HAL_GetTick>
 80035e6:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_RCC_ClockConfig+0x194>)
 80035e8:	1bc0      	subs	r0, r0, r7
 80035ea:	4298      	cmp	r0, r3
 80035ec:	d9f4      	bls.n	80035d8 <HAL_RCC_ClockConfig+0xdc>
 80035ee:	e7d7      	b.n	80035a0 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f0:	2a03      	cmp	r2, #3
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	d4e4      	bmi.n	80035c2 <HAL_RCC_ClockConfig+0xc6>
 80035f8:	e784      	b.n	8003504 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035fa:	2a01      	cmp	r2, #1
 80035fc:	d102      	bne.n	8003604 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035fe:	075b      	lsls	r3, r3, #29
 8003600:	d4df      	bmi.n	80035c2 <HAL_RCC_ClockConfig+0xc6>
 8003602:	e77f      	b.n	8003504 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003604:	059b      	lsls	r3, r3, #22
 8003606:	d4dc      	bmi.n	80035c2 <HAL_RCC_ClockConfig+0xc6>
 8003608:	e77c      	b.n	8003504 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800360a:	2b03      	cmp	r3, #3
 800360c:	d10b      	bne.n	8003626 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800360e:	220c      	movs	r2, #12
 8003610:	68f3      	ldr	r3, [r6, #12]
 8003612:	4013      	ands	r3, r2
 8003614:	4293      	cmp	r3, r2
 8003616:	d083      	beq.n	8003520 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003618:	f7ff fa1c 	bl	8002a54 <HAL_GetTick>
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_RCC_ClockConfig+0x194>)
 800361e:	1bc0      	subs	r0, r0, r7
 8003620:	4298      	cmp	r0, r3
 8003622:	d9f4      	bls.n	800360e <HAL_RCC_ClockConfig+0x112>
 8003624:	e7bc      	b.n	80035a0 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003626:	2b01      	cmp	r3, #1
 8003628:	d011      	beq.n	800364e <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800362a:	220c      	movs	r2, #12
 800362c:	68f3      	ldr	r3, [r6, #12]
 800362e:	4213      	tst	r3, r2
 8003630:	d100      	bne.n	8003634 <HAL_RCC_ClockConfig+0x138>
 8003632:	e775      	b.n	8003520 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003634:	f7ff fa0e 	bl	8002a54 <HAL_GetTick>
 8003638:	4b15      	ldr	r3, [pc, #84]	; (8003690 <HAL_RCC_ClockConfig+0x194>)
 800363a:	1bc0      	subs	r0, r0, r7
 800363c:	4298      	cmp	r0, r3
 800363e:	d9f4      	bls.n	800362a <HAL_RCC_ClockConfig+0x12e>
 8003640:	e7ae      	b.n	80035a0 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003642:	f7ff fa07 	bl	8002a54 <HAL_GetTick>
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_RCC_ClockConfig+0x194>)
 8003648:	1bc0      	subs	r0, r0, r7
 800364a:	4298      	cmp	r0, r3
 800364c:	d8a8      	bhi.n	80035a0 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800364e:	220c      	movs	r2, #12
 8003650:	68f3      	ldr	r3, [r6, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	2b04      	cmp	r3, #4
 8003656:	d1f4      	bne.n	8003642 <HAL_RCC_ClockConfig+0x146>
 8003658:	e762      	b.n	8003520 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365a:	f7ff f9fb 	bl	8002a54 <HAL_GetTick>
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_RCC_ClockConfig+0x194>)
 8003660:	1bc0      	subs	r0, r0, r7
 8003662:	4298      	cmp	r0, r3
 8003664:	d800      	bhi.n	8003668 <HAL_RCC_ClockConfig+0x16c>
 8003666:	e767      	b.n	8003538 <HAL_RCC_ClockConfig+0x3c>
 8003668:	e79a      	b.n	80035a0 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366a:	68eb      	ldr	r3, [r5, #12]
 800366c:	4909      	ldr	r1, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x198>)
 800366e:	400b      	ands	r3, r1
 8003670:	68e1      	ldr	r1, [r4, #12]
 8003672:	430b      	orrs	r3, r1
 8003674:	60eb      	str	r3, [r5, #12]
 8003676:	e768      	b.n	800354a <HAL_RCC_ClockConfig+0x4e>
 8003678:	40022000 	.word	0x40022000
 800367c:	40021000 	.word	0x40021000
 8003680:	ffffc7ff 	.word	0xffffc7ff
 8003684:	08005235 	.word	0x08005235
 8003688:	20000094 	.word	0x20000094
 800368c:	2000009c 	.word	0x2000009c
 8003690:	00001388 	.word	0x00001388
 8003694:	fffff8ff 	.word	0xfffff8ff

08003698 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369a:	001d      	movs	r5, r3
 800369c:	0017      	movs	r7, r2
 800369e:	b085      	sub	sp, #20
 80036a0:	000e      	movs	r6, r1
 80036a2:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036a4:	f7ff f9d6 	bl	8002a54 <HAL_GetTick>
 80036a8:	19ed      	adds	r5, r5, r7
 80036aa:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80036ac:	f7ff f9d2 	bl	8002a54 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80036b2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	015b      	lsls	r3, r3, #5
 80036b8:	0d1b      	lsrs	r3, r3, #20
 80036ba:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036bc:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80036be:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036c0:	6893      	ldr	r3, [r2, #8]
 80036c2:	4033      	ands	r3, r6
 80036c4:	429e      	cmp	r6, r3
 80036c6:	d001      	beq.n	80036cc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80036c8:	2000      	movs	r0, #0
 80036ca:	e032      	b.n	8003732 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 80036cc:	1c7b      	adds	r3, r7, #1
 80036ce:	d0f7      	beq.n	80036c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036d0:	f7ff f9c0 	bl	8002a54 <HAL_GetTick>
 80036d4:	9b01      	ldr	r3, [sp, #4]
 80036d6:	1ac0      	subs	r0, r0, r3
 80036d8:	42a8      	cmp	r0, r5
 80036da:	d32c      	bcc.n	8003736 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036dc:	21e0      	movs	r1, #224	; 0xe0
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	438a      	bics	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e6:	2282      	movs	r2, #130	; 0x82
 80036e8:	6861      	ldr	r1, [r4, #4]
 80036ea:	0052      	lsls	r2, r2, #1
 80036ec:	4291      	cmp	r1, r2
 80036ee:	d10c      	bne.n	800370a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	68a2      	ldr	r2, [r4, #8]
 80036f4:	0209      	lsls	r1, r1, #8
 80036f6:	428a      	cmp	r2, r1
 80036f8:	d003      	beq.n	8003702 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036fa:	2180      	movs	r1, #128	; 0x80
 80036fc:	00c9      	lsls	r1, r1, #3
 80036fe:	428a      	cmp	r2, r1
 8003700:	d103      	bne.n	800370a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8003702:	2140      	movs	r1, #64	; 0x40
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	438a      	bics	r2, r1
 8003708:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800370e:	0189      	lsls	r1, r1, #6
 8003710:	428a      	cmp	r2, r1
 8003712:	d106      	bne.n	8003722 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	480d      	ldr	r0, [pc, #52]	; (800374c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8003718:	4001      	ands	r1, r0
 800371a:	6019      	str	r1, [r3, #0]
 800371c:	6819      	ldr	r1, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003722:	0023      	movs	r3, r4
 8003724:	2201      	movs	r2, #1
 8003726:	3351      	adds	r3, #81	; 0x51
 8003728:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800372a:	2300      	movs	r3, #0
 800372c:	2003      	movs	r0, #3
 800372e:	3450      	adds	r4, #80	; 0x50
 8003730:	7023      	strb	r3, [r4, #0]
}
 8003732:	b005      	add	sp, #20
 8003734:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8003736:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003738:	1e5a      	subs	r2, r3, #1
 800373a:	4193      	sbcs	r3, r2
 800373c:	425b      	negs	r3, r3
 800373e:	401d      	ands	r5, r3
      count--;
 8003740:	9b03      	ldr	r3, [sp, #12]
 8003742:	3b01      	subs	r3, #1
 8003744:	e7ba      	b.n	80036bc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	20000094 	.word	0x20000094
 800374c:	ffffdfff 	.word	0xffffdfff

08003750 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003754:	2282      	movs	r2, #130	; 0x82
{
 8003756:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003758:	6840      	ldr	r0, [r0, #4]
 800375a:	0052      	lsls	r2, r2, #1
 800375c:	4290      	cmp	r0, r2
 800375e:	d11e      	bne.n	800379e <SPI_EndRxTransaction+0x4e>
 8003760:	2080      	movs	r0, #128	; 0x80
 8003762:	2580      	movs	r5, #128	; 0x80
 8003764:	68a2      	ldr	r2, [r4, #8]
 8003766:	0200      	lsls	r0, r0, #8
 8003768:	00ed      	lsls	r5, r5, #3
 800376a:	4282      	cmp	r2, r0
 800376c:	d001      	beq.n	8003772 <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800376e:	42aa      	cmp	r2, r5
 8003770:	d106      	bne.n	8003780 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003772:	2740      	movs	r7, #64	; 0x40
 8003774:	6826      	ldr	r6, [r4, #0]
 8003776:	6830      	ldr	r0, [r6, #0]
 8003778:	43b8      	bics	r0, r7
 800377a:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800377c:	42aa      	cmp	r2, r5
 800377e:	d00e      	beq.n	800379e <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003780:	000a      	movs	r2, r1
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	0020      	movs	r0, r4
 8003786:	f7ff ff87 	bl	8003698 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800378a:	2800      	cmp	r0, #0
 800378c:	d101      	bne.n	8003792 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800378e:	2000      	movs	r0, #0
}
 8003790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003792:	2320      	movs	r3, #32
 8003794:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003796:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003798:	4313      	orrs	r3, r2
 800379a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800379c:	e7f8      	b.n	8003790 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800379e:	000a      	movs	r2, r1
 80037a0:	2101      	movs	r1, #1
 80037a2:	e7ef      	b.n	8003784 <SPI_EndRxTransaction+0x34>

080037a4 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037a4:	4b16      	ldr	r3, [pc, #88]	; (8003800 <SPI_EndRxTxTransaction+0x5c>)
{
 80037a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037a8:	0004      	movs	r4, r0
 80037aa:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	4915      	ldr	r1, [pc, #84]	; (8003804 <SPI_EndRxTxTransaction+0x60>)
{
 80037b0:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037b2:	f7fc fca9 	bl	8000108 <__udivsi3>
 80037b6:	23fa      	movs	r3, #250	; 0xfa
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4343      	muls	r3, r0
 80037bc:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037be:	2382      	movs	r3, #130	; 0x82
 80037c0:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037c2:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4299      	cmp	r1, r3
 80037c8:	d10d      	bne.n	80037e6 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037ca:	0033      	movs	r3, r6
 80037cc:	002a      	movs	r2, r5
 80037ce:	2180      	movs	r1, #128	; 0x80
 80037d0:	0020      	movs	r0, r4
 80037d2:	f7ff ff61 	bl	8003698 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d00f      	beq.n	80037fa <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037da:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80037dc:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80037e0:	4313      	orrs	r3, r2
 80037e2:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 80037e4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 80037e6:	9b01      	ldr	r3, [sp, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <SPI_EndRxTxTransaction+0x56>
      count--;
 80037ec:	9b01      	ldr	r3, [sp, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4213      	tst	r3, r2
 80037f8:	d1f5      	bne.n	80037e6 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 80037fa:	2000      	movs	r0, #0
 80037fc:	e7f2      	b.n	80037e4 <SPI_EndRxTxTransaction+0x40>
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	20000094 	.word	0x20000094
 8003804:	016e3600 	.word	0x016e3600

08003808 <HAL_SPI_Init>:
{
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800380c:	2001      	movs	r0, #1
  if (hspi == NULL)
 800380e:	2c00      	cmp	r4, #0
 8003810:	d054      	beq.n	80038bc <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003814:	2b00      	cmp	r3, #0
 8003816:	d152      	bne.n	80038be <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003818:	2282      	movs	r2, #130	; 0x82
 800381a:	6861      	ldr	r1, [r4, #4]
 800381c:	0052      	lsls	r2, r2, #1
 800381e:	4291      	cmp	r1, r2
 8003820:	d000      	beq.n	8003824 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003822:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003824:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003826:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003828:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800382a:	3551      	adds	r5, #81	; 0x51
 800382c:	782b      	ldrb	r3, [r5, #0]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8003834:	0023      	movs	r3, r4
 8003836:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8003838:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800383a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 800383c:	f7fe ff16 	bl	800266c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003840:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8003842:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8003844:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8003846:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003848:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800384a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800384c:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800384e:	4393      	bics	r3, r2
 8003850:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003852:	2382      	movs	r3, #130	; 0x82
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4033      	ands	r3, r6
 8003858:	2684      	movs	r6, #132	; 0x84
 800385a:	0236      	lsls	r6, r6, #8
 800385c:	403e      	ands	r6, r7
 800385e:	4333      	orrs	r3, r6
 8003860:	2680      	movs	r6, #128	; 0x80
 8003862:	68e7      	ldr	r7, [r4, #12]
 8003864:	0136      	lsls	r6, r6, #4
 8003866:	403e      	ands	r6, r7
 8003868:	4333      	orrs	r3, r6
 800386a:	6926      	ldr	r6, [r4, #16]
 800386c:	69a2      	ldr	r2, [r4, #24]
 800386e:	4030      	ands	r0, r6
 8003870:	2601      	movs	r6, #1
 8003872:	4303      	orrs	r3, r0
 8003874:	6960      	ldr	r0, [r4, #20]
 8003876:	69e7      	ldr	r7, [r4, #28]
 8003878:	4030      	ands	r0, r6
 800387a:	4303      	orrs	r3, r0
 800387c:	2080      	movs	r0, #128	; 0x80
 800387e:	0080      	lsls	r0, r0, #2
 8003880:	4010      	ands	r0, r2
 8003882:	4303      	orrs	r3, r0
 8003884:	2038      	movs	r0, #56	; 0x38
 8003886:	4038      	ands	r0, r7
 8003888:	4303      	orrs	r3, r0
 800388a:	2080      	movs	r0, #128	; 0x80
 800388c:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800388e:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003890:	4038      	ands	r0, r7
 8003892:	4303      	orrs	r3, r0
 8003894:	2080      	movs	r0, #128	; 0x80
 8003896:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003898:	0180      	lsls	r0, r0, #6
 800389a:	4038      	ands	r0, r7
 800389c:	4303      	orrs	r3, r0
 800389e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038a0:	2304      	movs	r3, #4
 80038a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80038a4:	401a      	ands	r2, r3
 80038a6:	330c      	adds	r3, #12
 80038a8:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038aa:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038ac:	431a      	orrs	r2, r3
 80038ae:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b0:	69cb      	ldr	r3, [r1, #28]
 80038b2:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <HAL_SPI_Init+0xc0>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038b8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038ba:	702e      	strb	r6, [r5, #0]
}
 80038bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038be:	2300      	movs	r3, #0
 80038c0:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038c2:	6163      	str	r3, [r4, #20]
 80038c4:	e7ae      	b.n	8003824 <HAL_SPI_Init+0x1c>
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	fffff7ff 	.word	0xfffff7ff

080038cc <HAL_SPI_TransmitReceive>:
{
 80038cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ce:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80038d0:	0003      	movs	r3, r0
 80038d2:	3350      	adds	r3, #80	; 0x50
{
 80038d4:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80038d6:	781a      	ldrb	r2, [r3, #0]
{
 80038d8:	0004      	movs	r4, r0
 80038da:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80038dc:	2002      	movs	r0, #2
{
 80038de:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80038e0:	2a01      	cmp	r2, #1
 80038e2:	d100      	bne.n	80038e6 <HAL_SPI_TransmitReceive+0x1a>
 80038e4:	e092      	b.n	8003a0c <HAL_SPI_TransmitReceive+0x140>
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80038ea:	f7ff f8b3 	bl	8002a54 <HAL_GetTick>
  tmp_state           = hspi->State;
 80038ee:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80038f0:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 80038f2:	3351      	adds	r3, #81	; 0x51
 80038f4:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80038f6:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80038f8:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d00a      	beq.n	8003914 <HAL_SPI_TransmitReceive+0x48>
 80038fe:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8003900:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4299      	cmp	r1, r3
 8003906:	d000      	beq.n	800390a <HAL_SPI_TransmitReceive+0x3e>
 8003908:	e079      	b.n	80039fe <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800390a:	68a3      	ldr	r3, [r4, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d176      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x132>
 8003910:	2a04      	cmp	r2, #4
 8003912:	d174      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8003914:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003916:	2d00      	cmp	r5, #0
 8003918:	d071      	beq.n	80039fe <HAL_SPI_TransmitReceive+0x132>
 800391a:	2f00      	cmp	r7, #0
 800391c:	d06f      	beq.n	80039fe <HAL_SPI_TransmitReceive+0x132>
 800391e:	2e00      	cmp	r6, #0
 8003920:	d06d      	beq.n	80039fe <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003922:	0023      	movs	r3, r4
 8003924:	3351      	adds	r3, #81	; 0x51
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	2a04      	cmp	r2, #4
 800392a:	d001      	beq.n	8003930 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800392c:	2205      	movs	r2, #5
 800392e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003930:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003932:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003934:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8003936:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003938:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800393a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800393c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800393e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003940:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003942:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003944:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003946:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003948:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800394a:	4210      	tst	r0, r2
 800394c:	d102      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	4302      	orrs	r2, r0
 8003952:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	68e0      	ldr	r0, [r4, #12]
 8003958:	0112      	lsls	r2, r2, #4
 800395a:	4290      	cmp	r0, r2
 800395c:	d158      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395e:	2900      	cmp	r1, #0
 8003960:	d001      	beq.n	8003966 <HAL_SPI_TransmitReceive+0x9a>
 8003962:	2e01      	cmp	r6, #1
 8003964:	d107      	bne.n	8003976 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003966:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003968:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800396a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800396c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800396e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003970:	3b01      	subs	r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003976:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003978:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800397a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800397c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10e      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0xd4>
 8003982:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003988:	0020      	movs	r0, r4
 800398a:	9a01      	ldr	r2, [sp, #4]
 800398c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800398e:	f7ff ff09 	bl	80037a4 <SPI_EndRxTxTransaction>
 8003992:	2800      	cmp	r0, #0
 8003994:	d100      	bne.n	8003998 <HAL_SPI_TransmitReceive+0xcc>
 8003996:	e083      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003998:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800399a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800399c:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 800399e:	e02e      	b.n	80039fe <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039a0:	6821      	ldr	r1, [r4, #0]
 80039a2:	688b      	ldr	r3, [r1, #8]
 80039a4:	423b      	tst	r3, r7
 80039a6:	d00e      	beq.n	80039c6 <HAL_SPI_TransmitReceive+0xfa>
 80039a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_SPI_TransmitReceive+0xfa>
 80039ae:	2d01      	cmp	r5, #1
 80039b0:	d109      	bne.n	80039c6 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 80039b2:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039b6:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ba:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039bc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80039be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039c6:	688b      	ldr	r3, [r1, #8]
 80039c8:	001a      	movs	r2, r3
 80039ca:	4032      	ands	r2, r6
 80039cc:	4233      	tst	r3, r6
 80039ce:	d00c      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x11e>
 80039d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 80039d6:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039d8:	68c9      	ldr	r1, [r1, #12]
 80039da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039dc:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039de:	3302      	adds	r3, #2
 80039e0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80039e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039ea:	f7ff f833 	bl	8002a54 <HAL_GetTick>
 80039ee:	9b01      	ldr	r3, [sp, #4]
 80039f0:	1ac0      	subs	r0, r0, r3
 80039f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039f4:	4298      	cmp	r0, r3
 80039f6:	d3c1      	bcc.n	800397c <HAL_SPI_TransmitReceive+0xb0>
 80039f8:	3301      	adds	r3, #1
 80039fa:	d0bf      	beq.n	800397c <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 80039fc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80039fe:	0023      	movs	r3, r4
 8003a00:	2201      	movs	r2, #1
 8003a02:	3351      	adds	r3, #81	; 0x51
 8003a04:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8003a06:	2300      	movs	r3, #0
 8003a08:	3450      	adds	r4, #80	; 0x50
 8003a0a:	7023      	strb	r3, [r4, #0]
}
 8003a0c:	b005      	add	sp, #20
 8003a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a10:	2900      	cmp	r1, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_SPI_TransmitReceive+0x14c>
 8003a14:	2e01      	cmp	r6, #1
 8003a16:	d108      	bne.n	8003a2a <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a18:	782a      	ldrb	r2, [r5, #0]
 8003a1a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a1e:	3301      	adds	r3, #1
 8003a20:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003a22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003a2a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a2c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a2e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x170>
 8003a36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0a5      	beq.n	8003988 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	423a      	tst	r2, r7
 8003a42:	d00f      	beq.n	8003a64 <HAL_SPI_TransmitReceive+0x198>
 8003a44:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003a46:	2a00      	cmp	r2, #0
 8003a48:	d00c      	beq.n	8003a64 <HAL_SPI_TransmitReceive+0x198>
 8003a4a:	2d01      	cmp	r5, #1
 8003a4c:	d10a      	bne.n	8003a64 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 8003a4e:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a52:	7812      	ldrb	r2, [r2, #0]
 8003a54:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003a56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a58:	3301      	adds	r3, #1
 8003a5a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003a5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	6899      	ldr	r1, [r3, #8]
 8003a68:	000a      	movs	r2, r1
 8003a6a:	4032      	ands	r2, r6
 8003a6c:	4231      	tst	r1, r6
 8003a6e:	d00d      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x1c0>
 8003a70:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003a72:	2900      	cmp	r1, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8003a76:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003a7c:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8003a7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a80:	3301      	adds	r3, #1
 8003a82:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003a84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a8c:	f7fe ffe2 	bl	8002a54 <HAL_GetTick>
 8003a90:	9b01      	ldr	r3, [sp, #4]
 8003a92:	1ac0      	subs	r0, r0, r3
 8003a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a96:	4298      	cmp	r0, r3
 8003a98:	d3ca      	bcc.n	8003a30 <HAL_SPI_TransmitReceive+0x164>
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	d0c8      	beq.n	8003a30 <HAL_SPI_TransmitReceive+0x164>
 8003a9e:	e7ad      	b.n	80039fc <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aa0:	68a3      	ldr	r3, [r4, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1ab      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	9003      	str	r0, [sp, #12]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	9203      	str	r2, [sp, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	9303      	str	r3, [sp, #12]
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	e7a3      	b.n	80039fe <HAL_SPI_TransmitReceive+0x132>
	...

08003ab8 <HAL_SPI_TransmitReceive_DMA>:
{
 8003ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8003aba:	0006      	movs	r6, r0
 8003abc:	3650      	adds	r6, #80	; 0x50
 8003abe:	7835      	ldrb	r5, [r6, #0]
{
 8003ac0:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	2d01      	cmp	r5, #1
 8003ac6:	d048      	beq.n	8003b5a <HAL_SPI_TransmitReceive_DMA+0xa2>
  tmp_state           = hspi->State;
 8003ac8:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 8003aca:	3801      	subs	r0, #1
 8003acc:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 8003ace:	3551      	adds	r5, #81	; 0x51
 8003ad0:	7828      	ldrb	r0, [r5, #0]
 8003ad2:	b2c7      	uxtb	r7, r0
 8003ad4:	9701      	str	r7, [sp, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003ad6:	2801      	cmp	r0, #1
 8003ad8:	d00d      	beq.n	8003af6 <HAL_SPI_TransmitReceive_DMA+0x3e>
 8003ada:	2082      	movs	r0, #130	; 0x82
 8003adc:	0040      	lsls	r0, r0, #1
 8003ade:	4684      	mov	ip, r0
 8003ae0:	6867      	ldr	r7, [r4, #4]
    errorcode = HAL_BUSY;
 8003ae2:	3803      	subs	r0, #3
 8003ae4:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003ae6:	4567      	cmp	r7, ip
 8003ae8:	d135      	bne.n	8003b56 <HAL_SPI_TransmitReceive_DMA+0x9e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aea:	68a7      	ldr	r7, [r4, #8]
 8003aec:	2f00      	cmp	r7, #0
 8003aee:	d132      	bne.n	8003b56 <HAL_SPI_TransmitReceive_DMA+0x9e>
 8003af0:	9f01      	ldr	r7, [sp, #4]
 8003af2:	2f04      	cmp	r7, #4
 8003af4:	d12f      	bne.n	8003b56 <HAL_SPI_TransmitReceive_DMA+0x9e>
    errorcode = HAL_ERROR;
 8003af6:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003af8:	2900      	cmp	r1, #0
 8003afa:	d02c      	beq.n	8003b56 <HAL_SPI_TransmitReceive_DMA+0x9e>
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	d02a      	beq.n	8003b56 <HAL_SPI_TransmitReceive_DMA+0x9e>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d028      	beq.n	8003b56 <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b04:	7828      	ldrb	r0, [r5, #0]
 8003b06:	2804      	cmp	r0, #4
 8003b08:	d001      	beq.n	8003b0e <HAL_SPI_TransmitReceive_DMA+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b0a:	2005      	movs	r0, #5
 8003b0c:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b0e:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b10:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b12:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8003b14:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8003b16:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 8003b18:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->TxXferSize  = Size;
 8003b1a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b1c:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b1e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b20:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003b22:	782b      	ldrb	r3, [r5, #0]
 8003b24:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d118      	bne.n	8003b5c <HAL_SPI_TransmitReceive_DMA+0xa4>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <HAL_SPI_TransmitReceive_DMA+0x100>)
 8003b2c:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003b2e:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <HAL_SPI_TransmitReceive_DMA+0x104>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003b30:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003b32:	4b23      	ldr	r3, [pc, #140]	; (8003bc0 <HAL_SPI_TransmitReceive_DMA+0x108>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003b34:	6821      	ldr	r1, [r4, #0]
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003b36:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 8003b3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003b3e:	310c      	adds	r1, #12
                                 hspi->RxXferCount))
 8003b40:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003b42:	f7ff f833 	bl	8002bac <HAL_DMA_Start_IT>
 8003b46:	1e03      	subs	r3, r0, #0
 8003b48:	d00c      	beq.n	8003b64 <HAL_SPI_TransmitReceive_DMA+0xac>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b4a:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 8003b4c:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b4e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003b50:	4313      	orrs	r3, r2
 8003b52:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003b54:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8003b56:	2300      	movs	r3, #0
 8003b58:	7033      	strb	r3, [r6, #0]
}
 8003b5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_SPI_TransmitReceive_DMA+0x10c>)
 8003b5e:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003b60:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_SPI_TransmitReceive_DMA+0x110>)
 8003b62:	e7e5      	b.n	8003b30 <HAL_SPI_TransmitReceive_DMA+0x78>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b64:	2701      	movs	r7, #1
 8003b66:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003b68:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b6a:	6851      	ldr	r1, [r2, #4]
 8003b6c:	4339      	orrs	r1, r7
 8003b6e:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003b70:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003b72:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003b74:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003b76:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 8003b78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                 hspi->TxXferCount))
 8003b7c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b7e:	320c      	adds	r2, #12
 8003b80:	f7ff f814 	bl	8002bac <HAL_DMA_Start_IT>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d006      	beq.n	8003b96 <HAL_SPI_TransmitReceive_DMA+0xde>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b88:	2310      	movs	r3, #16
 8003b8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003b8c:	0038      	movs	r0, r7
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003b92:	702f      	strb	r7, [r5, #0]
    goto error;
 8003b94:	e7df      	b.n	8003b56 <HAL_SPI_TransmitReceive_DMA+0x9e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	6819      	ldr	r1, [r3, #0]
 8003b9c:	4211      	tst	r1, r2
 8003b9e:	d102      	bne.n	8003ba6 <HAL_SPI_TransmitReceive_DMA+0xee>
    __HAL_SPI_ENABLE(hspi);
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003bae:	2202      	movs	r2, #2
 8003bb0:	6859      	ldr	r1, [r3, #4]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	e7ce      	b.n	8003b56 <HAL_SPI_TransmitReceive_DMA+0x9e>
 8003bb8:	08003cc1 	.word	0x08003cc1
 8003bbc:	08003cfd 	.word	0x08003cfd
 8003bc0:	08003cd9 	.word	0x08003cd9
 8003bc4:	08003ccd 	.word	0x08003ccd
 8003bc8:	08003d6b 	.word	0x08003d6b

08003bcc <HAL_SPI_Receive_DMA>:
{
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003bd0:	6880      	ldr	r0, [r0, #8]
{
 8003bd2:	0013      	movs	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_SPI_Receive_DMA+0x2c>
 8003bd8:	2282      	movs	r2, #130	; 0x82
 8003bda:	6865      	ldr	r5, [r4, #4]
 8003bdc:	0052      	lsls	r2, r2, #1
 8003bde:	4295      	cmp	r5, r2
 8003be0:	d10a      	bne.n	8003bf8 <HAL_SPI_Receive_DMA+0x2c>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003be2:	0022      	movs	r2, r4
 8003be4:	3004      	adds	r0, #4
 8003be6:	3251      	adds	r2, #81	; 0x51
 8003be8:	7010      	strb	r0, [r2, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003bea:	000a      	movs	r2, r1
 8003bec:	0020      	movs	r0, r4
 8003bee:	f7ff ff63 	bl	8003ab8 <HAL_SPI_TransmitReceive_DMA>
 8003bf2:	0005      	movs	r5, r0
}
 8003bf4:	0028      	movs	r0, r5
 8003bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8003bf8:	0026      	movs	r6, r4
 8003bfa:	3650      	adds	r6, #80	; 0x50
 8003bfc:	7832      	ldrb	r2, [r6, #0]
 8003bfe:	2502      	movs	r5, #2
 8003c00:	2a01      	cmp	r2, #1
 8003c02:	d0f7      	beq.n	8003bf4 <HAL_SPI_Receive_DMA+0x28>
 8003c04:	2201      	movs	r2, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8003c06:	0027      	movs	r7, r4
  __HAL_LOCK(hspi);
 8003c08:	7032      	strb	r2, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8003c0a:	3751      	adds	r7, #81	; 0x51
 8003c0c:	783a      	ldrb	r2, [r7, #0]
 8003c0e:	b2d5      	uxtb	r5, r2
 8003c10:	2a01      	cmp	r2, #1
 8003c12:	d149      	bne.n	8003ca8 <HAL_SPI_Receive_DMA+0xdc>
  if ((pData == NULL) || (Size == 0U))
 8003c14:	2900      	cmp	r1, #0
 8003c16:	d032      	beq.n	8003c7e <HAL_SPI_Receive_DMA+0xb2>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d030      	beq.n	8003c7e <HAL_SPI_Receive_DMA+0xb2>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c1c:	3203      	adds	r2, #3
 8003c1e:	703a      	strb	r2, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c20:	2200      	movs	r2, #0
  hspi->RxXferSize  = Size;
 8003c22:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c24:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8003c26:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c28:	2380      	movs	r3, #128	; 0x80
  hspi->RxISR       = NULL;
 8003c2a:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c2c:	6462      	str	r2, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003c2e:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003c30:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c32:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	4298      	cmp	r0, r3
 8003c3a:	d107      	bne.n	8003c4c <HAL_SPI_Receive_DMA+0x80>
    __HAL_SPI_DISABLE(hspi);
 8003c3c:	2040      	movs	r0, #64	; 0x40
 8003c3e:	6813      	ldr	r3, [r2, #0]
 8003c40:	4383      	bics	r3, r0
 8003c42:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8003c44:	6813      	ldr	r3, [r2, #0]
 8003c46:	4819      	ldr	r0, [pc, #100]	; (8003cac <HAL_SPI_Receive_DMA+0xe0>)
 8003c48:	4003      	ands	r3, r0
 8003c4a:	6013      	str	r3, [r2, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003c4c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003c4e:	4b18      	ldr	r3, [pc, #96]	; (8003cb0 <HAL_SPI_Receive_DMA+0xe4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c50:	320c      	adds	r2, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003c52:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003c54:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <HAL_SPI_Receive_DMA+0xe8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c56:	4694      	mov	ip, r2
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003c58:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003c5a:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <HAL_SPI_Receive_DMA+0xec>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c5c:	000a      	movs	r2, r1
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003c5e:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 8003c64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c66:	4661      	mov	r1, ip
                                 hspi->RxXferCount))
 8003c68:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c6a:	f7fe ff9f 	bl	8002bac <HAL_DMA_Start_IT>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_SPI_Receive_DMA+0xb8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c72:	2310      	movs	r3, #16
 8003c74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c76:	4313      	orrs	r3, r2
 8003c78:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	7033      	strb	r3, [r6, #0]
  return errorcode;
 8003c82:	e7b7      	b.n	8003bf4 <HAL_SPI_Receive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c84:	2240      	movs	r2, #64	; 0x40
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	4211      	tst	r1, r2
 8003c8c:	d102      	bne.n	8003c94 <HAL_SPI_Receive_DMA+0xc8>
    __HAL_SPI_ENABLE(hspi);
 8003c8e:	6819      	ldr	r1, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c94:	2220      	movs	r2, #32
 8003c96:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c98:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	e7ea      	b.n	8003c7e <HAL_SPI_Receive_DMA+0xb2>
    errorcode = HAL_BUSY;
 8003ca8:	2502      	movs	r5, #2
 8003caa:	e7e8      	b.n	8003c7e <HAL_SPI_Receive_DMA+0xb2>
 8003cac:	ffffbfff 	.word	0xffffbfff
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cfd 	.word	0x08003cfd
 8003cb8:	08003cd9 	.word	0x08003cd9

08003cbc <HAL_SPI_TxRxCpltCallback>:
 8003cbc:	4770      	bx	lr

08003cbe <HAL_SPI_RxHalfCpltCallback>:
 8003cbe:	4770      	bx	lr

08003cc0 <SPI_DMAHalfReceiveCplt>:
{
 8003cc0:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003cc2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003cc4:	f7ff fffb 	bl	8003cbe <HAL_SPI_RxHalfCpltCallback>
}
 8003cc8:	bd10      	pop	{r4, pc}

08003cca <HAL_SPI_TxRxHalfCpltCallback>:
 8003cca:	4770      	bx	lr

08003ccc <SPI_DMAHalfTransmitReceiveCplt>:
{
 8003ccc:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003cce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003cd0:	f7ff fffb 	bl	8003cca <HAL_SPI_TxRxHalfCpltCallback>
}
 8003cd4:	bd10      	pop	{r4, pc}

08003cd6 <HAL_SPI_ErrorCallback>:
 8003cd6:	4770      	bx	lr

08003cd8 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003cd8:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cda:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003cdc:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003cde:	6802      	ldr	r2, [r0, #0]
 8003ce0:	6853      	ldr	r3, [r2, #4]
 8003ce2:	438b      	bics	r3, r1
 8003ce4:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003cea:	4313      	orrs	r3, r2
 8003cec:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003cee:	0003      	movs	r3, r0
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	3351      	adds	r3, #81	; 0x51
 8003cf4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8003cf6:	f7ff ffee 	bl	8003cd6 <HAL_SPI_ErrorCallback>
}
 8003cfa:	bd10      	pop	{r4, pc}

08003cfc <SPI_DMAReceiveCplt>:
{
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d00:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003d02:	f7fe fea7 	bl	8002a54 <HAL_GetTick>
 8003d06:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003d08:	2020      	movs	r0, #32
 8003d0a:	682b      	ldr	r3, [r5, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4203      	tst	r3, r0
 8003d10:	d127      	bne.n	8003d62 <SPI_DMAReceiveCplt+0x66>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	4381      	bics	r1, r0
 8003d18:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003d1a:	68a1      	ldr	r1, [r4, #8]
 8003d1c:	2900      	cmp	r1, #0
 8003d1e:	d11d      	bne.n	8003d5c <SPI_DMAReceiveCplt+0x60>
 8003d20:	3105      	adds	r1, #5
 8003d22:	6860      	ldr	r0, [r4, #4]
 8003d24:	31ff      	adds	r1, #255	; 0xff
 8003d26:	4288      	cmp	r0, r1
 8003d28:	d118      	bne.n	8003d5c <SPI_DMAReceiveCplt+0x60>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d2a:	2003      	movs	r0, #3
 8003d2c:	6859      	ldr	r1, [r3, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003d2e:	4381      	bics	r1, r0
 8003d30:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003d32:	0020      	movs	r0, r4
 8003d34:	2164      	movs	r1, #100	; 0x64
 8003d36:	f7ff fd0b 	bl	8003750 <SPI_EndRxTransaction>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d001      	beq.n	8003d42 <SPI_DMAReceiveCplt+0x46>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d3e:	2320      	movs	r3, #32
 8003d40:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003d46:	0023      	movs	r3, r4
 8003d48:	2201      	movs	r2, #1
 8003d4a:	3351      	adds	r3, #81	; 0x51
 8003d4c:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d006      	beq.n	8003d62 <SPI_DMAReceiveCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8003d54:	0020      	movs	r0, r4
 8003d56:	f7ff ffbe 	bl	8003cd6 <HAL_SPI_ErrorCallback>
}
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	e7e5      	b.n	8003d2e <SPI_DMAReceiveCplt+0x32>
  HAL_SPI_RxCpltCallback(hspi);
 8003d62:	0020      	movs	r0, r4
 8003d64:	f000 feea 	bl	8004b3c <HAL_SPI_RxCpltCallback>
 8003d68:	e7f7      	b.n	8003d5a <SPI_DMAReceiveCplt+0x5e>

08003d6a <SPI_DMATransmitReceiveCplt>:
{
 8003d6a:	b570      	push	{r4, r5, r6, lr}
 8003d6c:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003d70:	f7fe fe70 	bl	8002a54 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	2520      	movs	r5, #32
 8003d78:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8003d7a:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003d7c:	422b      	tst	r3, r5
 8003d7e:	d11f      	bne.n	8003dc0 <SPI_DMATransmitReceiveCplt+0x56>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003d80:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003d82:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003d84:	684b      	ldr	r3, [r1, #4]
 8003d86:	43ab      	bics	r3, r5
 8003d88:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003d8a:	2164      	movs	r1, #100	; 0x64
 8003d8c:	f7ff fd0a 	bl	80037a4 <SPI_EndRxTxTransaction>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d002      	beq.n	8003d9a <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d96:	431d      	orrs	r5, r3
 8003d98:	6565      	str	r5, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d9a:	2103      	movs	r1, #3
 8003d9c:	6822      	ldr	r2, [r4, #0]
 8003d9e:	6853      	ldr	r3, [r2, #4]
 8003da0:	438b      	bics	r3, r1
 8003da2:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003da8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003daa:	0023      	movs	r3, r4
 8003dac:	2201      	movs	r2, #1
 8003dae:	3351      	adds	r3, #81	; 0x51
 8003db0:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003db2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <SPI_DMATransmitReceiveCplt+0x56>
      HAL_SPI_ErrorCallback(hspi);
 8003db8:	0020      	movs	r0, r4
 8003dba:	f7ff ff8c 	bl	8003cd6 <HAL_SPI_ErrorCallback>
}
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8003dc0:	0020      	movs	r0, r4
 8003dc2:	f7ff ff7b 	bl	8003cbc <HAL_SPI_TxRxCpltCallback>
 8003dc6:	e7fa      	b.n	8003dbe <SPI_DMATransmitReceiveCplt+0x54>

08003dc8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc8:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 8003dca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dcc:	05d2      	lsls	r2, r2, #23
 8003dce:	4290      	cmp	r0, r2
 8003dd0:	d008      	beq.n	8003de4 <TIM_Base_SetConfig+0x1c>
 8003dd2:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <TIM_Base_SetConfig+0x60>)
 8003dd4:	4290      	cmp	r0, r2
 8003dd6:	d005      	beq.n	8003de4 <TIM_Base_SetConfig+0x1c>
 8003dd8:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <TIM_Base_SetConfig+0x64>)
 8003dda:	4290      	cmp	r0, r2
 8003ddc:	d002      	beq.n	8003de4 <TIM_Base_SetConfig+0x1c>
 8003dde:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <TIM_Base_SetConfig+0x68>)
 8003de0:	4290      	cmp	r0, r2
 8003de2:	d114      	bne.n	8003e0e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de4:	2270      	movs	r2, #112	; 0x70
 8003de6:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003de8:	684a      	ldr	r2, [r1, #4]
 8003dea:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	05d2      	lsls	r2, r2, #23
 8003df0:	4290      	cmp	r0, r2
 8003df2:	d008      	beq.n	8003e06 <TIM_Base_SetConfig+0x3e>
 8003df4:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <TIM_Base_SetConfig+0x60>)
 8003df6:	4290      	cmp	r0, r2
 8003df8:	d005      	beq.n	8003e06 <TIM_Base_SetConfig+0x3e>
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <TIM_Base_SetConfig+0x64>)
 8003dfc:	4290      	cmp	r0, r2
 8003dfe:	d002      	beq.n	8003e06 <TIM_Base_SetConfig+0x3e>
 8003e00:	4a0b      	ldr	r2, [pc, #44]	; (8003e30 <TIM_Base_SetConfig+0x68>)
 8003e02:	4290      	cmp	r0, r2
 8003e04:	d103      	bne.n	8003e0e <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e06:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <TIM_Base_SetConfig+0x6c>)
 8003e08:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e0a:	68ca      	ldr	r2, [r1, #12]
 8003e0c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	4393      	bics	r3, r2
 8003e12:	690a      	ldr	r2, [r1, #16]
 8003e14:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003e16:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e18:	688b      	ldr	r3, [r1, #8]
 8003e1a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e1c:	680b      	ldr	r3, [r1, #0]
 8003e1e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e20:	2301      	movs	r3, #1
 8003e22:	6143      	str	r3, [r0, #20]
}
 8003e24:	4770      	bx	lr
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40010800 	.word	0x40010800
 8003e30:	40011400 	.word	0x40011400
 8003e34:	fffffcff 	.word	0xfffffcff

08003e38 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e38:	2201      	movs	r2, #1
{
 8003e3a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e3c:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	6a03      	ldr	r3, [r0, #32]
 8003e40:	4393      	bics	r3, r2
 8003e42:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003e44:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003e46:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e48:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e4a:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e4c:	680d      	ldr	r5, [r1, #0]
 8003e4e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e50:	2502      	movs	r5, #2
 8003e52:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e54:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e56:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e58:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e5a:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8003e5c:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8003e5e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e60:	6203      	str	r3, [r0, #32]
}
 8003e62:	bd30      	pop	{r4, r5, pc}

08003e64 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e64:	2210      	movs	r2, #16
 8003e66:	6a03      	ldr	r3, [r0, #32]
{
 8003e68:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e70:	4c09      	ldr	r4, [pc, #36]	; (8003e98 <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8003e72:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e74:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e76:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	680a      	ldr	r2, [r1, #0]
 8003e7a:	0212      	lsls	r2, r2, #8
 8003e7c:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e7e:	2420      	movs	r4, #32
 8003e80:	43a3      	bics	r3, r4
 8003e82:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e84:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e86:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e88:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e8a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e8c:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e8e:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8003e90:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e92:	6203      	str	r3, [r0, #32]
}
 8003e94:	bd30      	pop	{r4, r5, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	ffff8cff 	.word	0xffff8cff

08003e9c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e9c:	231f      	movs	r3, #31
{
 8003e9e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ea0:	2401      	movs	r4, #1
 8003ea2:	4019      	ands	r1, r3
 8003ea4:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ea6:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003ea8:	6a03      	ldr	r3, [r0, #32]
 8003eaa:	43a3      	bics	r3, r4
 8003eac:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eae:	6a03      	ldr	r3, [r0, #32]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	6202      	str	r2, [r0, #32]
}
 8003eb4:	bd10      	pop	{r4, pc}

08003eb6 <HAL_TIM_Base_Init>:
{
 8003eb6:	b570      	push	{r4, r5, r6, lr}
 8003eb8:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003eba:	2001      	movs	r0, #1
  if (htim == NULL)
 8003ebc:	2c00      	cmp	r4, #0
 8003ebe:	d01d      	beq.n	8003efc <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec0:	0025      	movs	r5, r4
 8003ec2:	3539      	adds	r5, #57	; 0x39
 8003ec4:	782b      	ldrb	r3, [r5, #0]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8003ecc:	0023      	movs	r3, r4
 8003ece:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003ed0:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003ed2:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8003ed4:	f7fe fc30 	bl	8002738 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003edc:	6820      	ldr	r0, [r4, #0]
 8003ede:	1d21      	adds	r1, r4, #4
 8003ee0:	f7ff ff72 	bl	8003dc8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee4:	0022      	movs	r2, r4
 8003ee6:	2301      	movs	r3, #1
  return HAL_OK;
 8003ee8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eea:	323e      	adds	r2, #62	; 0x3e
 8003eec:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eee:	343d      	adds	r4, #61	; 0x3d
 8003ef0:	3a04      	subs	r2, #4
 8003ef2:	7013      	strb	r3, [r2, #0]
 8003ef4:	7053      	strb	r3, [r2, #1]
 8003ef6:	7093      	strb	r3, [r2, #2]
 8003ef8:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003efa:	702b      	strb	r3, [r5, #0]
}
 8003efc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f00 <HAL_TIM_OC_Start_DMA>:
{
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	000e      	movs	r6, r1
 8003f04:	0005      	movs	r5, r0
 8003f06:	0011      	movs	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003f08:	0002      	movs	r2, r0
 8003f0a:	2e00      	cmp	r6, #0
 8003f0c:	d105      	bne.n	8003f1a <HAL_TIM_OC_Start_DMA+0x1a>
 8003f0e:	323a      	adds	r2, #58	; 0x3a
 8003f10:	7814      	ldrb	r4, [r2, #0]
 8003f12:	b2e0      	uxtb	r0, r4
 8003f14:	2c02      	cmp	r4, #2
 8003f16:	d10a      	bne.n	8003f2e <HAL_TIM_OC_Start_DMA+0x2e>
}
 8003f18:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003f1a:	2e04      	cmp	r6, #4
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_OC_Start_DMA+0x22>
 8003f1e:	323b      	adds	r2, #59	; 0x3b
 8003f20:	e7f6      	b.n	8003f10 <HAL_TIM_OC_Start_DMA+0x10>
 8003f22:	2e08      	cmp	r6, #8
 8003f24:	d101      	bne.n	8003f2a <HAL_TIM_OC_Start_DMA+0x2a>
 8003f26:	323c      	adds	r2, #60	; 0x3c
 8003f28:	e7f2      	b.n	8003f10 <HAL_TIM_OC_Start_DMA+0x10>
 8003f2a:	323d      	adds	r2, #61	; 0x3d
 8003f2c:	e7f0      	b.n	8003f10 <HAL_TIM_OC_Start_DMA+0x10>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003f2e:	7814      	ldrb	r4, [r2, #0]
 8003f30:	3c01      	subs	r4, #1
 8003f32:	4262      	negs	r2, r4
 8003f34:	4154      	adcs	r4, r2
 8003f36:	b2e4      	uxtb	r4, r4
 8003f38:	2c00      	cmp	r4, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_TIM_OC_Start_DMA+0x40>
  switch (Channel)
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	e7eb      	b.n	8003f18 <HAL_TIM_OC_Start_DMA+0x18>
    if ((pData == NULL) && (Length > 0U))
 8003f40:	2900      	cmp	r1, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_TIM_OC_Start_DMA+0x48>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1f9      	bne.n	8003f3c <HAL_TIM_OC_Start_DMA+0x3c>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f48:	2202      	movs	r2, #2
 8003f4a:	0028      	movs	r0, r5
 8003f4c:	2e00      	cmp	r6, #0
 8003f4e:	d132      	bne.n	8003fb6 <HAL_TIM_OC_Start_DMA+0xb6>
 8003f50:	303a      	adds	r0, #58	; 0x3a
 8003f52:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f54:	6a28      	ldr	r0, [r5, #32]
 8003f56:	4a3c      	ldr	r2, [pc, #240]	; (8004048 <HAL_TIM_OC_Start_DMA+0x148>)
 8003f58:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f5a:	4a3c      	ldr	r2, [pc, #240]	; (800404c <HAL_TIM_OC_Start_DMA+0x14c>)
 8003f5c:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003f5e:	4a3c      	ldr	r2, [pc, #240]	; (8004050 <HAL_TIM_OC_Start_DMA+0x150>)
 8003f60:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003f62:	682a      	ldr	r2, [r5, #0]
 8003f64:	3234      	adds	r2, #52	; 0x34
 8003f66:	f7fe fe21 	bl	8002bac <HAL_DMA_Start_IT>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d1e6      	bne.n	8003f3c <HAL_TIM_OC_Start_DMA+0x3c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	682a      	ldr	r2, [r5, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	68d1      	ldr	r1, [r2, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003f76:	430b      	orrs	r3, r1
 8003f78:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f7a:	0031      	movs	r1, r6
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	6828      	ldr	r0, [r5, #0]
 8003f80:	f7ff ff8c 	bl	8003e9c <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f84:	2280      	movs	r2, #128	; 0x80
 8003f86:	682b      	ldr	r3, [r5, #0]
 8003f88:	05d2      	lsls	r2, r2, #23
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d008      	beq.n	8003fa0 <HAL_TIM_OC_Start_DMA+0xa0>
 8003f8e:	4a31      	ldr	r2, [pc, #196]	; (8004054 <HAL_TIM_OC_Start_DMA+0x154>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d005      	beq.n	8003fa0 <HAL_TIM_OC_Start_DMA+0xa0>
 8003f94:	4a30      	ldr	r2, [pc, #192]	; (8004058 <HAL_TIM_OC_Start_DMA+0x158>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d002      	beq.n	8003fa0 <HAL_TIM_OC_Start_DMA+0xa0>
 8003f9a:	4a30      	ldr	r2, [pc, #192]	; (800405c <HAL_TIM_OC_Start_DMA+0x15c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d14c      	bne.n	800403a <HAL_TIM_OC_Start_DMA+0x13a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa0:	2107      	movs	r1, #7
 8003fa2:	689a      	ldr	r2, [r3, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	2000      	movs	r0, #0
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa6:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa8:	2a06      	cmp	r2, #6
 8003faa:	d0b5      	beq.n	8003f18 <HAL_TIM_OC_Start_DMA+0x18>
        __HAL_TIM_ENABLE(htim);
 8003fac:	2201      	movs	r2, #1
 8003fae:	6819      	ldr	r1, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e7b0      	b.n	8003f18 <HAL_TIM_OC_Start_DMA+0x18>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb6:	2e04      	cmp	r6, #4
 8003fb8:	d113      	bne.n	8003fe2 <HAL_TIM_OC_Start_DMA+0xe2>
 8003fba:	303b      	adds	r0, #59	; 0x3b
 8003fbc:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fbe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003fc0:	4a21      	ldr	r2, [pc, #132]	; (8004048 <HAL_TIM_OC_Start_DMA+0x148>)
 8003fc2:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fc4:	4a21      	ldr	r2, [pc, #132]	; (800404c <HAL_TIM_OC_Start_DMA+0x14c>)
 8003fc6:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003fc8:	4a21      	ldr	r2, [pc, #132]	; (8004050 <HAL_TIM_OC_Start_DMA+0x150>)
 8003fca:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003fcc:	682a      	ldr	r2, [r5, #0]
 8003fce:	3238      	adds	r2, #56	; 0x38
 8003fd0:	f7fe fdec 	bl	8002bac <HAL_DMA_Start_IT>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d1b1      	bne.n	8003f3c <HAL_TIM_OC_Start_DMA+0x3c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	682a      	ldr	r2, [r5, #0]
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	68d1      	ldr	r1, [r2, #12]
 8003fe0:	e7c9      	b.n	8003f76 <HAL_TIM_OC_Start_DMA+0x76>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe2:	2e08      	cmp	r6, #8
 8003fe4:	d113      	bne.n	800400e <HAL_TIM_OC_Start_DMA+0x10e>
 8003fe6:	303c      	adds	r0, #60	; 0x3c
 8003fe8:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fea:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003fec:	4a16      	ldr	r2, [pc, #88]	; (8004048 <HAL_TIM_OC_Start_DMA+0x148>)
 8003fee:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ff0:	4a16      	ldr	r2, [pc, #88]	; (800404c <HAL_TIM_OC_Start_DMA+0x14c>)
 8003ff2:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_TIM_OC_Start_DMA+0x150>)
 8003ff6:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003ff8:	682a      	ldr	r2, [r5, #0]
 8003ffa:	323c      	adds	r2, #60	; 0x3c
 8003ffc:	f7fe fdd6 	bl	8002bac <HAL_DMA_Start_IT>
 8004000:	2800      	cmp	r0, #0
 8004002:	d19b      	bne.n	8003f3c <HAL_TIM_OC_Start_DMA+0x3c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	682a      	ldr	r2, [r5, #0]
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	68d1      	ldr	r1, [r2, #12]
 800400c:	e7b3      	b.n	8003f76 <HAL_TIM_OC_Start_DMA+0x76>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	303d      	adds	r0, #61	; 0x3d
 8004010:	7002      	strb	r2, [r0, #0]
  switch (Channel)
 8004012:	2e0c      	cmp	r6, #12
 8004014:	d192      	bne.n	8003f3c <HAL_TIM_OC_Start_DMA+0x3c>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004016:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004018:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <HAL_TIM_OC_Start_DMA+0x148>)
 800401a:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800401c:	4a0b      	ldr	r2, [pc, #44]	; (800404c <HAL_TIM_OC_Start_DMA+0x14c>)
 800401e:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004020:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <HAL_TIM_OC_Start_DMA+0x150>)
 8004022:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004024:	682a      	ldr	r2, [r5, #0]
 8004026:	3240      	adds	r2, #64	; 0x40
 8004028:	f7fe fdc0 	bl	8002bac <HAL_DMA_Start_IT>
 800402c:	2800      	cmp	r0, #0
 800402e:	d185      	bne.n	8003f3c <HAL_TIM_OC_Start_DMA+0x3c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	682a      	ldr	r2, [r5, #0]
 8004034:	015b      	lsls	r3, r3, #5
 8004036:	68d1      	ldr	r1, [r2, #12]
 8004038:	e79d      	b.n	8003f76 <HAL_TIM_OC_Start_DMA+0x76>
      __HAL_TIM_ENABLE(htim);
 800403a:	2201      	movs	r2, #1
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	2000      	movs	r0, #0
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e768      	b.n	8003f18 <HAL_TIM_OC_Start_DMA+0x18>
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	08004323 	.word	0x08004323
 800404c:	08004395 	.word	0x08004395
 8004050:	080043cf 	.word	0x080043cf
 8004054:	40000400 	.word	0x40000400
 8004058:	40010800 	.word	0x40010800
 800405c:	40011400 	.word	0x40011400

08004060 <HAL_TIM_PWM_MspInit>:
 8004060:	4770      	bx	lr

08004062 <HAL_TIM_PWM_Init>:
{
 8004062:	b570      	push	{r4, r5, r6, lr}
 8004064:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004066:	2001      	movs	r0, #1
  if (htim == NULL)
 8004068:	2c00      	cmp	r4, #0
 800406a:	d01d      	beq.n	80040a8 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 800406c:	0025      	movs	r5, r4
 800406e:	3539      	adds	r5, #57	; 0x39
 8004070:	782b      	ldrb	r3, [r5, #0]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004078:	0023      	movs	r3, r4
 800407a:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 800407c:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800407e:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8004080:	f7ff ffee 	bl	8004060 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	2302      	movs	r3, #2
 8004086:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	1d21      	adds	r1, r4, #4
 800408c:	f7ff fe9c 	bl	8003dc8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004090:	0022      	movs	r2, r4
 8004092:	2301      	movs	r3, #1
  return HAL_OK;
 8004094:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004096:	323e      	adds	r2, #62	; 0x3e
 8004098:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409a:	343d      	adds	r4, #61	; 0x3d
 800409c:	3a04      	subs	r2, #4
 800409e:	7013      	strb	r3, [r2, #0]
 80040a0:	7053      	strb	r3, [r2, #1]
 80040a2:	7093      	strb	r3, [r2, #2]
 80040a4:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80040a6:	702b      	strb	r3, [r5, #0]
}
 80040a8:	bd70      	pop	{r4, r5, r6, pc}

080040aa <HAL_TIM_PWM_Start_DMA>:
 80040aa:	b510      	push	{r4, lr}
 80040ac:	f7ff ff28 	bl	8003f00 <HAL_TIM_OC_Start_DMA>
 80040b0:	bd10      	pop	{r4, pc}
	...

080040b4 <HAL_TIM_PWM_ConfigChannel>:
{
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80040b6:	0005      	movs	r5, r0
 80040b8:	3538      	adds	r5, #56	; 0x38
 80040ba:	782b      	ldrb	r3, [r5, #0]
{
 80040bc:	0007      	movs	r7, r0
 80040be:	000c      	movs	r4, r1
 80040c0:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 80040c2:	2002      	movs	r0, #2
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d00a      	beq.n	80040de <HAL_TIM_PWM_ConfigChannel+0x2a>
 80040c8:	3801      	subs	r0, #1
 80040ca:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 80040cc:	2a08      	cmp	r2, #8
 80040ce:	d050      	beq.n	8004172 <HAL_TIM_PWM_ConfigChannel+0xbe>
 80040d0:	d806      	bhi.n	80040e0 <HAL_TIM_PWM_ConfigChannel+0x2c>
 80040d2:	2a00      	cmp	r2, #0
 80040d4:	d02a      	beq.n	800412c <HAL_TIM_PWM_ConfigChannel+0x78>
 80040d6:	2a04      	cmp	r2, #4
 80040d8:	d03a      	beq.n	8004150 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 80040da:	2300      	movs	r3, #0
 80040dc:	702b      	strb	r3, [r5, #0]
}
 80040de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80040e0:	2a0c      	cmp	r2, #12
 80040e2:	d1fa      	bne.n	80040da <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040e4:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040e6:	4934      	ldr	r1, [pc, #208]	; (80041b8 <HAL_TIM_PWM_ConfigChannel+0x104>)
 80040e8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040ea:	4834      	ldr	r0, [pc, #208]	; (80041bc <HAL_TIM_PWM_ConfigChannel+0x108>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ec:	400a      	ands	r2, r1
 80040ee:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80040f0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80040f2:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80040f4:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040f6:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	0207      	lsls	r7, r0, #8
  tmpccer &= ~TIM_CCER_CC4P;
 80040fc:	4830      	ldr	r0, [pc, #192]	; (80041c0 <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040fe:	4339      	orrs	r1, r7
  tmpccer &= ~TIM_CCER_CC4P;
 8004100:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004102:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8004104:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004106:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8004108:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800410a:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800410c:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 800410e:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004110:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	69d9      	ldr	r1, [r3, #28]
 8004116:	0112      	lsls	r2, r2, #4
 8004118:	430a      	orrs	r2, r1
 800411a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	4929      	ldr	r1, [pc, #164]	; (80041c4 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8004120:	400a      	ands	r2, r1
 8004122:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004124:	68e2      	ldr	r2, [r4, #12]
 8004126:	69d9      	ldr	r1, [r3, #28]
 8004128:	0212      	lsls	r2, r2, #8
 800412a:	e041      	b.n	80041b0 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800412c:	6838      	ldr	r0, [r7, #0]
 800412e:	f7ff fe83 	bl	8003e38 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004132:	2208      	movs	r2, #8
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6999      	ldr	r1, [r3, #24]
 8004138:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800413a:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800413c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	438a      	bics	r2, r1
 8004142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004148:	430a      	orrs	r2, r1
 800414a:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800414c:	2000      	movs	r0, #0
      break;
 800414e:	e7c4      	b.n	80040da <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004150:	6838      	ldr	r0, [r7, #0]
 8004152:	f7ff fe87 	bl	8003e64 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	6999      	ldr	r1, [r3, #24]
 800415e:	430a      	orrs	r2, r1
 8004160:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	4917      	ldr	r1, [pc, #92]	; (80041c4 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8004166:	400a      	ands	r2, r1
 8004168:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800416a:	68e2      	ldr	r2, [r4, #12]
 800416c:	6999      	ldr	r1, [r3, #24]
 800416e:	0212      	lsls	r2, r2, #8
 8004170:	e7ea      	b.n	8004148 <HAL_TIM_PWM_ConfigChannel+0x94>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004172:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004174:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004176:	4914      	ldr	r1, [pc, #80]	; (80041c8 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8004178:	6a1a      	ldr	r2, [r3, #32]
 800417a:	400a      	ands	r2, r1
 800417c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800417e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004180:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004182:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004184:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 8004186:	6820      	ldr	r0, [r4, #0]
 8004188:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 800418a:	4810      	ldr	r0, [pc, #64]	; (80041cc <HAL_TIM_PWM_ConfigChannel+0x118>)
 800418c:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800418e:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8004190:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004192:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004194:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004196:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 8004198:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800419a:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419c:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 800419e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a0:	69da      	ldr	r2, [r3, #28]
 80041a2:	4316      	orrs	r6, r2
 80041a4:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	438a      	bics	r2, r1
 80041aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041b0:	430a      	orrs	r2, r1
 80041b2:	61da      	str	r2, [r3, #28]
 80041b4:	e7ca      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x98>
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	ffffefff 	.word	0xffffefff
 80041bc:	ffff8cff 	.word	0xffff8cff
 80041c0:	ffffdfff 	.word	0xffffdfff
 80041c4:	fffffbff 	.word	0xfffffbff
 80041c8:	fffffeff 	.word	0xfffffeff
 80041cc:	fffffdff 	.word	0xfffffdff

080041d0 <HAL_TIM_ConfigClockSource>:
{
 80041d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80041d2:	0005      	movs	r5, r0
 80041d4:	2202      	movs	r2, #2
 80041d6:	3538      	adds	r5, #56	; 0x38
 80041d8:	782c      	ldrb	r4, [r5, #0]
{
 80041da:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80041dc:	0010      	movs	r0, r2
 80041de:	2c01      	cmp	r4, #1
 80041e0:	d01d      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80041e2:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80041e4:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80041e6:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 80041e8:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80041ea:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80041ec:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ee:	4849      	ldr	r0, [pc, #292]	; (8004314 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr = htim->Instance->SMCR;
 80041f0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f2:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 80041f4:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80041f6:	680a      	ldr	r2, [r1, #0]
 80041f8:	2a60      	cmp	r2, #96	; 0x60
 80041fa:	d05d      	beq.n	80042b8 <HAL_TIM_ConfigClockSource+0xe8>
 80041fc:	d830      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x90>
 80041fe:	2a40      	cmp	r2, #64	; 0x40
 8004200:	d100      	bne.n	8004204 <HAL_TIM_ConfigClockSource+0x34>
 8004202:	e071      	b.n	80042e8 <HAL_TIM_ConfigClockSource+0x118>
 8004204:	d814      	bhi.n	8004230 <HAL_TIM_ConfigClockSource+0x60>
 8004206:	2a20      	cmp	r2, #32
 8004208:	d00c      	beq.n	8004224 <HAL_TIM_ConfigClockSource+0x54>
 800420a:	d809      	bhi.n	8004220 <HAL_TIM_ConfigClockSource+0x50>
 800420c:	2110      	movs	r1, #16
 800420e:	0010      	movs	r0, r2
 8004210:	4388      	bics	r0, r1
 8004212:	d007      	beq.n	8004224 <HAL_TIM_ConfigClockSource+0x54>
 8004214:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8004216:	2301      	movs	r3, #1
 8004218:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 800421a:	2300      	movs	r3, #0
 800421c:	702b      	strb	r3, [r5, #0]
}
 800421e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004220:	2a30      	cmp	r2, #48	; 0x30
 8004222:	d1f7      	bne.n	8004214 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 8004224:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004226:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004228:	4381      	bics	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800422a:	430a      	orrs	r2, r1
 800422c:	2107      	movs	r1, #7
 800422e:	e030      	b.n	8004292 <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8004230:	2a50      	cmp	r2, #80	; 0x50
 8004232:	d1ef      	bne.n	8004214 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004234:	6848      	ldr	r0, [r1, #4]
 8004236:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8004238:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423a:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800423c:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423e:	43a7      	bics	r7, r4
 8004240:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004242:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004244:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004246:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004248:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424a:	240a      	movs	r4, #10
 800424c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800424e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004252:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004254:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004256:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004258:	438a      	bics	r2, r1
 800425a:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800425c:	2257      	movs	r2, #87	; 0x57
 800425e:	e018      	b.n	8004292 <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8004260:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8004262:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8004264:	017f      	lsls	r7, r7, #5
 8004266:	42ba      	cmp	r2, r7
 8004268:	d0d5      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x46>
 800426a:	2080      	movs	r0, #128	; 0x80
 800426c:	0180      	lsls	r0, r0, #6
 800426e:	4282      	cmp	r2, r0
 8004270:	d013      	beq.n	800429a <HAL_TIM_ConfigClockSource+0xca>
 8004272:	0020      	movs	r0, r4
 8004274:	2a70      	cmp	r2, #112	; 0x70
 8004276:	d1ce      	bne.n	8004216 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8004278:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800427a:	4827      	ldr	r0, [pc, #156]	; (8004318 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800427c:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800427e:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004280:	688a      	ldr	r2, [r1, #8]
 8004282:	68c9      	ldr	r1, [r1, #12]
 8004284:	4322      	orrs	r2, r4
 8004286:	0209      	lsls	r1, r1, #8
 8004288:	430a      	orrs	r2, r1
 800428a:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800428c:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800428e:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8004290:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004292:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8004294:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004296:	609a      	str	r2, [r3, #8]
}
 8004298:	e7bd      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 800429a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	481e      	ldr	r0, [pc, #120]	; (8004318 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800429e:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a0:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a2:	688a      	ldr	r2, [r1, #8]
 80042a4:	68c9      	ldr	r1, [r1, #12]
 80042a6:	4322      	orrs	r2, r4
 80042a8:	0209      	lsls	r1, r1, #8
 80042aa:	430a      	orrs	r2, r1
 80042ac:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80042ae:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	6899      	ldr	r1, [r3, #8]
 80042b4:	01d2      	lsls	r2, r2, #7
 80042b6:	e7ec      	b.n	8004292 <HAL_TIM_ConfigClockSource+0xc2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b8:	2410      	movs	r4, #16
 80042ba:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042bc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042be:	43a0      	bics	r0, r4
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042c0:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c4:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042c6:	4f15      	ldr	r7, [pc, #84]	; (800431c <HAL_TIM_ConfigClockSource+0x14c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042c8:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ca:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042cc:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042ce:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80042d0:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80042d2:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042d4:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042d6:	43a0      	bics	r0, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80042d8:	0112      	lsls	r2, r2, #4
 80042da:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 80042dc:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80042de:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042e0:	438a      	bics	r2, r1
 80042e2:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e4:	2267      	movs	r2, #103	; 0x67
 80042e6:	e7d4      	b.n	8004292 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e8:	6848      	ldr	r0, [r1, #4]
 80042ea:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80042ec:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ee:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f0:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f2:	43a7      	bics	r7, r4
 80042f4:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f6:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80042f8:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042fa:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042fc:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fe:	240a      	movs	r4, #10
 8004300:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004302:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004304:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004306:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004308:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800430a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800430c:	438a      	bics	r2, r1
 800430e:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004310:	2247      	movs	r2, #71	; 0x47
 8004312:	e7be      	b.n	8004292 <HAL_TIM_ConfigClockSource+0xc2>
 8004314:	ffff0088 	.word	0xffff0088
 8004318:	ffff00ff 	.word	0xffff00ff
 800431c:	ffff0fff 	.word	0xffff0fff

08004320 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004320:	4770      	bx	lr

08004322 <TIM_DMADelayPulseCplt>:
{
 8004322:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004324:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004326:	6a22      	ldr	r2, [r4, #32]
 8004328:	4282      	cmp	r2, r0
 800432a:	d10d      	bne.n	8004348 <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800432c:	2301      	movs	r3, #1
 800432e:	7623      	strb	r3, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004330:	69d2      	ldr	r2, [r2, #28]
 8004332:	2a00      	cmp	r2, #0
 8004334:	d102      	bne.n	800433c <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	0022      	movs	r2, r4
 8004338:	323a      	adds	r2, #58	; 0x3a
 800433a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433c:	0020      	movs	r0, r4
 800433e:	f7ff ffef 	bl	8004320 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004342:	2300      	movs	r3, #0
 8004344:	7623      	strb	r3, [r4, #24]
}
 8004346:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800434a:	4283      	cmp	r3, r0
 800434c:	d109      	bne.n	8004362 <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800434e:	2202      	movs	r2, #2
 8004350:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f1      	bne.n	800433c <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	0023      	movs	r3, r4
 800435a:	3a01      	subs	r2, #1
 800435c:	333b      	adds	r3, #59	; 0x3b
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e7ec      	b.n	800433c <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004364:	4283      	cmp	r3, r0
 8004366:	d108      	bne.n	800437a <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004368:	2204      	movs	r2, #4
 800436a:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e4      	bne.n	800433c <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004372:	0023      	movs	r3, r4
 8004374:	3a03      	subs	r2, #3
 8004376:	333c      	adds	r3, #60	; 0x3c
 8004378:	e7f1      	b.n	800435e <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800437a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800437c:	4283      	cmp	r3, r0
 800437e:	d1dd      	bne.n	800433c <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004380:	2208      	movs	r2, #8
 8004382:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1d8      	bne.n	800433c <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	0023      	movs	r3, r4
 800438c:	3a07      	subs	r2, #7
 800438e:	333d      	adds	r3, #61	; 0x3d
 8004390:	e7e5      	b.n	800435e <TIM_DMADelayPulseCplt+0x3c>

08004392 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8004392:	4770      	bx	lr

08004394 <TIM_DMADelayPulseHalfCplt>:
{
 8004394:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004396:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004398:	6a23      	ldr	r3, [r4, #32]
 800439a:	4283      	cmp	r3, r0
 800439c:	d107      	bne.n	80043ae <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a0:	7623      	strb	r3, [r4, #24]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80043a2:	0020      	movs	r0, r4
 80043a4:	f7ff fff5 	bl	8004392 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a8:	2300      	movs	r3, #0
 80043aa:	7623      	strb	r3, [r4, #24]
}
 80043ac:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80043ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043b0:	4283      	cmp	r3, r0
 80043b2:	d101      	bne.n	80043b8 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b4:	2302      	movs	r3, #2
 80043b6:	e7f3      	b.n	80043a0 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80043b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043ba:	4283      	cmp	r3, r0
 80043bc:	d101      	bne.n	80043c2 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043be:	2304      	movs	r3, #4
 80043c0:	e7ee      	b.n	80043a0 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80043c4:	4283      	cmp	r3, r0
 80043c6:	d1ec      	bne.n	80043a2 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c8:	2308      	movs	r3, #8
 80043ca:	e7e9      	b.n	80043a0 <TIM_DMADelayPulseHalfCplt+0xc>

080043cc <HAL_TIM_ErrorCallback>:
 80043cc:	4770      	bx	lr

080043ce <TIM_DMAError>:
{
 80043ce:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80043d2:	6a23      	ldr	r3, [r4, #32]
 80043d4:	4283      	cmp	r3, r0
 80043d6:	d105      	bne.n	80043e4 <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043d8:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043da:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043dc:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043de:	323a      	adds	r2, #58	; 0x3a
    htim->State = HAL_TIM_STATE_READY;
 80043e0:	7013      	strb	r3, [r2, #0]
 80043e2:	e008      	b.n	80043f6 <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80043e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043e6:	4283      	cmp	r3, r0
 80043e8:	d10b      	bne.n	8004402 <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ea:	2302      	movs	r3, #2
 80043ec:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043ee:	0023      	movs	r3, r4
 80043f0:	2201      	movs	r2, #1
 80043f2:	333b      	adds	r3, #59	; 0x3b
 80043f4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 80043f6:	0020      	movs	r0, r4
 80043f8:	f7ff ffe8 	bl	80043cc <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fc:	2300      	movs	r3, #0
 80043fe:	7623      	strb	r3, [r4, #24]
}
 8004400:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004402:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004404:	2301      	movs	r3, #1
 8004406:	4282      	cmp	r2, r0
 8004408:	d104      	bne.n	8004414 <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800440a:	2204      	movs	r2, #4
 800440c:	7622      	strb	r2, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800440e:	0022      	movs	r2, r4
 8004410:	323c      	adds	r2, #60	; 0x3c
 8004412:	e7e5      	b.n	80043e0 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004414:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004416:	4282      	cmp	r2, r0
 8004418:	d104      	bne.n	8004424 <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800441a:	2208      	movs	r2, #8
 800441c:	7622      	strb	r2, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800441e:	0022      	movs	r2, r4
 8004420:	323d      	adds	r2, #61	; 0x3d
 8004422:	e7dd      	b.n	80043e0 <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 8004424:	0022      	movs	r2, r4
 8004426:	3239      	adds	r2, #57	; 0x39
 8004428:	e7da      	b.n	80043e0 <TIM_DMAError+0x12>
	...

0800442c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800442c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800442e:	0004      	movs	r4, r0
 8004430:	2202      	movs	r2, #2
 8004432:	3438      	adds	r4, #56	; 0x38
 8004434:	7825      	ldrb	r5, [r4, #0]
{
 8004436:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004438:	0010      	movs	r0, r2
 800443a:	2d01      	cmp	r5, #1
 800443c:	d020      	beq.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004440:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004442:	3539      	adds	r5, #57	; 0x39
 8004444:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800444a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800444c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800444e:	680e      	ldr	r6, [r1, #0]
 8004450:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004452:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004454:	2080      	movs	r0, #128	; 0x80
 8004456:	05c0      	lsls	r0, r0, #23
 8004458:	4283      	cmp	r3, r0
 800445a:	d008      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800445c:	4809      	ldr	r0, [pc, #36]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800445e:	4283      	cmp	r3, r0
 8004460:	d005      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004462:	4809      	ldr	r0, [pc, #36]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8004464:	4283      	cmp	r3, r0
 8004466:	d002      	beq.n	800446e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004468:	4808      	ldr	r0, [pc, #32]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800446a:	4283      	cmp	r3, r0
 800446c:	d104      	bne.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800446e:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004470:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004472:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004474:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004478:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800447a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800447c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800447e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004480:	bd70      	pop	{r4, r5, r6, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	40000400 	.word	0x40000400
 8004488:	40010800 	.word	0x40010800
 800448c:	40011400 	.word	0x40011400

08004490 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	if (SD_ff_hw.initialized)
 8004490:	4b02      	ldr	r3, [pc, #8]	; (800449c <disk_status+0xc>)
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	4243      	negs	r3, r0
 8004496:	4158      	adcs	r0, r3
 8004498:	b2c0      	uxtb	r0, r0
		return 0;

	return STA_NOINIT;
}
 800449a:	4770      	bx	lr
 800449c:	20000cc0 	.word	0x20000cc0

080044a0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80044a0:	b510      	push	{r4, lr}
	if (hwif_init(&SD_ff_hw) == 0)
 80044a2:	4803      	ldr	r0, [pc, #12]	; (80044b0 <disk_initialize+0x10>)
 80044a4:	f000 fa7e 	bl	80049a4 <hwif_init>
 80044a8:	1e43      	subs	r3, r0, #1
 80044aa:	4198      	sbcs	r0, r3
		return 0;

	return STA_NOINIT;
}
 80044ac:	b2c0      	uxtb	r0, r0
 80044ae:	bd10      	pop	{r4, pc}
 80044b0:	20000cc0 	.word	0x20000cc0

080044b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	0014      	movs	r4, r2
 80044b8:	000d      	movs	r5, r1
 80044ba:	189e      	adds	r6, r3, r2
	int i;

	for (i=0; i<count; i++)
 80044bc:	42b4      	cmp	r4, r6
 80044be:	d101      	bne.n	80044c4 <disk_read+0x10>
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
			return RES_ERROR;

	return RES_OK;
 80044c0:	2000      	movs	r0, #0
}
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
 80044c4:	002a      	movs	r2, r5
 80044c6:	0021      	movs	r1, r4
 80044c8:	4805      	ldr	r0, [pc, #20]	; (80044e0 <disk_read+0x2c>)
 80044ca:	f000 fb15 	bl	8004af8 <sd_read>
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	3401      	adds	r4, #1
 80044d4:	18ed      	adds	r5, r5, r3
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d0f0      	beq.n	80044bc <disk_read+0x8>
			return RES_ERROR;
 80044da:	2001      	movs	r0, #1
 80044dc:	e7f1      	b.n	80044c2 <disk_read+0xe>
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	20000cc0 	.word	0x20000cc0

080044e4 <crc7_one>:
	int i;
	const uint8_t g = 0x89;
	t ^= data;
	for (i=0; i<8; i++) {
		if (t & 0x80)
			t ^= g;
 80044e4:	2277      	movs	r2, #119	; 0x77
	t ^= data;
 80044e6:	2308      	movs	r3, #8
 80044e8:	4048      	eors	r0, r1
			t ^= g;
 80044ea:	4252      	negs	r2, r2
		if (t & 0x80)
 80044ec:	b241      	sxtb	r1, r0
 80044ee:	2900      	cmp	r1, #0
 80044f0:	da01      	bge.n	80044f6 <crc7_one+0x12>
			t ^= g;
 80044f2:	4050      	eors	r0, r2
 80044f4:	b2c0      	uxtb	r0, r0
		t <<= 1;
 80044f6:	0040      	lsls	r0, r0, #1
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b2c0      	uxtb	r0, r0
	for (i=0; i<8; i++) {
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f5      	bne.n	80044ec <crc7_one+0x8>
	}
	return t;
}
 8004500:	4770      	bx	lr
	...

08004504 <spi_txrx>:
{
 8004504:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t out = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	466a      	mov	r2, sp
{
 800450a:	210f      	movs	r1, #15
	uint8_t out = 0;
 800450c:	75d3      	strb	r3, [r2, #23]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 800450e:	2217      	movs	r2, #23
{
 8004510:	4469      	add	r1, sp
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8004512:	3b01      	subs	r3, #1
{
 8004514:	7008      	strb	r0, [r1, #0]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8004516:	446a      	add	r2, sp
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	4804      	ldr	r0, [pc, #16]	; (800452c <spi_txrx+0x28>)
 800451c:	3302      	adds	r3, #2
 800451e:	f7ff f9d5 	bl	80038cc <HAL_SPI_TransmitReceive>
	return out;
 8004522:	466b      	mov	r3, sp
 8004524:	7dd8      	ldrb	r0, [r3, #23]
}
 8004526:	b007      	add	sp, #28
 8004528:	bd00      	pop	{pc}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	200001a4 	.word	0x200001a4

08004530 <sd_cmd>:


/*** sd functions - on top of spi code ***/

static void sd_cmd(uint8_t cmd, uint32_t arg)
{
 8004530:	b570      	push	{r4, r5, r6, lr}
	uint8_t crc = 0;
	spi_txrx(0x40 | cmd);
 8004532:	2540      	movs	r5, #64	; 0x40
 8004534:	4305      	orrs	r5, r0
 8004536:	0028      	movs	r0, r5
{
 8004538:	000c      	movs	r4, r1
	spi_txrx(0x40 | cmd);
 800453a:	f7ff ffe3 	bl	8004504 <spi_txrx>
	crc = crc7_one(crc, 0x40 | cmd);
 800453e:	0029      	movs	r1, r5
 8004540:	2000      	movs	r0, #0
 8004542:	f7ff ffcf 	bl	80044e4 <crc7_one>
 8004546:	0005      	movs	r5, r0
	spi_txrx(arg >> 24);
 8004548:	0e26      	lsrs	r6, r4, #24
 800454a:	0030      	movs	r0, r6
 800454c:	f7ff ffda 	bl	8004504 <spi_txrx>
	crc = crc7_one(crc, arg >> 24);
 8004550:	0031      	movs	r1, r6
 8004552:	0028      	movs	r0, r5
 8004554:	f7ff ffc6 	bl	80044e4 <crc7_one>
 8004558:	0006      	movs	r6, r0
	spi_txrx(arg >> 16);
 800455a:	0c25      	lsrs	r5, r4, #16
 800455c:	b2ed      	uxtb	r5, r5
 800455e:	0028      	movs	r0, r5
 8004560:	f7ff ffd0 	bl	8004504 <spi_txrx>
	crc = crc7_one(crc, arg >> 16);
 8004564:	0029      	movs	r1, r5
 8004566:	0030      	movs	r0, r6
 8004568:	f7ff ffbc 	bl	80044e4 <crc7_one>
 800456c:	0006      	movs	r6, r0
	spi_txrx(arg >> 8);
 800456e:	0a25      	lsrs	r5, r4, #8
 8004570:	b2ed      	uxtb	r5, r5
 8004572:	0028      	movs	r0, r5
 8004574:	f7ff ffc6 	bl	8004504 <spi_txrx>
	crc = crc7_one(crc, arg >> 8);
 8004578:	0029      	movs	r1, r5
 800457a:	0030      	movs	r0, r6
 800457c:	f7ff ffb2 	bl	80044e4 <crc7_one>
 8004580:	0005      	movs	r5, r0
	spi_txrx(arg);
 8004582:	b2e4      	uxtb	r4, r4
 8004584:	0020      	movs	r0, r4
 8004586:	f7ff ffbd 	bl	8004504 <spi_txrx>
	crc = crc7_one(crc, arg);
 800458a:	0021      	movs	r1, r4
 800458c:	0028      	movs	r0, r5
 800458e:	f7ff ffa9 	bl	80044e4 <crc7_one>
	//spi_txrx(0x95);
	spi_txrx(crc | 0x1);	/* crc7, for cmd0 */
 8004592:	2301      	movs	r3, #1
 8004594:	4318      	orrs	r0, r3
 8004596:	b2c0      	uxtb	r0, r0
 8004598:	f7ff ffb4 	bl	8004504 <spi_txrx>
}
 800459c:	bd70      	pop	{r4, r5, r6, pc}
	...

080045a0 <sd_get_r1>:

static uint8_t sd_get_r1()
{
 80045a0:	b510      	push	{r4, lr}
	int tries = 1000;
	uint8_t r;

	while (tries--) {
 80045a2:	4c05      	ldr	r4, [pc, #20]	; (80045b8 <sd_get_r1+0x18>)
 80045a4:	3c01      	subs	r4, #1
		r = spi_txrx(0xff);
 80045a6:	20ff      	movs	r0, #255	; 0xff
	while (tries--) {
 80045a8:	2c00      	cmp	r4, #0
 80045aa:	d003      	beq.n	80045b4 <sd_get_r1+0x14>
		r = spi_txrx(0xff);
 80045ac:	f7ff ffaa 	bl	8004504 <spi_txrx>
		if ((r & 0x80) == 0)
 80045b0:	0603      	lsls	r3, r0, #24
 80045b2:	d4f7      	bmi.n	80045a4 <sd_get_r1+0x4>
			return r;
	}
	return 0xff;
}
 80045b4:	bd10      	pop	{r4, pc}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	000003e9 	.word	0x000003e9

080045bc <sd_nec>:


/* Nec (=Ncr? which is limited to [0,8]) dummy bytes before lowering CS,
 * as described in sandisk doc, 5.4. */
static void sd_nec()
{
 80045bc:	b510      	push	{r4, lr}
 80045be:	2408      	movs	r4, #8
	int i;
	for (i=0; i<8; i++)
		spi_txrx(0xff);
 80045c0:	20ff      	movs	r0, #255	; 0xff
 80045c2:	3c01      	subs	r4, #1
 80045c4:	f7ff ff9e 	bl	8004504 <spi_txrx>
	for (i=0; i<8; i++)
 80045c8:	2c00      	cmp	r4, #0
 80045ca:	d1f9      	bne.n	80045c0 <sd_nec+0x4>
}
 80045cc:	bd10      	pop	{r4, pc}

080045ce <sd_get_r7>:
{
 80045ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d0:	0006      	movs	r6, r0
	r = sd_get_r1();
 80045d2:	f7ff ffe5 	bl	80045a0 <sd_get_r1>
 80045d6:	0005      	movs	r5, r0
	if (r != 0x01)
 80045d8:	2801      	cmp	r0, #1
 80045da:	d113      	bne.n	8004604 <sd_get_r7+0x36>
	r = spi_txrx(0xff) << 24;
 80045dc:	20ff      	movs	r0, #255	; 0xff
 80045de:	f7ff ff91 	bl	8004504 <spi_txrx>
 80045e2:	0604      	lsls	r4, r0, #24
	r |= spi_txrx(0xff) << 16;
 80045e4:	20ff      	movs	r0, #255	; 0xff
 80045e6:	f7ff ff8d 	bl	8004504 <spi_txrx>
 80045ea:	0407      	lsls	r7, r0, #16
	r |= spi_txrx(0xff) << 8;
 80045ec:	20ff      	movs	r0, #255	; 0xff
 80045ee:	f7ff ff89 	bl	8004504 <spi_txrx>
	r |= spi_txrx(0xff) << 16;
 80045f2:	4327      	orrs	r7, r4
	r |= spi_txrx(0xff) << 8;
 80045f4:	0004      	movs	r4, r0
	r |= spi_txrx(0xff);
 80045f6:	20ff      	movs	r0, #255	; 0xff
 80045f8:	f7ff ff84 	bl	8004504 <spi_txrx>
	r |= spi_txrx(0xff) << 8;
 80045fc:	0224      	lsls	r4, r4, #8
 80045fe:	4307      	orrs	r7, r0
	r |= spi_txrx(0xff);
 8004600:	433c      	orrs	r4, r7
	*r7 = r;
 8004602:	6034      	str	r4, [r6, #0]
}
 8004604:	0028      	movs	r0, r5
 8004606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004608 <sd_read_status.isra.0>:

static int sd_read_status(hwif *hw)
{
	uint16_t r2;

	spi_cs_low();
 8004608:	2180      	movs	r1, #128	; 0x80
 800460a:	20a0      	movs	r0, #160	; 0xa0
static int sd_read_status(hwif *hw)
 800460c:	b570      	push	{r4, r5, r6, lr}
	spi_cs_low();
 800460e:	2200      	movs	r2, #0
 8004610:	0209      	lsls	r1, r1, #8
 8004612:	05c0      	lsls	r0, r0, #23
 8004614:	f7fe fc1e 	bl	8002e54 <HAL_GPIO_WritePin>
	sd_cmd(13, 0);
 8004618:	2100      	movs	r1, #0
 800461a:	200d      	movs	r0, #13
 800461c:	f7ff ff88 	bl	8004530 <sd_cmd>
	while (tries--) {
 8004620:	4d0b      	ldr	r5, [pc, #44]	; (8004650 <sd_read_status.isra.0+0x48>)
 8004622:	3d01      	subs	r5, #1
 8004624:	2d00      	cmp	r5, #0
 8004626:	d10a      	bne.n	800463e <sd_read_status.isra.0+0x36>
	r2 = sd_get_r2();
	sd_nec();
 8004628:	f7ff ffc8 	bl	80045bc <sd_nec>
	spi_cs_high();
 800462c:	2180      	movs	r1, #128	; 0x80
 800462e:	20a0      	movs	r0, #160	; 0xa0
 8004630:	2201      	movs	r2, #1
 8004632:	0209      	lsls	r1, r1, #8
 8004634:	05c0      	lsls	r0, r0, #23
 8004636:	f7fe fc0d 	bl	8002e54 <HAL_GPIO_WritePin>
	if (r2 & 0x8000)
		return -1;
	if (r2)

	return 0;
}
 800463a:	2000      	movs	r0, #0
 800463c:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 800463e:	20ff      	movs	r0, #255	; 0xff
 8004640:	f7ff ff60 	bl	8004504 <spi_txrx>
		if ((r & 0x80) == 0)
 8004644:	0603      	lsls	r3, r0, #24
 8004646:	d4ec      	bmi.n	8004622 <sd_read_status.isra.0+0x1a>
	r = r<<8 | spi_txrx(0xff);
 8004648:	20ff      	movs	r0, #255	; 0xff
 800464a:	f7ff ff5b 	bl	8004504 <spi_txrx>
	return r;
 800464e:	e7eb      	b.n	8004628 <sd_read_status.isra.0+0x20>
 8004650:	000003e9 	.word	0x000003e9

08004654 <sd_get_data.isra.0>:

/* 0xfe marks data start, then len bytes of data and crc16 */
static int sd_get_data(hwif *hw, uint8_t *buf, int len)
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	0005      	movs	r5, r0
 8004658:	000c      	movs	r4, r1
 800465a:	4e0c      	ldr	r6, [pc, #48]	; (800468c <sd_get_data.isra.0+0x38>)
	uint8_t r;
	uint16_t _crc16;
	uint16_t calc_crc;
	int i;

	while (tries--) {
 800465c:	3e01      	subs	r6, #1
 800465e:	2e00      	cmp	r6, #0
 8004660:	d102      	bne.n	8004668 <sd_get_data.isra.0+0x14>
		r = spi_txrx(0xff);
		if (r == 0xfe)
			break;
	}
	if (tries < 0)
		return -1;
 8004662:	2001      	movs	r0, #1
 8004664:	4240      	negs	r0, r0
	//if (_crc16 != calc_crc) {
	//	return -1;
	//}

	return 0;
}
 8004666:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 8004668:	20ff      	movs	r0, #255	; 0xff
 800466a:	f7ff ff4b 	bl	8004504 <spi_txrx>
		if (r == 0xfe)
 800466e:	28fe      	cmp	r0, #254	; 0xfe
 8004670:	d1f4      	bne.n	800465c <sd_get_data.isra.0+0x8>
	dma_complete = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	4e06      	ldr	r6, [pc, #24]	; (8004690 <sd_get_data.isra.0+0x3c>)
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 8004676:	0029      	movs	r1, r5
 8004678:	4806      	ldr	r0, [pc, #24]	; (8004694 <sd_get_data.isra.0+0x40>)
 800467a:	b2a2      	uxth	r2, r4
	dma_complete = 0;
 800467c:	7033      	strb	r3, [r6, #0]
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 800467e:	f7ff faa5 	bl	8003bcc <HAL_SPI_Receive_DMA>
	while (dma_complete == 0);
 8004682:	7833      	ldrb	r3, [r6, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0fc      	beq.n	8004682 <sd_get_data.isra.0+0x2e>
 8004688:	2000      	movs	r0, #0
 800468a:	e7ec      	b.n	8004666 <sd_get_data.isra.0+0x12>
 800468c:	00004e21 	.word	0x00004e21
 8004690:	20000ca4 	.word	0x20000ca4
 8004694:	200001a4 	.word	0x200001a4

08004698 <sd_readsector.isra.0>:

	return 0;
}


static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	0005      	movs	r5, r0
 800469c:	000c      	movs	r4, r1
{
	int r;

	spi_cs_low();
 800469e:	20a0      	movs	r0, #160	; 0xa0
 80046a0:	2180      	movs	r1, #128	; 0x80
static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
 80046a2:	0016      	movs	r6, r2
	spi_cs_low();
 80046a4:	0209      	lsls	r1, r1, #8
 80046a6:	2200      	movs	r2, #0
 80046a8:	05c0      	lsls	r0, r0, #23
 80046aa:	f7fe fbd3 	bl	8002e54 <HAL_GPIO_WritePin>
	if (hw->capabilities & CAP_SDHC)
 80046ae:	682b      	ldr	r3, [r5, #0]
		sd_cmd(17, address); /* read single block */
 80046b0:	0021      	movs	r1, r4
	if (hw->capabilities & CAP_SDHC)
 80046b2:	079b      	lsls	r3, r3, #30
 80046b4:	d400      	bmi.n	80046b8 <sd_readsector.isra.0+0x20>
	else
		sd_cmd(17, address*512); /* read single block */
 80046b6:	0261      	lsls	r1, r4, #9
 80046b8:	2011      	movs	r0, #17
 80046ba:	f7ff ff39 	bl	8004530 <sd_cmd>

	r = sd_get_r1();
 80046be:	f7ff ff6f 	bl	80045a0 <sd_get_r1>
	if (r == 0xff) {
 80046c2:	28ff      	cmp	r0, #255	; 0xff
 80046c4:	d109      	bne.n	80046da <sd_readsector.isra.0+0x42>
		spi_cs_high();
 80046c6:	2180      	movs	r1, #128	; 0x80
 80046c8:	20a0      	movs	r0, #160	; 0xa0
 80046ca:	2201      	movs	r2, #1
 80046cc:	05c0      	lsls	r0, r0, #23
 80046ce:	0209      	lsls	r1, r1, #8
 80046d0:	f7fe fbc0 	bl	8002e54 <HAL_GPIO_WritePin>
		r = -1;
 80046d4:	2001      	movs	r0, #1

	r = sd_get_data(hw, buf, 512);
	sd_nec();
	spi_cs_high();
	if (r == -1) {
		r = -3;
 80046d6:	4240      	negs	r0, r0
	}

	return 0;
 fail:
	return r;
}
 80046d8:	bd70      	pop	{r4, r5, r6, pc}
	if (r & 0xfe) {
 80046da:	2501      	movs	r5, #1
 80046dc:	43a8      	bics	r0, r5
 80046de:	b2c4      	uxtb	r4, r0
 80046e0:	2c00      	cmp	r4, #0
 80046e2:	d008      	beq.n	80046f6 <sd_readsector.isra.0+0x5e>
		spi_cs_high();
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	20a0      	movs	r0, #160	; 0xa0
 80046e8:	002a      	movs	r2, r5
 80046ea:	05c0      	lsls	r0, r0, #23
 80046ec:	0209      	lsls	r1, r1, #8
 80046ee:	f7fe fbb1 	bl	8002e54 <HAL_GPIO_WritePin>
		r = -2;
 80046f2:	2002      	movs	r0, #2
 80046f4:	e7ef      	b.n	80046d6 <sd_readsector.isra.0+0x3e>
	r = sd_get_data(hw, buf, 512);
 80046f6:	2180      	movs	r1, #128	; 0x80
 80046f8:	0030      	movs	r0, r6
 80046fa:	0089      	lsls	r1, r1, #2
 80046fc:	f7ff ffaa 	bl	8004654 <sd_get_data.isra.0>
 8004700:	0006      	movs	r6, r0
	sd_nec();
 8004702:	f7ff ff5b 	bl	80045bc <sd_nec>
	spi_cs_high();
 8004706:	2180      	movs	r1, #128	; 0x80
 8004708:	20a0      	movs	r0, #160	; 0xa0
 800470a:	002a      	movs	r2, r5
 800470c:	05c0      	lsls	r0, r0, #23
 800470e:	0209      	lsls	r1, r1, #8
 8004710:	f7fe fba0 	bl	8002e54 <HAL_GPIO_WritePin>
	return 0;
 8004714:	0020      	movs	r0, r4
	if (r == -1) {
 8004716:	1c73      	adds	r3, r6, #1
 8004718:	d1de      	bne.n	80046d8 <sd_readsector.isra.0+0x40>
		r = -3;
 800471a:	2003      	movs	r0, #3
 800471c:	e7db      	b.n	80046d6 <sd_readsector.isra.0+0x3e>
	...

08004720 <sd_init.isra.0>:
	hw->capabilities = 0;
 8004720:	2300      	movs	r3, #0
static int sd_init(hwif *hw)
 8004722:	b5f0      	push	{r4, r5, r6, r7, lr}
	hw->capabilities = 0;
 8004724:	6003      	str	r3, [r0, #0]
static int sd_init(hwif *hw)
 8004726:	0004      	movs	r4, r0
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8004728:	489c      	ldr	r0, [pc, #624]	; (800499c <sd_init.isra.0+0x27c>)
 800472a:	3320      	adds	r3, #32
static int sd_init(hwif *hw)
 800472c:	b085      	sub	sp, #20
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 800472e:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8004730:	f7ff f86a 	bl	8003808 <HAL_SPI_Init>
	spi_cs_high();
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	20a0      	movs	r0, #160	; 0xa0
 8004738:	2201      	movs	r2, #1
 800473a:	0209      	lsls	r1, r1, #8
 800473c:	05c0      	lsls	r0, r0, #23
 800473e:	f7fe fb89 	bl	8002e54 <HAL_GPIO_WritePin>
 8004742:	260a      	movs	r6, #10
		spi_txrx(0xff);
 8004744:	20ff      	movs	r0, #255	; 0xff
 8004746:	3e01      	subs	r6, #1
 8004748:	f7ff fedc 	bl	8004504 <spi_txrx>
	for (i=0; i<10; i++)
 800474c:	2e00      	cmp	r6, #0
 800474e:	d1f9      	bne.n	8004744 <sd_init.isra.0+0x24>
	spi_cs_low();
 8004750:	2180      	movs	r1, #128	; 0x80
 8004752:	20a0      	movs	r0, #160	; 0xa0
 8004754:	0032      	movs	r2, r6
 8004756:	0209      	lsls	r1, r1, #8
 8004758:	05c0      	lsls	r0, r0, #23
 800475a:	f7fe fb7b 	bl	8002e54 <HAL_GPIO_WritePin>
	sd_cmd(0, 0);
 800475e:	0031      	movs	r1, r6
 8004760:	0030      	movs	r0, r6
 8004762:	f7ff fee5 	bl	8004530 <sd_cmd>
	r = sd_get_r1();
 8004766:	f7ff ff1b 	bl	80045a0 <sd_get_r1>
 800476a:	0005      	movs	r5, r0
	sd_nec();
 800476c:	f7ff ff26 	bl	80045bc <sd_nec>
	spi_cs_high();
 8004770:	2180      	movs	r1, #128	; 0x80
 8004772:	20a0      	movs	r0, #160	; 0xa0
 8004774:	2201      	movs	r2, #1
 8004776:	0209      	lsls	r1, r1, #8
 8004778:	05c0      	lsls	r0, r0, #23
 800477a:	f7fe fb6b 	bl	8002e54 <HAL_GPIO_WritePin>
	if (r == 0xff)
 800477e:	2dff      	cmp	r5, #255	; 0xff
 8004780:	d104      	bne.n	800478c <sd_init.isra.0+0x6c>
	return -1;
 8004782:	2501      	movs	r5, #1
	return -2;
 8004784:	426d      	negs	r5, r5
}
 8004786:	0028      	movs	r0, r5
 8004788:	b005      	add	sp, #20
 800478a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (r != 0x01) {
 800478c:	2d01      	cmp	r5, #1
 800478e:	d001      	beq.n	8004794 <sd_init.isra.0+0x74>
	return -2;
 8004790:	2502      	movs	r5, #2
 8004792:	e7f7      	b.n	8004784 <sd_init.isra.0+0x64>
	spi_cs_low();
 8004794:	2180      	movs	r1, #128	; 0x80
 8004796:	20a0      	movs	r0, #160	; 0xa0
 8004798:	0032      	movs	r2, r6
 800479a:	0209      	lsls	r1, r1, #8
 800479c:	05c0      	lsls	r0, r0, #23
 800479e:	f7fe fb59 	bl	8002e54 <HAL_GPIO_WritePin>
	sd_cmd(8, 0x1aa /* VHS = 1 */);
 80047a2:	21d5      	movs	r1, #213	; 0xd5
 80047a4:	2008      	movs	r0, #8
 80047a6:	0049      	lsls	r1, r1, #1
 80047a8:	f7ff fec2 	bl	8004530 <sd_cmd>
	r = sd_get_r7(&r7);
 80047ac:	a802      	add	r0, sp, #8
 80047ae:	f7ff ff0e 	bl	80045ce <sd_get_r7>
 80047b2:	0007      	movs	r7, r0
	sd_nec();
 80047b4:	f7ff ff02 	bl	80045bc <sd_nec>
	spi_cs_high();
 80047b8:	2180      	movs	r1, #128	; 0x80
 80047ba:	20a0      	movs	r0, #160	; 0xa0
 80047bc:	002a      	movs	r2, r5
 80047be:	0209      	lsls	r1, r1, #8
 80047c0:	05c0      	lsls	r0, r0, #23
 80047c2:	f7fe fb47 	bl	8002e54 <HAL_GPIO_WritePin>
	hw->capabilities |= CAP_VER2_00;
 80047c6:	002a      	movs	r2, r5
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	431a      	orrs	r2, r3
 80047cc:	6022      	str	r2, [r4, #0]
	if (r == 0xff)
 80047ce:	2fff      	cmp	r7, #255	; 0xff
 80047d0:	d0d7      	beq.n	8004782 <sd_init.isra.0+0x62>
	if (r == 0x01)
 80047d2:	2f01      	cmp	r7, #1
 80047d4:	d003      	beq.n	80047de <sd_init.isra.0+0xbe>
	else if (r & 0x4) {
 80047d6:	077a      	lsls	r2, r7, #29
 80047d8:	d5da      	bpl.n	8004790 <sd_init.isra.0+0x70>
		hw->capabilities &= ~CAP_VER2_00;
 80047da:	43ab      	bics	r3, r5
 80047dc:	6023      	str	r3, [r4, #0]
	spi_cs_low();
 80047de:	2180      	movs	r1, #128	; 0x80
 80047e0:	20a0      	movs	r0, #160	; 0xa0
 80047e2:	2200      	movs	r2, #0
 80047e4:	0209      	lsls	r1, r1, #8
 80047e6:	05c0      	lsls	r0, r0, #23
 80047e8:	f7fe fb34 	bl	8002e54 <HAL_GPIO_WritePin>
	sd_cmd(58, 0);
 80047ec:	2100      	movs	r1, #0
 80047ee:	203a      	movs	r0, #58	; 0x3a
 80047f0:	f7ff fe9e 	bl	8004530 <sd_cmd>
	r = sd_get_r3(&r3);
 80047f4:	a803      	add	r0, sp, #12
 80047f6:	f7ff feea 	bl	80045ce <sd_get_r7>
 80047fa:	0005      	movs	r5, r0
	sd_nec();
 80047fc:	f7ff fede 	bl	80045bc <sd_nec>
	spi_cs_high();
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	20a0      	movs	r0, #160	; 0xa0
 8004804:	2201      	movs	r2, #1
 8004806:	0209      	lsls	r1, r1, #8
 8004808:	05c0      	lsls	r0, r0, #23
 800480a:	f7fe fb23 	bl	8002e54 <HAL_GPIO_WritePin>
	if (r == 0xff)
 800480e:	2dff      	cmp	r5, #255	; 0xff
 8004810:	d0b7      	beq.n	8004782 <sd_init.isra.0+0x62>
	if (r != 0x01 && !(r & 0x4)) { /* allow it to not be implemented - old cards */
 8004812:	2d01      	cmp	r5, #1
 8004814:	d001      	beq.n	800481a <sd_init.isra.0+0xfa>
 8004816:	076b      	lsls	r3, r5, #29
 8004818:	d5ba      	bpl.n	8004790 <sd_init.isra.0+0x70>
	if (hw->capabilities & CAP_VER2_00)
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	07db      	lsls	r3, r3, #31
 800481e:	d501      	bpl.n	8004824 <sd_init.isra.0+0x104>
		hcs = 1<<30;
 8004820:	2680      	movs	r6, #128	; 0x80
 8004822:	05f6      	lsls	r6, r6, #23
 8004824:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <sd_init.isra.0+0x280>)
 8004826:	9301      	str	r3, [sp, #4]
		spi_cs_low();
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	20a0      	movs	r0, #160	; 0xa0
 800482c:	2200      	movs	r2, #0
 800482e:	0209      	lsls	r1, r1, #8
 8004830:	05c0      	lsls	r0, r0, #23
 8004832:	f7fe fb0f 	bl	8002e54 <HAL_GPIO_WritePin>
		sd_cmd(55, 0);
 8004836:	2100      	movs	r1, #0
 8004838:	2037      	movs	r0, #55	; 0x37
 800483a:	f7ff fe79 	bl	8004530 <sd_cmd>
		r = sd_get_r1();
 800483e:	f7ff feaf 	bl	80045a0 <sd_get_r1>
 8004842:	0005      	movs	r5, r0
		sd_nec();
 8004844:	f7ff feba 	bl	80045bc <sd_nec>
		spi_cs_high();
 8004848:	2180      	movs	r1, #128	; 0x80
 800484a:	20a0      	movs	r0, #160	; 0xa0
 800484c:	2201      	movs	r2, #1
 800484e:	0209      	lsls	r1, r1, #8
 8004850:	05c0      	lsls	r0, r0, #23
 8004852:	f7fe faff 	bl	8002e54 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8004856:	2dff      	cmp	r5, #255	; 0xff
 8004858:	d100      	bne.n	800485c <sd_init.isra.0+0x13c>
 800485a:	e792      	b.n	8004782 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 800485c:	2701      	movs	r7, #1
 800485e:	43bd      	bics	r5, r7
 8004860:	b2ea      	uxtb	r2, r5
 8004862:	2a00      	cmp	r2, #0
 8004864:	d194      	bne.n	8004790 <sd_init.isra.0+0x70>
		spi_cs_low();
 8004866:	2180      	movs	r1, #128	; 0x80
 8004868:	20a0      	movs	r0, #160	; 0xa0
 800486a:	0209      	lsls	r1, r1, #8
 800486c:	05c0      	lsls	r0, r0, #23
 800486e:	f7fe faf1 	bl	8002e54 <HAL_GPIO_WritePin>
		sd_cmd(41, hcs);
 8004872:	0031      	movs	r1, r6
 8004874:	2029      	movs	r0, #41	; 0x29
 8004876:	f7ff fe5b 	bl	8004530 <sd_cmd>
		r = sd_get_r1();
 800487a:	f7ff fe91 	bl	80045a0 <sd_get_r1>
 800487e:	0005      	movs	r5, r0
		sd_nec();
 8004880:	f7ff fe9c 	bl	80045bc <sd_nec>
		spi_cs_high();
 8004884:	2180      	movs	r1, #128	; 0x80
 8004886:	20a0      	movs	r0, #160	; 0xa0
 8004888:	003a      	movs	r2, r7
 800488a:	0209      	lsls	r1, r1, #8
 800488c:	05c0      	lsls	r0, r0, #23
 800488e:	f7fe fae1 	bl	8002e54 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8004892:	2dff      	cmp	r5, #255	; 0xff
 8004894:	d100      	bne.n	8004898 <sd_init.isra.0+0x178>
 8004896:	e774      	b.n	8004782 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 8004898:	002b      	movs	r3, r5
 800489a:	43bb      	bics	r3, r7
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d000      	beq.n	80048a4 <sd_init.isra.0+0x184>
 80048a2:	e775      	b.n	8004790 <sd_init.isra.0+0x70>
	} while (r != 0 && tries--);
 80048a4:	2d00      	cmp	r5, #0
 80048a6:	d023      	beq.n	80048f0 <sd_init.isra.0+0x1d0>
 80048a8:	9b01      	ldr	r3, [sp, #4]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	9301      	str	r3, [sp, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ba      	bne.n	8004828 <sd_init.isra.0+0x108>
 80048b2:	e76d      	b.n	8004790 <sd_init.isra.0+0x70>
		spi_cs_low();
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	20a0      	movs	r0, #160	; 0xa0
 80048b8:	0209      	lsls	r1, r1, #8
 80048ba:	05c0      	lsls	r0, r0, #23
 80048bc:	f7fe faca 	bl	8002e54 <HAL_GPIO_WritePin>
		sd_cmd(16, 512);
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	2010      	movs	r0, #16
 80048c4:	0089      	lsls	r1, r1, #2
 80048c6:	f7ff fe33 	bl	8004530 <sd_cmd>
		r = sd_get_r1();
 80048ca:	f7ff fe69 	bl	80045a0 <sd_get_r1>
 80048ce:	0004      	movs	r4, r0
		sd_nec();
 80048d0:	f7ff fe74 	bl	80045bc <sd_nec>
		spi_cs_high();
 80048d4:	2180      	movs	r1, #128	; 0x80
 80048d6:	20a0      	movs	r0, #160	; 0xa0
 80048d8:	2201      	movs	r2, #1
 80048da:	0209      	lsls	r1, r1, #8
 80048dc:	05c0      	lsls	r0, r0, #23
 80048de:	f7fe fab9 	bl	8002e54 <HAL_GPIO_WritePin>
		if (r == 0xff)
 80048e2:	2cff      	cmp	r4, #255	; 0xff
 80048e4:	d100      	bne.n	80048e8 <sd_init.isra.0+0x1c8>
 80048e6:	e74c      	b.n	8004782 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 80048e8:	23fe      	movs	r3, #254	; 0xfe
 80048ea:	421c      	tst	r4, r3
 80048ec:	d031      	beq.n	8004952 <sd_init.isra.0+0x232>
 80048ee:	e74f      	b.n	8004790 <sd_init.isra.0+0x70>
	if (hw->capabilities & CAP_VER2_00) {
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	423b      	tst	r3, r7
 80048f4:	d027      	beq.n	8004946 <sd_init.isra.0+0x226>
		spi_cs_low();
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	20a0      	movs	r0, #160	; 0xa0
 80048fa:	002a      	movs	r2, r5
 80048fc:	0209      	lsls	r1, r1, #8
 80048fe:	05c0      	lsls	r0, r0, #23
 8004900:	f7fe faa8 	bl	8002e54 <HAL_GPIO_WritePin>
		sd_cmd(58, 0);
 8004904:	0029      	movs	r1, r5
 8004906:	203a      	movs	r0, #58	; 0x3a
 8004908:	f7ff fe12 	bl	8004530 <sd_cmd>
		r = sd_get_r3(&r3);
 800490c:	a803      	add	r0, sp, #12
 800490e:	f7ff fe5e 	bl	80045ce <sd_get_r7>
 8004912:	0006      	movs	r6, r0
		sd_nec();
 8004914:	f7ff fe52 	bl	80045bc <sd_nec>
		spi_cs_high();
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	20a0      	movs	r0, #160	; 0xa0
 800491c:	003a      	movs	r2, r7
 800491e:	0209      	lsls	r1, r1, #8
 8004920:	05c0      	lsls	r0, r0, #23
 8004922:	f7fe fa97 	bl	8002e54 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8004926:	2eff      	cmp	r6, #255	; 0xff
 8004928:	d100      	bne.n	800492c <sd_init.isra.0+0x20c>
 800492a:	e72a      	b.n	8004782 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 800492c:	43be      	bics	r6, r7
 800492e:	b2f6      	uxtb	r6, r6
 8004930:	2e00      	cmp	r6, #0
 8004932:	d000      	beq.n	8004936 <sd_init.isra.0+0x216>
 8004934:	e72c      	b.n	8004790 <sd_init.isra.0+0x70>
			if (r3>>30 & 1) {
 8004936:	9b03      	ldr	r3, [sp, #12]
 8004938:	0f9b      	lsrs	r3, r3, #30
 800493a:	423b      	tst	r3, r7
 800493c:	d003      	beq.n	8004946 <sd_init.isra.0+0x226>
				hw->capabilities |= CAP_SDHC;
 800493e:	2302      	movs	r3, #2
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	6023      	str	r3, [r4, #0]
	if ((hw->capabilities & CAP_SDHC) == 0) {
 8004946:	6821      	ldr	r1, [r4, #0]
 8004948:	2302      	movs	r3, #2
 800494a:	000a      	movs	r2, r1
 800494c:	401a      	ands	r2, r3
 800494e:	4219      	tst	r1, r3
 8004950:	d0b0      	beq.n	80048b4 <sd_init.isra.0+0x194>
	spi_cs_low();
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	20a0      	movs	r0, #160	; 0xa0
 8004956:	2200      	movs	r2, #0
 8004958:	0209      	lsls	r1, r1, #8
 800495a:	05c0      	lsls	r0, r0, #23
 800495c:	f7fe fa7a 	bl	8002e54 <HAL_GPIO_WritePin>
	sd_cmd(59, 0);
 8004960:	2100      	movs	r1, #0
 8004962:	203b      	movs	r0, #59	; 0x3b
 8004964:	f7ff fde4 	bl	8004530 <sd_cmd>
	r = sd_get_r1();
 8004968:	f7ff fe1a 	bl	80045a0 <sd_get_r1>
 800496c:	0004      	movs	r4, r0
	sd_nec();
 800496e:	f7ff fe25 	bl	80045bc <sd_nec>
	spi_cs_high();
 8004972:	2180      	movs	r1, #128	; 0x80
 8004974:	20a0      	movs	r0, #160	; 0xa0
 8004976:	2201      	movs	r2, #1
 8004978:	0209      	lsls	r1, r1, #8
 800497a:	05c0      	lsls	r0, r0, #23
 800497c:	f7fe fa6a 	bl	8002e54 <HAL_GPIO_WritePin>
	if (r == 0xff)
 8004980:	2cff      	cmp	r4, #255	; 0xff
 8004982:	d100      	bne.n	8004986 <sd_init.isra.0+0x266>
 8004984:	e6fd      	b.n	8004782 <sd_init.isra.0+0x62>
	if (r & 0xfe) {
 8004986:	23fe      	movs	r3, #254	; 0xfe
 8004988:	0022      	movs	r2, r4
 800498a:	401a      	ands	r2, r3
 800498c:	421c      	tst	r4, r3
 800498e:	d000      	beq.n	8004992 <sd_init.isra.0+0x272>
 8004990:	e6fe      	b.n	8004790 <sd_init.isra.0+0x70>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8004992:	4802      	ldr	r0, [pc, #8]	; (800499c <sd_init.isra.0+0x27c>)
 8004994:	61c2      	str	r2, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8004996:	f7fe ff37 	bl	8003808 <HAL_SPI_Init>
}
 800499a:	e6f4      	b.n	8004786 <sd_init.isra.0+0x66>
 800499c:	200001a4 	.word	0x200001a4
 80049a0:	000003e9 	.word	0x000003e9

080049a4 <hwif_init>:


/*** public API - on top of sd/spi code ***/

int hwif_init(hwif* hw)
{
 80049a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int tries = 10;

	if (hw->initialized)
		return 0;
 80049a6:	2500      	movs	r5, #0
	if (hw->initialized)
 80049a8:	6803      	ldr	r3, [r0, #0]
{
 80049aa:	0004      	movs	r4, r0
	if (hw->initialized)
 80049ac:	42ab      	cmp	r3, r5
 80049ae:	d10a      	bne.n	80049c6 <hwif_init+0x22>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80049b0:	2320      	movs	r3, #32
 80049b2:	4850      	ldr	r0, [pc, #320]	; (8004af4 <hwif_init+0x150>)
}
 80049b4:	260b      	movs	r6, #11
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80049b6:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 80049b8:	f7fe ff26 	bl	8003808 <HAL_SPI_Init>

	spi_init();

	while (tries--) {
 80049bc:	3e01      	subs	r6, #1
 80049be:	2e00      	cmp	r6, #0
 80049c0:	d104      	bne.n	80049cc <hwif_init+0x28>
	/* read status register */
	sd_read_status(hw);

	sd_read_cid(hw);
	if (sd_read_csd(hw) != 0)
		return -1;
 80049c2:	2501      	movs	r5, #1
 80049c4:	426d      	negs	r5, r5

	hw->initialized = 1;
	return 0;
}
 80049c6:	0028      	movs	r0, r5
 80049c8:	b004      	add	sp, #16
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_init(hw) == 0)
 80049cc:	0020      	movs	r0, r4
 80049ce:	300c      	adds	r0, #12
 80049d0:	f7ff fea6 	bl	8004720 <sd_init.isra.0>
 80049d4:	1e05      	subs	r5, r0, #0
 80049d6:	d1f1      	bne.n	80049bc <hwif_init+0x18>
	sd_read_status(hw);
 80049d8:	f7ff fe16 	bl	8004608 <sd_read_status.isra.0>
	spi_cs_low();
 80049dc:	2180      	movs	r1, #128	; 0x80
 80049de:	20a0      	movs	r0, #160	; 0xa0
 80049e0:	002a      	movs	r2, r5
 80049e2:	0209      	lsls	r1, r1, #8
 80049e4:	05c0      	lsls	r0, r0, #23
 80049e6:	f7fe fa35 	bl	8002e54 <HAL_GPIO_WritePin>
	sd_cmd(10, 0);
 80049ea:	0029      	movs	r1, r5
 80049ec:	200a      	movs	r0, #10
 80049ee:	f7ff fd9f 	bl	8004530 <sd_cmd>
	r = sd_get_r1();
 80049f2:	f7ff fdd5 	bl	80045a0 <sd_get_r1>
	if (r == 0xff) {
 80049f6:	28ff      	cmp	r0, #255	; 0xff
 80049f8:	d11d      	bne.n	8004a36 <hwif_init+0x92>
		spi_cs_high();
 80049fa:	2201      	movs	r2, #1
	spi_cs_high();
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	20a0      	movs	r0, #160	; 0xa0
 8004a00:	0209      	lsls	r1, r1, #8
 8004a02:	05c0      	lsls	r0, r0, #23
 8004a04:	f7fe fa26 	bl	8002e54 <HAL_GPIO_WritePin>
	spi_cs_low();
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	20a0      	movs	r0, #160	; 0xa0
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	0209      	lsls	r1, r1, #8
 8004a10:	05c0      	lsls	r0, r0, #23
 8004a12:	f7fe fa1f 	bl	8002e54 <HAL_GPIO_WritePin>
	sd_cmd(9, 0);
 8004a16:	2100      	movs	r1, #0
 8004a18:	2009      	movs	r0, #9
 8004a1a:	f7ff fd89 	bl	8004530 <sd_cmd>
	r = sd_get_r1();
 8004a1e:	f7ff fdbf 	bl	80045a0 <sd_get_r1>
	if (r == 0xff) {
 8004a22:	28ff      	cmp	r0, #255	; 0xff
 8004a24:	d114      	bne.n	8004a50 <hwif_init+0xac>
		spi_cs_high();
 8004a26:	2180      	movs	r1, #128	; 0x80
 8004a28:	20a0      	movs	r0, #160	; 0xa0
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	0209      	lsls	r1, r1, #8
 8004a2e:	05c0      	lsls	r0, r0, #23
 8004a30:	f7fe fa10 	bl	8002e54 <HAL_GPIO_WritePin>
 8004a34:	e7c5      	b.n	80049c2 <hwif_init+0x1e>
	if (r & 0xfe) {
 8004a36:	2501      	movs	r5, #1
 8004a38:	43a8      	bics	r0, r5
 8004a3a:	b2c0      	uxtb	r0, r0
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d1dc      	bne.n	80049fa <hwif_init+0x56>
	r = sd_get_data(hw, buf, 16);
 8004a40:	2110      	movs	r1, #16
 8004a42:	4668      	mov	r0, sp
 8004a44:	f7ff fe06 	bl	8004654 <sd_get_data.isra.0>
	sd_nec();
 8004a48:	f7ff fdb8 	bl	80045bc <sd_nec>
	spi_cs_high();
 8004a4c:	002a      	movs	r2, r5
 8004a4e:	e7d5      	b.n	80049fc <hwif_init+0x58>
	if (r & 0xfe) {
 8004a50:	2601      	movs	r6, #1
 8004a52:	43b0      	bics	r0, r6
 8004a54:	b2c0      	uxtb	r0, r0
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d1e5      	bne.n	8004a26 <hwif_init+0x82>
	r = sd_get_data(hw, buf, 16);
 8004a5a:	2110      	movs	r1, #16
 8004a5c:	4668      	mov	r0, sp
 8004a5e:	f7ff fdf9 	bl	8004654 <sd_get_data.isra.0>
 8004a62:	0005      	movs	r5, r0
	sd_nec();
 8004a64:	f7ff fdaa 	bl	80045bc <sd_nec>
	spi_cs_high();
 8004a68:	2180      	movs	r1, #128	; 0x80
 8004a6a:	20a0      	movs	r0, #160	; 0xa0
 8004a6c:	0032      	movs	r2, r6
 8004a6e:	0209      	lsls	r1, r1, #8
 8004a70:	05c0      	lsls	r0, r0, #23
 8004a72:	f7fe f9ef 	bl	8002e54 <HAL_GPIO_WritePin>
	if (r == -1) {
 8004a76:	1c6b      	adds	r3, r5, #1
 8004a78:	d0a5      	beq.n	80049c6 <hwif_init+0x22>
	if ((buf[0] >> 6) + 1 == 1) {
 8004a7a:	466b      	mov	r3, sp
 8004a7c:	7a99      	ldrb	r1, [r3, #10]
 8004a7e:	79da      	ldrb	r2, [r3, #7]
 8004a80:	7a1d      	ldrb	r5, [r3, #8]
 8004a82:	7a58      	ldrb	r0, [r3, #9]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	d12a      	bne.n	8004ae0 <hwif_init+0x13c>
	capacity = (((buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6)+1) << (2+(((buf[9]&3) << 1) | buf[10]>>7)) << ((buf[5] & 0xf) - 9);
 8004a8a:	466b      	mov	r3, sp
 8004a8c:	26c0      	movs	r6, #192	; 0xc0
 8004a8e:	799b      	ldrb	r3, [r3, #6]
 8004a90:	0136      	lsls	r6, r6, #4
 8004a92:	029b      	lsls	r3, r3, #10
 8004a94:	0092      	lsls	r2, r2, #2
 8004a96:	09ad      	lsrs	r5, r5, #6
 8004a98:	432a      	orrs	r2, r5
 8004a9a:	4033      	ands	r3, r6
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	2206      	movs	r2, #6
 8004aa0:	0040      	lsls	r0, r0, #1
 8004aa2:	4010      	ands	r0, r2
 8004aa4:	09ca      	lsrs	r2, r1, #7
 8004aa6:	4310      	orrs	r0, r2
 8004aa8:	466a      	mov	r2, sp
 8004aaa:	3002      	adds	r0, #2
 8004aac:	3301      	adds	r3, #1
 8004aae:	4083      	lsls	r3, r0
 8004ab0:	200f      	movs	r0, #15
 8004ab2:	7952      	ldrb	r2, [r2, #5]
 8004ab4:	4002      	ands	r2, r0
 8004ab6:	3a09      	subs	r2, #9
 8004ab8:	4093      	lsls	r3, r2
	hw->sectors = capacity;
 8004aba:	6063      	str	r3, [r4, #4]
	hw->erase_sectors = 1;
 8004abc:	2301      	movs	r3, #1
	if (((buf[10]>>6)&1) == 0)
 8004abe:	098a      	lsrs	r2, r1, #6
	hw->erase_sectors = 1;
 8004ac0:	60a3      	str	r3, [r4, #8]
	if (((buf[10]>>6)&1) == 0)
 8004ac2:	421a      	tst	r2, r3
 8004ac4:	d108      	bne.n	8004ad8 <hwif_init+0x134>
		hw->erase_sectors = ((buf[10]&0x3f)<<1 | buf[11]>>7) + 1;
 8004ac6:	4099      	lsls	r1, r3
 8004ac8:	337d      	adds	r3, #125	; 0x7d
 8004aca:	4019      	ands	r1, r3
 8004acc:	466b      	mov	r3, sp
 8004ace:	7adb      	ldrb	r3, [r3, #11]
 8004ad0:	09db      	lsrs	r3, r3, #7
 8004ad2:	4319      	orrs	r1, r3
 8004ad4:	3101      	adds	r1, #1
 8004ad6:	60a1      	str	r1, [r4, #8]
	hw->initialized = 1;
 8004ad8:	2301      	movs	r3, #1
	return 0;
 8004ada:	2500      	movs	r5, #0
	hw->initialized = 1;
 8004adc:	6023      	str	r3, [r4, #0]
	return 0;
 8004ade:	e772      	b.n	80049c6 <hwif_init+0x22>
		hw->capabilities |= CAP_SDHC;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	68e6      	ldr	r6, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 8004ae4:	0412      	lsls	r2, r2, #16
		hw->capabilities |= CAP_SDHC;
 8004ae6:	4333      	orrs	r3, r6
 8004ae8:	60e3      	str	r3, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 8004aea:	022b      	lsls	r3, r5, #8
 8004aec:	4313      	orrs	r3, r2
 8004aee:	4303      	orrs	r3, r0
	capacity *= 1024; /* in 512 B sectors */
 8004af0:	029b      	lsls	r3, r3, #10
 8004af2:	e7e2      	b.n	8004aba <hwif_init+0x116>
 8004af4:	200001a4 	.word	0x200001a4

08004af8 <sd_read>:

int sd_read(hwif* hw, uint32_t address, uint8_t *buf)
{
 8004af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004afa:	300c      	adds	r0, #12
 8004afc:	000e      	movs	r6, r1
 8004afe:	0017      	movs	r7, r2
 8004b00:	0005      	movs	r5, r0
	int r;
	int tries = 10;

	r = sd_readsector(hw, address, buf);
 8004b02:	f7ff fdc9 	bl	8004698 <sd_readsector.isra.0>

	while (r < 0 && tries--) {
 8004b06:	230b      	movs	r3, #11
	r = sd_readsector(hw, address, buf);
 8004b08:	0004      	movs	r4, r0
	while (r < 0 && tries--) {
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	2c00      	cmp	r4, #0
 8004b0e:	da04      	bge.n	8004b1a <sd_read+0x22>
 8004b10:	9b01      	ldr	r3, [sp, #4]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <sd_read+0x26>
		r = sd_readsector(hw, address, buf);
	}
	if (tries == -1)

	return r;
}
 8004b1a:	0020      	movs	r0, r4
 8004b1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (sd_init(hw) != 0)
 8004b1e:	0028      	movs	r0, r5
 8004b20:	f7ff fdfe 	bl	8004720 <sd_init.isra.0>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d1f1      	bne.n	8004b0c <sd_read+0x14>
		sd_read_status(hw);
 8004b28:	f7ff fd6e 	bl	8004608 <sd_read_status.isra.0>
		r = sd_readsector(hw, address, buf);
 8004b2c:	003a      	movs	r2, r7
 8004b2e:	0031      	movs	r1, r6
 8004b30:	0028      	movs	r0, r5
 8004b32:	f7ff fdb1 	bl	8004698 <sd_readsector.isra.0>
 8004b36:	0004      	movs	r4, r0
 8004b38:	e7e8      	b.n	8004b0c <sd_read+0x14>
	...

08004b3c <HAL_SPI_RxCpltCallback>:

	return r;
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
    dma_complete = 1;
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	4b01      	ldr	r3, [pc, #4]	; (8004b44 <HAL_SPI_RxCpltCallback+0x8>)
 8004b40:	701a      	strb	r2, [r3, #0]
	return;
}
 8004b42:	4770      	bx	lr
 8004b44:	20000ca4 	.word	0x20000ca4

08004b48 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004b48:	6802      	ldr	r2, [r0, #0]
 8004b4a:	1e13      	subs	r3, r2, #0
 8004b4c:	d103      	bne.n	8004b56 <get_ldnumber+0xe>
	int vol = -1;
 8004b4e:	2001      	movs	r0, #1
 8004b50:	4240      	negs	r0, r0
 8004b52:	e00e      	b.n	8004b72 <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004b54:	3301      	adds	r3, #1
 8004b56:	7819      	ldrb	r1, [r3, #0]
 8004b58:	291f      	cmp	r1, #31
 8004b5a:	d909      	bls.n	8004b70 <get_ldnumber+0x28>
 8004b5c:	293a      	cmp	r1, #58	; 0x3a
 8004b5e:	d1f9      	bne.n	8004b54 <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8004b60:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004b62:	428b      	cmp	r3, r1
 8004b64:	d1f3      	bne.n	8004b4e <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004b66:	7812      	ldrb	r2, [r2, #0]
 8004b68:	2a30      	cmp	r2, #48	; 0x30
 8004b6a:	d1f0      	bne.n	8004b4e <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004b70:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8004b72:	4770      	bx	lr

08004b74 <move_window>:
{
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	0004      	movs	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
{
 8004b7a:	000d      	movs	r5, r1
	FRESULT res = FR_OK;
 8004b7c:	2000      	movs	r0, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b7e:	428b      	cmp	r3, r1
 8004b80:	d00c      	beq.n	8004b9c <move_window+0x28>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004b82:	000a      	movs	r2, r1
 8004b84:	0021      	movs	r1, r4
 8004b86:	2301      	movs	r3, #1
 8004b88:	7860      	ldrb	r0, [r4, #1]
 8004b8a:	3128      	adds	r1, #40	; 0x28
 8004b8c:	f7ff fc92 	bl	80044b4 <disk_read>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d002      	beq.n	8004b9a <move_window+0x26>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004b94:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 8004b96:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004b98:	426d      	negs	r5, r5
			fs->winsect = sector;
 8004b9a:	6265      	str	r5, [r4, #36]	; 0x24
}
 8004b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ba0 <check_fs>:
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004ba0:	2300      	movs	r3, #0
{
 8004ba2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004ba4:	7103      	strb	r3, [r0, #4]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	6243      	str	r3, [r0, #36]	; 0x24
{
 8004baa:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004bac:	f7ff ffe2 	bl	8004b74 <move_window>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d121      	bne.n	8004bf8 <check_fs+0x58>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <check_fs+0x60>)
 8004bb6:	5ce2      	ldrb	r2, [r4, r3]
 8004bb8:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <check_fs+0x64>)
 8004bba:	0212      	lsls	r2, r2, #8
 8004bbc:	5ce3      	ldrb	r3, [r4, r3]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	4a11      	ldr	r2, [pc, #68]	; (8004c08 <check_fs+0x68>)
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d119      	bne.n	8004bfc <check_fs+0x5c>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004bc8:	0022      	movs	r2, r4
 8004bca:	325e      	adds	r2, #94	; 0x5e
 8004bcc:	8853      	ldrh	r3, [r2, #2]
 8004bce:	8811      	ldrh	r1, [r2, #0]
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <check_fs+0x6c>)
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00b      	beq.n	8004bf6 <check_fs+0x56>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004bde:	347a      	adds	r4, #122	; 0x7a
 8004be0:	8860      	ldrh	r0, [r4, #2]
 8004be2:	8823      	ldrh	r3, [r4, #0]
 8004be4:	0400      	lsls	r0, r0, #16
 8004be6:	4318      	orrs	r0, r3
 8004be8:	0200      	lsls	r0, r0, #8
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <check_fs+0x70>)
 8004bec:	0a00      	lsrs	r0, r0, #8
 8004bee:	18c0      	adds	r0, r0, r3
 8004bf0:	1e43      	subs	r3, r0, #1
 8004bf2:	4198      	sbcs	r0, r3
		return 3;
 8004bf4:	b2c0      	uxtb	r0, r0
		return 0;

	return 1;
}
 8004bf6:	bd10      	pop	{r4, pc}
		return 3;
 8004bf8:	2003      	movs	r0, #3
 8004bfa:	e7fc      	b.n	8004bf6 <check_fs+0x56>
		return 2;
 8004bfc:	2002      	movs	r0, #2
 8004bfe:	e7fa      	b.n	8004bf6 <check_fs+0x56>
 8004c00:	00000227 	.word	0x00000227
 8004c04:	00000226 	.word	0x00000226
 8004c08:	ffffaa55 	.word	0xffffaa55
 8004c0c:	00544146 	.word	0x00544146
 8004c10:	ffabbeba 	.word	0xffabbeba

08004c14 <find_volume.isra.0>:
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 8004c14:	b5f0      	push	{r4, r5, r6, r7, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004c16:	2300      	movs	r3, #0
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 8004c18:	0007      	movs	r7, r0
 8004c1a:	b08b      	sub	sp, #44	; 0x2c
 8004c1c:	0008      	movs	r0, r1
	*rfs = 0;
 8004c1e:	603b      	str	r3, [r7, #0]
	vol = get_ldnumber(path);
 8004c20:	f7ff ff92 	bl	8004b48 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c24:	250b      	movs	r5, #11
	vol = get_ldnumber(path);
 8004c26:	1e06      	subs	r6, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c28:	db15      	blt.n	8004c56 <find_volume.isra.0+0x42>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004c2a:	4b78      	ldr	r3, [pc, #480]	; (8004e0c <find_volume.isra.0+0x1f8>)
 8004c2c:	0082      	lsls	r2, r0, #2
 8004c2e:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004c30:	3501      	adds	r5, #1
 8004c32:	2c00      	cmp	r4, #0
 8004c34:	d00f      	beq.n	8004c56 <find_volume.isra.0+0x42>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */

	if (fs->fs_type) {					/* If the volume has been mounted */
 8004c36:	7823      	ldrb	r3, [r4, #0]
	*rfs = fs;							/* Return pointer to the file system object */
 8004c38:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10e      	bne.n	8004c5c <find_volume.isra.0+0x48>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004c3e:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004c40:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8004c42:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004c44:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004c46:	f7ff fc2b 	bl	80044a0 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004c4a:	2601      	movs	r6, #1
 8004c4c:	0007      	movs	r7, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004c4e:	2503      	movs	r5, #3
 8004c50:	4037      	ands	r7, r6
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004c52:	4230      	tst	r0, r6
 8004c54:	d00b      	beq.n	8004c6e <find_volume.isra.0+0x5a>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8004c56:	0028      	movs	r0, r5
 8004c58:	b00b      	add	sp, #44	; 0x2c
 8004c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = disk_status(fs->drv);
 8004c5c:	7860      	ldrb	r0, [r4, #1]
 8004c5e:	f7ff fc17 	bl	8004490 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004c62:	2301      	movs	r3, #1
 8004c64:	0005      	movs	r5, r0
 8004c66:	401d      	ands	r5, r3
 8004c68:	4218      	tst	r0, r3
 8004c6a:	d1e8      	bne.n	8004c3e <find_volume.isra.0+0x2a>
 8004c6c:	e7f3      	b.n	8004c56 <find_volume.isra.0+0x42>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004c6e:	0039      	movs	r1, r7
 8004c70:	0020      	movs	r0, r4
 8004c72:	f7ff ff95 	bl	8004ba0 <check_fs>
 8004c76:	0005      	movs	r5, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004c78:	2801      	cmp	r0, #1
 8004c7a:	d12c      	bne.n	8004cd6 <find_volume.isra.0+0xc2>
 8004c7c:	0023      	movs	r3, r4
 8004c7e:	4a64      	ldr	r2, [pc, #400]	; (8004e10 <find_volume.isra.0+0x1fc>)
 8004c80:	33e7      	adds	r3, #231	; 0xe7
 8004c82:	a906      	add	r1, sp, #24
 8004c84:	33ff      	adds	r3, #255	; 0xff
 8004c86:	18a0      	adds	r0, r4, r2
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004c88:	2200      	movs	r2, #0
 8004c8a:	791e      	ldrb	r6, [r3, #4]
 8004c8c:	4296      	cmp	r6, r2
 8004c8e:	d009      	beq.n	8004ca4 <find_volume.isra.0+0x90>
 8004c90:	7a5e      	ldrb	r6, [r3, #9]
 8004c92:	7a1a      	ldrb	r2, [r3, #8]
 8004c94:	0236      	lsls	r6, r6, #8
 8004c96:	4316      	orrs	r6, r2
 8004c98:	7a9a      	ldrb	r2, [r3, #10]
 8004c9a:	0412      	lsls	r2, r2, #16
 8004c9c:	4316      	orrs	r6, r2
 8004c9e:	7ada      	ldrb	r2, [r3, #11]
 8004ca0:	0612      	lsls	r2, r2, #24
 8004ca2:	4332      	orrs	r2, r6
 8004ca4:	3310      	adds	r3, #16
 8004ca6:	c104      	stmia	r1!, {r2}
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004ca8:	4298      	cmp	r0, r3
 8004caa:	d1ed      	bne.n	8004c88 <find_volume.isra.0+0x74>
 8004cac:	2600      	movs	r6, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004cae:	2702      	movs	r7, #2
			bsect = br[i];
 8004cb0:	00b3      	lsls	r3, r6, #2
 8004cb2:	aa06      	add	r2, sp, #24
 8004cb4:	58d3      	ldr	r3, [r2, r3]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004cb6:	0038      	movs	r0, r7
			bsect = br[i];
 8004cb8:	9301      	str	r3, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <find_volume.isra.0+0xb6>
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	0020      	movs	r0, r4
 8004cc2:	f7ff ff6d 	bl	8004ba0 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d00d      	beq.n	8004ce6 <find_volume.isra.0+0xd2>
 8004cca:	3601      	adds	r6, #1
 8004ccc:	2e04      	cmp	r6, #4
 8004cce:	d1ef      	bne.n	8004cb0 <find_volume.isra.0+0x9c>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004cd0:	2803      	cmp	r0, #3
 8004cd2:	d106      	bne.n	8004ce2 <find_volume.isra.0+0xce>
 8004cd4:	e7bf      	b.n	8004c56 <find_volume.isra.0+0x42>
 8004cd6:	2803      	cmp	r0, #3
 8004cd8:	d100      	bne.n	8004cdc <find_volume.isra.0+0xc8>
 8004cda:	e095      	b.n	8004e08 <find_volume.isra.0+0x1f4>
	bsect = 0;
 8004cdc:	9701      	str	r7, [sp, #4]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d001      	beq.n	8004ce6 <find_volume.isra.0+0xd2>
 8004ce2:	250d      	movs	r5, #13
 8004ce4:	e7b7      	b.n	8004c56 <find_volume.isra.0+0x42>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004ce6:	0023      	movs	r3, r4
 8004ce8:	3334      	adds	r3, #52	; 0x34
 8004cea:	781a      	ldrb	r2, [r3, #0]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	0212      	lsls	r2, r2, #8
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	2280      	movs	r2, #128	; 0x80
 8004cf6:	b21b      	sxth	r3, r3
 8004cf8:	0092      	lsls	r2, r2, #2
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d1f1      	bne.n	8004ce2 <find_volume.isra.0+0xce>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8004cfe:	0023      	movs	r3, r4
 8004d00:	0022      	movs	r2, r4
 8004d02:	333f      	adds	r3, #63	; 0x3f
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	323e      	adds	r2, #62	; 0x3e
 8004d08:	7817      	ldrb	r7, [r2, #0]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	431f      	orrs	r7, r3
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 8004d0e:	d100      	bne.n	8004d12 <find_volume.isra.0+0xfe>
 8004d10:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8004d12:	0023      	movs	r3, r4
	fs->fsize = fasize;
 8004d14:	6127      	str	r7, [r4, #16]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8004d16:	3338      	adds	r3, #56	; 0x38
 8004d18:	781a      	ldrb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004d1a:	1e53      	subs	r3, r2, #1
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8004d1c:	70e2      	strb	r2, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d8df      	bhi.n	8004ce2 <find_volume.isra.0+0xce>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004d22:	0023      	movs	r3, r4
 8004d24:	3335      	adds	r3, #53	; 0x35
 8004d26:	781e      	ldrb	r6, [r3, #0]
 8004d28:	70a6      	strb	r6, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004d2a:	2e00      	cmp	r6, #0
 8004d2c:	d0d9      	beq.n	8004ce2 <find_volume.isra.0+0xce>
 8004d2e:	1e73      	subs	r3, r6, #1
 8004d30:	421e      	tst	r6, r3
 8004d32:	d1d6      	bne.n	8004ce2 <find_volume.isra.0+0xce>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004d34:	0023      	movs	r3, r4
 8004d36:	333a      	adds	r3, #58	; 0x3a
 8004d38:	781d      	ldrb	r5, [r3, #0]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	022d      	lsls	r5, r5, #8
 8004d40:	431d      	orrs	r5, r3
 8004d42:	8125      	strh	r5, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004d44:	072b      	lsls	r3, r5, #28
 8004d46:	d1cc      	bne.n	8004ce2 <find_volume.isra.0+0xce>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8004d48:	0023      	movs	r3, r4
 8004d4a:	333c      	adds	r3, #60	; 0x3c
 8004d4c:	7819      	ldrb	r1, [r3, #0]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	0209      	lsls	r1, r1, #8
 8004d54:	430b      	orrs	r3, r1
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 8004d56:	d100      	bne.n	8004d5a <find_volume.isra.0+0x146>
 8004d58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004d5a:	0021      	movs	r1, r4
 8004d5c:	0020      	movs	r0, r4
 8004d5e:	3137      	adds	r1, #55	; 0x37
 8004d60:	7809      	ldrb	r1, [r1, #0]
 8004d62:	3036      	adds	r0, #54	; 0x36
 8004d64:	7800      	ldrb	r0, [r0, #0]
 8004d66:	0209      	lsls	r1, r1, #8
 8004d68:	4308      	orrs	r0, r1
 8004d6a:	9002      	str	r0, [sp, #8]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004d6c:	d0b9      	beq.n	8004ce2 <find_volume.isra.0+0xce>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004d6e:	437a      	muls	r2, r7
 8004d70:	9204      	str	r2, [sp, #16]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004d72:	9904      	ldr	r1, [sp, #16]
 8004d74:	092a      	lsrs	r2, r5, #4
 8004d76:	1812      	adds	r2, r2, r0
 8004d78:	1852      	adds	r2, r2, r1
 8004d7a:	9203      	str	r2, [sp, #12]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d8b0      	bhi.n	8004ce2 <find_volume.isra.0+0xce>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	0018      	movs	r0, r3
 8004d84:	0031      	movs	r1, r6
 8004d86:	9305      	str	r3, [sp, #20]
 8004d88:	f7fb f9be 	bl	8000108 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004d8c:	9b05      	ldr	r3, [sp, #20]
 8004d8e:	42b3      	cmp	r3, r6
 8004d90:	d3a7      	bcc.n	8004ce2 <find_volume.isra.0+0xce>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004d92:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <find_volume.isra.0+0x200>)
	fmt = FS_FAT12;
 8004d94:	2301      	movs	r3, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004d96:	4290      	cmp	r0, r2
 8004d98:	d904      	bls.n	8004da4 <find_volume.isra.0+0x190>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <find_volume.isra.0+0x204>)
 8004d9c:	4283      	cmp	r3, r0
 8004d9e:	419b      	sbcs	r3, r3
 8004da0:	425b      	negs	r3, r3
 8004da2:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004da4:	9901      	ldr	r1, [sp, #4]
	fs->volbase = bsect;								/* Volume start sector */
 8004da6:	9a01      	ldr	r2, [sp, #4]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004da8:	468c      	mov	ip, r1
	fs->volbase = bsect;								/* Volume start sector */
 8004daa:	6162      	str	r2, [r4, #20]
	fs->database = bsect + sysect;						/* Data start sector */
 8004dac:	9903      	ldr	r1, [sp, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004dae:	9a02      	ldr	r2, [sp, #8]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004db0:	3002      	adds	r0, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004db2:	4462      	add	r2, ip
	fs->database = bsect + sysect;						/* Data start sector */
 8004db4:	4461      	add	r1, ip
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004db6:	60e0      	str	r0, [r4, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004db8:	61a2      	str	r2, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 8004dba:	6221      	str	r1, [r4, #32]
	if (fmt == FS_FAT32) {
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d112      	bne.n	8004de6 <find_volume.isra.0+0x1d2>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	d18e      	bne.n	8004ce2 <find_volume.isra.0+0xce>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8004dc4:	6d62      	ldr	r2, [r4, #84]	; 0x54
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004dc6:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8004dc8:	61e2      	str	r2, [r4, #28]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004dca:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <find_volume.isra.0+0x208>)
 8004dcc:	1880      	adds	r0, r0, r2
 8004dce:	0a40      	lsrs	r0, r0, #9
 8004dd0:	4287      	cmp	r7, r0
 8004dd2:	d386      	bcc.n	8004ce2 <find_volume.isra.0+0xce>
	fs->id = ++Fsid;	/* File system mount ID */
 8004dd4:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <find_volume.isra.0+0x20c>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8004dd6:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8004dd8:	8813      	ldrh	r3, [r2, #0]
	return FR_OK;
 8004dda:	2500      	movs	r5, #0
	fs->id = ++Fsid;	/* File system mount ID */
 8004ddc:	3301      	adds	r3, #1
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]
 8004de2:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8004de4:	e737      	b.n	8004c56 <find_volume.isra.0+0x42>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	d100      	bne.n	8004dec <find_volume.isra.0+0x1d8>
 8004dea:	e77a      	b.n	8004ce2 <find_volume.isra.0+0xce>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004dec:	9904      	ldr	r1, [sp, #16]
 8004dee:	188a      	adds	r2, r1, r2
 8004df0:	61e2      	str	r2, [r4, #28]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d101      	bne.n	8004dfa <find_volume.isra.0+0x1e6>
 8004df6:	0040      	lsls	r0, r0, #1
 8004df8:	e7e7      	b.n	8004dca <find_volume.isra.0+0x1b6>
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4342      	muls	r2, r0
 8004e00:	4008      	ands	r0, r1
 8004e02:	0852      	lsrs	r2, r2, #1
 8004e04:	1810      	adds	r0, r2, r0
 8004e06:	e7e0      	b.n	8004dca <find_volume.isra.0+0x1b6>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004e08:	0035      	movs	r5, r6
 8004e0a:	e724      	b.n	8004c56 <find_volume.isra.0+0x42>
 8004e0c:	20000ca8 	.word	0x20000ca8
 8004e10:	00000226 	.word	0x00000226
 8004e14:	00000ff5 	.word	0x00000ff5
 8004e18:	0000fff5 	.word	0x0000fff5
 8004e1c:	000001ff 	.word	0x000001ff
 8004e20:	20000cac 	.word	0x20000cac

08004e24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e26:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8004e28:	a803      	add	r0, sp, #12
{
 8004e2a:	0014      	movs	r4, r2
 8004e2c:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8004e2e:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8004e30:	f7ff fe8a 	bl	8004b48 <get_ldnumber>
 8004e34:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e36:	200b      	movs	r0, #11
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	db15      	blt.n	8004e68 <f_mount+0x44>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004e3c:	490b      	ldr	r1, [pc, #44]	; (8004e6c <f_mount+0x48>)
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	585a      	ldr	r2, [r3, r1]

	if (cfs) {
 8004e42:	2a00      	cmp	r2, #0
 8004e44:	d001      	beq.n	8004e4a <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004e46:	2000      	movs	r0, #0
 8004e48:	7010      	strb	r0, [r2, #0]
	}

	if (fs) {
 8004e4a:	9a01      	ldr	r2, [sp, #4]
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	d001      	beq.n	8004e54 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8004e50:	2000      	movs	r0, #0
 8004e52:	7010      	strb	r0, [r2, #0]
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004e54:	1e10      	subs	r0, r2, #0
	FatFs[vol] = fs;					/* Register new fs object */
 8004e56:	50ca      	str	r2, [r1, r3]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004e58:	d006      	beq.n	8004e68 <f_mount+0x44>
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	2c01      	cmp	r4, #1
 8004e5e:	d103      	bne.n	8004e68 <f_mount+0x44>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004e60:	4669      	mov	r1, sp
 8004e62:	a801      	add	r0, sp, #4
 8004e64:	f7ff fed6 	bl	8004c14 <find_volume.isra.0>
	LEAVE_FF(fs, res);
}
 8004e68:	b004      	add	sp, #16
 8004e6a:	bd10      	pop	{r4, pc}
 8004e6c:	20000ca8 	.word	0x20000ca8

08004e70 <_ZdlPv>:
 8004e70:	b510      	push	{r4, lr}
 8004e72:	f000 f85b 	bl	8004f2c <free>
 8004e76:	bd10      	pop	{r4, pc}

08004e78 <_Znwj>:
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	1e04      	subs	r4, r0, #0
 8004e7c:	d100      	bne.n	8004e80 <_Znwj+0x8>
 8004e7e:	3401      	adds	r4, #1
 8004e80:	0020      	movs	r0, r4
 8004e82:	f000 f849 	bl	8004f18 <malloc>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d107      	bne.n	8004e9a <_Znwj+0x22>
 8004e8a:	f000 f80d 	bl	8004ea8 <_ZSt15get_new_handlerv>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d101      	bne.n	8004e96 <_Znwj+0x1e>
 8004e92:	f000 f80f 	bl	8004eb4 <abort>
 8004e96:	4780      	blx	r0
 8004e98:	e7f2      	b.n	8004e80 <_Znwj+0x8>
 8004e9a:	bd10      	pop	{r4, pc}

08004e9c <_ZSt17__throw_bad_allocv>:
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	f000 f809 	bl	8004eb4 <abort>

08004ea2 <_ZSt20__throw_length_errorPKc>:
 8004ea2:	b510      	push	{r4, lr}
 8004ea4:	f000 f806 	bl	8004eb4 <abort>

08004ea8 <_ZSt15get_new_handlerv>:
 8004ea8:	4b01      	ldr	r3, [pc, #4]	; (8004eb0 <_ZSt15get_new_handlerv+0x8>)
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	4770      	bx	lr
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	20000cb0 	.word	0x20000cb0

08004eb4 <abort>:
 8004eb4:	2006      	movs	r0, #6
 8004eb6:	b510      	push	{r4, lr}
 8004eb8:	f000 f94a 	bl	8005150 <raise>
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	f7fd fd07 	bl	80028d0 <_exit>
	...

08004ec4 <__errno>:
 8004ec4:	4b01      	ldr	r3, [pc, #4]	; (8004ecc <__errno+0x8>)
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	4770      	bx	lr
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	200000a0 	.word	0x200000a0

08004ed0 <__libc_init_array>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	4d0c      	ldr	r5, [pc, #48]	; (8004f08 <__libc_init_array+0x38>)
 8004ed6:	4c0d      	ldr	r4, [pc, #52]	; (8004f0c <__libc_init_array+0x3c>)
 8004ed8:	1b64      	subs	r4, r4, r5
 8004eda:	10a4      	asrs	r4, r4, #2
 8004edc:	42a6      	cmp	r6, r4
 8004ede:	d109      	bne.n	8004ef4 <__libc_init_array+0x24>
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	f000 f967 	bl	80051b4 <_init>
 8004ee6:	4d0a      	ldr	r5, [pc, #40]	; (8004f10 <__libc_init_array+0x40>)
 8004ee8:	4c0a      	ldr	r4, [pc, #40]	; (8004f14 <__libc_init_array+0x44>)
 8004eea:	1b64      	subs	r4, r4, r5
 8004eec:	10a4      	asrs	r4, r4, #2
 8004eee:	42a6      	cmp	r6, r4
 8004ef0:	d105      	bne.n	8004efe <__libc_init_array+0x2e>
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}
 8004ef4:	00b3      	lsls	r3, r6, #2
 8004ef6:	58eb      	ldr	r3, [r5, r3]
 8004ef8:	4798      	blx	r3
 8004efa:	3601      	adds	r6, #1
 8004efc:	e7ee      	b.n	8004edc <__libc_init_array+0xc>
 8004efe:	00b3      	lsls	r3, r6, #2
 8004f00:	58eb      	ldr	r3, [r5, r3]
 8004f02:	4798      	blx	r3
 8004f04:	3601      	adds	r6, #1
 8004f06:	e7f2      	b.n	8004eee <__libc_init_array+0x1e>
 8004f08:	08005258 	.word	0x08005258
 8004f0c:	08005258 	.word	0x08005258
 8004f10:	08005258 	.word	0x08005258
 8004f14:	08005260 	.word	0x08005260

08004f18 <malloc>:
 8004f18:	b510      	push	{r4, lr}
 8004f1a:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <malloc+0x10>)
 8004f1c:	0001      	movs	r1, r0
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	f000 f87c 	bl	800501c <_malloc_r>
 8004f24:	bd10      	pop	{r4, pc}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	200000a0 	.word	0x200000a0

08004f2c <free>:
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <free+0x10>)
 8004f30:	0001      	movs	r1, r0
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	f000 f828 	bl	8004f88 <_free_r>
 8004f38:	bd10      	pop	{r4, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	200000a0 	.word	0x200000a0

08004f40 <memcpy>:
 8004f40:	2300      	movs	r3, #0
 8004f42:	b510      	push	{r4, lr}
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d100      	bne.n	8004f4a <memcpy+0xa>
 8004f48:	bd10      	pop	{r4, pc}
 8004f4a:	5ccc      	ldrb	r4, [r1, r3]
 8004f4c:	54c4      	strb	r4, [r0, r3]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	e7f8      	b.n	8004f44 <memcpy+0x4>

08004f52 <memmove>:
 8004f52:	b510      	push	{r4, lr}
 8004f54:	4288      	cmp	r0, r1
 8004f56:	d902      	bls.n	8004f5e <memmove+0xc>
 8004f58:	188b      	adds	r3, r1, r2
 8004f5a:	4298      	cmp	r0, r3
 8004f5c:	d303      	bcc.n	8004f66 <memmove+0x14>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e007      	b.n	8004f72 <memmove+0x20>
 8004f62:	5c8b      	ldrb	r3, [r1, r2]
 8004f64:	5483      	strb	r3, [r0, r2]
 8004f66:	3a01      	subs	r2, #1
 8004f68:	d2fb      	bcs.n	8004f62 <memmove+0x10>
 8004f6a:	bd10      	pop	{r4, pc}
 8004f6c:	5ccc      	ldrb	r4, [r1, r3]
 8004f6e:	54c4      	strb	r4, [r0, r3]
 8004f70:	3301      	adds	r3, #1
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d1fa      	bne.n	8004f6c <memmove+0x1a>
 8004f76:	e7f8      	b.n	8004f6a <memmove+0x18>

08004f78 <memset>:
 8004f78:	0003      	movs	r3, r0
 8004f7a:	1882      	adds	r2, r0, r2
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d100      	bne.n	8004f82 <memset+0xa>
 8004f80:	4770      	bx	lr
 8004f82:	7019      	strb	r1, [r3, #0]
 8004f84:	3301      	adds	r3, #1
 8004f86:	e7f9      	b.n	8004f7c <memset+0x4>

08004f88 <_free_r>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	0005      	movs	r5, r0
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	d010      	beq.n	8004fb2 <_free_r+0x2a>
 8004f90:	1f0c      	subs	r4, r1, #4
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	da00      	bge.n	8004f9a <_free_r+0x12>
 8004f98:	18e4      	adds	r4, r4, r3
 8004f9a:	0028      	movs	r0, r5
 8004f9c:	f000 f8f8 	bl	8005190 <__malloc_lock>
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <_free_r+0x90>)
 8004fa2:	6813      	ldr	r3, [r2, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d105      	bne.n	8004fb4 <_free_r+0x2c>
 8004fa8:	6063      	str	r3, [r4, #4]
 8004faa:	6014      	str	r4, [r2, #0]
 8004fac:	0028      	movs	r0, r5
 8004fae:	f000 f8f7 	bl	80051a0 <__malloc_unlock>
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
 8004fb4:	42a3      	cmp	r3, r4
 8004fb6:	d908      	bls.n	8004fca <_free_r+0x42>
 8004fb8:	6821      	ldr	r1, [r4, #0]
 8004fba:	1860      	adds	r0, r4, r1
 8004fbc:	4283      	cmp	r3, r0
 8004fbe:	d1f3      	bne.n	8004fa8 <_free_r+0x20>
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	1841      	adds	r1, r0, r1
 8004fc6:	6021      	str	r1, [r4, #0]
 8004fc8:	e7ee      	b.n	8004fa8 <_free_r+0x20>
 8004fca:	001a      	movs	r2, r3
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <_free_r+0x4e>
 8004fd2:	42a3      	cmp	r3, r4
 8004fd4:	d9f9      	bls.n	8004fca <_free_r+0x42>
 8004fd6:	6811      	ldr	r1, [r2, #0]
 8004fd8:	1850      	adds	r0, r2, r1
 8004fda:	42a0      	cmp	r0, r4
 8004fdc:	d10b      	bne.n	8004ff6 <_free_r+0x6e>
 8004fde:	6820      	ldr	r0, [r4, #0]
 8004fe0:	1809      	adds	r1, r1, r0
 8004fe2:	1850      	adds	r0, r2, r1
 8004fe4:	6011      	str	r1, [r2, #0]
 8004fe6:	4283      	cmp	r3, r0
 8004fe8:	d1e0      	bne.n	8004fac <_free_r+0x24>
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	1841      	adds	r1, r0, r1
 8004ff0:	6011      	str	r1, [r2, #0]
 8004ff2:	6053      	str	r3, [r2, #4]
 8004ff4:	e7da      	b.n	8004fac <_free_r+0x24>
 8004ff6:	42a0      	cmp	r0, r4
 8004ff8:	d902      	bls.n	8005000 <_free_r+0x78>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	e7d5      	b.n	8004fac <_free_r+0x24>
 8005000:	6821      	ldr	r1, [r4, #0]
 8005002:	1860      	adds	r0, r4, r1
 8005004:	4283      	cmp	r3, r0
 8005006:	d103      	bne.n	8005010 <_free_r+0x88>
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	1841      	adds	r1, r0, r1
 800500e:	6021      	str	r1, [r4, #0]
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	6054      	str	r4, [r2, #4]
 8005014:	e7ca      	b.n	8004fac <_free_r+0x24>
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	20000cb4 	.word	0x20000cb4

0800501c <_malloc_r>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	2303      	movs	r3, #3
 8005020:	1ccd      	adds	r5, r1, #3
 8005022:	439d      	bics	r5, r3
 8005024:	3508      	adds	r5, #8
 8005026:	0006      	movs	r6, r0
 8005028:	2d0c      	cmp	r5, #12
 800502a:	d21f      	bcs.n	800506c <_malloc_r+0x50>
 800502c:	250c      	movs	r5, #12
 800502e:	42a9      	cmp	r1, r5
 8005030:	d81e      	bhi.n	8005070 <_malloc_r+0x54>
 8005032:	0030      	movs	r0, r6
 8005034:	f000 f8ac 	bl	8005190 <__malloc_lock>
 8005038:	4925      	ldr	r1, [pc, #148]	; (80050d0 <_malloc_r+0xb4>)
 800503a:	680a      	ldr	r2, [r1, #0]
 800503c:	0014      	movs	r4, r2
 800503e:	2c00      	cmp	r4, #0
 8005040:	d11a      	bne.n	8005078 <_malloc_r+0x5c>
 8005042:	4f24      	ldr	r7, [pc, #144]	; (80050d4 <_malloc_r+0xb8>)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d104      	bne.n	8005054 <_malloc_r+0x38>
 800504a:	0021      	movs	r1, r4
 800504c:	0030      	movs	r0, r6
 800504e:	f000 f843 	bl	80050d8 <_sbrk_r>
 8005052:	6038      	str	r0, [r7, #0]
 8005054:	0029      	movs	r1, r5
 8005056:	0030      	movs	r0, r6
 8005058:	f000 f83e 	bl	80050d8 <_sbrk_r>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d12b      	bne.n	80050b8 <_malloc_r+0x9c>
 8005060:	230c      	movs	r3, #12
 8005062:	0030      	movs	r0, r6
 8005064:	6033      	str	r3, [r6, #0]
 8005066:	f000 f89b 	bl	80051a0 <__malloc_unlock>
 800506a:	e003      	b.n	8005074 <_malloc_r+0x58>
 800506c:	2d00      	cmp	r5, #0
 800506e:	dade      	bge.n	800502e <_malloc_r+0x12>
 8005070:	230c      	movs	r3, #12
 8005072:	6033      	str	r3, [r6, #0]
 8005074:	2000      	movs	r0, #0
 8005076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	1b5b      	subs	r3, r3, r5
 800507c:	d419      	bmi.n	80050b2 <_malloc_r+0x96>
 800507e:	2b0b      	cmp	r3, #11
 8005080:	d903      	bls.n	800508a <_malloc_r+0x6e>
 8005082:	6023      	str	r3, [r4, #0]
 8005084:	18e4      	adds	r4, r4, r3
 8005086:	6025      	str	r5, [r4, #0]
 8005088:	e003      	b.n	8005092 <_malloc_r+0x76>
 800508a:	6863      	ldr	r3, [r4, #4]
 800508c:	42a2      	cmp	r2, r4
 800508e:	d10e      	bne.n	80050ae <_malloc_r+0x92>
 8005090:	600b      	str	r3, [r1, #0]
 8005092:	0030      	movs	r0, r6
 8005094:	f000 f884 	bl	80051a0 <__malloc_unlock>
 8005098:	0020      	movs	r0, r4
 800509a:	2207      	movs	r2, #7
 800509c:	300b      	adds	r0, #11
 800509e:	1d23      	adds	r3, r4, #4
 80050a0:	4390      	bics	r0, r2
 80050a2:	1ac2      	subs	r2, r0, r3
 80050a4:	4298      	cmp	r0, r3
 80050a6:	d0e6      	beq.n	8005076 <_malloc_r+0x5a>
 80050a8:	1a1b      	subs	r3, r3, r0
 80050aa:	50a3      	str	r3, [r4, r2]
 80050ac:	e7e3      	b.n	8005076 <_malloc_r+0x5a>
 80050ae:	6053      	str	r3, [r2, #4]
 80050b0:	e7ef      	b.n	8005092 <_malloc_r+0x76>
 80050b2:	0022      	movs	r2, r4
 80050b4:	6864      	ldr	r4, [r4, #4]
 80050b6:	e7c2      	b.n	800503e <_malloc_r+0x22>
 80050b8:	2303      	movs	r3, #3
 80050ba:	1cc4      	adds	r4, r0, #3
 80050bc:	439c      	bics	r4, r3
 80050be:	42a0      	cmp	r0, r4
 80050c0:	d0e1      	beq.n	8005086 <_malloc_r+0x6a>
 80050c2:	1a21      	subs	r1, r4, r0
 80050c4:	0030      	movs	r0, r6
 80050c6:	f000 f807 	bl	80050d8 <_sbrk_r>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	d1db      	bne.n	8005086 <_malloc_r+0x6a>
 80050ce:	e7c7      	b.n	8005060 <_malloc_r+0x44>
 80050d0:	20000cb4 	.word	0x20000cb4
 80050d4:	20000cb8 	.word	0x20000cb8

080050d8 <_sbrk_r>:
 80050d8:	2300      	movs	r3, #0
 80050da:	b570      	push	{r4, r5, r6, lr}
 80050dc:	4d06      	ldr	r5, [pc, #24]	; (80050f8 <_sbrk_r+0x20>)
 80050de:	0004      	movs	r4, r0
 80050e0:	0008      	movs	r0, r1
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	f7fd fbfa 	bl	80028dc <_sbrk>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d103      	bne.n	80050f4 <_sbrk_r+0x1c>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d000      	beq.n	80050f4 <_sbrk_r+0x1c>
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	bd70      	pop	{r4, r5, r6, pc}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	20000cd0 	.word	0x20000cd0

080050fc <_raise_r>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	0004      	movs	r4, r0
 8005100:	000d      	movs	r5, r1
 8005102:	291f      	cmp	r1, #31
 8005104:	d904      	bls.n	8005110 <_raise_r+0x14>
 8005106:	2316      	movs	r3, #22
 8005108:	6003      	str	r3, [r0, #0]
 800510a:	2001      	movs	r0, #1
 800510c:	4240      	negs	r0, r0
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <_raise_r+0x24>
 8005116:	008a      	lsls	r2, r1, #2
 8005118:	189b      	adds	r3, r3, r2
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	2a00      	cmp	r2, #0
 800511e:	d108      	bne.n	8005132 <_raise_r+0x36>
 8005120:	0020      	movs	r0, r4
 8005122:	f000 f831 	bl	8005188 <_getpid_r>
 8005126:	002a      	movs	r2, r5
 8005128:	0001      	movs	r1, r0
 800512a:	0020      	movs	r0, r4
 800512c:	f000 f81a 	bl	8005164 <_kill_r>
 8005130:	e7ed      	b.n	800510e <_raise_r+0x12>
 8005132:	2000      	movs	r0, #0
 8005134:	2a01      	cmp	r2, #1
 8005136:	d0ea      	beq.n	800510e <_raise_r+0x12>
 8005138:	1c51      	adds	r1, r2, #1
 800513a:	d103      	bne.n	8005144 <_raise_r+0x48>
 800513c:	2316      	movs	r3, #22
 800513e:	3001      	adds	r0, #1
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	e7e4      	b.n	800510e <_raise_r+0x12>
 8005144:	2400      	movs	r4, #0
 8005146:	0028      	movs	r0, r5
 8005148:	601c      	str	r4, [r3, #0]
 800514a:	4790      	blx	r2
 800514c:	0020      	movs	r0, r4
 800514e:	e7de      	b.n	800510e <_raise_r+0x12>

08005150 <raise>:
 8005150:	b510      	push	{r4, lr}
 8005152:	4b03      	ldr	r3, [pc, #12]	; (8005160 <raise+0x10>)
 8005154:	0001      	movs	r1, r0
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	f7ff ffd0 	bl	80050fc <_raise_r>
 800515c:	bd10      	pop	{r4, pc}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	200000a0 	.word	0x200000a0

08005164 <_kill_r>:
 8005164:	2300      	movs	r3, #0
 8005166:	b570      	push	{r4, r5, r6, lr}
 8005168:	4d06      	ldr	r5, [pc, #24]	; (8005184 <_kill_r+0x20>)
 800516a:	0004      	movs	r4, r0
 800516c:	0008      	movs	r0, r1
 800516e:	0011      	movs	r1, r2
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	f7fd fba5 	bl	80028c0 <_kill>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	d103      	bne.n	8005182 <_kill_r+0x1e>
 800517a:	682b      	ldr	r3, [r5, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d000      	beq.n	8005182 <_kill_r+0x1e>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	20000cd0 	.word	0x20000cd0

08005188 <_getpid_r>:
 8005188:	b510      	push	{r4, lr}
 800518a:	f7fd fb97 	bl	80028bc <_getpid>
 800518e:	bd10      	pop	{r4, pc}

08005190 <__malloc_lock>:
 8005190:	b510      	push	{r4, lr}
 8005192:	4802      	ldr	r0, [pc, #8]	; (800519c <__malloc_lock+0xc>)
 8005194:	f000 f80c 	bl	80051b0 <__retarget_lock_acquire_recursive>
 8005198:	bd10      	pop	{r4, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	20000cd8 	.word	0x20000cd8

080051a0 <__malloc_unlock>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	4802      	ldr	r0, [pc, #8]	; (80051ac <__malloc_unlock+0xc>)
 80051a4:	f000 f805 	bl	80051b2 <__retarget_lock_release_recursive>
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	20000cd8 	.word	0x20000cd8

080051b0 <__retarget_lock_acquire_recursive>:
 80051b0:	4770      	bx	lr

080051b2 <__retarget_lock_release_recursive>:
 80051b2:	4770      	bx	lr

080051b4 <_init>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ba:	bc08      	pop	{r3}
 80051bc:	469e      	mov	lr, r3
 80051be:	4770      	bx	lr

080051c0 <_fini>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c6:	bc08      	pop	{r3}
 80051c8:	469e      	mov	lr, r3
 80051ca:	4770      	bx	lr
