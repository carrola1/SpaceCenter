
SpaceCenter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c28  08008c28  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08008c28  08008c28  00018c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c30  08008c30  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008c30  08008c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008c38  08008c38  00018c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08008c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f68  20000160  08008da0  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  08008da0  000210c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b2f8  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f8c  00000000  00000000  0004b4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  00050450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016f7  00000000  00000000  00051dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ac8  00000000  00000000  000534b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7ae  00000000  00000000  0006cf7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000978aa  00000000  00000000  0008872d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000600c  00000000  00000000  0011ffd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000084aa  00000000  00000000  00125fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0012e48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000160 	.word	0x20000160
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008078 	.word	0x08008078

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000164 	.word	0x20000164
 8000104:	08008078 	.word	0x08008078

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <_ZN9LedButtonC1EP12GPIO_TypeDeftS1_t>:
#include "LedButton.hpp"

LedButton::LedButton(GPIO_TypeDef* ledGpioIn, uint16_t ledGpioPinIn, 
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	1dbb      	adds	r3, r7, #6
 80004b6:	801a      	strh	r2, [r3, #0]
                      GPIO_TypeDef* buttonGpioIn, uint16_t buttonGpioPinIn) {
  ledGpio = ledGpioIn;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	601a      	str	r2, [r3, #0]
  ledGpioPin = ledGpioPinIn;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	1dba      	adds	r2, r7, #6
 80004c2:	8812      	ldrh	r2, [r2, #0]
 80004c4:	809a      	strh	r2, [r3, #4]
  buttonGpio = buttonGpioIn;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	683a      	ldr	r2, [r7, #0]
 80004ca:	609a      	str	r2, [r3, #8]
  buttonGpioPin = buttonGpioPinIn;
 80004cc:	68fa      	ldr	r2, [r7, #12]
 80004ce:	2318      	movs	r3, #24
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	8193      	strh	r3, [r2, #12]
  buttonState = NOT_PRESSED;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2200      	movs	r2, #0
 80004da:	739a      	strb	r2, [r3, #14]
  ledState = OFF;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2200      	movs	r2, #0
 80004e0:	73da      	strb	r2, [r3, #15]
  timeLast = 0;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  debounceButton = false;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2200      	movs	r2, #0
 80004ec:	751a      	strb	r2, [r3, #20]
  buttonTriggerEvent = NO_CHANGE;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	2200      	movs	r2, #0
 80004f2:	755a      	strb	r2, [r3, #21]
}
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	0018      	movs	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b004      	add	sp, #16
 80004fc:	bd80      	pop	{r7, pc}

080004fe <_ZN9LedButtonD1Ev>:

LedButton::~LedButton() {
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
}
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	0018      	movs	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	b002      	add	sp, #8
 800050e:	bd80      	pop	{r7, pc}

08000510 <_ZN9LedButton11setLedStateE13LedState_enum>:

void LedButton::setLedState(LedState_enum state) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	000a      	movs	r2, r1
 800051a:	1cfb      	adds	r3, r7, #3
 800051c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(ledGpio, ledGpioPin, static_cast<GPIO_PinState>(state));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	8899      	ldrh	r1, [r3, #4]
 8000526:	1cfb      	adds	r3, r7, #3
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	001a      	movs	r2, r3
 800052c:	f004 fea0 	bl	8005270 <HAL_GPIO_WritePin>
  ledState = state;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	1cfa      	adds	r2, r7, #3
 8000534:	7812      	ldrb	r2, [r2, #0]
 8000536:	73da      	strb	r2, [r3, #15]
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b002      	add	sp, #8
 800053e:	bd80      	pop	{r7, pc}

08000540 <_ZN9LedButton17updateButtonStateEv>:

LedState_enum LedButton::getLedState() {
  return ledState;
}

void LedButton::updateButtonState() {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  if (debounceButton == false) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	7d1b      	ldrb	r3, [r3, #20]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d137      	bne.n	80005c0 <_ZN9LedButton17updateButtonStateEv+0x80>
    ButtonState_enum newButtonState;
    if (HAL_GPIO_ReadPin(buttonGpio, buttonGpioPin) == GPIO_PIN_SET) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689a      	ldr	r2, [r3, #8]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	899b      	ldrh	r3, [r3, #12]
 8000558:	0019      	movs	r1, r3
 800055a:	0010      	movs	r0, r2
 800055c:	f004 fe82 	bl	8005264 <HAL_GPIO_ReadPin>
 8000560:	0003      	movs	r3, r0
 8000562:	3b01      	subs	r3, #1
 8000564:	425a      	negs	r2, r3
 8000566:	4153      	adcs	r3, r2
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d004      	beq.n	8000578 <_ZN9LedButton17updateButtonStateEv+0x38>
      newButtonState = NOT_PRESSED;
 800056e:	2317      	movs	r3, #23
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	e003      	b.n	8000580 <_ZN9LedButton17updateButtonStateEv+0x40>
    } else {
      newButtonState = PRESSED;
 8000578:	2317      	movs	r3, #23
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
    }
    if (newButtonState != buttonState) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7b9b      	ldrb	r3, [r3, #14]
 8000584:	2117      	movs	r1, #23
 8000586:	187a      	adds	r2, r7, r1
 8000588:	7812      	ldrb	r2, [r2, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	d012      	beq.n	80005b4 <_ZN9LedButton17updateButtonStateEv+0x74>
      debounceButton = true;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	751a      	strb	r2, [r3, #20]
      if (newButtonState == PRESSED) {
 8000594:	187b      	adds	r3, r7, r1
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d103      	bne.n	80005a4 <_ZN9LedButton17updateButtonStateEv+0x64>
        buttonTriggerEvent = RISING;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	755a      	strb	r2, [r3, #21]
 80005a2:	e002      	b.n	80005aa <_ZN9LedButton17updateButtonStateEv+0x6a>
      } else {
        buttonTriggerEvent = FALLING;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2202      	movs	r2, #2
 80005a8:	755a      	strb	r2, [r3, #21]
      }
      timeLast = HAL_GetTick();
 80005aa:	f004 fc59 	bl	8004e60 <HAL_GetTick>
 80005ae:	0002      	movs	r2, r0
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	611a      	str	r2, [r3, #16]
    }
    buttonState = newButtonState;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2217      	movs	r2, #23
 80005b8:	18ba      	adds	r2, r7, r2
 80005ba:	7812      	ldrb	r2, [r2, #0]
 80005bc:	739a      	strb	r2, [r3, #14]
    uint32_t timeDiff = timeNew - timeLast;
    if (timeDiff >= BUTTON_DEBOUNCE_MS) {
      debounceButton = false;
    }
  }
}
 80005be:	e00e      	b.n	80005de <_ZN9LedButton17updateButtonStateEv+0x9e>
    uint32_t timeNew = HAL_GetTick();
 80005c0:	f004 fc4e 	bl	8004e60 <HAL_GetTick>
 80005c4:	0003      	movs	r3, r0
 80005c6:	613b      	str	r3, [r7, #16]
    uint32_t timeDiff = timeNew - timeLast;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	693a      	ldr	r2, [r7, #16]
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	60fb      	str	r3, [r7, #12]
    if (timeDiff >= BUTTON_DEBOUNCE_MS) {
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2b63      	cmp	r3, #99	; 0x63
 80005d6:	d902      	bls.n	80005de <_ZN9LedButton17updateButtonStateEv+0x9e>
      debounceButton = false;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	751a      	strb	r2, [r3, #20]
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b006      	add	sp, #24
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <_ZN9LedButton15getTriggerEventEv>:

ButtonState_enum LedButton::getButtonState() {
  return buttonState;
}

ButtonTriggerEvent_enum LedButton::getTriggerEvent() {
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b084      	sub	sp, #16
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  ButtonTriggerEvent_enum newButtonTriggerEvent = buttonTriggerEvent;
 80005ee:	210f      	movs	r1, #15
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	7d52      	ldrb	r2, [r2, #21]
 80005f6:	701a      	strb	r2, [r3, #0]
  buttonTriggerEvent = NO_CHANGE;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	755a      	strb	r2, [r3, #21]
  return newButtonTriggerEvent;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	781b      	ldrb	r3, [r3, #0]
}
 8000602:	0018      	movs	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	b004      	add	sp, #16
 8000608:	bd80      	pop	{r7, pc}

0800060a <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>:
// Peripheral usage
#include "NeoPixel.hpp"
#include <stdlib.h>

NeoPixel::NeoPixel(uint16_t n, TIM_HandleTypeDef &timHandle, uint32_t timChannel, DMA_HandleTypeDef &dmaHandle) 
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	60f8      	str	r0, [r7, #12]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	200a      	movs	r0, #10
 8000618:	183b      	adds	r3, r7, r0
 800061a:	1c0a      	adds	r2, r1, #0
 800061c:	801a      	strh	r2, [r3, #0]
        : htim(timHandle), hdma(dmaHandle), timCh{timChannel} {
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	69ba      	ldr	r2, [r7, #24]
 8000628:	619a      	str	r2, [r3, #24]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	61da      	str	r2, [r3, #28]
  updateLength(n);
 8000630:	183b      	adds	r3, r7, r0
 8000632:	881a      	ldrh	r2, [r3, #0]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	0011      	movs	r1, r2
 8000638:	0018      	movs	r0, r3
 800063a:	f000 f80e 	bl	800065a <_ZN8NeoPixel12updateLengthEt>
}
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b004      	add	sp, #16
 8000646:	bd80      	pop	{r7, pc}

08000648 <_ZN8NeoPixelD1Ev>:

NeoPixel::~NeoPixel() {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
}
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0018      	movs	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}

0800065a <_ZN8NeoPixel12updateLengthEt>:

void NeoPixel::updateLength(uint16_t n) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	000a      	movs	r2, r1
 8000664:	1cbb      	adds	r3, r7, #2
 8000666:	801a      	strh	r2, [r3, #0]

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * 3;
 8000668:	1cbb      	adds	r3, r7, #2
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	1c1a      	adds	r2, r3, #0
 800066e:	1892      	adds	r2, r2, r2
 8000670:	18d3      	adds	r3, r2, r3
 8000672:	b29a      	uxth	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	809a      	strh	r2, [r3, #4]
  pixels = (uint8_t *)malloc(numBytes);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	889b      	ldrh	r3, [r3, #4]
 800067c:	0018      	movs	r0, r3
 800067e:	f007 fb3b 	bl	8007cf8 <malloc>
 8000682:	0003      	movs	r3, r0
 8000684:	001a      	movs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	609a      	str	r2, [r3, #8]
  // Each bit is represented by a PWM cycle, which is defined by a byte value
  // Pad the start and end of the transaction with 0 writes
  wrBufLen = numBytes*8+16;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	3302      	adds	r3, #2
 8000690:	b29b      	uxth	r3, r3
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	b29a      	uxth	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	801a      	strh	r2, [r3, #0]
  wr_buf = (uint8_t *)malloc(wrBufLen);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	0018      	movs	r0, r3
 80006a0:	f007 fb2a 	bl	8007cf8 <malloc>
 80006a4:	0003      	movs	r3, r0
 80006a6:	001a      	movs	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60da      	str	r2, [r3, #12]
  numLEDs = n;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	1cba      	adds	r2, r7, #2
 80006b0:	8812      	ldrh	r2, [r2, #0]
 80006b2:	805a      	strh	r2, [r3, #2]
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b002      	add	sp, #8
 80006ba:	bd80      	pop	{r7, pc}

080006bc <_ZN8NeoPixel13setPixelColorEthhh>:

void NeoPixel::setPixelColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	000c      	movs	r4, r1
 80006c6:	0010      	movs	r0, r2
 80006c8:	0019      	movs	r1, r3
 80006ca:	1cbb      	adds	r3, r7, #2
 80006cc:	1c22      	adds	r2, r4, #0
 80006ce:	801a      	strh	r2, [r3, #0]
 80006d0:	1c7b      	adds	r3, r7, #1
 80006d2:	1c02      	adds	r2, r0, #0
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	003b      	movs	r3, r7
 80006d8:	1c0a      	adds	r2, r1, #0
 80006da:	701a      	strb	r2, [r3, #0]
  pixels[n * 3] = g;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6899      	ldr	r1, [r3, #8]
 80006e0:	1cbb      	adds	r3, r7, #2
 80006e2:	881a      	ldrh	r2, [r3, #0]
 80006e4:	0013      	movs	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	189b      	adds	r3, r3, r2
 80006ea:	18cb      	adds	r3, r1, r3
 80006ec:	003a      	movs	r2, r7
 80006ee:	7812      	ldrb	r2, [r2, #0]
 80006f0:	701a      	strb	r2, [r3, #0]
  pixels[n * 3 + 1] = r;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6899      	ldr	r1, [r3, #8]
 80006f6:	1cbb      	adds	r3, r7, #2
 80006f8:	881a      	ldrh	r2, [r3, #0]
 80006fa:	0013      	movs	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	189b      	adds	r3, r3, r2
 8000700:	3301      	adds	r3, #1
 8000702:	18cb      	adds	r3, r1, r3
 8000704:	1c7a      	adds	r2, r7, #1
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	701a      	strb	r2, [r3, #0]
  pixels[n * 3 + 2] = b;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6899      	ldr	r1, [r3, #8]
 800070e:	1cbb      	adds	r3, r7, #2
 8000710:	881a      	ldrh	r2, [r3, #0]
 8000712:	0013      	movs	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	189b      	adds	r3, r3, r2
 8000718:	3302      	adds	r3, #2
 800071a:	18ca      	adds	r2, r1, r3
 800071c:	2318      	movs	r3, #24
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	7013      	strb	r3, [r2, #0]
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b003      	add	sp, #12
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <_ZN8NeoPixel4showEv>:

void NeoPixel::show(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  for(uint_fast8_t i = 0; i < 8; i++) {
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	e008      	b.n	800074c <_ZN8NeoPixel4showEv+0x20>
      wr_buf[i] = 0;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	68da      	ldr	r2, [r3, #12]
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	18d3      	adds	r3, r2, r3
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
  for(uint_fast8_t i = 0; i < 8; i++) {
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	2b07      	cmp	r3, #7
 8000750:	d9f3      	bls.n	800073a <_ZN8NeoPixel4showEv+0xe>
    }

  for(uint16_t j = 0; j < numBytes; j++) {
 8000752:	2312      	movs	r3, #18
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	2200      	movs	r2, #0
 8000758:	801a      	strh	r2, [r3, #0]
 800075a:	e02d      	b.n	80007b8 <_ZN8NeoPixel4showEv+0x8c>
	  for(uint_fast8_t i = 0; i < 8; i++) {
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e021      	b.n	80007a6 <_ZN8NeoPixel4showEv+0x7a>
		  wr_buf[i+8*j+8 ] = PWM_LO << (((pixels[j]  << i) & 0x80) > 0);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	2312      	movs	r3, #18
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	18d3      	adds	r3, r2, r3
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	001a      	movs	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	409a      	lsls	r2, r3
 8000776:	0013      	movs	r3, r2
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	4013      	ands	r3, r2
 800077c:	2b00      	cmp	r3, #0
 800077e:	dd01      	ble.n	8000784 <_ZN8NeoPixel4showEv+0x58>
 8000780:	2114      	movs	r1, #20
 8000782:	e000      	b.n	8000786 <_ZN8NeoPixel4showEv+0x5a>
 8000784:	210a      	movs	r1, #10
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	68da      	ldr	r2, [r3, #12]
 800078a:	2312      	movs	r3, #18
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	0018      	movs	r0, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	18c3      	adds	r3, r0, r3
 8000798:	3308      	adds	r3, #8
 800079a:	18d3      	adds	r3, r2, r3
 800079c:	1c0a      	adds	r2, r1, #0
 800079e:	701a      	strb	r2, [r3, #0]
	  for(uint_fast8_t i = 0; i < 8; i++) {
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	d9da      	bls.n	8000762 <_ZN8NeoPixel4showEv+0x36>
  for(uint16_t j = 0; j < numBytes; j++) {
 80007ac:	2112      	movs	r1, #18
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	881a      	ldrh	r2, [r3, #0]
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	3201      	adds	r2, #1
 80007b6:	801a      	strh	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	889b      	ldrh	r3, [r3, #4]
 80007bc:	2212      	movs	r2, #18
 80007be:	18ba      	adds	r2, r7, r2
 80007c0:	8812      	ldrh	r2, [r2, #0]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d3ca      	bcc.n	800075c <_ZN8NeoPixel4showEv+0x30>
	  }
  }
  for(uint_fast8_t i = 0; i < 8; i++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	e00e      	b.n	80007ea <_ZN8NeoPixel4showEv+0xbe>
	  wr_buf[i+8*numBytes+8 ] = 0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68da      	ldr	r2, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	889b      	ldrh	r3, [r3, #4]
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	0019      	movs	r1, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	18cb      	adds	r3, r1, r3
 80007dc:	3308      	adds	r3, #8
 80007de:	18d3      	adds	r3, r2, r3
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
  for(uint_fast8_t i = 0; i < 8; i++) {
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	3301      	adds	r3, #1
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	2b07      	cmp	r3, #7
 80007ee:	d9ed      	bls.n	80007cc <_ZN8NeoPixel4showEv+0xa0>
  }
  HAL_TIM_PWM_Start_DMA(&htim, timCh, (uint32_t *)wr_buf, wrBufLen);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6958      	ldr	r0, [r3, #20]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69d9      	ldr	r1, [r3, #28]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	f005 ff73 	bl	80066ea <HAL_TIM_PWM_Start_DMA>

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b006      	add	sp, #24
 800080a:	bd80      	pop	{r7, pc}

0800080c <_ZN12RocketStreamC1ER17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>:
#include "RocketStream.hpp"
#include "stm32l0xx_hal.h"

RocketStream::RocketStream(TIM_HandleTypeDef &timHandle, uint32_t timChannel, DMA_HandleTypeDef &dmaHandle)
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af02      	add	r7, sp, #8
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	603b      	str	r3, [r7, #0]
                : ledArray((uint16_t)(NUM_LEDS_ROCKET_STREAM), timHandle, timChannel, dmaHandle) {
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	000b      	movs	r3, r1
 8000826:	2148      	movs	r1, #72	; 0x48
 8000828:	f7ff feef 	bl	800060a <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
  for (int i=0; i<NUM_LEDS_ROCKET_STREAM; i++) {
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e00b      	b.n	800084a <_ZN12RocketStreamC1ER17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x3e>
    ledArray.setPixelColor(i, 0, 0, 0);
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	b299      	uxth	r1, r3
 8000838:	2300      	movs	r3, #0
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2300      	movs	r3, #0
 800083e:	2200      	movs	r2, #0
 8000840:	f7ff ff3c 	bl	80006bc <_ZN8NeoPixel13setPixelColorEthhh>
  for (int i=0; i<NUM_LEDS_ROCKET_STREAM; i++) {
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	3301      	adds	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	2b47      	cmp	r3, #71	; 0x47
 800084e:	ddf0      	ble.n	8000832 <_ZN12RocketStreamC1ER17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x26>
  }
  setRocketColor(0, 0, 0, 0);
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	2300      	movs	r3, #0
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2300      	movs	r3, #0
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	f000 f82f 	bl	80008be <_ZN12RocketStream14setRocketColorEhhhh>
  setStreamColor(0, 0, 0, 0);
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	2300      	movs	r3, #0
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2300      	movs	r3, #0
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	f000 f884 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
  setStreamColor(1, 0, 0, 0);
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	2300      	movs	r3, #0
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2300      	movs	r3, #0
 8000878:	2200      	movs	r2, #0
 800087a:	2101      	movs	r1, #1
 800087c:	f000 f87c 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
  showPixels();
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fa4d 	bl	8000d22 <_ZN12RocketStream10showPixelsEv>
  lastUpdateTime = HAL_GetTick();
 8000888:	f004 faea 	bl	8004e60 <HAL_GetTick>
 800088c:	0002      	movs	r2, r0
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	621a      	str	r2, [r3, #32]
  streamCnt = 0;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2224      	movs	r2, #36	; 0x24
 8000896:	2100      	movs	r1, #0
 8000898:	5499      	strb	r1, [r3, r2]
}
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b006      	add	sp, #24
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <_ZN12RocketStreamD1Ev>:

RocketStream::~RocketStream() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff feca 	bl	8000648 <_ZN8NeoPixelD1Ev>
}
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	0018      	movs	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}

080008be <_ZN12RocketStream14setRocketColorEhhhh>:

void RocketStream::setRocketColor(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80008be:	b590      	push	{r4, r7, lr}
 80008c0:	b087      	sub	sp, #28
 80008c2:	af02      	add	r7, sp, #8
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	000c      	movs	r4, r1
 80008c8:	0010      	movs	r0, r2
 80008ca:	0019      	movs	r1, r3
 80008cc:	1cfb      	adds	r3, r7, #3
 80008ce:	1c22      	adds	r2, r4, #0
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	1cbb      	adds	r3, r7, #2
 80008d4:	1c02      	adds	r2, r0, #0
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	1c7b      	adds	r3, r7, #1
 80008da:	1c0a      	adds	r2, r1, #0
 80008dc:	701a      	strb	r2, [r3, #0]
  for (int i=index*2; i<index*2+2; i++) {
 80008de:	1cfb      	adds	r3, r7, #3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e010      	b.n	800090a <_ZN12RocketStream14setRocketColorEhhhh+0x4c>
    ledArray.setPixelColor(i, r, g, b);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	b299      	uxth	r1, r3
 80008ee:	1c7b      	adds	r3, r7, #1
 80008f0:	781c      	ldrb	r4, [r3, #0]
 80008f2:	1cbb      	adds	r3, r7, #2
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	2320      	movs	r3, #32
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	0023      	movs	r3, r4
 8000900:	f7ff fedc 	bl	80006bc <_ZN8NeoPixel13setPixelColorEthhh>
  for (int i=index*2; i<index*2+2; i++) {
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	3301      	adds	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	1cfb      	adds	r3, r7, #3
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbe7      	blt.n	80008e8 <_ZN12RocketStream14setRocketColorEhhhh+0x2a>
  }
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b005      	add	sp, #20
 8000920:	bd90      	pop	{r4, r7, pc}

08000922 <_ZN12RocketStream17setAllRocketColorEhhh>:

void RocketStream::setAllRocketColor(uint8_t r, uint8_t g, uint8_t b) {
 8000922:	b590      	push	{r4, r7, lr}
 8000924:	b087      	sub	sp, #28
 8000926:	af02      	add	r7, sp, #8
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	000c      	movs	r4, r1
 800092c:	0010      	movs	r0, r2
 800092e:	0019      	movs	r1, r3
 8000930:	1cfb      	adds	r3, r7, #3
 8000932:	1c22      	adds	r2, r4, #0
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	1cbb      	adds	r3, r7, #2
 8000938:	1c02      	adds	r2, r0, #0
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	1c7b      	adds	r3, r7, #1
 800093e:	1c0a      	adds	r2, r1, #0
 8000940:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_ROCKETS*NUM_LEDS_ROCKET; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e00f      	b.n	8000968 <_ZN12RocketStream17setAllRocketColorEhhh+0x46>
    ledArray.setPixelColor(i, r, g, b);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	b299      	uxth	r1, r3
 800094e:	1cbb      	adds	r3, r7, #2
 8000950:	781c      	ldrb	r4, [r3, #0]
 8000952:	1cfb      	adds	r3, r7, #3
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	1c7b      	adds	r3, r7, #1
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	0023      	movs	r3, r4
 800095e:	f7ff fead 	bl	80006bc <_ZN8NeoPixel13setPixelColorEthhh>
  for (int i=0; i<NUM_ROCKETS*NUM_LEDS_ROCKET; i++) {
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3301      	adds	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2b07      	cmp	r3, #7
 800096c:	ddec      	ble.n	8000948 <_ZN12RocketStream17setAllRocketColorEhhh+0x26>
  }
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b005      	add	sp, #20
 8000976:	bd90      	pop	{r4, r7, pc}

08000978 <_ZN12RocketStream14setStreamColorEhhhh>:

void RocketStream::setStreamColor(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8000978:	b5b0      	push	{r4, r5, r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af02      	add	r7, sp, #8
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	000c      	movs	r4, r1
 8000982:	0010      	movs	r0, r2
 8000984:	0019      	movs	r1, r3
 8000986:	1cfb      	adds	r3, r7, #3
 8000988:	1c22      	adds	r2, r4, #0
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	1cbb      	adds	r3, r7, #2
 800098e:	1c02      	adds	r2, r0, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	1c7b      	adds	r3, r7, #1
 8000994:	1c0a      	adds	r2, r1, #0
 8000996:	701a      	strb	r2, [r3, #0]
  // Left side stream
  ledArray.setPixelColor(STREAM_START_IND+index, r, g, b);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	1cfb      	adds	r3, r7, #3
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	3308      	adds	r3, #8
 80009a2:	b299      	uxth	r1, r3
 80009a4:	1c7b      	adds	r3, r7, #1
 80009a6:	781c      	ldrb	r4, [r3, #0]
 80009a8:	1cbb      	adds	r3, r7, #2
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	2518      	movs	r5, #24
 80009ae:	197b      	adds	r3, r7, r5
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	0023      	movs	r3, r4
 80009b6:	f7ff fe81 	bl	80006bc <_ZN8NeoPixel13setPixelColorEthhh>

  // Right side stream
  ledArray.setPixelColor(STREAM_START_IND+NUM_LEDS_STREAM*2-1-index, r, g, b);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	1cfb      	adds	r3, r7, #3
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	2247      	movs	r2, #71	; 0x47
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	b299      	uxth	r1, r3
 80009c8:	1c7b      	adds	r3, r7, #1
 80009ca:	781c      	ldrb	r4, [r3, #0]
 80009cc:	1cbb      	adds	r3, r7, #2
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	197b      	adds	r3, r7, r5
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	0023      	movs	r3, r4
 80009d8:	f7ff fe70 	bl	80006bc <_ZN8NeoPixel13setPixelColorEthhh>
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b002      	add	sp, #8
 80009e2:	bdb0      	pop	{r4, r5, r7, pc}

080009e4 <_ZN12RocketStream17setAllStreamColorEhhh>:

void RocketStream::setAllStreamColor(uint8_t r, uint8_t g, uint8_t b) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b087      	sub	sp, #28
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	000c      	movs	r4, r1
 80009ee:	0010      	movs	r0, r2
 80009f0:	0019      	movs	r1, r3
 80009f2:	1cfb      	adds	r3, r7, #3
 80009f4:	1c22      	adds	r2, r4, #0
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	1cbb      	adds	r3, r7, #2
 80009fa:	1c02      	adds	r2, r0, #0
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	1c7b      	adds	r3, r7, #1
 8000a00:	1c0a      	adds	r2, r1, #0
 8000a02:	701a      	strb	r2, [r3, #0]
  for (int i=STREAM_START_IND; i<STREAM_START_IND+NUM_LEDS_STREAM*2; i++) {
 8000a04:	2308      	movs	r3, #8
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e00f      	b.n	8000a2a <_ZN12RocketStream17setAllStreamColorEhhh+0x46>
    ledArray.setPixelColor(i, r, g, b);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	b299      	uxth	r1, r3
 8000a10:	1cbb      	adds	r3, r7, #2
 8000a12:	781c      	ldrb	r4, [r3, #0]
 8000a14:	1cfb      	adds	r3, r7, #3
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	1c7b      	adds	r3, r7, #1
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	0023      	movs	r3, r4
 8000a20:	f7ff fe4c 	bl	80006bc <_ZN8NeoPixel13setPixelColorEthhh>
  for (int i=STREAM_START_IND; i<STREAM_START_IND+NUM_LEDS_STREAM*2; i++) {
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3301      	adds	r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b47      	cmp	r3, #71	; 0x47
 8000a2e:	ddec      	ble.n	8000a0a <_ZN12RocketStream17setAllStreamColorEhhh+0x26>
  }
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b005      	add	sp, #20
 8000a38:	bd90      	pop	{r4, r7, pc}

08000a3a <_ZN12RocketStream12rocketLaunchEb>:

LaunchState_enum RocketStream::rocketLaunch(bool newSwitchPress) {
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b084      	sub	sp, #16
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	000a      	movs	r2, r1
 8000a44:	1cfb      	adds	r3, r7, #3
 8000a46:	701a      	strb	r2, [r3, #0]
  uint32_t newTime = HAL_GetTick();
 8000a48:	f004 fa0a 	bl	8004e60 <HAL_GetTick>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	60fb      	str	r3, [r7, #12]

  if (newSwitchPress == 0) {
 8000a50:	1cfb      	adds	r3, r7, #3
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d115      	bne.n	8000a84 <_ZN12RocketStream12rocketLaunchEb+0x4a>
    if (newTime - lastUpdateTime >= STREAM_TIMEOUT_MS) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	1ad2      	subs	r2, r2, r3
 8000a60:	2396      	movs	r3, #150	; 0x96
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d30b      	bcc.n	8000a80 <_ZN12RocketStream12rocketLaunchEb+0x46>
      if (streamCnt > 0) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2224      	movs	r2, #36	; 0x24
 8000a6c:	5c9b      	ldrb	r3, [r3, r2]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d004      	beq.n	8000a7c <_ZN12RocketStream12rocketLaunchEb+0x42>
        lastUpdateTime = newTime;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	621a      	str	r2, [r3, #32]
        return DECREMENT;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e00e      	b.n	8000a9a <_ZN12RocketStream12rocketLaunchEb+0x60>
      } else {
        return LANDED;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e00c      	b.n	8000a9a <_ZN12RocketStream12rocketLaunchEb+0x60>
      }
    } else {
      return STABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	e00a      	b.n	8000a9a <_ZN12RocketStream12rocketLaunchEb+0x60>
    }
  } else {
    lastUpdateTime = newTime;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	621a      	str	r2, [r3, #32]
    if (streamCnt > 30) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2224      	movs	r2, #36	; 0x24
 8000a8e:	5c9b      	ldrb	r3, [r3, r2]
 8000a90:	2b1e      	cmp	r3, #30
 8000a92:	d901      	bls.n	8000a98 <_ZN12RocketStream12rocketLaunchEb+0x5e>
      return LAUNCHED;
 8000a94:	2304      	movs	r3, #4
 8000a96:	e000      	b.n	8000a9a <_ZN12RocketStream12rocketLaunchEb+0x60>
    } else {
      return INCREMENT;
 8000a98:	2302      	movs	r3, #2
    }
  }
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_ZN12RocketStream15incrementLaunchEv>:

void RocketStream::incrementLaunch() {
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af02      	add	r7, sp, #8
 8000aa8:	6078      	str	r0, [r7, #4]
  // Increment Stream
  if (streamCnt < 15) {
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2224      	movs	r2, #36	; 0x24
 8000aae:	5c9b      	ldrb	r3, [r3, r2]
 8000ab0:	2b0e      	cmp	r3, #14
 8000ab2:	d816      	bhi.n	8000ae2 <_ZN12RocketStream15incrementLaunchEv+0x40>
    setStreamColor(streamCnt, 250, 0, 0);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2224      	movs	r2, #36	; 0x24
 8000ab8:	5c99      	ldrb	r1, [r3, r2]
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	2300      	movs	r3, #0
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	22fa      	movs	r2, #250	; 0xfa
 8000ac4:	f7ff ff58 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
    setStreamColor(streamCnt+1, 250, 0, 0);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2224      	movs	r2, #36	; 0x24
 8000acc:	5c9b      	ldrb	r3, [r3, r2]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	b2d9      	uxtb	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	22fa      	movs	r2, #250	; 0xfa
 8000adc:	f7ff ff4c 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
 8000ae0:	e04d      	b.n	8000b7e <_ZN12RocketStream15incrementLaunchEv+0xdc>
  } else if (streamCnt < 25) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2224      	movs	r2, #36	; 0x24
 8000ae6:	5c9b      	ldrb	r3, [r3, r2]
 8000ae8:	2b18      	cmp	r3, #24
 8000aea:	d816      	bhi.n	8000b1a <_ZN12RocketStream15incrementLaunchEv+0x78>
    setStreamColor(streamCnt, 250, 136, 3);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2224      	movs	r2, #36	; 0x24
 8000af0:	5c99      	ldrb	r1, [r3, r2]
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	2303      	movs	r3, #3
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2388      	movs	r3, #136	; 0x88
 8000afa:	22fa      	movs	r2, #250	; 0xfa
 8000afc:	f7ff ff3c 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
    setStreamColor(streamCnt+1, 250, 136, 3);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2224      	movs	r2, #36	; 0x24
 8000b04:	5c9b      	ldrb	r3, [r3, r2]
 8000b06:	3301      	adds	r3, #1
 8000b08:	b2d9      	uxtb	r1, r3
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2388      	movs	r3, #136	; 0x88
 8000b12:	22fa      	movs	r2, #250	; 0xfa
 8000b14:	f7ff ff30 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
 8000b18:	e031      	b.n	8000b7e <_ZN12RocketStream15incrementLaunchEv+0xdc>
  } else if (streamCnt < 31) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2224      	movs	r2, #36	; 0x24
 8000b1e:	5c9b      	ldrb	r3, [r3, r2]
 8000b20:	2b1e      	cmp	r3, #30
 8000b22:	d816      	bhi.n	8000b52 <_ZN12RocketStream15incrementLaunchEv+0xb0>
    setStreamColor(streamCnt, 240, 252, 3);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2224      	movs	r2, #36	; 0x24
 8000b28:	5c99      	ldrb	r1, [r3, r2]
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	23fc      	movs	r3, #252	; 0xfc
 8000b32:	22f0      	movs	r2, #240	; 0xf0
 8000b34:	f7ff ff20 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
    setStreamColor(streamCnt+1, 240, 252, 3);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2224      	movs	r2, #36	; 0x24
 8000b3c:	5c9b      	ldrb	r3, [r3, r2]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b2d9      	uxtb	r1, r3
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	2303      	movs	r3, #3
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	23fc      	movs	r3, #252	; 0xfc
 8000b4a:	22f0      	movs	r2, #240	; 0xf0
 8000b4c:	f7ff ff14 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
 8000b50:	e015      	b.n	8000b7e <_ZN12RocketStream15incrementLaunchEv+0xdc>
  } else {
    setAllStreamColor(0, 0, 0);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	2300      	movs	r3, #0
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f7ff ff43 	bl	80009e4 <_ZN12RocketStream17setAllStreamColorEhhh>
    setStreamColor(0, 250, 0, 0);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	2300      	movs	r3, #0
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2300      	movs	r3, #0
 8000b66:	22fa      	movs	r2, #250	; 0xfa
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f7ff ff05 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
    setStreamColor(1, 250, 0, 0);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	2300      	movs	r3, #0
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2300      	movs	r3, #0
 8000b76:	22fa      	movs	r2, #250	; 0xfa
 8000b78:	2101      	movs	r1, #1
 8000b7a:	f7ff fefd 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
  }

  // Increment Rockets
  if (streamCnt == 0) {
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2224      	movs	r2, #36	; 0x24
 8000b82:	5c9b      	ldrb	r3, [r3, r2]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d108      	bne.n	8000b9a <_ZN12RocketStream15incrementLaunchEv+0xf8>
    setRocketColor(0, 250, 0, 0);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	22fa      	movs	r2, #250	; 0xfa
 8000b92:	2100      	movs	r1, #0
 8000b94:	f7ff fe93 	bl	80008be <_ZN12RocketStream14setRocketColorEhhhh>
 8000b98:	e03e      	b.n	8000c18 <_ZN12RocketStream15incrementLaunchEv+0x176>
  } else if (streamCnt == 8) {
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2224      	movs	r2, #36	; 0x24
 8000b9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ba0:	2b08      	cmp	r3, #8
 8000ba2:	d108      	bne.n	8000bb6 <_ZN12RocketStream15incrementLaunchEv+0x114>
    setRocketColor(1, 250, 0, 0);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2300      	movs	r3, #0
 8000bac:	22fa      	movs	r2, #250	; 0xfa
 8000bae:	2101      	movs	r1, #1
 8000bb0:	f7ff fe85 	bl	80008be <_ZN12RocketStream14setRocketColorEhhhh>
 8000bb4:	e030      	b.n	8000c18 <_ZN12RocketStream15incrementLaunchEv+0x176>
  } else if (streamCnt == 16) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2224      	movs	r2, #36	; 0x24
 8000bba:	5c9b      	ldrb	r3, [r3, r2]
 8000bbc:	2b10      	cmp	r3, #16
 8000bbe:	d108      	bne.n	8000bd2 <_ZN12RocketStream15incrementLaunchEv+0x130>
    setRocketColor(2, 250, 136, 3);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2388      	movs	r3, #136	; 0x88
 8000bc8:	22fa      	movs	r2, #250	; 0xfa
 8000bca:	2102      	movs	r1, #2
 8000bcc:	f7ff fe77 	bl	80008be <_ZN12RocketStream14setRocketColorEhhhh>
 8000bd0:	e022      	b.n	8000c18 <_ZN12RocketStream15incrementLaunchEv+0x176>
  } else if (streamCnt == 24) {
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2224      	movs	r2, #36	; 0x24
 8000bd6:	5c9b      	ldrb	r3, [r3, r2]
 8000bd8:	2b18      	cmp	r3, #24
 8000bda:	d108      	bne.n	8000bee <_ZN12RocketStream15incrementLaunchEv+0x14c>
    setRocketColor(3, 240, 252, 3);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	2303      	movs	r3, #3
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	23fc      	movs	r3, #252	; 0xfc
 8000be4:	22f0      	movs	r2, #240	; 0xf0
 8000be6:	2103      	movs	r1, #3
 8000be8:	f7ff fe69 	bl	80008be <_ZN12RocketStream14setRocketColorEhhhh>
 8000bec:	e014      	b.n	8000c18 <_ZN12RocketStream15incrementLaunchEv+0x176>
  } else if (streamCnt == 32) {
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2224      	movs	r2, #36	; 0x24
 8000bf2:	5c9b      	ldrb	r3, [r3, r2]
 8000bf4:	2b20      	cmp	r3, #32
 8000bf6:	d10f      	bne.n	8000c18 <_ZN12RocketStream15incrementLaunchEv+0x176>
    streamCnt = -2;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2224      	movs	r2, #36	; 0x24
 8000bfc:	21fe      	movs	r1, #254	; 0xfe
 8000bfe:	5499      	strb	r1, [r3, r2]
    setAllRocketColor(0, 0, 0);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	2300      	movs	r3, #0
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	f7ff fe8b 	bl	8000922 <_ZN12RocketStream17setAllRocketColorEhhh>
    setAllStreamColor(0, 0, 0);
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	f7ff fee6 	bl	80009e4 <_ZN12RocketStream17setAllStreamColorEhhh>
  }
  streamCnt = streamCnt + 2;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2224      	movs	r2, #36	; 0x24
 8000c1c:	5c9b      	ldrb	r3, [r3, r2]
 8000c1e:	3302      	adds	r3, #2
 8000c20:	b2d9      	uxtb	r1, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2224      	movs	r2, #36	; 0x24
 8000c26:	5499      	strb	r1, [r3, r2]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_ZN12RocketStream15decrementLaunchEv>:

void RocketStream::decrementLaunch() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	6078      	str	r0, [r7, #4]
  streamCnt = streamCnt - 2;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2224      	movs	r2, #36	; 0x24
 8000c3c:	5c9b      	ldrb	r3, [r3, r2]
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	b2d9      	uxtb	r1, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2224      	movs	r2, #36	; 0x24
 8000c46:	5499      	strb	r1, [r3, r2]

  // Decrement Stream
  setStreamColor(streamCnt, 0, 0, 0);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2224      	movs	r2, #36	; 0x24
 8000c4c:	5c99      	ldrb	r1, [r3, r2]
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	2300      	movs	r3, #0
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	2300      	movs	r3, #0
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fe8e 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>
  setStreamColor(streamCnt+1, 0, 0, 0);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2224      	movs	r2, #36	; 0x24
 8000c60:	5c9b      	ldrb	r3, [r3, r2]
 8000c62:	3301      	adds	r3, #1
 8000c64:	b2d9      	uxtb	r1, r3
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f7ff fe82 	bl	8000978 <_ZN12RocketStream14setStreamColorEhhhh>

  // Decrement Rockets
  if (streamCnt == 0) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2224      	movs	r2, #36	; 0x24
 8000c78:	5c9b      	ldrb	r3, [r3, r2]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d108      	bne.n	8000c90 <_ZN12RocketStream15decrementLaunchEv+0x60>
    setRocketColor(0, 0, 0, 0);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	2300      	movs	r3, #0
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2300      	movs	r3, #0
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	f7ff fe18 	bl	80008be <_ZN12RocketStream14setRocketColorEhhhh>
  } else if (streamCnt == 16) {
    setRocketColor(2, 0, 0, 0);
  } else if (streamCnt == 24) {
    setRocketColor(3, 0, 0, 0);
  }
}
 8000c8e:	e028      	b.n	8000ce2 <_ZN12RocketStream15decrementLaunchEv+0xb2>
  } else if (streamCnt == 8) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2224      	movs	r2, #36	; 0x24
 8000c94:	5c9b      	ldrb	r3, [r3, r2]
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	d108      	bne.n	8000cac <_ZN12RocketStream15decrementLaunchEv+0x7c>
    setRocketColor(1, 0, 0, 0);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	f7ff fe0a 	bl	80008be <_ZN12RocketStream14setRocketColorEhhhh>
}
 8000caa:	e01a      	b.n	8000ce2 <_ZN12RocketStream15decrementLaunchEv+0xb2>
  } else if (streamCnt == 16) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2224      	movs	r2, #36	; 0x24
 8000cb0:	5c9b      	ldrb	r3, [r3, r2]
 8000cb2:	2b10      	cmp	r3, #16
 8000cb4:	d108      	bne.n	8000cc8 <_ZN12RocketStream15decrementLaunchEv+0x98>
    setRocketColor(2, 0, 0, 0);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	f7ff fdfc 	bl	80008be <_ZN12RocketStream14setRocketColorEhhhh>
}
 8000cc6:	e00c      	b.n	8000ce2 <_ZN12RocketStream15decrementLaunchEv+0xb2>
  } else if (streamCnt == 24) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2224      	movs	r2, #36	; 0x24
 8000ccc:	5c9b      	ldrb	r3, [r3, r2]
 8000cce:	2b18      	cmp	r3, #24
 8000cd0:	d107      	bne.n	8000ce2 <_ZN12RocketStream15decrementLaunchEv+0xb2>
    setRocketColor(3, 0, 0, 0);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2103      	movs	r1, #3
 8000cde:	f7ff fdee 	bl	80008be <_ZN12RocketStream14setRocketColorEhhhh>
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_ZN12RocketStream5resetEv>:

void RocketStream::reset() {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  streamCnt = 0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2224      	movs	r2, #36	; 0x24
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	5499      	strb	r1, [r3, r2]
  setAllRocketColor(0, 0, 0);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	f7ff fe0e 	bl	8000922 <_ZN12RocketStream17setAllRocketColorEhhh>
  setAllStreamColor(0, 0, 0);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f7ff fe69 	bl	80009e4 <_ZN12RocketStream17setAllStreamColorEhhh>
  showPixels();
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 f804 	bl	8000d22 <_ZN12RocketStream10showPixelsEv>
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_ZN12RocketStream10showPixelsEv>:

void RocketStream::showPixels() {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  ledArray.show();
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff fcfd 	bl	800072c <_ZN8NeoPixel4showEv>
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_ZN10TouchBoardC1Ev>:
#include "TouchBoard.hpp"

TouchBoard::TouchBoard() {
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  myTouchState = NOT_TOUCHED;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	739a      	strb	r2, [r3, #14]
  touchEvent = TOUCH_NO_CHANGE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	73da      	strb	r2, [r3, #15]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e01b      	b.n	8000d8c <_ZN10TouchBoardC1Ev+0x52>
    pixelColors[i].r = 0;
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	0013      	movs	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	189b      	adds	r3, r3, r2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	545a      	strb	r2, [r3, r1]
    pixelColors[i].g = 0;
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	0013      	movs	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	189b      	adds	r3, r3, r2
 8000d6c:	18cb      	adds	r3, r1, r3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
    pixelColors[i].b = 0;
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	0013      	movs	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	189b      	adds	r3, r3, r2
 8000d7e:	18cb      	adds	r3, r1, r3
 8000d80:	3302      	adds	r3, #2
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	dde0      	ble.n	8000d54 <_ZN10TouchBoardC1Ev+0x1a>
  }
}
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b004      	add	sp, #16
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_ZN10TouchBoardD1Ev>:

TouchBoard::~TouchBoard() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
}
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b002      	add	sp, #8
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_ZN10TouchBoard16setAllPixelColorEhhh>:
  pixelColors[pixel_num].r = r;
  pixelColors[pixel_num].g = g;
  pixelColors[pixel_num].b = b;
}

void TouchBoard::setAllPixelColor(uint8_t r, uint8_t g, uint8_t b) {
 8000dae:	b590      	push	{r4, r7, lr}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	000c      	movs	r4, r1
 8000db8:	0010      	movs	r0, r2
 8000dba:	0019      	movs	r1, r3
 8000dbc:	1cfb      	adds	r3, r7, #3
 8000dbe:	1c22      	adds	r2, r4, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	1cbb      	adds	r3, r7, #2
 8000dc4:	1c02      	adds	r2, r0, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	1c7b      	adds	r3, r7, #1
 8000dca:	1c0a      	adds	r2, r1, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e01e      	b.n	8000e12 <_ZN10TouchBoard16setAllPixelColorEhhh+0x64>
    pixelColors[i].r = r;
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	0013      	movs	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	189b      	adds	r3, r3, r2
 8000dde:	1cfa      	adds	r2, r7, #3
 8000de0:	7812      	ldrb	r2, [r2, #0]
 8000de2:	545a      	strb	r2, [r3, r1]
    pixelColors[i].g = g;
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	0013      	movs	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	189b      	adds	r3, r3, r2
 8000dee:	18cb      	adds	r3, r1, r3
 8000df0:	3301      	adds	r3, #1
 8000df2:	1cba      	adds	r2, r7, #2
 8000df4:	7812      	ldrb	r2, [r2, #0]
 8000df6:	701a      	strb	r2, [r3, #0]
    pixelColors[i].b = b;
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	189b      	adds	r3, r3, r2
 8000e02:	18cb      	adds	r3, r1, r3
 8000e04:	3302      	adds	r3, #2
 8000e06:	1c7a      	adds	r2, r7, #1
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	dddd      	ble.n	8000dd4 <_ZN10TouchBoard16setAllPixelColorEhhh+0x26>
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b005      	add	sp, #20
 8000e20:	bd90      	pop	{r4, r7, pc}
	...

08000e24 <_ZN10TouchBoard13getPixelColorEh>:

PixelColor_s TouchBoard::getPixelColor(uint8_t pixel_ind) {
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	000a      	movs	r2, r1
 8000e2e:	1cfb      	adds	r3, r7, #3
 8000e30:	701a      	strb	r2, [r3, #0]
  return pixelColors[pixel_ind];
 8000e32:	1cfb      	adds	r3, r7, #3
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	240c      	movs	r4, #12
 8000e38:	1938      	adds	r0, r7, r4
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	189b      	adds	r3, r3, r2
 8000e42:	18cb      	adds	r3, r1, r3
 8000e44:	2203      	movs	r2, #3
 8000e46:	0019      	movs	r1, r3
 8000e48:	f007 f8c2 	bl	8007fd0 <memcpy>
 8000e4c:	193a      	adds	r2, r7, r4
 8000e4e:	2300      	movs	r3, #0
 8000e50:	7811      	ldrb	r1, [r2, #0]
 8000e52:	20ff      	movs	r0, #255	; 0xff
 8000e54:	4001      	ands	r1, r0
 8000e56:	20ff      	movs	r0, #255	; 0xff
 8000e58:	4383      	bics	r3, r0
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	7851      	ldrb	r1, [r2, #1]
 8000e5e:	20ff      	movs	r0, #255	; 0xff
 8000e60:	4001      	ands	r1, r0
 8000e62:	0209      	lsls	r1, r1, #8
 8000e64:	4806      	ldr	r0, [pc, #24]	; (8000e80 <_ZN10TouchBoard13getPixelColorEh+0x5c>)
 8000e66:	4003      	ands	r3, r0
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	7892      	ldrb	r2, [r2, #2]
 8000e6c:	21ff      	movs	r1, #255	; 0xff
 8000e6e:	400a      	ands	r2, r1
 8000e70:	0412      	lsls	r2, r2, #16
 8000e72:	4904      	ldr	r1, [pc, #16]	; (8000e84 <_ZN10TouchBoard13getPixelColorEh+0x60>)
 8000e74:	400b      	ands	r3, r1
 8000e76:	4313      	orrs	r3, r2
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b005      	add	sp, #20
 8000e7e:	bd90      	pop	{r4, r7, pc}
 8000e80:	ffff00ff 	.word	0xffff00ff
 8000e84:	ff00ffff 	.word	0xff00ffff

08000e88 <_ZN10TouchBoard12setTouchGPIOEP12GPIO_TypeDeft>:

void TouchBoard::setTouchGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIOpin) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	1dbb      	adds	r3, r7, #6
 8000e94:	801a      	strh	r2, [r3, #0]
  myGpioPort = GPIOx;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	68ba      	ldr	r2, [r7, #8]
 8000e9a:	609a      	str	r2, [r3, #8]
  myGpioPin = GPIOpin;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	1dba      	adds	r2, r7, #6
 8000ea0:	8812      	ldrh	r2, [r2, #0]
 8000ea2:	819a      	strh	r2, [r3, #12]
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b004      	add	sp, #16
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_ZN10TouchBoard16updateTouchStateEv>:

void TouchBoard::updateTouchState() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  TouchState_enum newTouchState;
  touchEvent = TOUCH_NO_CHANGE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	73da      	strb	r2, [r3, #15]
  if (HAL_GPIO_ReadPin(myGpioPort, myGpioPin) == GPIO_PIN_RESET) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	899b      	ldrh	r3, [r3, #12]
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	0010      	movs	r0, r2
 8000ec6:	f004 f9cd 	bl	8005264 <HAL_GPIO_ReadPin>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	425a      	negs	r2, r3
 8000ece:	4153      	adcs	r3, r2
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <_ZN10TouchBoard16updateTouchStateEv+0x34>
    newTouchState = TOUCHED;
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e003      	b.n	8000ee8 <_ZN10TouchBoard16updateTouchStateEv+0x3c>
  } else {
    newTouchState = NOT_TOUCHED;
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
  }
  if (newTouchState != myTouchState) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7b9b      	ldrb	r3, [r3, #14]
 8000eec:	210f      	movs	r1, #15
 8000eee:	187a      	adds	r2, r7, r1
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d00a      	beq.n	8000f0c <_ZN10TouchBoard16updateTouchStateEv+0x60>
    if (newTouchState == TOUCHED) {
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d103      	bne.n	8000f06 <_ZN10TouchBoard16updateTouchStateEv+0x5a>
      touchEvent = TOUCH_RISING;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	73da      	strb	r2, [r3, #15]
 8000f04:	e002      	b.n	8000f0c <_ZN10TouchBoard16updateTouchStateEv+0x60>
    } else {
      touchEvent = TOUCH_FALLING;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	73da      	strb	r2, [r3, #15]
    }
  }
  myTouchState = newTouchState;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	220f      	movs	r2, #15
 8000f10:	18ba      	adds	r2, r7, r2
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	739a      	strb	r2, [r3, #14]
}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZN10TouchBoard13getTouchEventEv>:

TouchState_enum TouchBoard::getTouchState() {
  return myTouchState;
}

TouchEvent_enum TouchBoard::getTouchEvent() {
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  return touchEvent;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7bdb      	ldrb	r3, [r3, #15]
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>:
#include "TouchBoardGroup.hpp"
#include "TouchGpioMap.h"
#include "stm32l0xx_hal.h"

TouchBoardGroup::TouchBoardGroup(uint8_t n, TIM_HandleTypeDef &timHandle,
 8000f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5a:	b08f      	sub	sp, #60	; 0x3c
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	250b      	movs	r5, #11
 8000f66:	197b      	adds	r3, r7, r5
 8000f68:	1c0a      	adds	r2, r1, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
                                  uint32_t timChannel, DMA_HandleTypeDef &dmaHandle) 
                : ledArray((uint16_t)(n*NUM_PIXELS_PER_BOARD), timHandle, timChannel, dmaHandle),
                  touchStates(n), touchEvents(n), touchBoards(n) {
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	330c      	adds	r3, #12
 8000f70:	001c      	movs	r4, r3
 8000f72:	2614      	movs	r6, #20
 8000f74:	19bb      	adds	r3, r7, r6
 8000f76:	4a59      	ldr	r2, [pc, #356]	; (80010dc <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x184>)
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	19bb      	adds	r3, r7, r6
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	231c      	movs	r3, #28
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 fbac 	bl	80016e2 <_ZNSaI12PixelColor_sEC1Ev>
 8000f8a:	231c      	movs	r3, #28
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	19ba      	adds	r2, r7, r6
 8000f90:	6811      	ldr	r1, [r2, #0]
 8000f92:	6852      	ldr	r2, [r2, #4]
 8000f94:	0020      	movs	r0, r4
 8000f96:	f000 fbbe 	bl	8001716 <_ZNSt6vectorI12PixelColor_sSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 8000f9a:	231c      	movs	r3, #28
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fbac 	bl	80016fc <_ZNSaI12PixelColor_sED1Ev>
                : ledArray((uint16_t)(n*NUM_PIXELS_PER_BOARD), timHandle, timChannel, dmaHandle),
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3318      	adds	r3, #24
 8000fa8:	0018      	movs	r0, r3
 8000faa:	002e      	movs	r6, r5
 8000fac:	19bb      	adds	r3, r7, r6
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	18db      	adds	r3, r3, r3
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	683c      	ldr	r4, [r7, #0]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	0023      	movs	r3, r4
 8000fc0:	f7ff fb23 	bl	800060a <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
                  touchStates(n), touchEvents(n), touchBoards(n) {
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	333c      	adds	r3, #60	; 0x3c
 8000fc8:	001c      	movs	r4, r3
 8000fca:	19bb      	adds	r3, r7, r6
 8000fcc:	781d      	ldrb	r5, [r3, #0]
 8000fce:	2320      	movs	r3, #32
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 fbdc 	bl	8001790 <_ZNSaI10TouchBoardEC1Ev>
 8000fd8:	2320      	movs	r3, #32
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	001a      	movs	r2, r3
 8000fde:	0029      	movs	r1, r5
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f000 fbef 	bl	80017c4 <_ZNSt6vectorI10TouchBoardSaIS0_EEC1EjRKS1_>
 8000fe6:	2320      	movs	r3, #32
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fbdd 	bl	80017aa <_ZNSaI10TouchBoardED1Ev>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3348      	adds	r3, #72	; 0x48
 8000ff4:	001c      	movs	r4, r3
 8000ff6:	19bb      	adds	r3, r7, r6
 8000ff8:	781d      	ldrb	r5, [r3, #0]
 8000ffa:	2324      	movs	r3, #36	; 0x24
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 fc19 	bl	8001836 <_ZNSaI15TouchState_enumEC1Ev>
 8001004:	2324      	movs	r3, #36	; 0x24
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	001a      	movs	r2, r3
 800100a:	0029      	movs	r1, r5
 800100c:	0020      	movs	r0, r4
 800100e:	f000 fc2c 	bl	800186a <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>
 8001012:	2324      	movs	r3, #36	; 0x24
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	0018      	movs	r0, r3
 8001018:	f000 fc1a 	bl	8001850 <_ZNSaI15TouchState_enumED1Ev>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3354      	adds	r3, #84	; 0x54
 8001020:	001c      	movs	r4, r3
 8001022:	19bb      	adds	r3, r7, r6
 8001024:	781d      	ldrb	r5, [r3, #0]
 8001026:	2328      	movs	r3, #40	; 0x28
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	0018      	movs	r0, r3
 800102c:	f000 fc56 	bl	80018dc <_ZNSaI15TouchEvent_enumEC1Ev>
 8001030:	2328      	movs	r3, #40	; 0x28
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	001a      	movs	r2, r3
 8001036:	0029      	movs	r1, r5
 8001038:	0020      	movs	r0, r4
 800103a:	f000 fc69 	bl	8001910 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEC1EjRKS1_>
 800103e:	2328      	movs	r3, #40	; 0x28
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fc57 	bl	80018f6 <_ZNSaI15TouchEvent_enumED1Ev>
  numBoards = n;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	19ba      	adds	r2, r7, r6
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	701a      	strb	r2, [r3, #0]
  numPixels = n*NUM_PIXELS_PER_BOARD;
 8001050:	19bb      	adds	r3, r7, r6
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	18db      	adds	r3, r3, r3
 8001056:	b2da      	uxtb	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	705a      	strb	r2, [r3, #1]
  starInd = 0;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	709a      	strb	r2, [r3, #2]
  colorInd = 0;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	70da      	strb	r2, [r3, #3]
  timer = 0;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  for (int i=0; i<numBoards; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001072:	e028      	b.n	80010c6 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x16e>
    touchBoards[i].setTouchGPIO(touchGpioMap_Port[i], touchGpioMap_Pin[i]);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	333c      	adds	r3, #60	; 0x3c
 8001078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f000 fc80 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x188>)
 8001084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	58d1      	ldr	r1, [r2, r3]
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x18c>)
 800108c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800108e:	0052      	lsls	r2, r2, #1
 8001090:	5ad3      	ldrh	r3, [r2, r3]
 8001092:	001a      	movs	r2, r3
 8001094:	f7ff fef8 	bl	8000e88 <_ZN10TouchBoard12setTouchGPIOEP12GPIO_TypeDeft>
    touchStates[i] = NOT_TOUCHED;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3348      	adds	r3, #72	; 0x48
 800109c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f000 fc7c 	bl	800199e <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>
 80010a6:	0003      	movs	r3, r0
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]
    touchEvents[i] = TOUCH_NO_CHANGE;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3354      	adds	r3, #84	; 0x54
 80010b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fc7f 	bl	80019b8 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEixEj>
 80010ba:	0003      	movs	r3, r0
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<numBoards; i++) {
 80010c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c2:	3301      	adds	r3, #1
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	001a      	movs	r2, r3
 80010cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ce:	4293      	cmp	r3, r2
 80010d0:	dbd0      	blt.n	8001074 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x11c>
  }
}
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b00d      	add	sp, #52	; 0x34
 80010da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010dc:	0800828c 	.word	0x0800828c
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000060 	.word	0x20000060

080010e8 <_ZN15TouchBoardGroupD1Ev>:

TouchBoardGroup::~TouchBoardGroup() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3354      	adds	r3, #84	; 0x54
 80010f4:	0018      	movs	r0, r3
 80010f6:	f000 fc29 	bl	800194c <_ZNSt6vectorI15TouchEvent_enumSaIS0_EED1Ev>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3348      	adds	r3, #72	; 0x48
 80010fe:	0018      	movs	r0, r3
 8001100:	f000 fbd1 	bl	80018a6 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	333c      	adds	r3, #60	; 0x3c
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fb79 	bl	8001800 <_ZNSt6vectorI10TouchBoardSaIS0_EED1Ev>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3318      	adds	r3, #24
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff fa98 	bl	8000648 <_ZN8NeoPixelD1Ev>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	330c      	adds	r3, #12
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fb1c 	bl	800175a <_ZNSt6vectorI12PixelColor_sSaIS0_EED1Ev>
}
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b002      	add	sp, #8
 800112a:	bd80      	pop	{r7, pc}

0800112c <_ZN15TouchBoardGroup16setAllPixelColorEhhh>:

void TouchBoardGroup::setPixelColor(uint8_t board_num, uint8_t pixel_ind, uint8_t r, uint8_t g, uint8_t b) {
  touchBoards[board_num].setPixelColor(pixel_ind, r, g, b);
}

void TouchBoardGroup::setAllPixelColor(uint8_t r, uint8_t g, uint8_t b) {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	000c      	movs	r4, r1
 8001136:	0010      	movs	r0, r2
 8001138:	0019      	movs	r1, r3
 800113a:	1cfb      	adds	r3, r7, #3
 800113c:	1c22      	adds	r2, r4, #0
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	1cbb      	adds	r3, r7, #2
 8001142:	1c02      	adds	r2, r0, #0
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	1c7b      	adds	r3, r7, #1
 8001148:	1c0a      	adds	r2, r1, #0
 800114a:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<numBoards; i++) {
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e014      	b.n	800117c <_ZN15TouchBoardGroup16setAllPixelColorEhhh+0x50>
    touchBoards[i].setAllPixelColor(r, g, b);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	333c      	adds	r3, #60	; 0x3c
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	0011      	movs	r1, r2
 800115a:	0018      	movs	r0, r3
 800115c:	f000 fc11 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8001160:	0004      	movs	r4, r0
 8001162:	1c7b      	adds	r3, r7, #1
 8001164:	7818      	ldrb	r0, [r3, #0]
 8001166:	1cbb      	adds	r3, r7, #2
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	1cfb      	adds	r3, r7, #3
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	0003      	movs	r3, r0
 8001170:	0020      	movs	r0, r4
 8001172:	f7ff fe1c 	bl	8000dae <_ZN10TouchBoard16setAllPixelColorEhhh>
  for (int i=0; i<numBoards; i++) {
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	001a      	movs	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4293      	cmp	r3, r2
 8001186:	dbe4      	blt.n	8001152 <_ZN15TouchBoardGroup16setAllPixelColorEhhh+0x26>
  }
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b005      	add	sp, #20
 8001190:	bd90      	pop	{r4, r7, pc}

08001192 <_ZN15TouchBoardGroup13setBoardColorEhhhh>:

void TouchBoardGroup::setBoardColor(uint8_t board_num, uint8_t r, uint8_t g, uint8_t b) {
 8001192:	b590      	push	{r4, r7, lr}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	000c      	movs	r4, r1
 800119c:	0010      	movs	r0, r2
 800119e:	0019      	movs	r1, r3
 80011a0:	1cfb      	adds	r3, r7, #3
 80011a2:	1c22      	adds	r2, r4, #0
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	1cbb      	adds	r3, r7, #2
 80011a8:	1c02      	adds	r2, r0, #0
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	1c7b      	adds	r3, r7, #1
 80011ae:	1c0a      	adds	r2, r1, #0
 80011b0:	701a      	strb	r2, [r3, #0]
  touchBoards[board_num].setAllPixelColor(r, g, b);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	333c      	adds	r3, #60	; 0x3c
 80011b6:	001a      	movs	r2, r3
 80011b8:	1cfb      	adds	r3, r7, #3
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	0019      	movs	r1, r3
 80011be:	0010      	movs	r0, r2
 80011c0:	f000 fbdf 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 80011c4:	0004      	movs	r4, r0
 80011c6:	2318      	movs	r3, #24
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	7818      	ldrb	r0, [r3, #0]
 80011cc:	1c7b      	adds	r3, r7, #1
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	1cbb      	adds	r3, r7, #2
 80011d2:	7819      	ldrb	r1, [r3, #0]
 80011d4:	0003      	movs	r3, r0
 80011d6:	0020      	movs	r0, r4
 80011d8:	f7ff fde9 	bl	8000dae <_ZN10TouchBoard16setAllPixelColorEhhh>
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b003      	add	sp, #12
 80011e2:	bd90      	pop	{r4, r7, pc}

080011e4 <_ZN15TouchBoardGroup12twinkleBoardEh>:

void TouchBoardGroup::twinkleBoard(uint8_t board_num) {
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	000a      	movs	r2, r1
 80011ee:	1cfb      	adds	r3, r7, #3
 80011f0:	701a      	strb	r2, [r3, #0]
  PixelColor_s color = touchBoards[board_num].getPixelColor(0);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	333c      	adds	r3, #60	; 0x3c
 80011f6:	001a      	movs	r2, r3
 80011f8:	1cfb      	adds	r3, r7, #3
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	0019      	movs	r1, r3
 80011fe:	0010      	movs	r0, r2
 8001200:	f000 fbbf 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8001204:	0003      	movs	r3, r0
 8001206:	2100      	movs	r1, #0
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff fe0b 	bl	8000e24 <_ZN10TouchBoard13getPixelColorEh>
 800120e:	0003      	movs	r3, r0
 8001210:	001a      	movs	r2, r3
 8001212:	240c      	movs	r4, #12
 8001214:	193b      	adds	r3, r7, r4
 8001216:	1c11      	adds	r1, r2, #0
 8001218:	7019      	strb	r1, [r3, #0]
 800121a:	0411      	lsls	r1, r2, #16
 800121c:	0e09      	lsrs	r1, r1, #24
 800121e:	7059      	strb	r1, [r3, #1]
 8001220:	0212      	lsls	r2, r2, #8
 8001222:	0e12      	lsrs	r2, r2, #24
 8001224:	709a      	strb	r2, [r3, #2]
  touchBoards[board_num].setAllPixelColor(color.r/10, color.g/10, color.b/10);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	333c      	adds	r3, #60	; 0x3c
 800122a:	001a      	movs	r2, r3
 800122c:	1cfb      	adds	r3, r7, #3
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	0019      	movs	r1, r3
 8001232:	0010      	movs	r0, r2
 8001234:	f000 fba5 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8001238:	0006      	movs	r6, r0
 800123a:	0025      	movs	r5, r4
 800123c:	193b      	adds	r3, r7, r4
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	210a      	movs	r1, #10
 8001242:	0018      	movs	r0, r3
 8001244:	f7fe ff60 	bl	8000108 <__udivsi3>
 8001248:	0003      	movs	r3, r0
 800124a:	b2dc      	uxtb	r4, r3
 800124c:	197b      	adds	r3, r7, r5
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	210a      	movs	r1, #10
 8001252:	0018      	movs	r0, r3
 8001254:	f7fe ff58 	bl	8000108 <__udivsi3>
 8001258:	0003      	movs	r3, r0
 800125a:	b2dd      	uxtb	r5, r3
 800125c:	230c      	movs	r3, #12
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	789b      	ldrb	r3, [r3, #2]
 8001262:	210a      	movs	r1, #10
 8001264:	0018      	movs	r0, r3
 8001266:	f7fe ff4f 	bl	8000108 <__udivsi3>
 800126a:	0003      	movs	r3, r0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	002a      	movs	r2, r5
 8001270:	0021      	movs	r1, r4
 8001272:	0030      	movs	r0, r6
 8001274:	f7ff fd9b 	bl	8000dae <_ZN10TouchBoard16setAllPixelColorEhhh>
  showPixels();
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	0018      	movs	r0, r3
 800127c:	f000 f98d 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
  HAL_Delay(40);
 8001280:	2028      	movs	r0, #40	; 0x28
 8001282:	f003 fdf3 	bl	8004e6c <HAL_Delay>
  touchBoards[board_num].setAllPixelColor(color.r/2, color.g/2, color.b/2);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	001a      	movs	r2, r3
 800128a:	323c      	adds	r2, #60	; 0x3c
 800128c:	1cfb      	adds	r3, r7, #3
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	0019      	movs	r1, r3
 8001292:	0010      	movs	r0, r2
 8001294:	f000 fb75 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8001298:	240c      	movs	r4, #12
 800129a:	193b      	adds	r3, r7, r4
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	085b      	lsrs	r3, r3, #1
 80012a0:	b2d9      	uxtb	r1, r3
 80012a2:	193b      	adds	r3, r7, r4
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	789b      	ldrb	r3, [r3, #2]
 80012ae:	085b      	lsrs	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f7ff fd7c 	bl	8000dae <_ZN10TouchBoard16setAllPixelColorEhhh>
  showPixels();
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 f96e 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
  HAL_Delay(40);
 80012be:	2028      	movs	r0, #40	; 0x28
 80012c0:	f003 fdd4 	bl	8004e6c <HAL_Delay>
  touchBoards[board_num].setAllPixelColor(color.r/5, color.g/5, color.b/5);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	333c      	adds	r3, #60	; 0x3c
 80012c8:	001a      	movs	r2, r3
 80012ca:	1cfb      	adds	r3, r7, #3
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	0019      	movs	r1, r3
 80012d0:	0010      	movs	r0, r2
 80012d2:	f000 fb56 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 80012d6:	0006      	movs	r6, r0
 80012d8:	0025      	movs	r5, r4
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2105      	movs	r1, #5
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7fe ff11 	bl	8000108 <__udivsi3>
 80012e6:	0003      	movs	r3, r0
 80012e8:	b2dc      	uxtb	r4, r3
 80012ea:	197b      	adds	r3, r7, r5
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	2105      	movs	r1, #5
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7fe ff09 	bl	8000108 <__udivsi3>
 80012f6:	0003      	movs	r3, r0
 80012f8:	b2dd      	uxtb	r5, r3
 80012fa:	230c      	movs	r3, #12
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	789b      	ldrb	r3, [r3, #2]
 8001300:	2105      	movs	r1, #5
 8001302:	0018      	movs	r0, r3
 8001304:	f7fe ff00 	bl	8000108 <__udivsi3>
 8001308:	0003      	movs	r3, r0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	002a      	movs	r2, r5
 800130e:	0021      	movs	r1, r4
 8001310:	0030      	movs	r0, r6
 8001312:	f7ff fd4c 	bl	8000dae <_ZN10TouchBoard16setAllPixelColorEhhh>
  showPixels();
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	0018      	movs	r0, r3
 800131a:	f000 f93e 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
  HAL_Delay(40);
 800131e:	2028      	movs	r0, #40	; 0x28
 8001320:	f003 fda4 	bl	8004e6c <HAL_Delay>
  touchBoards[board_num].setAllPixelColor(color.r/10, color.g/10, color.b/10);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	001a      	movs	r2, r3
 8001328:	323c      	adds	r2, #60	; 0x3c
 800132a:	1cfb      	adds	r3, r7, #3
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	0019      	movs	r1, r3
 8001330:	0010      	movs	r0, r2
 8001332:	f000 fb26 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8001336:	0006      	movs	r6, r0
 8001338:	250c      	movs	r5, #12
 800133a:	197b      	adds	r3, r7, r5
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	210a      	movs	r1, #10
 8001340:	0018      	movs	r0, r3
 8001342:	f7fe fee1 	bl	8000108 <__udivsi3>
 8001346:	0003      	movs	r3, r0
 8001348:	b2dc      	uxtb	r4, r3
 800134a:	197b      	adds	r3, r7, r5
 800134c:	785b      	ldrb	r3, [r3, #1]
 800134e:	210a      	movs	r1, #10
 8001350:	0018      	movs	r0, r3
 8001352:	f7fe fed9 	bl	8000108 <__udivsi3>
 8001356:	0003      	movs	r3, r0
 8001358:	b2dd      	uxtb	r5, r3
 800135a:	230c      	movs	r3, #12
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	789b      	ldrb	r3, [r3, #2]
 8001360:	210a      	movs	r1, #10
 8001362:	0018      	movs	r0, r3
 8001364:	f7fe fed0 	bl	8000108 <__udivsi3>
 8001368:	0003      	movs	r3, r0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	002a      	movs	r2, r5
 800136e:	0021      	movs	r1, r4
 8001370:	0030      	movs	r0, r6
 8001372:	f7ff fd1c 	bl	8000dae <_ZN10TouchBoard16setAllPixelColorEhhh>
  showPixels();
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	0018      	movs	r0, r3
 800137a:	f000 f90e 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
  HAL_Delay(40);
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f003 fd74 	bl	8004e6c <HAL_Delay>
  touchBoards[board_num].setAllPixelColor(color.r/5, color.g/5, color.b/5);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	001a      	movs	r2, r3
 8001388:	323c      	adds	r2, #60	; 0x3c
 800138a:	1cfb      	adds	r3, r7, #3
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	0019      	movs	r1, r3
 8001390:	0010      	movs	r0, r2
 8001392:	f000 faf6 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8001396:	0006      	movs	r6, r0
 8001398:	250c      	movs	r5, #12
 800139a:	197b      	adds	r3, r7, r5
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2105      	movs	r1, #5
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7fe feb1 	bl	8000108 <__udivsi3>
 80013a6:	0003      	movs	r3, r0
 80013a8:	b2dc      	uxtb	r4, r3
 80013aa:	197b      	adds	r3, r7, r5
 80013ac:	785b      	ldrb	r3, [r3, #1]
 80013ae:	2105      	movs	r1, #5
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7fe fea9 	bl	8000108 <__udivsi3>
 80013b6:	0003      	movs	r3, r0
 80013b8:	b2dd      	uxtb	r5, r3
 80013ba:	230c      	movs	r3, #12
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	789b      	ldrb	r3, [r3, #2]
 80013c0:	2105      	movs	r1, #5
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7fe fea0 	bl	8000108 <__udivsi3>
 80013c8:	0003      	movs	r3, r0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	002a      	movs	r2, r5
 80013ce:	0021      	movs	r1, r4
 80013d0:	0030      	movs	r0, r6
 80013d2:	f7ff fcec 	bl	8000dae <_ZN10TouchBoard16setAllPixelColorEhhh>
  showPixels();
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0018      	movs	r0, r3
 80013da:	f000 f8de 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
  HAL_Delay(40);
 80013de:	2028      	movs	r0, #40	; 0x28
 80013e0:	f003 fd44 	bl	8004e6c <HAL_Delay>
  touchBoards[board_num].setAllPixelColor(color.r/2, color.g/2, color.b/2);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	001a      	movs	r2, r3
 80013e8:	323c      	adds	r2, #60	; 0x3c
 80013ea:	1cfb      	adds	r3, r7, #3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0019      	movs	r1, r3
 80013f0:	0010      	movs	r0, r2
 80013f2:	f000 fac6 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 80013f6:	240c      	movs	r4, #12
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	b2d9      	uxtb	r1, r3
 8001400:	193b      	adds	r3, r7, r4
 8001402:	785b      	ldrb	r3, [r3, #1]
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	193b      	adds	r3, r7, r4
 800140a:	789b      	ldrb	r3, [r3, #2]
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f7ff fccd 	bl	8000dae <_ZN10TouchBoard16setAllPixelColorEhhh>
  showPixels();
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	0018      	movs	r0, r3
 8001418:	f000 f8bf 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
  HAL_Delay(40);
 800141c:	2028      	movs	r0, #40	; 0x28
 800141e:	f003 fd25 	bl	8004e6c <HAL_Delay>
  touchBoards[board_num].setAllPixelColor(color.r, color.g, color.b);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	333c      	adds	r3, #60	; 0x3c
 8001426:	001a      	movs	r2, r3
 8001428:	1cfb      	adds	r3, r7, #3
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	0019      	movs	r1, r3
 800142e:	0010      	movs	r0, r2
 8001430:	f000 faa7 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8001434:	193b      	adds	r3, r7, r4
 8001436:	7819      	ldrb	r1, [r3, #0]
 8001438:	193b      	adds	r3, r7, r4
 800143a:	785a      	ldrb	r2, [r3, #1]
 800143c:	193b      	adds	r3, r7, r4
 800143e:	789b      	ldrb	r3, [r3, #2]
 8001440:	f7ff fcb5 	bl	8000dae <_ZN10TouchBoard16setAllPixelColorEhhh>
  showPixels();
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	0018      	movs	r0, r3
 8001448:	f000 f8a7 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
  HAL_Delay(40);
 800144c:	2028      	movs	r0, #40	; 0x28
 800144e:	f003 fd0d 	bl	8004e6c <HAL_Delay>
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b005      	add	sp, #20
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800145a <_ZN15TouchBoardGroup12imAStarSetupEv>:

void TouchBoardGroup::imAStarSetup() {
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  starInd = 0;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	709a      	strb	r2, [r3, #2]
  colorInd = 0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	70da      	strb	r2, [r3, #3]
  starCount = 0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	711a      	strb	r2, [r3, #4]
  setAllPixelColor(0, 0, 0);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	f7ff fe56 	bl	800112c <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
  showPixels();
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	0018      	movs	r0, r3
 8001484:	f000 f889 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
  timer = HAL_GetTick();
 8001488:	f003 fcea 	bl	8004e60 <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b002      	add	sp, #8
 8001498:	bd80      	pop	{r7, pc}

0800149a <_ZN15TouchBoardGroup13imAStarUpdateEv>:

bool TouchBoardGroup::imAStarUpdate() {
 800149a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149c:	b087      	sub	sp, #28
 800149e:	af02      	add	r7, sp, #8
 80014a0:	6078      	str	r0, [r7, #4]
  uint32_t newTime = HAL_GetTick();
 80014a2:	f003 fcdd 	bl	8004e60 <HAL_GetTick>
 80014a6:	0003      	movs	r3, r0
 80014a8:	60bb      	str	r3, [r7, #8]
  bool finished = false;
 80014aa:	230f      	movs	r3, #15
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
  if (newTime - timer >= IM_A_STAR_DELAY) {
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	1ad2      	subs	r2, r2, r3
 80014ba:	23a3      	movs	r3, #163	; 0xa3
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	429a      	cmp	r2, r3
 80014c0:	d364      	bcc.n	800158c <_ZN15TouchBoardGroup13imAStarUpdateEv+0xf2>
    timer = newTime;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	609a      	str	r2, [r3, #8]
    setAllPixelColor(0, 0, 0);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	2300      	movs	r3, #0
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	f7ff fe2c 	bl	800112c <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
    setBoardColor(starInd, imAStarColors[colorInd].r, imAStarColors[colorInd].g, imAStarColors[colorInd].b);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	789c      	ldrb	r4, [r3, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	330c      	adds	r3, #12
 80014dc:	001a      	movs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	78db      	ldrb	r3, [r3, #3]
 80014e2:	0019      	movs	r1, r3
 80014e4:	0010      	movs	r0, r2
 80014e6:	f000 fa74 	bl	80019d2 <_ZNSt6vectorI12PixelColor_sSaIS0_EEixEj>
 80014ea:	0003      	movs	r3, r0
 80014ec:	781d      	ldrb	r5, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	330c      	adds	r3, #12
 80014f2:	001a      	movs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	78db      	ldrb	r3, [r3, #3]
 80014f8:	0019      	movs	r1, r3
 80014fa:	0010      	movs	r0, r2
 80014fc:	f000 fa69 	bl	80019d2 <_ZNSt6vectorI12PixelColor_sSaIS0_EEixEj>
 8001500:	0003      	movs	r3, r0
 8001502:	785e      	ldrb	r6, [r3, #1]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	330c      	adds	r3, #12
 8001508:	001a      	movs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	78db      	ldrb	r3, [r3, #3]
 800150e:	0019      	movs	r1, r3
 8001510:	0010      	movs	r0, r2
 8001512:	f000 fa5e 	bl	80019d2 <_ZNSt6vectorI12PixelColor_sSaIS0_EEixEj>
 8001516:	0003      	movs	r3, r0
 8001518:	789b      	ldrb	r3, [r3, #2]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	0033      	movs	r3, r6
 8001520:	002a      	movs	r2, r5
 8001522:	0021      	movs	r1, r4
 8001524:	f7ff fe35 	bl	8001192 <_ZN15TouchBoardGroup13setBoardColorEhhhh>

    if (starInd == numBoards-1){
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	001a      	movs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3b01      	subs	r3, #1
 8001534:	429a      	cmp	r2, r3
 8001536:	d103      	bne.n	8001540 <_ZN15TouchBoardGroup13imAStarUpdateEv+0xa6>
      starInd = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	709a      	strb	r2, [r3, #2]
 800153e:	e005      	b.n	800154c <_ZN15TouchBoardGroup13imAStarUpdateEv+0xb2>
    } else {
      starInd++;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	789b      	ldrb	r3, [r3, #2]
 8001544:	3301      	adds	r3, #1
 8001546:	b2da      	uxtb	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	709a      	strb	r2, [r3, #2]
    }
    if (colorInd == IM_A_STAR_NUM_COLORS-1){
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d103      	bne.n	800155c <_ZN15TouchBoardGroup13imAStarUpdateEv+0xc2>
      colorInd = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	70da      	strb	r2, [r3, #3]
 800155a:	e005      	b.n	8001568 <_ZN15TouchBoardGroup13imAStarUpdateEv+0xce>
    } else {
      colorInd++;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	78db      	ldrb	r3, [r3, #3]
 8001560:	3301      	adds	r3, #1
 8001562:	b2da      	uxtb	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	70da      	strb	r2, [r3, #3]
    }
    showPixels();
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	0018      	movs	r0, r3
 800156c:	f000 f815 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
    starCount++;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	791b      	ldrb	r3, [r3, #4]
 8001574:	3301      	adds	r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	711a      	strb	r2, [r3, #4]
    if (starCount == IM_A_STAR_NUM_STARS) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	2b1f      	cmp	r3, #31
 8001582:	d103      	bne.n	800158c <_ZN15TouchBoardGroup13imAStarUpdateEv+0xf2>
      finished = true;
 8001584:	230f      	movs	r3, #15
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
    }
  }
  return finished;
 800158c:	230f      	movs	r3, #15
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	781b      	ldrb	r3, [r3, #0]
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b005      	add	sp, #20
 8001598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800159a <_ZN15TouchBoardGroup10showPixelsEv>:

void TouchBoardGroup::showPixels() {
 800159a:	b5b0      	push	{r4, r5, r7, lr}
 800159c:	b088      	sub	sp, #32
 800159e:	af02      	add	r7, sp, #8
 80015a0:	6078      	str	r0, [r7, #4]
  for (int i=0; i<numBoards; i++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e03b      	b.n	8001620 <_ZN15TouchBoardGroup10showPixelsEv+0x86>
    for (int j=0; j<NUM_PIXELS_PER_BOARD; j++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	e032      	b.n	8001614 <_ZN15TouchBoardGroup10showPixelsEv+0x7a>
      PixelColor_s tempColor = touchBoards[i].getPixelColor(j);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	333c      	adds	r3, #60	; 0x3c
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	0011      	movs	r1, r2
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 f9e3 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 80015bc:	0002      	movs	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	0019      	movs	r1, r3
 80015c4:	0010      	movs	r0, r2
 80015c6:	f7ff fc2d 	bl	8000e24 <_ZN10TouchBoard13getPixelColorEh>
 80015ca:	0003      	movs	r3, r0
 80015cc:	001a      	movs	r2, r3
 80015ce:	240c      	movs	r4, #12
 80015d0:	193b      	adds	r3, r7, r4
 80015d2:	1c11      	adds	r1, r2, #0
 80015d4:	7019      	strb	r1, [r3, #0]
 80015d6:	0411      	lsls	r1, r2, #16
 80015d8:	0e09      	lsrs	r1, r1, #24
 80015da:	7059      	strb	r1, [r3, #1]
 80015dc:	0212      	lsls	r2, r2, #8
 80015de:	0e12      	lsrs	r2, r2, #24
 80015e0:	709a      	strb	r2, [r3, #2]
      ledArray.setPixelColor(i*NUM_PIXELS_PER_BOARD+j, tempColor.r, tempColor.g, tempColor.b);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3318      	adds	r3, #24
 80015e6:	0018      	movs	r0, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	18db      	adds	r3, r3, r3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	18d3      	adds	r3, r2, r3
 80015f6:	b299      	uxth	r1, r3
 80015f8:	193b      	adds	r3, r7, r4
 80015fa:	781a      	ldrb	r2, [r3, #0]
 80015fc:	0025      	movs	r5, r4
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	785c      	ldrb	r4, [r3, #1]
 8001602:	197b      	adds	r3, r7, r5
 8001604:	789b      	ldrb	r3, [r3, #2]
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	0023      	movs	r3, r4
 800160a:	f7ff f857 	bl	80006bc <_ZN8NeoPixel13setPixelColorEthhh>
    for (int j=0; j<NUM_PIXELS_PER_BOARD; j++) {
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	3301      	adds	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	2b01      	cmp	r3, #1
 8001618:	ddc9      	ble.n	80015ae <_ZN15TouchBoardGroup10showPixelsEv+0x14>
  for (int i=0; i<numBoards; i++) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	001a      	movs	r2, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4293      	cmp	r3, r2
 800162a:	dbbd      	blt.n	80015a8 <_ZN15TouchBoardGroup10showPixelsEv+0xe>
    }
  }
  ledArray.show();
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3318      	adds	r3, #24
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff f87b 	bl	800072c <_ZN8NeoPixel4showEv>
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b006      	add	sp, #24
 800163c:	bdb0      	pop	{r4, r5, r7, pc}

0800163e <_ZN15TouchBoardGroup17updateTouchStatesEv>:

PixelColor_s TouchBoardGroup::getPixelColor(uint8_t board_num, uint8_t pixel_ind) {
  return touchBoards[board_num].getPixelColor(pixel_ind);
}

void TouchBoardGroup::updateTouchStates() {
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  for (int i=0; i<numBoards; i++) {
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e00d      	b.n	8001668 <_ZN15TouchBoardGroup17updateTouchStatesEv+0x2a>
    touchBoards[i].updateTouchState();
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	333c      	adds	r3, #60	; 0x3c
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	0011      	movs	r1, r2
 8001654:	0018      	movs	r0, r3
 8001656:	f000 f994 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 800165a:	0003      	movs	r3, r0
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff fc25 	bl	8000eac <_ZN10TouchBoard16updateTouchStateEv>
  for (int i=0; i<numBoards; i++) {
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	001a      	movs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4293      	cmp	r3, r2
 8001672:	dbeb      	blt.n	800164c <_ZN15TouchBoardGroup17updateTouchStatesEv+0xe>
  }
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZN15TouchBoardGroup14getTouchEventsEv>:
    touchStates[i] = touchBoards[i].getTouchState();
  }
  return touchStates;
}

std::vector<TouchEvent_enum> TouchBoardGroup::getTouchEvents() {
 800167e:	b5b0      	push	{r4, r5, r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  for (int i=0; i<numBoards; i++) {
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e017      	b.n	80016be <_ZN15TouchBoardGroup14getTouchEventsEv+0x40>
    touchEvents[i] = touchBoards[i].getTouchEvent();
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	333c      	adds	r3, #60	; 0x3c
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	0011      	movs	r1, r2
 8001696:	0018      	movs	r0, r3
 8001698:	f000 f973 	bl	8001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 800169c:	0005      	movs	r5, r0
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	3354      	adds	r3, #84	; 0x54
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	0011      	movs	r1, r2
 80016a6:	0018      	movs	r0, r3
 80016a8:	f000 f986 	bl	80019b8 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEixEj>
 80016ac:	0004      	movs	r4, r0
 80016ae:	0028      	movs	r0, r5
 80016b0:	f7ff fc35 	bl	8000f1e <_ZN10TouchBoard13getTouchEventEv>
 80016b4:	0003      	movs	r3, r0
 80016b6:	7023      	strb	r3, [r4, #0]
  for (int i=0; i<numBoards; i++) {
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3301      	adds	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	001a      	movs	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	dbe1      	blt.n	800168e <_ZN15TouchBoardGroup14getTouchEventsEv+0x10>
  }
  return touchEvents;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	3354      	adds	r3, #84	; 0x54
 80016ce:	001a      	movs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f000 f98c 	bl	80019f2 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEC1ERKS2_>
}
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	46bd      	mov	sp, r7
 80016de:	b004      	add	sp, #16
 80016e0:	bdb0      	pop	{r4, r5, r7, pc}

080016e2 <_ZNSaI12PixelColor_sEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	0018      	movs	r0, r3
 80016ee:	f000 f9be 	bl	8001a6e <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sEC1Ev>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b002      	add	sp, #8
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZNSaI12PixelColor_sED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	0018      	movs	r0, r3
 8001708:	f000 f9ba 	bl	8001a80 <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sED1Ev>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b002      	add	sp, #8
 8001714:	bd80      	pop	{r7, pc}

08001716 <_ZNSt6vectorI12PixelColor_sSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      vector(initializer_list<value_type> __l,
 8001716:	b5b0      	push	{r4, r5, r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	1d38      	adds	r0, r7, #4
 8001720:	6001      	str	r1, [r0, #0]
 8001722:	6042      	str	r2, [r0, #4]
 8001724:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	0011      	movs	r1, r2
 800172c:	0018      	movs	r0, r3
 800172e:	f000 f9bd 	bl	8001aac <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EEC1ERKS1_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	0018      	movs	r0, r3
 8001736:	f000 f9ee 	bl	8001b16 <_ZNKSt16initializer_listI12PixelColor_sE5beginEv>
 800173a:	0004      	movs	r4, r0
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	0018      	movs	r0, r3
 8001740:	f000 f9f3 	bl	8001b2a <_ZNKSt16initializer_listI12PixelColor_sE3endEv>
 8001744:	0002      	movs	r2, r0
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	1c2b      	adds	r3, r5, #0
 800174a:	0021      	movs	r1, r4
 800174c:	f000 fa03 	bl	8001b56 <_ZNSt6vectorI12PixelColor_sSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b006      	add	sp, #24
 8001758:	bdb0      	pop	{r4, r5, r7, pc}

0800175a <_ZNSt6vectorI12PixelColor_sSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800175a:	b5b0      	push	{r4, r5, r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681c      	ldr	r4, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f000 fa31 	bl	8001bd4 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE19_M_get_Tp_allocatorEv>
 8001772:	0003      	movs	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001774:	001a      	movs	r2, r3
 8001776:	0029      	movs	r1, r5
 8001778:	0020      	movs	r0, r4
 800177a:	f000 fa34 	bl	8001be6 <_ZSt8_DestroyIP12PixelColor_sS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	0018      	movs	r0, r3
 8001782:	f000 f9a3 	bl	8001acc <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EED1Ev>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b002      	add	sp, #8
 800178e:	bdb0      	pop	{r4, r5, r7, pc}

08001790 <_ZNSaI10TouchBoardEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	0018      	movs	r0, r3
 800179c:	f000 fa33 	bl	8001c06 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1Ev>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_ZNSaI10TouchBoardED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 fa2f 	bl	8001c18 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardED1Ev>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_ZNSt6vectorI10TouchBoardSaIS0_EEC1EjRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 80017d0:	68fc      	ldr	r4, [r7, #12]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	0011      	movs	r1, r2
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 fa27 	bl	8001c2c <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_>
 80017de:	0001      	movs	r1, r0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	001a      	movs	r2, r3
 80017e4:	0020      	movs	r0, r4
 80017e6:	f000 fa56 	bl	8001c96 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EEC1EjRKS1_>
      { _M_default_initialize(__n); }
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	0011      	movs	r1, r2
 80017f0:	0018      	movs	r0, r3
 80017f2:	f000 fa81 	bl	8001cf8 <_ZNSt6vectorI10TouchBoardSaIS0_EE21_M_default_initializeEj>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b005      	add	sp, #20
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <_ZNSt6vectorI10TouchBoardSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681c      	ldr	r4, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	0018      	movs	r0, r3
 8001814:	f000 fa88 	bl	8001d28 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>
 8001818:	0003      	movs	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800181a:	001a      	movs	r2, r3
 800181c:	0029      	movs	r1, r5
 800181e:	0020      	movs	r0, r4
 8001820:	f000 fa8b 	bl	8001d3a <_ZSt8_DestroyIP10TouchBoardS0_EvT_S2_RSaIT0_E>
      }
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0018      	movs	r0, r3
 8001828:	f000 fa4c 	bl	8001cc4 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EED1Ev>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bdb0      	pop	{r4, r5, r7, pc}

08001836 <_ZNSaI15TouchState_enumEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0018      	movs	r0, r3
 8001842:	f000 fa8a 	bl	8001d5a <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1Ev>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZNSaI15TouchState_enumED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0018      	movs	r0, r3
 800185c:	f000 fa86 	bl	8001d6c <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumED1Ev>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}

0800186a <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 800186a:	b590      	push	{r4, r7, lr}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8001876:	68fc      	ldr	r4, [r7, #12]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	0011      	movs	r1, r2
 800187e:	0018      	movs	r0, r3
 8001880:	f000 fa7e 	bl	8001d80 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_>
 8001884:	0001      	movs	r1, r0
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	001a      	movs	r2, r3
 800188a:	0020      	movs	r0, r4
 800188c:	f000 faad 	bl	8001dea <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>
      { _M_default_initialize(__n); }
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	0011      	movs	r1, r2
 8001896:	0018      	movs	r0, r3
 8001898:	f000 fad7 	bl	8001e4a <_ZNSt6vectorI15TouchState_enumSaIS0_EE21_M_default_initializeEj>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b005      	add	sp, #20
 80018a4:	bd90      	pop	{r4, r7, pc}

080018a6 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80018a6:	b5b0      	push	{r4, r5, r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681c      	ldr	r4, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 fade 	bl	8001e7a <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 80018be:	0003      	movs	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80018c0:	001a      	movs	r2, r3
 80018c2:	0029      	movs	r1, r5
 80018c4:	0020      	movs	r0, r4
 80018c6:	f000 fae1 	bl	8001e8c <_ZSt8_DestroyIP15TouchState_enumS0_EvT_S2_RSaIT0_E>
      }
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 faa3 	bl	8001e18 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EED1Ev>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bdb0      	pop	{r4, r5, r7, pc}

080018dc <_ZNSaI15TouchEvent_enumEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	0018      	movs	r0, r3
 80018e8:	f000 fae0 	bl	8001eac <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumEC1Ev>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_ZNSaI15TouchEvent_enumED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0018      	movs	r0, r3
 8001902:	f000 fadc 	bl	8001ebe <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumED1Ev>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b002      	add	sp, #8
 800190e:	bd80      	pop	{r7, pc}

08001910 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEC1EjRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 800191c:	68fc      	ldr	r4, [r7, #12]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f000 fad3 	bl	8001ed0 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE17_S_check_init_lenEjRKS1_>
 800192a:	0001      	movs	r1, r0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	001a      	movs	r2, r3
 8001930:	0020      	movs	r0, r4
 8001932:	f000 fb02 	bl	8001f3a <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EEC1EjRKS1_>
      { _M_default_initialize(__n); }
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	0011      	movs	r1, r2
 800193c:	0018      	movs	r0, r3
 800193e:	f000 fb2c 	bl	8001f9a <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE21_M_default_initializeEj>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b005      	add	sp, #20
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <_ZNSt6vectorI15TouchEvent_enumSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681c      	ldr	r4, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	0018      	movs	r0, r3
 8001960:	f000 fb33 	bl	8001fca <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8001964:	0003      	movs	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001966:	001a      	movs	r2, r3
 8001968:	0029      	movs	r1, r5
 800196a:	0020      	movs	r0, r4
 800196c:	f000 fb36 	bl	8001fdc <_ZSt8_DestroyIP15TouchEvent_enumS0_EvT_S2_RSaIT0_E>
      }
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	0018      	movs	r0, r3
 8001974:	f000 faf8 	bl	8001f68 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EED1Ev>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bdb0      	pop	{r4, r5, r7, pc}

08001982 <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	18d3      	adds	r3, r2, r3
      }
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b002      	add	sp, #8
 800199c:	bd80      	pop	{r7, pc}

0800199e <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	18d3      	adds	r3, r2, r3
      }
 80019b0:	0018      	movs	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	18d3      	adds	r3, r2, r3
      }
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_ZNSt6vectorI12PixelColor_sSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	0013      	movs	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	189b      	adds	r3, r3, r2
 80019e8:	18cb      	adds	r3, r1, r3
      }
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b002      	add	sp, #8
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
 80019f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80019fc:	687c      	ldr	r4, [r7, #4]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 fafb 	bl	8001ffc <_ZNKSt6vectorI15TouchEvent_enumSaIS0_EE4sizeEv>
 8001a06:	0005      	movs	r5, r0
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f000 fb12 	bl	8002034 <_ZNKSt12_Vector_baseI15TouchEvent_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8001a10:	0002      	movs	r2, r0
 8001a12:	260c      	movs	r6, #12
 8001a14:	19bb      	adds	r3, r7, r6
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 fafc 	bl	8002016 <_ZN9__gnu_cxx14__alloc_traitsISaI15TouchEvent_enumES1_E17_S_select_on_copyERKS2_>
 8001a1e:	19bb      	adds	r3, r7, r6
 8001a20:	001a      	movs	r2, r3
 8001a22:	0029      	movs	r1, r5
 8001a24:	0020      	movs	r0, r4
 8001a26:	f000 fa88 	bl	8001f3a <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EEC1EjRKS1_>
 8001a2a:	19bb      	adds	r3, r7, r6
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff ff62 	bl	80018f6 <_ZNSaI15TouchEvent_enumED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f000 fb06 	bl	8002046 <_ZNKSt6vectorI15TouchEvent_enumSaIS0_EE5beginEv>
 8001a3a:	0005      	movs	r5, r0
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 fb11 	bl	8002066 <_ZNKSt6vectorI15TouchEvent_enumSaIS0_EE3endEv>
 8001a44:	0006      	movs	r6, r0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 fabc 	bl	8001fca <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8001a52:	0003      	movs	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8001a54:	0022      	movs	r2, r4
 8001a56:	0031      	movs	r1, r6
 8001a58:	0028      	movs	r0, r5
 8001a5a:	f000 fb15 	bl	8002088 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>
 8001a5e:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	605a      	str	r2, [r3, #4]
      }
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b005      	add	sp, #20
 8001a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a6e <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff fe2d 	bl	80016fc <_ZNSaI12PixelColor_sED1Ev>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 faf5 	bl	80020ac <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE12_Vector_implC1ERKS1_>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b002      	add	sp, #8
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	1ad2      	subs	r2, r2, r3
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	189b      	adds	r3, r3, r2
 8001ae8:	0119      	lsls	r1, r3, #4
 8001aea:	185b      	adds	r3, r3, r1
 8001aec:	0219      	lsls	r1, r3, #8
 8001aee:	185b      	adds	r3, r3, r1
 8001af0:	0419      	lsls	r1, r3, #16
 8001af2:	185b      	adds	r3, r3, r1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	189b      	adds	r3, r3, r2
	_M_deallocate(_M_impl._M_start,
 8001af8:	001a      	movs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0001      	movs	r1, r0
 8001afe:	0018      	movs	r0, r3
 8001b00:	f000 fae8 	bl	80020d4 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff ffc3 	bl	8001a92 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE12_Vector_implD1Ev>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b002      	add	sp, #8
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_ZNKSt16initializer_listI12PixelColor_sE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b002      	add	sp, #8
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_ZNKSt16initializer_listI12PixelColor_sE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001b2a:	b590      	push	{r4, r7, lr}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7ff ffee 	bl	8001b16 <_ZNKSt16initializer_listI12PixelColor_sE5beginEv>
 8001b3a:	0004      	movs	r4, r0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 fadb 	bl	80020fa <_ZNKSt16initializer_listI12PixelColor_sE4sizeEv>
 8001b44:	0002      	movs	r2, r0
 8001b46:	0013      	movs	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	189b      	adds	r3, r3, r2
 8001b4c:	18e3      	adds	r3, r4, r3
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b003      	add	sp, #12
 8001b54:	bd90      	pop	{r4, r7, pc}

08001b56 <_ZNSt6vectorI12PixelColor_sSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8001b56:	b590      	push	{r4, r7, lr}
 8001b58:	b087      	sub	sp, #28
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	003a      	movs	r2, r7
 8001b64:	7013      	strb	r3, [r2, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 face 	bl	800210e <_ZSt8distanceIPK12PixelColor_sENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8001b72:	0003      	movs	r3, r0
 8001b74:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001b76:	68fc      	ldr	r4, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 f82a 	bl	8001bd4 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE19_M_get_Tp_allocatorEv>
 8001b80:	0002      	movs	r2, r0
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	0011      	movs	r1, r2
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 fad6 	bl	8002138 <_ZNSt6vectorI12PixelColor_sSaIS0_EE17_S_check_init_lenEjRKS1_>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	0019      	movs	r1, r3
 8001b90:	0020      	movs	r0, r4
 8001b92:	f000 faf9 	bl	8002188 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE11_M_allocateEj>
 8001b96:	0002      	movs	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	189b      	adds	r3, r3, r2
 8001ba8:	18ca      	adds	r2, r1, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 f80d 	bl	8001bd4 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE19_M_get_Tp_allocatorEv>
 8001bba:	0003      	movs	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	68b8      	ldr	r0, [r7, #8]
 8001bc0:	0022      	movs	r2, r4
 8001bc2:	f000 faf6 	bl	80021b2 <_ZSt22__uninitialized_copy_aIPK12PixelColor_sPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8001bc6:	0002      	movs	r2, r0
	  this->_M_impl._M_finish =
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	605a      	str	r2, [r3, #4]
	}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b007      	add	sp, #28
 8001bd2:	bd90      	pop	{r4, r7, pc}

08001bd4 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0018      	movs	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZSt8_DestroyIP12PixelColor_sS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f000 faec 	bl	80021d6 <_ZSt8_DestroyIP12PixelColor_sEvT_S2_>
    }
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b004      	add	sp, #16
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b002      	add	sp, #8
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001c2c:	b5b0      	push	{r4, r5, r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	250c      	movs	r5, #12
 8001c3a:	197b      	adds	r3, r7, r5
 8001c3c:	0011      	movs	r1, r2
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f000 faf4 	bl	800222c <_ZNSaI10TouchBoardEC1ERKS0_>
 8001c44:	197b      	adds	r3, r7, r5
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 fad4 	bl	80021f4 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	419b      	sbcs	r3, r3
 8001c54:	425b      	negs	r3, r3
 8001c56:	b2dc      	uxtb	r4, r3
 8001c58:	197b      	adds	r3, r7, r5
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f7ff fda5 	bl	80017aa <_ZNSaI10TouchBoardED1Ev>
 8001c60:	2c00      	cmp	r4, #0
 8001c62:	d003      	beq.n	8001c6c <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_+0x40>
	  __throw_length_error(
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f006 f831 	bl	8007cce <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8001c6c:	687b      	ldr	r3, [r7, #4]
      }
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bdb0      	pop	{r4, r5, r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	08008090 	.word	0x08008090

08001c7c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7ff fd8f 	bl	80017aa <_ZNSaI10TouchBoardED1Ev>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b002      	add	sp, #8
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EEC1EjRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 facf 	bl	800224c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	0011      	movs	r1, r2
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f000 fadd 	bl	8002274 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_M_create_storageEj>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b004      	add	sp, #16
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8001cdc:	001a      	movs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 fae4 	bl	80022ae <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff ffc7 	bl	8001c7c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implD1Ev>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_ZNSt6vectorI10TouchBoardSaIS0_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f000 f80d 	bl	8001d28 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>
 8001d0e:	0002      	movs	r2, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	0019      	movs	r1, r3
 8001d14:	0020      	movs	r0, r4
 8001d16:	f000 fadd 	bl	80022d4 <_ZSt27__uninitialized_default_n_aIP10TouchBoardjS0_ET_S2_T0_RSaIT1_E>
 8001d1a:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	605a      	str	r2, [r3, #4]
      }
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b003      	add	sp, #12
 8001d26:	bd90      	pop	{r4, r7, pc}

08001d28 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_ZSt8_DestroyIP10TouchBoardS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	0011      	movs	r1, r2
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 fad2 	bl	80022f6 <_ZSt8_DestroyIP10TouchBoardEvT_S2_>
    }
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b004      	add	sp, #16
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b002      	add	sp, #8
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	250c      	movs	r5, #12
 8001d8e:	197b      	adds	r3, r7, r5
 8001d90:	0011      	movs	r1, r2
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 fada 	bl	800234c <_ZNSaI15TouchState_enumEC1ERKS0_>
 8001d98:	197b      	adds	r3, r7, r5
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 faba 	bl	8002314 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_>
 8001da0:	0002      	movs	r2, r0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	419b      	sbcs	r3, r3
 8001da8:	425b      	negs	r3, r3
 8001daa:	b2dc      	uxtb	r4, r3
 8001dac:	197b      	adds	r3, r7, r5
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff fd4e 	bl	8001850 <_ZNSaI15TouchState_enumED1Ev>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d003      	beq.n	8001dc0 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_+0x40>
	  __throw_length_error(
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f005 ff87 	bl	8007cce <_ZSt20__throw_length_errorPKc>
	return __n;
 8001dc0:	687b      	ldr	r3, [r7, #4]
      }
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b004      	add	sp, #16
 8001dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	08008090 	.word	0x08008090

08001dd0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7ff fd38 	bl	8001850 <_ZNSaI15TouchState_enumED1Ev>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b002      	add	sp, #8
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 fab5 	bl	800236c <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	0011      	movs	r1, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f000 fac3 	bl	8002394 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_M_create_storageEj>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b004      	add	sp, #16
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001e2e:	001a      	movs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 faca 	bl	80023cc <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f7ff ffc8 	bl	8001dd0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implD1Ev>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_ZNSt6vectorI15TouchState_enumSaIS0_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8001e4a:	b590      	push	{r4, r7, lr}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 f80d 	bl	8001e7a <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8001e60:	0002      	movs	r2, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	0019      	movs	r1, r3
 8001e66:	0020      	movs	r0, r4
 8001e68:	f000 fac3 	bl	80023f2 <_ZSt27__uninitialized_default_n_aIP15TouchState_enumjS0_ET_S2_T0_RSaIT1_E>
 8001e6c:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	605a      	str	r2, [r3, #4]
      }
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b003      	add	sp, #12
 8001e78:	bd90      	pop	{r4, r7, pc}

08001e7a <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZSt8_DestroyIP15TouchState_enumS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	0011      	movs	r1, r2
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f000 fab8 	bl	8002414 <_ZSt8_DestroyIP15TouchState_enumEvT_S2_>
    }
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b004      	add	sp, #16
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	250c      	movs	r5, #12
 8001ede:	197b      	adds	r3, r7, r5
 8001ee0:	0011      	movs	r1, r2
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fac2 	bl	800246c <_ZNSaI15TouchEvent_enumEC1ERKS0_>
 8001ee8:	197b      	adds	r3, r7, r5
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 faa2 	bl	8002434 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE11_S_max_sizeERKS1_>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	419b      	sbcs	r3, r3
 8001ef8:	425b      	negs	r3, r3
 8001efa:	b2dc      	uxtb	r4, r3
 8001efc:	197b      	adds	r3, r7, r5
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7ff fcf9 	bl	80018f6 <_ZNSaI15TouchEvent_enumED1Ev>
 8001f04:	2c00      	cmp	r4, #0
 8001f06:	d003      	beq.n	8001f10 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE17_S_check_init_lenEjRKS1_+0x40>
	  __throw_length_error(
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f005 fedf 	bl	8007cce <_ZSt20__throw_length_errorPKc>
	return __n;
 8001f10:	687b      	ldr	r3, [r7, #4]
      }
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b004      	add	sp, #16
 8001f18:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	08008090 	.word	0x08008090

08001f20 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f7ff fce3 	bl	80018f6 <_ZNSaI15TouchEvent_enumED1Ev>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b002      	add	sp, #8
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EEC1EjRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 fa9d 	bl	800248c <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	0011      	movs	r1, r2
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f000 faab 	bl	80024b4 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_M_create_storageEj>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001f7e:	001a      	movs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	0018      	movs	r0, r3
 8001f84:	f000 fab2 	bl	80024ec <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7ff ffc8 	bl	8001f20 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE12_Vector_implD1Ev>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8001f9a:	b590      	push	{r4, r7, lr}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	0018      	movs	r0, r3
 8001fac:	f000 f80d 	bl	8001fca <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8001fb0:	0002      	movs	r2, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	0020      	movs	r0, r4
 8001fb8:	f000 faab 	bl	8002512 <_ZSt27__uninitialized_default_n_aIP15TouchEvent_enumjS0_ET_S2_T0_RSaIT1_E>
 8001fbc:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	605a      	str	r2, [r3, #4]
      }
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b003      	add	sp, #12
 8001fc8:	bd90      	pop	{r4, r7, pc}

08001fca <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_ZSt8_DestroyIP15TouchEvent_enumS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	0011      	movs	r1, r2
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 faa0 	bl	8002534 <_ZSt8_DestroyIP15TouchEvent_enumEvT_S2_>
    }
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b004      	add	sp, #16
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZNKSt6vectorI15TouchEvent_enumSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b002      	add	sp, #8
 8002014:	bd80      	pop	{r7, pc}

08002016 <_ZN9__gnu_cxx14__alloc_traitsISaI15TouchEvent_enumES1_E17_S_select_on_copyERKS2_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	0011      	movs	r1, r2
 8002026:	0018      	movs	r0, r3
 8002028:	f000 fa93 	bl	8002552 <_ZNSt16allocator_traitsISaI15TouchEvent_enumEE37select_on_container_copy_constructionERKS1_>
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZNKSt12_Vector_baseI15TouchEvent_enumSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}

08002046 <_ZNKSt6vectorI15TouchEvent_enumSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	230c      	movs	r3, #12
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	0011      	movs	r1, r2
 8002056:	0018      	movs	r0, r3
 8002058:	f000 fa8a 	bl	8002570 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b004      	add	sp, #16
 8002064:	bd80      	pop	{r7, pc}

08002066 <_ZNKSt6vectorI15TouchEvent_enumSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1d1a      	adds	r2, r3, #4
 8002072:	230c      	movs	r3, #12
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	0011      	movs	r1, r2
 8002078:	0018      	movs	r0, r3
 800207a:	f000 fa79 	bl	8002570 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b004      	add	sp, #16
 8002086:	bd80      	pop	{r7, pc}

08002088 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	0018      	movs	r0, r3
 800209e:	f000 fa75 	bl	800258c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
 80020a2:	0003      	movs	r3, r0
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b004      	add	sp, #16
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	0011      	movs	r1, r2
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 fa7a 	bl	80025b6 <_ZNSaI12PixelColor_sEC1ERKS0_>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fa86 	bl	80025d6 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b002      	add	sp, #8
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
	if (__p)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 fa84 	bl	80025fa <_ZNSt16allocator_traitsISaI12PixelColor_sEE10deallocateERS1_PS0_j>
      }
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b004      	add	sp, #16
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_ZNKSt16initializer_listI12PixelColor_sE4sizeEv>:
      size() const noexcept { return _M_len; }
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b002      	add	sp, #8
 800210c:	bd80      	pop	{r7, pc}

0800210e <_ZSt8distanceIPK12PixelColor_sENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800210e:	b5b0      	push	{r4, r5, r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8002118:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	0018      	movs	r0, r3
 800211e:	f000 fa7c 	bl	800261a <_ZSt19__iterator_categoryIPK12PixelColor_sENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	1c2a      	adds	r2, r5, #0
 8002126:	0019      	movs	r1, r3
 8002128:	0020      	movs	r0, r4
 800212a:	f000 fa7f 	bl	800262c <_ZSt10__distanceIPK12PixelColor_sENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 800212e:	0003      	movs	r3, r0
    }
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bdb0      	pop	{r4, r5, r7, pc}

08002138 <_ZNSt6vectorI12PixelColor_sSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	250c      	movs	r5, #12
 8002146:	197b      	adds	r3, r7, r5
 8002148:	0011      	movs	r1, r2
 800214a:	0018      	movs	r0, r3
 800214c:	f000 fa33 	bl	80025b6 <_ZNSaI12PixelColor_sEC1ERKS0_>
 8002150:	197b      	adds	r3, r7, r5
 8002152:	0018      	movs	r0, r3
 8002154:	f000 fa84 	bl	8002660 <_ZNSt6vectorI12PixelColor_sSaIS0_EE11_S_max_sizeERKS1_>
 8002158:	0002      	movs	r2, r0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	419b      	sbcs	r3, r3
 8002160:	425b      	negs	r3, r3
 8002162:	b2dc      	uxtb	r4, r3
 8002164:	197b      	adds	r3, r7, r5
 8002166:	0018      	movs	r0, r3
 8002168:	f7ff fac8 	bl	80016fc <_ZNSaI12PixelColor_sED1Ev>
 800216c:	2c00      	cmp	r4, #0
 800216e:	d003      	beq.n	8002178 <_ZNSt6vectorI12PixelColor_sSaIS0_EE17_S_check_init_lenEjRKS1_+0x40>
	  __throw_length_error(
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <_ZNSt6vectorI12PixelColor_sSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8002172:	0018      	movs	r0, r3
 8002174:	f005 fdab 	bl	8007cce <_ZSt20__throw_length_errorPKc>
	return __n;
 8002178:	687b      	ldr	r3, [r7, #4]
      }
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b004      	add	sp, #16
 8002180:	bdb0      	pop	{r4, r5, r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	08008090 	.word	0x08008090

08002188 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE11_M_allocateEj+0x20>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	0011      	movs	r1, r2
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 fa7a 	bl	8002698 <_ZNSt16allocator_traitsISaI12PixelColor_sEE8allocateERS1_j>
 80021a4:	0003      	movs	r3, r0
 80021a6:	e000      	b.n	80021aa <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE11_M_allocateEj+0x22>
 80021a8:	2300      	movs	r3, #0
      }
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_ZSt22__uninitialized_copy_aIPK12PixelColor_sPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 fa76 	bl	80026b8 <_ZSt18uninitialized_copyIPK12PixelColor_sPS0_ET0_T_S5_S4_>
 80021cc:	0003      	movs	r3, r0
 80021ce:	0018      	movs	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b004      	add	sp, #16
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_ZSt8_DestroyIP12PixelColor_sEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0011      	movs	r1, r2
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 fa7b 	bl	80026e2 <_ZNSt12_Destroy_auxILb1EE9__destroyIP12PixelColor_sEEvT_S4_>
    }
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 80021fe:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	0018      	movs	r0, r3
 8002204:	f000 fa76 	bl	80026f4 <_ZNSt16allocator_traitsISaI10TouchBoardEE8max_sizeERKS1_>
 8002208:	0003      	movs	r3, r0
 800220a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800220c:	2308      	movs	r3, #8
 800220e:	18fa      	adds	r2, r7, r3
 8002210:	230c      	movs	r3, #12
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	0011      	movs	r1, r2
 8002216:	0018      	movs	r0, r3
 8002218:	f000 fa79 	bl	800270e <_ZSt3minIjERKT_S2_S2_>
 800221c:	0003      	movs	r3, r0
 800221e:	681b      	ldr	r3, [r3, #0]
      }
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b004      	add	sp, #16
 8002226:	bd80      	pop	{r7, pc}
 8002228:	07ffffff 	.word	0x07ffffff

0800222c <_ZNSaI10TouchBoardEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f000 fa78 	bl	8002732 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1ERKS2_>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}

0800224c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	0011      	movs	r1, r2
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff ffe5 	bl	800222c <_ZNSaI10TouchBoardEC1ERKS0_>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 fa6e 	bl	8002746 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	b002      	add	sp, #8
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	0011      	movs	r1, r2
 8002284:	0018      	movs	r0, r3
 8002286:	f000 fa70 	bl	800276a <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj>
 800228a:	0002      	movs	r2, r0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	18d2      	adds	r2, r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	609a      	str	r2, [r3, #8]
      }
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b002      	add	sp, #8
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
	if (__p)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 fa64 	bl	8002794 <_ZNSt16allocator_traitsISaI10TouchBoardEE10deallocateERS1_PS0_j>
      }
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b004      	add	sp, #16
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_ZSt27__uninitialized_default_n_aIP10TouchBoardjS0_ET_S2_T0_RSaIT1_E>:

  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0011      	movs	r1, r2
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fa64 	bl	80027b4 <_ZSt25__uninitialized_default_nIP10TouchBoardjET_S2_T0_>
 80022ec:	0003      	movs	r3, r0
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_ZSt8_DestroyIP10TouchBoardEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0011      	movs	r1, r2
 8002306:	0018      	movs	r0, r3
 8002308:	f000 fa68 	bl	80027dc <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_>
    }
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}

08002314 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800231e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	0018      	movs	r0, r3
 8002324:	f000 fa74 	bl	8002810 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8max_sizeERKS1_>
 8002328:	0003      	movs	r3, r0
 800232a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800232c:	2308      	movs	r3, #8
 800232e:	18fa      	adds	r2, r7, r3
 8002330:	230c      	movs	r3, #12
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	0011      	movs	r1, r2
 8002336:	0018      	movs	r0, r3
 8002338:	f000 f9e9 	bl	800270e <_ZSt3minIjERKT_S2_S2_>
 800233c:	0003      	movs	r3, r0
 800233e:	681b      	ldr	r3, [r3, #0]
      }
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b004      	add	sp, #16
 8002346:	bd80      	pop	{r7, pc}
 8002348:	7fffffff 	.word	0x7fffffff

0800234c <_ZNSaI15TouchState_enumEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0011      	movs	r1, r2
 800235c:	0018      	movs	r0, r3
 800235e:	f000 fa64 	bl	800282a <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1ERKS2_>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b002      	add	sp, #8
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	0011      	movs	r1, r2
 800237c:	0018      	movs	r0, r3
 800237e:	f7ff ffe5 	bl	800234c <_ZNSaI15TouchState_enumEC1ERKS0_>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 fa5a 	bl	800283e <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	0011      	movs	r1, r2
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fa5c 	bl	8002862 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj>
 80023aa:	0002      	movs	r2, r0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	18d2      	adds	r2, r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]
      }
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
	if (__p)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 fa51 	bl	800288c <_ZNSt16allocator_traitsISaI15TouchState_enumEE10deallocateERS1_PS0_j>
      }
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b004      	add	sp, #16
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_ZSt27__uninitialized_default_n_aIP15TouchState_enumjS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	0011      	movs	r1, r2
 8002404:	0018      	movs	r0, r3
 8002406:	f000 fa51 	bl	80028ac <_ZSt25__uninitialized_default_nIP15TouchState_enumjET_S2_T0_>
 800240a:	0003      	movs	r3, r0
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}

08002414 <_ZSt8_DestroyIP15TouchState_enumEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	0011      	movs	r1, r2
 8002424:	0018      	movs	r0, r3
 8002426:	f000 fa55 	bl	80028d4 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15TouchState_enumEEvT_S4_>
    }
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800243e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	f000 fa4f 	bl	80028e6 <_ZNSt16allocator_traitsISaI15TouchEvent_enumEE8max_sizeERKS1_>
 8002448:	0003      	movs	r3, r0
 800244a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800244c:	2308      	movs	r3, #8
 800244e:	18fa      	adds	r2, r7, r3
 8002450:	230c      	movs	r3, #12
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	0011      	movs	r1, r2
 8002456:	0018      	movs	r0, r3
 8002458:	f000 f959 	bl	800270e <_ZSt3minIjERKT_S2_S2_>
 800245c:	0003      	movs	r3, r0
 800245e:	681b      	ldr	r3, [r3, #0]
      }
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b004      	add	sp, #16
 8002466:	bd80      	pop	{r7, pc}
 8002468:	7fffffff 	.word	0x7fffffff

0800246c <_ZNSaI15TouchEvent_enumEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0011      	movs	r1, r2
 800247c:	0018      	movs	r0, r3
 800247e:	f000 fa3f 	bl	8002900 <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumEC1ERKS2_>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}

0800248c <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	0011      	movs	r1, r2
 800249c:	0018      	movs	r0, r3
 800249e:	f7ff ffe5 	bl	800246c <_ZNSaI15TouchEvent_enumEC1ERKS0_>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 fa35 	bl	8002914 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	0011      	movs	r1, r2
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 fa37 	bl	8002938 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE11_M_allocateEj>
 80024ca:	0002      	movs	r2, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	18d2      	adds	r2, r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	609a      	str	r2, [r3, #8]
      }
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
	if (__p)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	0018      	movs	r0, r3
 8002506:	f000 fa2c 	bl	8002962 <_ZNSt16allocator_traitsISaI15TouchEvent_enumEE10deallocateERS1_PS0_j>
      }
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	b004      	add	sp, #16
 8002510:	bd80      	pop	{r7, pc}

08002512 <_ZSt27__uninitialized_default_n_aIP15TouchEvent_enumjS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	0011      	movs	r1, r2
 8002524:	0018      	movs	r0, r3
 8002526:	f000 fa2c 	bl	8002982 <_ZSt25__uninitialized_default_nIP15TouchEvent_enumjET_S2_T0_>
 800252a:	0003      	movs	r3, r0
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b004      	add	sp, #16
 8002532:	bd80      	pop	{r7, pc}

08002534 <_ZSt8_DestroyIP15TouchEvent_enumEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f000 fa30 	bl	80029aa <_ZNSt12_Destroy_auxILb1EE9__destroyIP15TouchEvent_enumEEvT_S4_>
    }
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZNSt16allocator_traitsISaI15TouchEvent_enumEE37select_on_container_copy_constructionERKS1_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f7ff ff82 	bl	800246c <_ZNSaI15TouchEvent_enumEC1ERKS0_>
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}

0800258c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002598:	2317      	movs	r3, #23
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
	__uninit_copy(__first, __last, __result);
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 fa08 	bl	80029bc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>
 80025ac:	0003      	movs	r3, r0
    }
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b006      	add	sp, #24
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_ZNSaI12PixelColor_sEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0011      	movs	r1, r2
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 fa09 	bl	80029de <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sEC1ERKS2_>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b002      	add	sp, #8
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_ZNSt12_Vector_baseI12PixelColor_sSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
	{ }
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	0018      	movs	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b002      	add	sp, #8
 80025f8:	bd80      	pop	{r7, pc}

080025fa <_ZNSt16allocator_traitsISaI12PixelColor_sEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	0018      	movs	r0, r3
 800260e:	f000 f9f0 	bl	80029f2 <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sE10deallocateEPS1_j>
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	b004      	add	sp, #16
 8002618:	bd80      	pop	{r7, pc}

0800261a <_ZSt19__iterator_categoryIPK12PixelColor_sENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	1c18      	adds	r0, r3, #0
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}

0800262c <_ZSt10__distanceIPK12PixelColor_sENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	701a      	strb	r2, [r3, #0]
      return __last - __first;
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad2      	subs	r2, r2, r3
 8002640:	0013      	movs	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	189b      	adds	r3, r3, r2
 8002646:	0119      	lsls	r1, r3, #4
 8002648:	185b      	adds	r3, r3, r1
 800264a:	0219      	lsls	r1, r3, #8
 800264c:	185b      	adds	r3, r3, r1
 800264e:	0419      	lsls	r1, r3, #16
 8002650:	185b      	adds	r3, r3, r1
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	189b      	adds	r3, r3, r2
    }
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <_ZNSt6vectorI12PixelColor_sSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <_ZNSt6vectorI12PixelColor_sSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800266a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0018      	movs	r0, r3
 8002670:	f000 f9d2 	bl	8002a18 <_ZNSt16allocator_traitsISaI12PixelColor_sEE8max_sizeERKS1_>
 8002674:	0003      	movs	r3, r0
 8002676:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002678:	2308      	movs	r3, #8
 800267a:	18fa      	adds	r2, r7, r3
 800267c:	230c      	movs	r3, #12
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	0011      	movs	r1, r2
 8002682:	0018      	movs	r0, r3
 8002684:	f000 f843 	bl	800270e <_ZSt3minIjERKT_S2_S2_>
 8002688:	0003      	movs	r3, r0
 800268a:	681b      	ldr	r3, [r3, #0]
      }
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b004      	add	sp, #16
 8002692:	bd80      	pop	{r7, pc}
 8002694:	2aaaaaaa 	.word	0x2aaaaaaa

08002698 <_ZNSt16allocator_traitsISaI12PixelColor_sEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80026a2:	6839      	ldr	r1, [r7, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 f9cf 	bl	8002a4c <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sE8allocateEjPKv>
 80026ae:	0003      	movs	r3, r0
 80026b0:	0018      	movs	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b002      	add	sp, #8
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <_ZSt18uninitialized_copyIPK12PixelColor_sPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80026c4:	2317      	movs	r3, #23
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
	__uninit_copy(__first, __last, __result);
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f9e6 	bl	8002aa4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK12PixelColor_sPS2_EET0_T_S7_S6_>
 80026d8:	0003      	movs	r3, r0
    }
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b006      	add	sp, #24
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_ZNSt12_Destroy_auxILb1EE9__destroyIP12PixelColor_sEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b002      	add	sp, #8
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_ZNSt16allocator_traitsISaI10TouchBoardEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 f9e1 	bl	8002ac6 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv>
 8002704:	0003      	movs	r3, r0
      }
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}

0800270e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d201      	bcs.n	8002728 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	e000      	b.n	800272a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002728:	687b      	ldr	r3, [r7, #4]
    }
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}

08002732 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b002      	add	sp, #8
 8002744:	bd80      	pop	{r7, pc}

08002746 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
	{ }
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b002      	add	sp, #8
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj+0x20>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	0011      	movs	r1, r2
 8002780:	0018      	movs	r0, r3
 8002782:	f000 f9ad 	bl	8002ae0 <_ZNSt16allocator_traitsISaI10TouchBoardEE8allocateERS1_j>
 8002786:	0003      	movs	r3, r0
 8002788:	e000      	b.n	800278c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj+0x22>
 800278a:	2300      	movs	r3, #0
      }
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}

08002794 <_ZNSt16allocator_traitsISaI10TouchBoardEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 f9aa 	bl	8002b00 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE10deallocateEPS1_j>
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b004      	add	sp, #16
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_ZSt25__uninitialized_default_nIP10TouchBoardjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
      constexpr bool __can_fill
 80027be:	230f      	movs	r3, #15
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
	__uninit_default_n(__first, __n);
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0011      	movs	r1, r2
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 f9a8 	bl	8002b22 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_>
 80027d2:	0003      	movs	r3, r0
    }
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b004      	add	sp, #16
 80027da:	bd80      	pop	{r7, pc}

080027dc <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80027e6:	e00a      	b.n	80027fe <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_+0x22>
	    std::_Destroy(std::__addressof(*__first));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f9b7 	bl	8002b5e <_ZSt11__addressofI10TouchBoardEPT_RS1_>
 80027f0:	0003      	movs	r3, r0
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f9bc 	bl	8002b70 <_ZSt8_DestroyI10TouchBoardEvPT_>
	  for (; __first != __last; ++__first)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3310      	adds	r3, #16
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d1f0      	bne.n	80027e8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_+0xc>
	}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	b002      	add	sp, #8
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	0018      	movs	r0, r3
 800281c:	f000 f9b4 	bl	8002b88 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv>
 8002820:	0003      	movs	r3, r0
      }
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b002      	add	sp, #8
 8002828:	bd80      	pop	{r7, pc}

0800282a <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1ERKS2_>:
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b002      	add	sp, #8
 800283c:	bd80      	pop	{r7, pc}

0800283e <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
	{ }
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b002      	add	sp, #8
 8002860:	bd80      	pop	{r7, pc}

08002862 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj+0x20>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	0011      	movs	r1, r2
 8002878:	0018      	movs	r0, r3
 800287a:	f000 f992 	bl	8002ba2 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8allocateERS1_j>
 800287e:	0003      	movs	r3, r0
 8002880:	e000      	b.n	8002884 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj+0x22>
 8002882:	2300      	movs	r3, #0
      }
 8002884:	0018      	movs	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	b002      	add	sp, #8
 800288a:	bd80      	pop	{r7, pc}

0800288c <_ZNSt16allocator_traitsISaI15TouchState_enumEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 f98f 	bl	8002bc2 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE10deallocateEPS1_j>
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b004      	add	sp, #16
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_ZSt25__uninitialized_default_nIP15TouchState_enumjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
      constexpr bool __can_fill
 80028b6:	230f      	movs	r3, #15
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
	__uninit_default_n(__first, __n);
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 f995 	bl	8002bf4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchState_enumjEET_S4_T0_>
 80028ca:	0003      	movs	r3, r0
    }
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15TouchState_enumEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <_ZNSt16allocator_traitsISaI15TouchEvent_enumEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 f9a2 	bl	8002c3a <_ZNK9__gnu_cxx13new_allocatorI15TouchEvent_enumE8max_sizeEv>
 80028f6:	0003      	movs	r3, r0
      }
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumEC1ERKS2_>:
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b002      	add	sp, #8
 8002912:	bd80      	pop	{r7, pc}

08002914 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
	{ }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b002      	add	sp, #8
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE11_M_allocateEj+0x20>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	0011      	movs	r1, r2
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f980 	bl	8002c54 <_ZNSt16allocator_traitsISaI15TouchEvent_enumEE8allocateERS1_j>
 8002954:	0003      	movs	r3, r0
 8002956:	e000      	b.n	800295a <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE11_M_allocateEj+0x22>
 8002958:	2300      	movs	r3, #0
      }
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}

08002962 <_ZNSt16allocator_traitsISaI15TouchEvent_enumEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 f97d 	bl	8002c74 <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumE10deallocateEPS1_j>
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	46bd      	mov	sp, r7
 800297e:	b004      	add	sp, #16
 8002980:	bd80      	pop	{r7, pc}

08002982 <_ZSt25__uninitialized_default_nIP15TouchEvent_enumjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
      constexpr bool __can_fill
 800298c:	230f      	movs	r3, #15
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
	__uninit_default_n(__first, __n);
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0011      	movs	r1, r2
 800299a:	0018      	movs	r0, r3
 800299c:	f000 f983 	bl	8002ca6 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchEvent_enumjEET_S4_T0_>
 80029a0:	0003      	movs	r3, r0
    }
 80029a2:	0018      	movs	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b004      	add	sp, #16
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_ZNSt12_Destroy_auxILb1EE9__destroyIP15TouchEvent_enumEEvT_S4_>:
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b002      	add	sp, #8
 80029ba:	bd80      	pop	{r7, pc}

080029bc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 f98c 	bl	8002cec <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
 80029d4:	0003      	movs	r3, r0
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}

080029de <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sEC1ERKS2_>:
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	0013      	movs	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	189a      	adds	r2, r3, r2
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	0011      	movs	r1, r2
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f005 f943 	bl	8007c96 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b004      	add	sp, #16
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_ZNSt16allocator_traitsISaI12PixelColor_sEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 f97c 	bl	8002d20 <_ZNK9__gnu_cxx13new_allocatorI12PixelColor_sE8max_sizeEv>
 8002a28:	0003      	movs	r3, r0
      }
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b002      	add	sp, #8
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <_ZNK9__gnu_cxx13new_allocatorI12PixelColor_sE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002a3c:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <_ZNK9__gnu_cxx13new_allocatorI12PixelColor_sE11_M_max_sizeEv+0x14>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b002      	add	sp, #8
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	2aaaaaaa 	.word	0x2aaaaaaa

08002a4c <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff ffea 	bl	8002a34 <_ZNK9__gnu_cxx13new_allocatorI12PixelColor_sE11_M_max_sizeEv>
 8002a60:	0002      	movs	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	419b      	sbcs	r3, r3
 8002a68:	425b      	negs	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	1e5a      	subs	r2, r3, #1
 8002a6e:	4193      	sbcs	r3, r2
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sE8allocateEjPKv+0x3a>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sE8allocateEjPKv+0x54>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <_ZN9__gnu_cxx13new_allocatorI12PixelColor_sE8allocateEjPKv+0x36>
	      std::__throw_bad_array_new_length();
 8002a7e:	f005 f923 	bl	8007cc8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002a82:	f005 f91e 	bl	8007cc2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	0013      	movs	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f005 f905 	bl	8007c9e <_Znwj>
 8002a94:	0003      	movs	r3, r0
      }
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b004      	add	sp, #16
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	55555555 	.word	0x55555555

08002aa4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK12PixelColor_sPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f93f 	bl	8002d3a <_ZSt4copyIPK12PixelColor_sPS0_ET0_T_S5_S4_>
 8002abc:	0003      	movs	r3, r0
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 f94d 	bl	8002d70 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE11_M_max_sizeEv>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b002      	add	sp, #8
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <_ZNSt16allocator_traitsISaI10TouchBoardEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002aea:	6839      	ldr	r1, [r7, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 f949 	bl	8002d88 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv>
 8002af6:	0003      	movs	r3, r0
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	011a      	lsls	r2, r3, #4
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	0011      	movs	r1, r2
 8002b14:	0018      	movs	r0, r3
 8002b16:	f005 f8be 	bl	8007c96 <_ZdlPvj>
      }
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
	  _ForwardIterator __cur = __first;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]
	      for (; __n > 0; --__n, (void) ++__cur)
 8002b30:	e00d      	b.n	8002b4e <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_+0x2c>
		std::_Construct(std::__addressof(*__cur));
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 f812 	bl	8002b5e <_ZSt11__addressofI10TouchBoardEPT_RS1_>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 f94b 	bl	8002dd8 <_ZSt10_ConstructI10TouchBoardJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3310      	adds	r3, #16
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1ee      	bne.n	8002b32 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_+0x10>
	      return __cur;
 8002b54:	68fb      	ldr	r3, [r7, #12]
	}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b004      	add	sp, #16
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_ZSt11__addressofI10TouchBoardEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b002      	add	sp, #8
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_ZSt8_DestroyI10TouchBoardEvPT_>:
    _Destroy(_Tp* __pointer)
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7fe f90e 	bl	8000d9c <_ZN10TouchBoardD1Ev>
    }
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	0018      	movs	r0, r3
 8002b94:	f000 f932 	bl	8002dfc <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE11_M_max_sizeEv>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b002      	add	sp, #8
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002bac:	6839      	ldr	r1, [r7, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f92e 	bl	8002e14 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b002      	add	sp, #8
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	0011      	movs	r1, r2
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f005 f85e 	bl	8007c96 <_ZdlPvj>
      }
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b004      	add	sp, #16
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_ZSt11__addressofI15TouchState_enumEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchState_enumjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	  if (__n > 0)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d015      	beq.n	8002c30 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchState_enumjEET_S4_T0_+0x3c>
		= std::__addressof(*__first);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7ff ffeb 	bl	8002be2 <_ZSt11__addressofI15TouchState_enumEPT_RS1_>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	60fb      	str	r3, [r7, #12]
	      std::_Construct(__val);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f000 f91e 	bl	8002e54 <_ZSt10_ConstructI15TouchState_enumJEEvPT_DpOT0_>
	      ++__first;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	607b      	str	r3, [r7, #4]
	      __first = std::fill_n(__first, __n - 1, *__val);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	1e59      	subs	r1, r3, #1
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 f924 	bl	8002e74 <_ZSt6fill_nIP15TouchState_enumjS0_ET_S2_T0_RKT1_>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	607b      	str	r3, [r7, #4]
	  return __first;
 8002c30:	687b      	ldr	r3, [r7, #4]
	}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b004      	add	sp, #16
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <_ZNK9__gnu_cxx13new_allocatorI15TouchEvent_enumE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 f931 	bl	8002eac <_ZNK9__gnu_cxx13new_allocatorI15TouchEvent_enumE11_M_max_sizeEv>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_ZNSt16allocator_traitsISaI15TouchEvent_enumEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f92d 	bl	8002ec4 <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumE8allocateEjPKv>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b002      	add	sp, #8
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0011      	movs	r1, r2
 8002c86:	0018      	movs	r0, r3
 8002c88:	f005 f805 	bl	8007c96 <_ZdlPvj>
      }
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZSt11__addressofI15TouchEvent_enumEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b002      	add	sp, #8
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchEvent_enumjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
	  if (__n > 0)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d015      	beq.n	8002ce2 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchEvent_enumjEET_S4_T0_+0x3c>
		= std::__addressof(*__first);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff ffeb 	bl	8002c94 <_ZSt11__addressofI15TouchEvent_enumEPT_RS1_>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	60fb      	str	r3, [r7, #12]
	      std::_Construct(__val);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 f91d 	bl	8002f04 <_ZSt10_ConstructI15TouchEvent_enumJEEvPT_DpOT0_>
	      ++__first;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	607b      	str	r3, [r7, #4]
	      __first = std::fill_n(__first, __n - 1, *__val);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	1e59      	subs	r1, r3, #1
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f923 	bl	8002f24 <_ZSt6fill_nIP15TouchEvent_enumjS0_ET_S2_T0_RKT1_>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	607b      	str	r3, [r7, #4]
	  return __first;
 8002ce2:	687b      	ldr	r3, [r7, #4]
	}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b004      	add	sp, #16
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 f92e 	bl	8002f5c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEET_S9_>
 8002d00:	0004      	movs	r4, r0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f929 	bl	8002f5c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEET_S9_>
 8002d0a:	0001      	movs	r1, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	001a      	movs	r2, r3
 8002d10:	0020      	movs	r0, r4
 8002d12:	f000 f92c 	bl	8002f6e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_>
 8002d16:	0003      	movs	r3, r0
    }
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b005      	add	sp, #20
 8002d1e:	bd90      	pop	{r4, r7, pc}

08002d20 <_ZNK9__gnu_cxx13new_allocatorI12PixelColor_sE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7ff fe82 	bl	8002a34 <_ZNK9__gnu_cxx13new_allocatorI12PixelColor_sE11_M_max_sizeEv>
 8002d30:	0003      	movs	r3, r0
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b002      	add	sp, #8
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_ZSt4copyIPK12PixelColor_sPS0_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8002d3a:	b590      	push	{r4, r7, lr}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f935 	bl	8002fb8 <_ZSt12__miter_baseIPK12PixelColor_sET_S3_>
 8002d4e:	0004      	movs	r4, r0
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 f930 	bl	8002fb8 <_ZSt12__miter_baseIPK12PixelColor_sET_S3_>
 8002d58:	0001      	movs	r1, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	0020      	movs	r0, r4
 8002d60:	f000 f933 	bl	8002fca <_ZSt13__copy_move_aILb0EPK12PixelColor_sPS0_ET1_T0_S5_S4_>
 8002d64:	0003      	movs	r3, r0
    }
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b005      	add	sp, #20
 8002d6c:	bd90      	pop	{r4, r7, pc}
	...

08002d70 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE11_M_max_sizeEv+0x14>)
      }
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	07ffffff 	.word	0x07ffffff

08002d88 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7ff ffea 	bl	8002d70 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE11_M_max_sizeEv>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	419b      	sbcs	r3, r3
 8002da4:	425b      	negs	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	1e5a      	subs	r2, r3, #1
 8002daa:	4193      	sbcs	r3, r2
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv+0x3c>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	055b      	lsls	r3, r3, #21
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d301      	bcc.n	8002dc0 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv+0x38>
	      std::__throw_bad_array_new_length();
 8002dbc:	f004 ff84 	bl	8007cc8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002dc0:	f004 ff7f 	bl	8007cc2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f004 ff68 	bl	8007c9e <_Znwj>
 8002dce:	0003      	movs	r3, r0
      }
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b004      	add	sp, #16
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_ZSt10_ConstructI10TouchBoardJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0019      	movs	r1, r3
 8002de4:	2010      	movs	r0, #16
 8002de6:	f7fe f8ad 	bl	8000f44 <_ZnwjPv>
 8002dea:	0003      	movs	r3, r0
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7fd ffa4 	bl	8000d3a <_ZN10TouchBoardC1Ev>
    }
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE11_M_max_sizeEv+0x14>)
      }
 8002e06:	0018      	movs	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b002      	add	sp, #8
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	7fffffff 	.word	0x7fffffff

08002e14 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff ffea 	bl	8002dfc <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE11_M_max_sizeEv>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	419b      	sbcs	r3, r3
 8002e30:	425b      	negs	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	1e5a      	subs	r2, r3, #1
 8002e36:	4193      	sbcs	r3, r2
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv+0x2e>
	    std::__throw_bad_alloc();
 8002e3e:	f004 ff40 	bl	8007cc2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f004 ff2a 	bl	8007c9e <_Znwj>
 8002e4a:	0003      	movs	r3, r0
      }
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b004      	add	sp, #16
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_ZSt10_ConstructI15TouchState_enumJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0019      	movs	r1, r3
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7fe f86f 	bl	8000f44 <_ZnwjPv>
 8002e66:	0003      	movs	r3, r0
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
    }
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b002      	add	sp, #8
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_ZSt6fill_nIP15TouchState_enumjS0_ET_S2_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8002e80:	68fc      	ldr	r4, [r7, #12]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7fe f854 	bl	8000f32 <_ZSt17__size_to_integerj>
 8002e8a:	0005      	movs	r5, r0
			       std::__iterator_category(__first));
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	0018      	movs	r0, r3
 8002e92:	f000 f8bf 	bl	8003014 <_ZSt19__iterator_categoryIP15TouchState_enumENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	1c33      	adds	r3, r6, #0
 8002e9a:	0029      	movs	r1, r5
 8002e9c:	0020      	movs	r0, r4
 8002e9e:	f000 f8c2 	bl	8003026 <_ZSt10__fill_n_aIP15TouchState_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
 8002ea2:	0003      	movs	r3, r0
    }
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b005      	add	sp, #20
 8002eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eac <_ZNK9__gnu_cxx13new_allocatorI15TouchEvent_enumE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002eb4:	4b02      	ldr	r3, [pc, #8]	; (8002ec0 <_ZNK9__gnu_cxx13new_allocatorI15TouchEvent_enumE11_M_max_sizeEv+0x14>)
      }
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b002      	add	sp, #8
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	7fffffff 	.word	0x7fffffff

08002ec4 <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff ffea 	bl	8002eac <_ZNK9__gnu_cxx13new_allocatorI15TouchEvent_enumE11_M_max_sizeEv>
 8002ed8:	0002      	movs	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	419b      	sbcs	r3, r3
 8002ee0:	425b      	negs	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	4193      	sbcs	r3, r2
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <_ZN9__gnu_cxx13new_allocatorI15TouchEvent_enumE8allocateEjPKv+0x2e>
	    std::__throw_bad_alloc();
 8002eee:	f004 fee8 	bl	8007cc2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f004 fed2 	bl	8007c9e <_Znwj>
 8002efa:	0003      	movs	r3, r0
      }
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b004      	add	sp, #16
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_ZSt10_ConstructI15TouchEvent_enumJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	0019      	movs	r1, r3
 8002f10:	2001      	movs	r0, #1
 8002f12:	f7fe f817 	bl	8000f44 <_ZnwjPv>
 8002f16:	0003      	movs	r3, r0
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
    }
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_ZSt6fill_nIP15TouchEvent_enumjS0_ET_S2_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8002f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8002f30:	68fc      	ldr	r4, [r7, #12]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7fd fffc 	bl	8000f32 <_ZSt17__size_to_integerj>
 8002f3a:	0005      	movs	r5, r0
			       std::__iterator_category(__first));
 8002f3c:	230c      	movs	r3, #12
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 f88c 	bl	800305e <_ZSt19__iterator_categoryIP15TouchEvent_enumENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	1c33      	adds	r3, r6, #0
 8002f4a:	0029      	movs	r1, r5
 8002f4c:	0020      	movs	r0, r4
 8002f4e:	f000 f88f 	bl	8003070 <_ZSt10__fill_n_aIP15TouchEvent_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
 8002f52:	0003      	movs	r3, r0
    }
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b005      	add	sp, #20
 8002f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f5c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b002      	add	sp, #8
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002f6e:	b5b0      	push	{r4, r5, r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f893 	bl	80030a8 <_ZSt12__niter_baseIPK15TouchEvent_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8002f82:	0004      	movs	r4, r0
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f88e 	bl	80030a8 <_ZSt12__niter_baseIPK15TouchEvent_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8002f8c:	0005      	movs	r5, r0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f897 	bl	80030c4 <_ZSt12__niter_baseIP15TouchEvent_enumET_S2_>
 8002f96:	0003      	movs	r3, r0
 8002f98:	001a      	movs	r2, r3
 8002f9a:	0029      	movs	r1, r5
 8002f9c:	0020      	movs	r0, r4
 8002f9e:	f000 f89a 	bl	80030d6 <_ZSt14__copy_move_a1ILb0EPK15TouchEvent_enumPS0_ET1_T0_S5_S4_>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 f8a5 	bl	80030f8 <_ZSt12__niter_wrapIP15TouchEvent_enumET_RKS2_S2_>
 8002fae:	0003      	movs	r3, r0
    }
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b004      	add	sp, #16
 8002fb6:	bdb0      	pop	{r4, r5, r7, pc}

08002fb8 <_ZSt12__miter_baseIPK12PixelColor_sET_S3_>:
    __miter_base(_Iterator __it)
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_ZSt13__copy_move_aILb0EPK12PixelColor_sPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002fca:	b5b0      	push	{r4, r5, r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 f897 	bl	800310c <_ZSt12__niter_baseIPK12PixelColor_sET_S3_>
 8002fde:	0004      	movs	r4, r0
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 f892 	bl	800310c <_ZSt12__niter_baseIPK12PixelColor_sET_S3_>
 8002fe8:	0005      	movs	r5, r0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f000 f896 	bl	800311e <_ZSt12__niter_baseIP12PixelColor_sET_S2_>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	001a      	movs	r2, r3
 8002ff6:	0029      	movs	r1, r5
 8002ff8:	0020      	movs	r0, r4
 8002ffa:	f000 f899 	bl	8003130 <_ZSt14__copy_move_a1ILb0EPK12PixelColor_sPS0_ET1_T0_S5_S4_>
 8002ffe:	0002      	movs	r2, r0
 8003000:	1d3b      	adds	r3, r7, #4
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f000 f8a4 	bl	8003152 <_ZSt12__niter_wrapIP12PixelColor_sET_RKS2_S2_>
 800300a:	0003      	movs	r3, r0
    }
 800300c:	0018      	movs	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	b004      	add	sp, #16
 8003012:	bdb0      	pop	{r4, r5, r7, pc}

08003014 <_ZSt19__iterator_categoryIP15TouchState_enumENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	1c18      	adds	r0, r3, #0
 8003020:	46bd      	mov	sp, r7
 8003022:	b002      	add	sp, #8
 8003024:	bd80      	pop	{r7, pc}

08003026 <_ZSt10__fill_n_aIP15TouchState_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	003a      	movs	r2, r7
 8003034:	7013      	strb	r3, [r2, #0]
      if (__n <= 0)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <_ZSt10__fill_n_aIP15TouchState_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x1a>
	return __first;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	e00a      	b.n	8003056 <_ZSt10__fill_n_aIP15TouchState_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x30>
      std::__fill_a(__first, __first + __n, __value);
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	18d1      	adds	r1, r2, r3
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	0018      	movs	r0, r3
 800304c:	f000 f88b 	bl	8003166 <_ZSt8__fill_aIP15TouchState_enumS0_EvT_S2_RKT0_>
      return __first + __n;
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	18d3      	adds	r3, r2, r3
    }
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b004      	add	sp, #16
 800305c:	bd80      	pop	{r7, pc}

0800305e <_ZSt19__iterator_categoryIP15TouchEvent_enumENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	1c18      	adds	r0, r3, #0
 800306a:	46bd      	mov	sp, r7
 800306c:	b002      	add	sp, #8
 800306e:	bd80      	pop	{r7, pc}

08003070 <_ZSt10__fill_n_aIP15TouchEvent_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	003a      	movs	r2, r7
 800307e:	7013      	strb	r3, [r2, #0]
      if (__n <= 0)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <_ZSt10__fill_n_aIP15TouchEvent_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x1a>
	return __first;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	e00a      	b.n	80030a0 <_ZSt10__fill_n_aIP15TouchEvent_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x30>
      std::__fill_a(__first, __first + __n, __value);
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	18d1      	adds	r1, r2, r3
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	0018      	movs	r0, r3
 8003096:	f000 f876 	bl	8003186 <_ZSt8__fill_aIP15TouchEvent_enumS0_EvT_S2_RKT0_>
      return __first + __n;
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	18d3      	adds	r3, r2, r3
    }
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b004      	add	sp, #16
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_ZSt12__niter_baseIPK15TouchEvent_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 f877 	bl	80031a6 <_ZNK9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS1_SaIS1_EEE4baseEv>
 80030b8:	0003      	movs	r3, r0
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_ZSt12__niter_baseIP15TouchEvent_enumET_S2_>:
    __niter_base(_Iterator __it)
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
    { return __it; }
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b002      	add	sp, #8
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <_ZSt14__copy_move_a1ILb0EPK15TouchEvent_enumPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 f865 	bl	80031b8 <_ZSt14__copy_move_a2ILb0EPK15TouchEvent_enumPS0_ET1_T0_S5_S4_>
 80030ee:	0003      	movs	r3, r0
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b004      	add	sp, #16
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_ZSt12__niter_wrapIP15TouchEvent_enumET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}

0800310c <_ZSt12__niter_baseIPK12PixelColor_sET_S3_>:
    __niter_base(_Iterator __it)
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b002      	add	sp, #8
 800311c:	bd80      	pop	{r7, pc}

0800311e <_ZSt12__niter_baseIP12PixelColor_sET_S2_>:
    __niter_base(_Iterator __it)
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}

08003130 <_ZSt14__copy_move_a1ILb0EPK12PixelColor_sPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	0018      	movs	r0, r3
 8003144:	f000 f849 	bl	80031da <_ZSt14__copy_move_a2ILb0EPK12PixelColor_sPS0_ET1_T0_S5_S4_>
 8003148:	0003      	movs	r3, r0
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b004      	add	sp, #16
 8003150:	bd80      	pop	{r7, pc}

08003152 <_ZSt12__niter_wrapIP12PixelColor_sET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b002      	add	sp, #8
 8003164:	bd80      	pop	{r7, pc}

08003166 <_ZSt8__fill_aIP15TouchState_enumS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	0018      	movs	r0, r3
 800317a:	f000 f83f 	bl	80031fc <_ZSt9__fill_a1IP15TouchState_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	46bd      	mov	sp, r7
 8003182:	b004      	add	sp, #16
 8003184:	bd80      	pop	{r7, pc}

08003186 <_ZSt8__fill_aIP15TouchEvent_enumS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	0018      	movs	r0, r3
 800319a:	f000 f846 	bl	800322a <_ZSt9__fill_a1IP15TouchEvent_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b004      	add	sp, #16
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <_ZNK9__gnu_cxx17__normal_iteratorIPK15TouchEvent_enumSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_ZSt14__copy_move_a2ILb0EPK15TouchEvent_enumPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	68b9      	ldr	r1, [r7, #8]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 f844 	bl	8003258 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchEvent_enumEEPT_PKS4_S7_S5_>
 80031d0:	0003      	movs	r3, r0
    }
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b004      	add	sp, #16
 80031d8:	bd80      	pop	{r7, pc}

080031da <_ZSt14__copy_move_a2ILb0EPK12PixelColor_sPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 f84d 	bl	800328c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI12PixelColor_sEEPT_PKS4_S7_S5_>
 80031f2:	0003      	movs	r3, r0
    }
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b004      	add	sp, #16
 80031fa:	bd80      	pop	{r7, pc}

080031fc <_ZSt9__fill_a1IP15TouchState_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 8003208:	e006      	b.n	8003218 <_ZSt9__fill_a1IP15TouchState_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x1c>
	*__first = __value;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3301      	adds	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	429a      	cmp	r2, r3
 800321e:	d1f4      	bne.n	800320a <_ZSt9__fill_a1IP15TouchState_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0xe>
    }
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b004      	add	sp, #16
 8003228:	bd80      	pop	{r7, pc}

0800322a <_ZSt9__fill_a1IP15TouchEvent_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 8003236:	e006      	b.n	8003246 <_ZSt9__fill_a1IP15TouchEvent_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x1c>
	*__first = __value;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3301      	adds	r3, #1
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d1f4      	bne.n	8003238 <_ZSt9__fill_a1IP15TouchEvent_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0xe>
    }
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b004      	add	sp, #16
 8003256:	bd80      	pop	{r7, pc}

08003258 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchEvent_enumEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchEvent_enumEEPT_PKS4_S7_S5_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0018      	movs	r0, r3
 800327a:	f004 fe05 	bl	8007e88 <memmove>
	  return __result + _Num;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	18d3      	adds	r3, r2, r3
	}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b006      	add	sp, #24
 800328a:	bd80      	pop	{r7, pc}

0800328c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI12PixelColor_sEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad2      	subs	r2, r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	0119      	lsls	r1, r3, #4
 80032a6:	185b      	adds	r3, r3, r1
 80032a8:	0219      	lsls	r1, r3, #8
 80032aa:	185b      	adds	r3, r3, r1
 80032ac:	0419      	lsls	r1, r3, #16
 80032ae:	185b      	adds	r3, r3, r1
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	189b      	adds	r3, r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI12PixelColor_sEEPT_PKS4_S7_S5_+0x42>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	0013      	movs	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	189a      	adds	r2, r3, r2
 80032c4:	68f9      	ldr	r1, [r7, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f004 fddd 	bl	8007e88 <memmove>
	  return __result + _Num;
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	0013      	movs	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	189b      	adds	r3, r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	18d3      	adds	r3, r2, r3
	}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b006      	add	sp, #24
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <_ZN9WavPlayerC1ER17I2S_HandleTypeDef>:
#include "WavPlayer.hpp"

WavPlayer::WavPlayer(I2S_HandleTypeDef &hi2s) : i2sHandle(hi2s) {
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	705a      	strb	r2, [r3, #1]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	709a      	strb	r2, [r3, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	605a      	str	r2, [r3, #4]
}
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <_ZN9WavPlayerD1Ev>:

WavPlayer::~WavPlayer() {
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
}
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <_ZN9WavPlayer11play_atomicEPc>:

void WavPlayer::play_atomic(char wav_file[32]) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_SET);
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4871      	ldr	r0, [pc, #452]	; (80034f0 <_ZN9WavPlayer11play_atomicEPc+0x1d4>)
 800332c:	2201      	movs	r2, #1
 800332e:	0019      	movs	r1, r3
 8003330:	f001 ff9e 	bl	8005270 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AUDIO_SD_N_R_GPIO_Port, AUDIO_SD_N_R_Pin, GPIO_PIN_SET);
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	486d      	ldr	r0, [pc, #436]	; (80034f0 <_ZN9WavPlayer11play_atomicEPc+0x1d4>)
 800333a:	2201      	movs	r2, #1
 800333c:	0019      	movs	r1, r3
 800333e:	f001 ff97 	bl	8005270 <HAL_GPIO_WritePin>
    fr = f_open(&fil, wav_file, FA_READ);  // open file
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2283      	movs	r2, #131	; 0x83
 8003346:	0092      	lsls	r2, r2, #2
 8003348:	4694      	mov	ip, r2
 800334a:	4463      	add	r3, ip
 800334c:	6839      	ldr	r1, [r7, #0]
 800334e:	2201      	movs	r2, #1
 8003350:	0018      	movs	r0, r3
 8003352:	f004 f99d 	bl	8007690 <f_open>
 8003356:	0003      	movs	r3, r0
 8003358:	001a      	movs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	701a      	strb	r2, [r3, #0]
    //f_lseek(&fil, 76);                      // move to data region of .wav
    audio_buf_ptr = audio_buf_0;        // point to buffer 0 first
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	208a      	movs	r0, #138	; 0x8a
 8003362:	0080      	lsls	r0, r0, #2
 8003364:	1819      	adds	r1, r3, r0
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	23c5      	movs	r3, #197	; 0xc5
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	50d1      	str	r1, [r2, r3]
    audio_buf_ptr_start = audio_buf_0;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	181a      	adds	r2, r3, r0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	495f      	ldr	r1, [pc, #380]	; (80034f4 <_ZN9WavPlayer11play_atomicEPc+0x1d8>)
 8003376:	505a      	str	r2, [r3, r1]

    while(1) {
        f_read(&fil, &wav_buf[0], CHUNK_SIZE, &bytes_read);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2283      	movs	r2, #131	; 0x83
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	1898      	adds	r0, r3, r2
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3308      	adds	r3, #8
 8003384:	0019      	movs	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2282      	movs	r2, #130	; 0x82
 800338a:	0092      	lsls	r2, r2, #2
 800338c:	4694      	mov	ip, r2
 800338e:	4463      	add	r3, ip
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	0092      	lsls	r2, r2, #2
 8003394:	f004 fbea 	bl	8007b6c <f_read>

        //////////// End of File ////////////
        if (bytes_read < CHUNK_SIZE) {
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	2382      	movs	r3, #130	; 0x82
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	58d2      	ldr	r2, [r2, r3]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d216      	bcs.n	80033d6 <_ZN9WavPlayer11play_atomicEPc+0xba>
            f_close(&fil);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2283      	movs	r2, #131	; 0x83
 80033ac:	0092      	lsls	r2, r2, #2
 80033ae:	4694      	mov	ip, r2
 80033b0:	4463      	add	r3, ip
 80033b2:	0018      	movs	r0, r3
 80033b4:	f004 fc67 	bl	8007c86 <f_close>
            HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_RESET);
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	484c      	ldr	r0, [pc, #304]	; (80034f0 <_ZN9WavPlayer11play_atomicEPc+0x1d4>)
 80033be:	2200      	movs	r2, #0
 80033c0:	0019      	movs	r1, r3
 80033c2:	f001 ff55 	bl	8005270 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(AUDIO_SD_N_R_GPIO_Port, AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	4849      	ldr	r0, [pc, #292]	; (80034f0 <_ZN9WavPlayer11play_atomicEPc+0x1d4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	0019      	movs	r1, r3
 80033d0:	f001 ff4e 	bl	8005270 <HAL_GPIO_WritePin>
            return;
 80033d4:	e089      	b.n	80034ea <_ZN9WavPlayer11play_atomicEPc+0x1ce>
        }
        //////////// End of File ////////////

        // convert raw bytes from wav file into 16-bit audio samples
        for (int ii=0; ii<CHUNK_SIZE-1; ii+=2) {
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e045      	b.n	8003468 <_ZN9WavPlayer11play_atomicEPc+0x14c>
            *audio_buf_ptr = ((uint16_t)wav_buf[ii+1] << 8) | (uint16_t)wav_buf[ii];
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3301      	adds	r3, #1
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	18d3      	adds	r3, r2, r3
 80033e4:	7a1b      	ldrb	r3, [r3, #8]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	b21a      	sxth	r2, r3
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	18cb      	adds	r3, r1, r3
 80033f0:	3308      	adds	r3, #8
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b21b      	sxth	r3, r3
 80033f6:	4313      	orrs	r3, r2
 80033f8:	b219      	sxth	r1, r3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	23c5      	movs	r3, #197	; 0xc5
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	58d3      	ldr	r3, [r2, r3]
 8003402:	b28a      	uxth	r2, r1
 8003404:	801a      	strh	r2, [r3, #0]
            if (*audio_buf_ptr > 32767) {
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	23c5      	movs	r3, #197	; 0xc5
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	58d3      	ldr	r3, [r2, r3]
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b21b      	sxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	da10      	bge.n	8003438 <_ZN9WavPlayer11play_atomicEPc+0x11c>
                *audio_buf_ptr = (*audio_buf_ptr >> 1) + 32768;
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	23c5      	movs	r3, #197	; 0xc5
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	58d3      	ldr	r3, [r2, r3]
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	23c5      	movs	r3, #197	; 0xc5
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	58cb      	ldr	r3, [r1, r3]
 800342c:	4932      	ldr	r1, [pc, #200]	; (80034f8 <_ZN9WavPlayer11play_atomicEPc+0x1dc>)
 800342e:	468c      	mov	ip, r1
 8003430:	4462      	add	r2, ip
 8003432:	b292      	uxth	r2, r2
 8003434:	801a      	strh	r2, [r3, #0]
 8003436:	e00b      	b.n	8003450 <_ZN9WavPlayer11play_atomicEPc+0x134>
            } else {
                *audio_buf_ptr = *audio_buf_ptr >> 1;
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	23c5      	movs	r3, #197	; 0xc5
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	58d3      	ldr	r3, [r2, r3]
 8003440:	881a      	ldrh	r2, [r3, #0]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	23c5      	movs	r3, #197	; 0xc5
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	58cb      	ldr	r3, [r1, r3]
 800344a:	0852      	lsrs	r2, r2, #1
 800344c:	b292      	uxth	r2, r2
 800344e:	801a      	strh	r2, [r3, #0]
            }
            audio_buf_ptr++;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	23c5      	movs	r3, #197	; 0xc5
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	58d3      	ldr	r3, [r2, r3]
 8003458:	1c99      	adds	r1, r3, #2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	23c5      	movs	r3, #197	; 0xc5
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	50d1      	str	r1, [r2, r3]
        for (int ii=0; ii<CHUNK_SIZE-1; ii+=2) {
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3302      	adds	r3, #2
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	23ff      	movs	r3, #255	; 0xff
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	429a      	cmp	r2, r3
 8003470:	ddb4      	ble.n	80033dc <_ZN9WavPlayer11play_atomicEPc+0xc0>
        }

        while (i2sHandle.State != HAL_I2S_STATE_READY);   // Wait for I2S to be ready
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2235      	movs	r2, #53	; 0x35
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	1e5a      	subs	r2, r3, #1
 8003482:	4193      	sbcs	r3, r2
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f4      	bne.n	8003474 <_ZN9WavPlayer11play_atomicEPc+0x158>

        HAL_I2S_Transmit_DMA(&i2sHandle, audio_buf_ptr_start, CHUNK_SIZE/2);    // play buffer
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6858      	ldr	r0, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <_ZN9WavPlayer11play_atomicEPc+0x1d8>)
 8003492:	589b      	ldr	r3, [r3, r2]
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	0052      	lsls	r2, r2, #1
 8003498:	0019      	movs	r1, r3
 800349a:	f001 ff67 	bl	800536c <HAL_I2S_Transmit_DMA>

        // ping pong buffer
        if (audio_buf_ptr_start == &audio_buf_0[0]) {
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <_ZN9WavPlayer11play_atomicEPc+0x1d8>)
 80034a2:	589a      	ldr	r2, [r3, r2]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	218a      	movs	r1, #138	; 0x8a
 80034a8:	0089      	lsls	r1, r1, #2
 80034aa:	468c      	mov	ip, r1
 80034ac:	4463      	add	r3, ip
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d10d      	bne.n	80034ce <_ZN9WavPlayer11play_atomicEPc+0x1b2>
            audio_buf_ptr = &audio_buf_1[0];
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2085      	movs	r0, #133	; 0x85
 80034b6:	00c0      	lsls	r0, r0, #3
 80034b8:	1819      	adds	r1, r3, r0
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	23c5      	movs	r3, #197	; 0xc5
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	50d1      	str	r1, [r2, r3]
            audio_buf_ptr_start = &audio_buf_1[0];
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	181a      	adds	r2, r3, r0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	490a      	ldr	r1, [pc, #40]	; (80034f4 <_ZN9WavPlayer11play_atomicEPc+0x1d8>)
 80034ca:	505a      	str	r2, [r3, r1]
 80034cc:	e754      	b.n	8003378 <_ZN9WavPlayer11play_atomicEPc+0x5c>
        } else {
            audio_buf_ptr = &audio_buf_0[0];
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	208a      	movs	r0, #138	; 0x8a
 80034d2:	0080      	lsls	r0, r0, #2
 80034d4:	1819      	adds	r1, r3, r0
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	23c5      	movs	r3, #197	; 0xc5
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	50d1      	str	r1, [r2, r3]
            audio_buf_ptr_start = &audio_buf_0[0];
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	181a      	adds	r2, r3, r0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <_ZN9WavPlayer11play_atomicEPc+0x1d8>)
 80034e6:	505a      	str	r2, [r3, r1]
        }
    }
 80034e8:	e746      	b.n	8003378 <_ZN9WavPlayer11play_atomicEPc+0x5c>
    
}
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b004      	add	sp, #16
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	50000c00 	.word	0x50000c00
 80034f4:	0000062c 	.word	0x0000062c
 80034f8:	ffff8000 	.word	0xffff8000

080034fc <_ZN9WavPlayer8open_wavEPc>:

void WavPlayer::open_wav(char wav_file[32]) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]

  if (wavOpen) {
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <_ZN9WavPlayer8open_wavEPc+0x1a>
    close_wav();
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	f000 f90b 	bl	800372c <_ZN9WavPlayer9close_wavEv>
  }   

  HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_SET);
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4819      	ldr	r0, [pc, #100]	; (8003580 <_ZN9WavPlayer8open_wavEPc+0x84>)
 800351c:	2201      	movs	r2, #1
 800351e:	0019      	movs	r1, r3
 8003520:	f001 fea6 	bl	8005270 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AUDIO_SD_N_R_GPIO_Port, AUDIO_SD_N_R_Pin, GPIO_PIN_SET);
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	4815      	ldr	r0, [pc, #84]	; (8003580 <_ZN9WavPlayer8open_wavEPc+0x84>)
 800352a:	2201      	movs	r2, #1
 800352c:	0019      	movs	r1, r3
 800352e:	f001 fe9f 	bl	8005270 <HAL_GPIO_WritePin>
  fr = f_open(&fil, wav_file, FA_READ);  // open file
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2283      	movs	r2, #131	; 0x83
 8003536:	0092      	lsls	r2, r2, #2
 8003538:	4694      	mov	ip, r2
 800353a:	4463      	add	r3, ip
 800353c:	6839      	ldr	r1, [r7, #0]
 800353e:	2201      	movs	r2, #1
 8003540:	0018      	movs	r0, r3
 8003542:	f004 f8a5 	bl	8007690 <f_open>
 8003546:	0003      	movs	r3, r0
 8003548:	001a      	movs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	701a      	strb	r2, [r3, #0]
  audio_buf_ptr = audio_buf_0;        // point to buffer 0 first
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	208a      	movs	r0, #138	; 0x8a
 8003552:	0080      	lsls	r0, r0, #2
 8003554:	1819      	adds	r1, r3, r0
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	23c5      	movs	r3, #197	; 0xc5
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	50d1      	str	r1, [r2, r3]
  audio_buf_ptr_start = audio_buf_0;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	181a      	adds	r2, r3, r0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4907      	ldr	r1, [pc, #28]	; (8003584 <_ZN9WavPlayer8open_wavEPc+0x88>)
 8003566:	505a      	str	r2, [r3, r1]
  wavOpen = 1;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	705a      	strb	r2, [r3, #1]
  get_next_chunk(); // prepare first chunk
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	0018      	movs	r0, r3
 8003572:	f000 f867 	bl	8003644 <_ZN9WavPlayer14get_next_chunkEv>
}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b002      	add	sp, #8
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	50000c00 	.word	0x50000c00
 8003584:	0000062c 	.word	0x0000062c

08003588 <_ZN9WavPlayer10play_chunkEv>:

uint8_t WavPlayer::play_chunk(void) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  while (i2sHandle.State != HAL_I2S_STATE_READY);    // Wait for I2S to be ready
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2235      	movs	r2, #53	; 0x35
 8003598:	5c9b      	ldrb	r3, [r3, r2]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	1e5a      	subs	r2, r3, #1
 80035a0:	4193      	sbcs	r3, r2
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f4      	bne.n	8003592 <_ZN9WavPlayer10play_chunkEv+0xa>
  HAL_I2S_Transmit_DMA(&i2sHandle, audio_buf_ptr_start, CHUNK_SIZE/2);    // play buffer
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6858      	ldr	r0, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a0c      	ldr	r2, [pc, #48]	; (80035e0 <_ZN9WavPlayer10play_chunkEv+0x58>)
 80035b0:	589b      	ldr	r3, [r3, r2]
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	0052      	lsls	r2, r2, #1
 80035b6:	0019      	movs	r1, r3
 80035b8:	f001 fed8 	bl	800536c <HAL_I2S_Transmit_DMA>
  audioPlaying = 1;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	709a      	strb	r2, [r3, #2]
  ping_pong(); // switch buffer pointers
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 f80d 	bl	80035e4 <_ZN9WavPlayer9ping_pongEv>
  get_next_chunk();
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 f839 	bl	8003644 <_ZN9WavPlayer14get_next_chunkEv>
  return audioPlaying;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	789b      	ldrb	r3, [r3, #2]
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	0000062c 	.word	0x0000062c

080035e4 <_ZN9WavPlayer9ping_pongEv>:

void WavPlayer::ping_pong(void) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  // ping pong buffer
  if (audio_buf_ptr_start == &audio_buf_0[0]) {
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a14      	ldr	r2, [pc, #80]	; (8003640 <_ZN9WavPlayer9ping_pongEv+0x5c>)
 80035f0:	589a      	ldr	r2, [r3, r2]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	218a      	movs	r1, #138	; 0x8a
 80035f6:	0089      	lsls	r1, r1, #2
 80035f8:	468c      	mov	ip, r1
 80035fa:	4463      	add	r3, ip
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d10d      	bne.n	800361c <_ZN9WavPlayer9ping_pongEv+0x38>
    audio_buf_ptr = &audio_buf_1[0];
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2085      	movs	r0, #133	; 0x85
 8003604:	00c0      	lsls	r0, r0, #3
 8003606:	1819      	adds	r1, r3, r0
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	23c5      	movs	r3, #197	; 0xc5
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	50d1      	str	r1, [r2, r3]
    audio_buf_ptr_start = &audio_buf_1[0];
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	181a      	adds	r2, r3, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	490a      	ldr	r1, [pc, #40]	; (8003640 <_ZN9WavPlayer9ping_pongEv+0x5c>)
 8003618:	505a      	str	r2, [r3, r1]
  } else {
    audio_buf_ptr = &audio_buf_0[0];
    audio_buf_ptr_start = &audio_buf_0[0];
  }
}
 800361a:	e00c      	b.n	8003636 <_ZN9WavPlayer9ping_pongEv+0x52>
    audio_buf_ptr = &audio_buf_0[0];
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	208a      	movs	r0, #138	; 0x8a
 8003620:	0080      	lsls	r0, r0, #2
 8003622:	1819      	adds	r1, r3, r0
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	23c5      	movs	r3, #197	; 0xc5
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	50d1      	str	r1, [r2, r3]
    audio_buf_ptr_start = &audio_buf_0[0];
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	181a      	adds	r2, r3, r0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4903      	ldr	r1, [pc, #12]	; (8003640 <_ZN9WavPlayer9ping_pongEv+0x5c>)
 8003634:	505a      	str	r2, [r3, r1]
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b002      	add	sp, #8
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	0000062c 	.word	0x0000062c

08003644 <_ZN9WavPlayer14get_next_chunkEv>:

void WavPlayer::get_next_chunk(void) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  f_read(&fil, &wav_buf[0], CHUNK_SIZE, &bytes_read);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2283      	movs	r2, #131	; 0x83
 8003650:	0092      	lsls	r2, r2, #2
 8003652:	1898      	adds	r0, r3, r2
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3308      	adds	r3, #8
 8003658:	0019      	movs	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2282      	movs	r2, #130	; 0x82
 800365e:	0092      	lsls	r2, r2, #2
 8003660:	4694      	mov	ip, r2
 8003662:	4463      	add	r3, ip
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	0092      	lsls	r2, r2, #2
 8003668:	f004 fa80 	bl	8007b6c <f_read>

  //////////// End of File ////////////
  if (bytes_read < CHUNK_SIZE) {
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	2382      	movs	r3, #130	; 0x82
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	58d2      	ldr	r2, [r2, r3]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d204      	bcs.n	8003686 <_ZN9WavPlayer14get_next_chunkEv+0x42>
    close_wav();
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0018      	movs	r0, r3
 8003680:	f000 f854 	bl	800372c <_ZN9WavPlayer9close_wavEv>
    return;
 8003684:	e04d      	b.n	8003722 <_ZN9WavPlayer14get_next_chunkEv+0xde>
  }

  // convert raw bytes from wav file into 16-bit audio samples
  for (int ii=0; ii<CHUNK_SIZE-1; ii+=2) {
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e045      	b.n	8003718 <_ZN9WavPlayer14get_next_chunkEv+0xd4>
      *audio_buf_ptr = ((uint16_t)wav_buf[ii+1] << 8) | (uint16_t)wav_buf[ii];
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3301      	adds	r3, #1
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	18d3      	adds	r3, r2, r3
 8003694:	7a1b      	ldrb	r3, [r3, #8]
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	b21a      	sxth	r2, r3
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	18cb      	adds	r3, r1, r3
 80036a0:	3308      	adds	r3, #8
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b219      	sxth	r1, r3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	23c5      	movs	r3, #197	; 0xc5
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	58d3      	ldr	r3, [r2, r3]
 80036b2:	b28a      	uxth	r2, r1
 80036b4:	801a      	strh	r2, [r3, #0]
      if (*audio_buf_ptr > 32767) {
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	23c5      	movs	r3, #197	; 0xc5
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	58d3      	ldr	r3, [r2, r3]
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b21b      	sxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da10      	bge.n	80036e8 <_ZN9WavPlayer14get_next_chunkEv+0xa4>
          *audio_buf_ptr = (*audio_buf_ptr >> 1) + 32768;
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	23c5      	movs	r3, #197	; 0xc5
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	58d3      	ldr	r3, [r2, r3]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	23c5      	movs	r3, #197	; 0xc5
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	58cb      	ldr	r3, [r1, r3]
 80036dc:	4912      	ldr	r1, [pc, #72]	; (8003728 <_ZN9WavPlayer14get_next_chunkEv+0xe4>)
 80036de:	468c      	mov	ip, r1
 80036e0:	4462      	add	r2, ip
 80036e2:	b292      	uxth	r2, r2
 80036e4:	801a      	strh	r2, [r3, #0]
 80036e6:	e00b      	b.n	8003700 <_ZN9WavPlayer14get_next_chunkEv+0xbc>
      } else {
          *audio_buf_ptr = *audio_buf_ptr >> 1;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	23c5      	movs	r3, #197	; 0xc5
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	58d3      	ldr	r3, [r2, r3]
 80036f0:	881a      	ldrh	r2, [r3, #0]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	23c5      	movs	r3, #197	; 0xc5
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	58cb      	ldr	r3, [r1, r3]
 80036fa:	0852      	lsrs	r2, r2, #1
 80036fc:	b292      	uxth	r2, r2
 80036fe:	801a      	strh	r2, [r3, #0]
      }
      audio_buf_ptr++;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	23c5      	movs	r3, #197	; 0xc5
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	58d3      	ldr	r3, [r2, r3]
 8003708:	1c99      	adds	r1, r3, #2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	23c5      	movs	r3, #197	; 0xc5
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	50d1      	str	r1, [r2, r3]
  for (int ii=0; ii<CHUNK_SIZE-1; ii+=2) {
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3302      	adds	r3, #2
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	23ff      	movs	r3, #255	; 0xff
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	429a      	cmp	r2, r3
 8003720:	ddb4      	ble.n	800368c <_ZN9WavPlayer14get_next_chunkEv+0x48>
  }
}
 8003722:	46bd      	mov	sp, r7
 8003724:	b004      	add	sp, #16
 8003726:	bd80      	pop	{r7, pc}
 8003728:	ffff8000 	.word	0xffff8000

0800372c <_ZN9WavPlayer9close_wavEv>:

void WavPlayer::close_wav(void) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  f_close(&fil);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2283      	movs	r2, #131	; 0x83
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4694      	mov	ip, r2
 800373c:	4463      	add	r3, ip
 800373e:	0018      	movs	r0, r3
 8003740:	f004 faa1 	bl	8007c86 <f_close>
  HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_RESET);
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	480a      	ldr	r0, [pc, #40]	; (8003774 <_ZN9WavPlayer9close_wavEv+0x48>)
 800374a:	2200      	movs	r2, #0
 800374c:	0019      	movs	r1, r3
 800374e:	f001 fd8f 	bl	8005270 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(AUDIO_SD_N_R_GPIO_Port, AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	4807      	ldr	r0, [pc, #28]	; (8003774 <_ZN9WavPlayer9close_wavEv+0x48>)
 8003758:	2200      	movs	r2, #0
 800375a:	0019      	movs	r1, r3
 800375c:	f001 fd88 	bl	8005270 <HAL_GPIO_WritePin>
  wavOpen = 0;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	705a      	strb	r2, [r3, #1]
  audioPlaying = 0;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	709a      	strb	r2, [r3, #2]
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}
 8003774:	50000c00 	.word	0x50000c00

08003778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377a:	b08d      	sub	sp, #52	; 0x34
 800377c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800377e:	f001 fb4f 	bl	8004e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003782:	f000 fc05 	bl	8003f90 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003786:	f000 fdad 	bl	80042e4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800378a:	f000 fd7d 	bl	8004288 <_ZL11MX_DMA_Initv>
  MX_I2S2_Init();
 800378e:	f000 fc63 	bl	8004058 <_ZL12MX_I2S2_Initv>
  MX_SPI1_Init();
 8003792:	f000 fc8f 	bl	80040b4 <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 8003796:	f000 fcc9 	bl	800412c <_ZL12MX_TIM2_Initv>
  MX_RNG_Init();
 800379a:	f000 ff0f 	bl	80045bc <_ZL11MX_RNG_Initv>
  /* USER CODE BEGIN 2 */

  // Mount SD Card
  HAL_GPIO_WritePin(SD_SPI1_CS_N_GPIO_Port, SD_SPI1_CS_N_Pin, GPIO_PIN_SET);
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	0219      	lsls	r1, r3, #8
 80037a2:	23a0      	movs	r3, #160	; 0xa0
 80037a4:	05db      	lsls	r3, r3, #23
 80037a6:	2201      	movs	r2, #1
 80037a8:	0018      	movs	r0, r3
 80037aa:	f001 fd61 	bl	8005270 <HAL_GPIO_WritePin>
  FRESULT fr;
  fr = f_mount(&FatFs, "", 1);
 80037ae:	2322      	movs	r3, #34	; 0x22
 80037b0:	18fc      	adds	r4, r7, r3
 80037b2:	49e6      	ldr	r1, [pc, #920]	; (8003b4c <main+0x3d4>)
 80037b4:	4be6      	ldr	r3, [pc, #920]	; (8003b50 <main+0x3d8>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	0018      	movs	r0, r3
 80037ba:	f003 ff43 	bl	8007644 <f_mount>
 80037be:	0003      	movs	r3, r0
 80037c0:	7023      	strb	r3, [r4, #0]

  // Set LED defaults
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	48e3      	ldr	r0, [pc, #908]	; (8003b54 <main+0x3dc>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	0019      	movs	r1, r3
 80037cc:	f001 fd50 	bl	8005270 <HAL_GPIO_WritePin>

  touchGroup0.setAllPixelColor(0,0,0);
 80037d0:	48e1      	ldr	r0, [pc, #900]	; (8003b58 <main+0x3e0>)
 80037d2:	2300      	movs	r3, #0
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	f7fd fca8 	bl	800112c <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
  touchGroup0.showPixels();
 80037dc:	4bde      	ldr	r3, [pc, #888]	; (8003b58 <main+0x3e0>)
 80037de:	0018      	movs	r0, r3
 80037e0:	f7fd fedb 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
  rocketStream.setAllRocketColor(0, 0, 0);
 80037e4:	48dd      	ldr	r0, [pc, #884]	; (8003b5c <main+0x3e4>)
 80037e6:	2300      	movs	r3, #0
 80037e8:	2200      	movs	r2, #0
 80037ea:	2100      	movs	r1, #0
 80037ec:	f7fd f899 	bl	8000922 <_ZN12RocketStream17setAllRocketColorEhhh>
  rocketStream.setAllStreamColor(0, 0, 0);
 80037f0:	48da      	ldr	r0, [pc, #872]	; (8003b5c <main+0x3e4>)
 80037f2:	2300      	movs	r3, #0
 80037f4:	2200      	movs	r2, #0
 80037f6:	2100      	movs	r1, #0
 80037f8:	f7fd f8f4 	bl	80009e4 <_ZN12RocketStream17setAllStreamColorEhhh>
  rocketStream.showPixels();
 80037fc:	4bd7      	ldr	r3, [pc, #860]	; (8003b5c <main+0x3e4>)
 80037fe:	0018      	movs	r0, r3
 8003800:	f7fd fa8f 	bl	8000d22 <_ZN12RocketStream10showPixelsEv>

  buttonR.setLedState(OFF);
 8003804:	4bd6      	ldr	r3, [pc, #856]	; (8003b60 <main+0x3e8>)
 8003806:	2100      	movs	r1, #0
 8003808:	0018      	movs	r0, r3
 800380a:	f7fc fe81 	bl	8000510 <_ZN9LedButton11setLedStateE13LedState_enum>
  buttonL.setLedState(OFF);
 800380e:	4bd5      	ldr	r3, [pc, #852]	; (8003b64 <main+0x3ec>)
 8003810:	2100      	movs	r1, #0
 8003812:	0018      	movs	r0, r3
 8003814:	f7fc fe7c 	bl	8000510 <_ZN9LedButton11setLedStateE13LedState_enum>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

    switch(state) {
 8003818:	4bd3      	ldr	r3, [pc, #844]	; (8003b68 <main+0x3f0>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b07      	cmp	r3, #7
 800381e:	d900      	bls.n	8003822 <main+0xaa>
 8003820:	e34f      	b.n	8003ec2 <main+0x74a>
 8003822:	009a      	lsls	r2, r3, #2
 8003824:	4bd1      	ldr	r3, [pc, #836]	; (8003b6c <main+0x3f4>)
 8003826:	18d3      	adds	r3, r2, r3
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	469f      	mov	pc, r3
      // Off State
      // Press a button to turn on
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_off:
        while (1) {
          buttonR.updateButtonState();
 800382c:	4bcc      	ldr	r3, [pc, #816]	; (8003b60 <main+0x3e8>)
 800382e:	0018      	movs	r0, r3
 8003830:	f7fc fe86 	bl	8000540 <_ZN9LedButton17updateButtonStateEv>
          buttonL.updateButtonState();
 8003834:	4bcb      	ldr	r3, [pc, #812]	; (8003b64 <main+0x3ec>)
 8003836:	0018      	movs	r0, r3
 8003838:	f7fc fe82 	bl	8000540 <_ZN9LedButton17updateButtonStateEv>
          buttonTriggerEventR = buttonR.getTriggerEvent();
 800383c:	4bc8      	ldr	r3, [pc, #800]	; (8003b60 <main+0x3e8>)
 800383e:	0018      	movs	r0, r3
 8003840:	f7fc fed1 	bl	80005e6 <_ZN9LedButton15getTriggerEventEv>
 8003844:	0003      	movs	r3, r0
 8003846:	001a      	movs	r2, r3
 8003848:	4bc9      	ldr	r3, [pc, #804]	; (8003b70 <main+0x3f8>)
 800384a:	701a      	strb	r2, [r3, #0]
          buttonTriggerEventL = buttonL.getTriggerEvent();
 800384c:	4bc5      	ldr	r3, [pc, #788]	; (8003b64 <main+0x3ec>)
 800384e:	0018      	movs	r0, r3
 8003850:	f7fc fec9 	bl	80005e6 <_ZN9LedButton15getTriggerEventEv>
 8003854:	0003      	movs	r3, r0
 8003856:	001a      	movs	r2, r3
 8003858:	4bc6      	ldr	r3, [pc, #792]	; (8003b74 <main+0x3fc>)
 800385a:	701a      	strb	r2, [r3, #0]
          if (buttonTriggerEventR == RISING || buttonTriggerEventL == RISING) {
 800385c:	4bc4      	ldr	r3, [pc, #784]	; (8003b70 <main+0x3f8>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d003      	beq.n	800386c <main+0xf4>
 8003864:	4bc3      	ldr	r3, [pc, #780]	; (8003b74 <main+0x3fc>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d1df      	bne.n	800382c <main+0xb4>
            buttonR.setLedState(ON);
 800386c:	4bbc      	ldr	r3, [pc, #752]	; (8003b60 <main+0x3e8>)
 800386e:	2101      	movs	r1, #1
 8003870:	0018      	movs	r0, r3
 8003872:	f7fc fe4d 	bl	8000510 <_ZN9LedButton11setLedStateE13LedState_enum>
            buttonL.setLedState(ON);
 8003876:	4bbb      	ldr	r3, [pc, #748]	; (8003b64 <main+0x3ec>)
 8003878:	2101      	movs	r1, #1
 800387a:	0018      	movs	r0, r3
 800387c:	f7fc fe48 	bl	8000510 <_ZN9LedButton11setLedStateE13LedState_enum>
            touchGroup0.setAllPixelColor(starColorDef.r,starColorDef.g,starColorDef.b);
 8003880:	4bbd      	ldr	r3, [pc, #756]	; (8003b78 <main+0x400>)
 8003882:	7819      	ldrb	r1, [r3, #0]
 8003884:	4bbc      	ldr	r3, [pc, #752]	; (8003b78 <main+0x400>)
 8003886:	785a      	ldrb	r2, [r3, #1]
 8003888:	4bbb      	ldr	r3, [pc, #748]	; (8003b78 <main+0x400>)
 800388a:	789b      	ldrb	r3, [r3, #2]
 800388c:	48b2      	ldr	r0, [pc, #712]	; (8003b58 <main+0x3e0>)
 800388e:	f7fd fc4d 	bl	800112c <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
            touchGroup0.showPixels();
 8003892:	4bb1      	ldr	r3, [pc, #708]	; (8003b58 <main+0x3e0>)
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fe80 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
            inactivity_timer = HAL_GetTick();
 800389a:	f001 fae1 	bl	8004e60 <HAL_GetTick>
 800389e:	0002      	movs	r2, r0
 80038a0:	4bb6      	ldr	r3, [pc, #728]	; (8003b7c <main+0x404>)
 80038a2:	601a      	str	r2, [r3, #0]
            state = ST_idle;
 80038a4:	4bb0      	ldr	r3, [pc, #704]	; (8003b68 <main+0x3f0>)
 80038a6:	2202      	movs	r2, #2
 80038a8:	701a      	strb	r2, [r3, #0]

      ///////////////////////////////////////////////////////////////////////////////////
      // Reset State
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_reset:
        touchGroup0.setAllPixelColor(starColorDef.r,starColorDef.g,starColorDef.b);
 80038aa:	4bb3      	ldr	r3, [pc, #716]	; (8003b78 <main+0x400>)
 80038ac:	7819      	ldrb	r1, [r3, #0]
 80038ae:	4bb2      	ldr	r3, [pc, #712]	; (8003b78 <main+0x400>)
 80038b0:	785a      	ldrb	r2, [r3, #1]
 80038b2:	4bb1      	ldr	r3, [pc, #708]	; (8003b78 <main+0x400>)
 80038b4:	789b      	ldrb	r3, [r3, #2]
 80038b6:	48a8      	ldr	r0, [pc, #672]	; (8003b58 <main+0x3e0>)
 80038b8:	f7fd fc38 	bl	800112c <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
        touchGroup0.showPixels();
 80038bc:	4ba6      	ldr	r3, [pc, #664]	; (8003b58 <main+0x3e0>)
 80038be:	0018      	movs	r0, r3
 80038c0:	f7fd fe6b 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
        rocketStream.reset();
 80038c4:	4ba5      	ldr	r3, [pc, #660]	; (8003b5c <main+0x3e4>)
 80038c6:	0018      	movs	r0, r3
 80038c8:	f7fd fa0f 	bl	8000cea <_ZN12RocketStream5resetEv>
        state = ST_idle;
 80038cc:	4ba6      	ldr	r3, [pc, #664]	; (8003b68 <main+0x3f0>)
 80038ce:	2202      	movs	r2, #2
 80038d0:	701a      	strb	r2, [r3, #0]
        break;
 80038d2:	e2ff      	b.n	8003ed4 <main+0x75c>
      // Idle State
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_idle:

        // Star Count Game
        buttonR.updateButtonState();
 80038d4:	4ba2      	ldr	r3, [pc, #648]	; (8003b60 <main+0x3e8>)
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7fc fe32 	bl	8000540 <_ZN9LedButton17updateButtonStateEv>
        buttonTriggerEventR = buttonR.getTriggerEvent();
 80038dc:	4ba0      	ldr	r3, [pc, #640]	; (8003b60 <main+0x3e8>)
 80038de:	0018      	movs	r0, r3
 80038e0:	f7fc fe81 	bl	80005e6 <_ZN9LedButton15getTriggerEventEv>
 80038e4:	0003      	movs	r3, r0
 80038e6:	001a      	movs	r2, r3
 80038e8:	4ba1      	ldr	r3, [pc, #644]	; (8003b70 <main+0x3f8>)
 80038ea:	701a      	strb	r2, [r3, #0]
        if (buttonTriggerEventR == RISING) {
 80038ec:	4ba0      	ldr	r3, [pc, #640]	; (8003b70 <main+0x3f8>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d000      	beq.n	80038f6 <main+0x17e>
 80038f4:	e0a8      	b.n	8003a48 <main+0x2d0>
          if (starGameCount == NUM_BOARDS-1){
 80038f6:	4ba2      	ldr	r3, [pc, #648]	; (8003b80 <main+0x408>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b17      	cmp	r3, #23
 80038fc:	d151      	bne.n	80039a2 <main+0x22a>
            touchGroup0.setBoardColor(starGameCount, starColors[colorInd].r, starColors[colorInd].g, starColors[colorInd].b);
 80038fe:	4ba0      	ldr	r3, [pc, #640]	; (8003b80 <main+0x408>)
 8003900:	781c      	ldrb	r4, [r3, #0]
 8003902:	4ba0      	ldr	r3, [pc, #640]	; (8003b84 <main+0x40c>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	001a      	movs	r2, r3
 8003908:	4b9f      	ldr	r3, [pc, #636]	; (8003b88 <main+0x410>)
 800390a:	0011      	movs	r1, r2
 800390c:	0018      	movs	r0, r3
 800390e:	f7fe f860 	bl	80019d2 <_ZNSt6vectorI12PixelColor_sSaIS0_EEixEj>
 8003912:	0003      	movs	r3, r0
 8003914:	781d      	ldrb	r5, [r3, #0]
 8003916:	4b9b      	ldr	r3, [pc, #620]	; (8003b84 <main+0x40c>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	001a      	movs	r2, r3
 800391c:	4b9a      	ldr	r3, [pc, #616]	; (8003b88 <main+0x410>)
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f7fe f856 	bl	80019d2 <_ZNSt6vectorI12PixelColor_sSaIS0_EEixEj>
 8003926:	0003      	movs	r3, r0
 8003928:	785e      	ldrb	r6, [r3, #1]
 800392a:	4b96      	ldr	r3, [pc, #600]	; (8003b84 <main+0x40c>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	001a      	movs	r2, r3
 8003930:	4b95      	ldr	r3, [pc, #596]	; (8003b88 <main+0x410>)
 8003932:	0011      	movs	r1, r2
 8003934:	0018      	movs	r0, r3
 8003936:	f7fe f84c 	bl	80019d2 <_ZNSt6vectorI12PixelColor_sSaIS0_EEixEj>
 800393a:	0003      	movs	r3, r0
 800393c:	789b      	ldrb	r3, [r3, #2]
 800393e:	4886      	ldr	r0, [pc, #536]	; (8003b58 <main+0x3e0>)
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	0033      	movs	r3, r6
 8003944:	002a      	movs	r2, r5
 8003946:	0021      	movs	r1, r4
 8003948:	f7fd fc23 	bl	8001192 <_ZN15TouchBoardGroup13setBoardColorEhhhh>
            touchGroup0.showPixels();
 800394c:	4b82      	ldr	r3, [pc, #520]	; (8003b58 <main+0x3e0>)
 800394e:	0018      	movs	r0, r3
 8003950:	f7fd fe23 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
            audioPlayer.play_atomic(starCountAudioFiles[starGameCount]);
 8003954:	4b8a      	ldr	r3, [pc, #552]	; (8003b80 <main+0x408>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	001a      	movs	r2, r3
 800395a:	4b8c      	ldr	r3, [pc, #560]	; (8003b8c <main+0x414>)
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	58d2      	ldr	r2, [r2, r3]
 8003960:	4b8b      	ldr	r3, [pc, #556]	; (8003b90 <main+0x418>)
 8003962:	0011      	movs	r1, r2
 8003964:	0018      	movs	r0, r3
 8003966:	f7ff fcd9 	bl	800331c <_ZN9WavPlayer11play_atomicEPc>
            starGameCount = 0;
 800396a:	4b85      	ldr	r3, [pc, #532]	; (8003b80 <main+0x408>)
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
            colorInd = 0;
 8003970:	4b84      	ldr	r3, [pc, #528]	; (8003b84 <main+0x40c>)
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
            HAL_Delay(200);
 8003976:	20c8      	movs	r0, #200	; 0xc8
 8003978:	f001 fa78 	bl	8004e6c <HAL_Delay>
            touchGroup0.imAStarSetup();
 800397c:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <main+0x3e0>)
 800397e:	0018      	movs	r0, r3
 8003980:	f7fd fd6b 	bl	800145a <_ZN15TouchBoardGroup12imAStarSetupEv>
            HAL_Delay(1000);
 8003984:	23fa      	movs	r3, #250	; 0xfa
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	0018      	movs	r0, r3
 800398a:	f001 fa6f 	bl	8004e6c <HAL_Delay>
            audioPlayer.open_wav("ImAStar.wav");
 800398e:	4a81      	ldr	r2, [pc, #516]	; (8003b94 <main+0x41c>)
 8003990:	4b7f      	ldr	r3, [pc, #508]	; (8003b90 <main+0x418>)
 8003992:	0011      	movs	r1, r2
 8003994:	0018      	movs	r0, r3
 8003996:	f7ff fdb1 	bl	80034fc <_ZN9WavPlayer8open_wavEPc>
            state = ST_imAStar;
 800399a:	4b73      	ldr	r3, [pc, #460]	; (8003b68 <main+0x3f0>)
 800399c:	2203      	movs	r2, #3
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e04d      	b.n	8003a3e <main+0x2c6>
          } else {
            touchGroup0.setBoardColor(starGameCount, starColors[colorInd].r, starColors[colorInd].g, starColors[colorInd].b);
 80039a2:	4b77      	ldr	r3, [pc, #476]	; (8003b80 <main+0x408>)
 80039a4:	781c      	ldrb	r4, [r3, #0]
 80039a6:	4b77      	ldr	r3, [pc, #476]	; (8003b84 <main+0x40c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	001a      	movs	r2, r3
 80039ac:	4b76      	ldr	r3, [pc, #472]	; (8003b88 <main+0x410>)
 80039ae:	0011      	movs	r1, r2
 80039b0:	0018      	movs	r0, r3
 80039b2:	f7fe f80e 	bl	80019d2 <_ZNSt6vectorI12PixelColor_sSaIS0_EEixEj>
 80039b6:	0003      	movs	r3, r0
 80039b8:	781d      	ldrb	r5, [r3, #0]
 80039ba:	4b72      	ldr	r3, [pc, #456]	; (8003b84 <main+0x40c>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	001a      	movs	r2, r3
 80039c0:	4b71      	ldr	r3, [pc, #452]	; (8003b88 <main+0x410>)
 80039c2:	0011      	movs	r1, r2
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7fe f804 	bl	80019d2 <_ZNSt6vectorI12PixelColor_sSaIS0_EEixEj>
 80039ca:	0003      	movs	r3, r0
 80039cc:	785e      	ldrb	r6, [r3, #1]
 80039ce:	4b6d      	ldr	r3, [pc, #436]	; (8003b84 <main+0x40c>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	001a      	movs	r2, r3
 80039d4:	4b6c      	ldr	r3, [pc, #432]	; (8003b88 <main+0x410>)
 80039d6:	0011      	movs	r1, r2
 80039d8:	0018      	movs	r0, r3
 80039da:	f7fd fffa 	bl	80019d2 <_ZNSt6vectorI12PixelColor_sSaIS0_EEixEj>
 80039de:	0003      	movs	r3, r0
 80039e0:	789b      	ldrb	r3, [r3, #2]
 80039e2:	485d      	ldr	r0, [pc, #372]	; (8003b58 <main+0x3e0>)
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	0033      	movs	r3, r6
 80039e8:	002a      	movs	r2, r5
 80039ea:	0021      	movs	r1, r4
 80039ec:	f7fd fbd1 	bl	8001192 <_ZN15TouchBoardGroup13setBoardColorEhhhh>
            touchGroup0.showPixels();
 80039f0:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <main+0x3e0>)
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7fd fdd1 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
            audioPlayer.open_wav(starCountAudioFiles[starGameCount]);
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <main+0x408>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	001a      	movs	r2, r3
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <main+0x414>)
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	58d2      	ldr	r2, [r2, r3]
 8003a04:	4b62      	ldr	r3, [pc, #392]	; (8003b90 <main+0x418>)
 8003a06:	0011      	movs	r1, r2
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff fd77 	bl	80034fc <_ZN9WavPlayer8open_wavEPc>
            audioPlayer.play_chunk();
 8003a0e:	4b60      	ldr	r3, [pc, #384]	; (8003b90 <main+0x418>)
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7ff fdb9 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
            if (colorInd == NUM_STAR_COLORS-1) {
 8003a16:	4b5b      	ldr	r3, [pc, #364]	; (8003b84 <main+0x40c>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d103      	bne.n	8003a26 <main+0x2ae>
              colorInd = 0;
 8003a1e:	4b59      	ldr	r3, [pc, #356]	; (8003b84 <main+0x40c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e005      	b.n	8003a32 <main+0x2ba>
            } else {
              colorInd++;
 8003a26:	4b57      	ldr	r3, [pc, #348]	; (8003b84 <main+0x40c>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4b55      	ldr	r3, [pc, #340]	; (8003b84 <main+0x40c>)
 8003a30:	701a      	strb	r2, [r3, #0]
            }
            starGameCount++;
 8003a32:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <main+0x408>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	3301      	adds	r3, #1
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4b51      	ldr	r3, [pc, #324]	; (8003b80 <main+0x408>)
 8003a3c:	701a      	strb	r2, [r3, #0]
          }
          inactivity_timer = HAL_GetTick();
 8003a3e:	f001 fa0f 	bl	8004e60 <HAL_GetTick>
 8003a42:	0002      	movs	r2, r0
 8003a44:	4b4d      	ldr	r3, [pc, #308]	; (8003b7c <main+0x404>)
 8003a46:	601a      	str	r2, [r3, #0]
        }

        // Check for Rocket Launch
        buttonL.updateButtonState();
 8003a48:	4b46      	ldr	r3, [pc, #280]	; (8003b64 <main+0x3ec>)
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7fc fd78 	bl	8000540 <_ZN9LedButton17updateButtonStateEv>
        buttonTriggerEventL = buttonL.getTriggerEvent();
 8003a50:	4b44      	ldr	r3, [pc, #272]	; (8003b64 <main+0x3ec>)
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fc fdc7 	bl	80005e6 <_ZN9LedButton15getTriggerEventEv>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	001a      	movs	r2, r3
 8003a5c:	4b45      	ldr	r3, [pc, #276]	; (8003b74 <main+0x3fc>)
 8003a5e:	701a      	strb	r2, [r3, #0]
        if (buttonTriggerEventL == RISING) {
 8003a60:	4b44      	ldr	r3, [pc, #272]	; (8003b74 <main+0x3fc>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d122      	bne.n	8003aae <main+0x336>
          touchGroup0.setAllPixelColor(0, 0, 0);
 8003a68:	483b      	ldr	r0, [pc, #236]	; (8003b58 <main+0x3e0>)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2100      	movs	r1, #0
 8003a70:	f7fd fb5c 	bl	800112c <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
          touchGroup0.showPixels();
 8003a74:	4b38      	ldr	r3, [pc, #224]	; (8003b58 <main+0x3e0>)
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7fd fd8f 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
          starGameCount = 0;
 8003a7c:	4b40      	ldr	r3, [pc, #256]	; (8003b80 <main+0x408>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
          colorInd = 0;
 8003a82:	4b40      	ldr	r3, [pc, #256]	; (8003b84 <main+0x40c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
          rocketStream.rocketLaunch(true);
 8003a88:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <main+0x3e4>)
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7fc ffd4 	bl	8000a3a <_ZN12RocketStream12rocketLaunchEb>
          audioPlayer.open_wav("RocketBuilding.wav");
 8003a92:	4a41      	ldr	r2, [pc, #260]	; (8003b98 <main+0x420>)
 8003a94:	4b3e      	ldr	r3, [pc, #248]	; (8003b90 <main+0x418>)
 8003a96:	0011      	movs	r1, r2
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7ff fd2f 	bl	80034fc <_ZN9WavPlayer8open_wavEPc>
          inactivity_timer = HAL_GetTick();
 8003a9e:	f001 f9df 	bl	8004e60 <HAL_GetTick>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	4b35      	ldr	r3, [pc, #212]	; (8003b7c <main+0x404>)
 8003aa6:	601a      	str	r2, [r3, #0]
          state = ST_rocketCountdown;
 8003aa8:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <main+0x3f0>)
 8003aaa:	2204      	movs	r2, #4
 8003aac:	701a      	strb	r2, [r3, #0]
        }

        // Detect Touches
        touchGroup0.updateTouchStates();
 8003aae:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <main+0x3e0>)
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f7fd fdc4 	bl	800163e <_ZN15TouchBoardGroup17updateTouchStatesEv>
        touchEvents = touchGroup0.getTouchEvents();
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <main+0x3e0>)
 8003aba:	0011      	movs	r1, r2
 8003abc:	0018      	movs	r0, r3
 8003abe:	f7fd fdde 	bl	800167e <_ZN15TouchBoardGroup14getTouchEventsEv>
 8003ac2:	1d3a      	adds	r2, r7, #4
 8003ac4:	4b35      	ldr	r3, [pc, #212]	; (8003b9c <main+0x424>)
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 fd9c 	bl	8004606 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEaSEOS2_>
 8003ace:	1d3b      	adds	r3, r7, #4
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7fd ff3b 	bl	800194c <_ZNSt6vectorI15TouchEvent_enumSaIS0_EED1Ev>
        for (int i=0; i<NUM_BOARDS; i++) {
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	e02a      	b.n	8003b32 <main+0x3ba>
          if (touchEvents[i] == TOUCH_RISING) {
 8003adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ade:	4b2f      	ldr	r3, [pc, #188]	; (8003b9c <main+0x424>)
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7fd ff68 	bl	80019b8 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEixEj>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	425a      	negs	r2, r3
 8003af0:	4153      	adcs	r3, r2
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d019      	beq.n	8003b2c <main+0x3b4>
            if (audioPlayer.audioPlaying == 0) {
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <main+0x418>)
 8003afa:	789b      	ldrb	r3, [r3, #2]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d110      	bne.n	8003b22 <main+0x3aa>
              touchGroup0.twinkleBoard(i);
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <main+0x3e0>)
 8003b06:	0011      	movs	r1, r2
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7fd fb6b 	bl	80011e4 <_ZN15TouchBoardGroup12twinkleBoardEh>
              audioPlayer.open_wav("Twinkle.wav");
 8003b0e:	4a24      	ldr	r2, [pc, #144]	; (8003ba0 <main+0x428>)
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <main+0x418>)
 8003b12:	0011      	movs	r1, r2
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7ff fcf1 	bl	80034fc <_ZN9WavPlayer8open_wavEPc>
              audioPlayer.play_chunk();
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <main+0x418>)
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7ff fd33 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
            }
            inactivity_timer = HAL_GetTick();
 8003b22:	f001 f99d 	bl	8004e60 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <main+0x404>)
 8003b2a:	601a      	str	r2, [r3, #0]
        for (int i=0; i<NUM_BOARDS; i++) {
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	3301      	adds	r3, #1
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	2b17      	cmp	r3, #23
 8003b36:	ddd1      	ble.n	8003adc <main+0x364>
          }
        }

        if (audioPlayer.audioPlaying) {
 8003b38:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <main+0x418>)
 8003b3a:	789b      	ldrb	r3, [r3, #2]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d100      	bne.n	8003b42 <main+0x3ca>
 8003b40:	e1c3      	b.n	8003eca <main+0x752>
          audioPlayer.play_chunk();
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <main+0x418>)
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7ff fd1f 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
        }

        break;
 8003b4a:	e1be      	b.n	8003eca <main+0x752>
 8003b4c:	080081fc 	.word	0x080081fc
 8003b50:	20000410 	.word	0x20000410
 8003b54:	50001c00 	.word	0x50001c00
 8003b58:	20000638 	.word	0x20000638
 8003b5c:	20000ce0 	.word	0x20000ce0
 8003b60:	20000d20 	.word	0x20000d20
 8003b64:	20000d08 	.word	0x20000d08
 8003b68:	20000d54 	.word	0x20000d54
 8003b6c:	08008298 	.word	0x08008298
 8003b70:	20000d39 	.word	0x20000d39
 8003b74:	20000d38 	.word	0x20000d38
 8003b78:	200000f0 	.word	0x200000f0
 8003b7c:	20000d44 	.word	0x20000d44
 8003b80:	20000d3a 	.word	0x20000d3a
 8003b84:	20000d3b 	.word	0x20000d3b
 8003b88:	20000d48 	.word	0x20000d48
 8003b8c:	20000090 	.word	0x20000090
 8003b90:	200006b0 	.word	0x200006b0
 8003b94:	08008200 	.word	0x08008200
 8003b98:	0800820c 	.word	0x0800820c
 8003b9c:	200006a4 	.word	0x200006a4
 8003ba0:	08008220 	.word	0x08008220

      ///////////////////////////////////////////////////////////////////////////////////
      // I'm A Star
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_imAStar:
        if (touchGroup0.imAStarUpdate()) {
 8003ba4:	4be8      	ldr	r3, [pc, #928]	; (8003f48 <main+0x7d0>)
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7fd fc77 	bl	800149a <_ZN15TouchBoardGroup13imAStarUpdateEv>
 8003bac:	1e03      	subs	r3, r0, #0
 8003bae:	d01b      	beq.n	8003be8 <main+0x470>
          audioPlayer.close_wav();
 8003bb0:	4be6      	ldr	r3, [pc, #920]	; (8003f4c <main+0x7d4>)
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7ff fdba 	bl	800372c <_ZN9WavPlayer9close_wavEv>
          touchGroup0.setAllPixelColor(0, 0, 0);
 8003bb8:	48e3      	ldr	r0, [pc, #908]	; (8003f48 <main+0x7d0>)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	f7fd fab4 	bl	800112c <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
          touchGroup0.showPixels();
 8003bc4:	4be0      	ldr	r3, [pc, #896]	; (8003f48 <main+0x7d0>)
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f7fd fce7 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
          HAL_Delay(1000);
 8003bcc:	23fa      	movs	r3, #250	; 0xfa
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f001 f94b 	bl	8004e6c <HAL_Delay>
          inactivity_timer = HAL_GetTick();
 8003bd6:	f001 f943 	bl	8004e60 <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	4bdc      	ldr	r3, [pc, #880]	; (8003f50 <main+0x7d8>)
 8003bde:	601a      	str	r2, [r3, #0]
          state = ST_reset;
 8003be0:	4bdc      	ldr	r3, [pc, #880]	; (8003f54 <main+0x7dc>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
        } else {
          audioPlayer.play_chunk();
        }
        break;
 8003be6:	e175      	b.n	8003ed4 <main+0x75c>
          audioPlayer.play_chunk();
 8003be8:	4bd8      	ldr	r3, [pc, #864]	; (8003f4c <main+0x7d4>)
 8003bea:	0018      	movs	r0, r3
 8003bec:	f7ff fccc 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
        break;
 8003bf0:	e170      	b.n	8003ed4 <main+0x75c>
      ///////////////////////////////////////////////////////////////////////////////////
      // Rocket Countdown
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_rocketCountdown:
        // Check for Rocket Launch
        buttonL.updateButtonState();
 8003bf2:	4bd9      	ldr	r3, [pc, #868]	; (8003f58 <main+0x7e0>)
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7fc fca3 	bl	8000540 <_ZN9LedButton17updateButtonStateEv>
        buttonTriggerEventL = buttonL.getTriggerEvent();
 8003bfa:	4bd7      	ldr	r3, [pc, #860]	; (8003f58 <main+0x7e0>)
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7fc fcf2 	bl	80005e6 <_ZN9LedButton15getTriggerEventEv>
 8003c02:	0003      	movs	r3, r0
 8003c04:	001a      	movs	r2, r3
 8003c06:	4bd5      	ldr	r3, [pc, #852]	; (8003f5c <main+0x7e4>)
 8003c08:	701a      	strb	r2, [r3, #0]
        LaunchState_enum launchState;

        if (buttonTriggerEventL == RISING) {
 8003c0a:	4bd4      	ldr	r3, [pc, #848]	; (8003f5c <main+0x7e4>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d109      	bne.n	8003c26 <main+0x4ae>
          launchState = rocketStream.rocketLaunch(true);
 8003c12:	2323      	movs	r3, #35	; 0x23
 8003c14:	18fc      	adds	r4, r7, r3
 8003c16:	4bd2      	ldr	r3, [pc, #840]	; (8003f60 <main+0x7e8>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f7fc ff0d 	bl	8000a3a <_ZN12RocketStream12rocketLaunchEb>
 8003c20:	0003      	movs	r3, r0
 8003c22:	7023      	strb	r3, [r4, #0]
 8003c24:	e008      	b.n	8003c38 <main+0x4c0>
        } else {
          launchState = rocketStream.rocketLaunch(false);
 8003c26:	2323      	movs	r3, #35	; 0x23
 8003c28:	18fc      	adds	r4, r7, r3
 8003c2a:	4bcd      	ldr	r3, [pc, #820]	; (8003f60 <main+0x7e8>)
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f7fc ff03 	bl	8000a3a <_ZN12RocketStream12rocketLaunchEb>
 8003c34:	0003      	movs	r3, r0
 8003c36:	7023      	strb	r3, [r4, #0]
        }

        if (launchState == INCREMENT) {
 8003c38:	2323      	movs	r3, #35	; 0x23
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d10c      	bne.n	8003c5c <main+0x4e4>
          rocketStream.incrementLaunch();
 8003c42:	4bc7      	ldr	r3, [pc, #796]	; (8003f60 <main+0x7e8>)
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7fc ff2c 	bl	8000aa2 <_ZN12RocketStream15incrementLaunchEv>
          audioPlayer.play_chunk();
 8003c4a:	4bc0      	ldr	r3, [pc, #768]	; (8003f4c <main+0x7d4>)
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f7ff fc9b 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
          rocketStream.showPixels();
 8003c52:	4bc3      	ldr	r3, [pc, #780]	; (8003f60 <main+0x7e8>)
 8003c54:	0018      	movs	r0, r3
 8003c56:	f7fd f864 	bl	8000d22 <_ZN12RocketStream10showPixelsEv>
 8003c5a:	e03b      	b.n	8003cd4 <main+0x55c>
        } else if (launchState == DECREMENT){
 8003c5c:	2323      	movs	r3, #35	; 0x23
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10c      	bne.n	8003c80 <main+0x508>
          rocketStream.decrementLaunch();
 8003c66:	4bbe      	ldr	r3, [pc, #760]	; (8003f60 <main+0x7e8>)
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7fc ffe1 	bl	8000c30 <_ZN12RocketStream15decrementLaunchEv>
          audioPlayer.play_chunk();
 8003c6e:	4bb7      	ldr	r3, [pc, #732]	; (8003f4c <main+0x7d4>)
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7ff fc89 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
          rocketStream.showPixels();
 8003c76:	4bba      	ldr	r3, [pc, #744]	; (8003f60 <main+0x7e8>)
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7fd f852 	bl	8000d22 <_ZN12RocketStream10showPixelsEv>
 8003c7e:	e029      	b.n	8003cd4 <main+0x55c>
        } else if (launchState == LAUNCHED) {
 8003c80:	2323      	movs	r3, #35	; 0x23
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d117      	bne.n	8003cba <main+0x542>
          audioPlayer.close_wav();
 8003c8a:	4bb0      	ldr	r3, [pc, #704]	; (8003f4c <main+0x7d4>)
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7ff fd4d 	bl	800372c <_ZN9WavPlayer9close_wavEv>
          HAL_Delay(500);
 8003c92:	23fa      	movs	r3, #250	; 0xfa
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	0018      	movs	r0, r3
 8003c98:	f001 f8e8 	bl	8004e6c <HAL_Delay>
          timer = HAL_GetTick();
 8003c9c:	f001 f8e0 	bl	8004e60 <HAL_GetTick>
 8003ca0:	0002      	movs	r2, r0
 8003ca2:	4bb0      	ldr	r3, [pc, #704]	; (8003f64 <main+0x7ec>)
 8003ca4:	601a      	str	r2, [r3, #0]
          audioPlayer.open_wav("Explosion.wav");
 8003ca6:	4ab0      	ldr	r2, [pc, #704]	; (8003f68 <main+0x7f0>)
 8003ca8:	4ba8      	ldr	r3, [pc, #672]	; (8003f4c <main+0x7d4>)
 8003caa:	0011      	movs	r1, r2
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7ff fc25 	bl	80034fc <_ZN9WavPlayer8open_wavEPc>
          state = ST_rocketExplode;
 8003cb2:	4ba8      	ldr	r3, [pc, #672]	; (8003f54 <main+0x7dc>)
 8003cb4:	2206      	movs	r2, #6
 8003cb6:	701a      	strb	r2, [r3, #0]
          break;
 8003cb8:	e10c      	b.n	8003ed4 <main+0x75c>
        } else if (launchState == LANDED) {
 8003cba:	2323      	movs	r3, #35	; 0x23
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d107      	bne.n	8003cd4 <main+0x55c>
          audioPlayer.close_wav();
 8003cc4:	4ba1      	ldr	r3, [pc, #644]	; (8003f4c <main+0x7d4>)
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7ff fd30 	bl	800372c <_ZN9WavPlayer9close_wavEv>
          state = ST_reset;
 8003ccc:	4ba1      	ldr	r3, [pc, #644]	; (8003f54 <main+0x7dc>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
          break;
 8003cd2:	e0ff      	b.n	8003ed4 <main+0x75c>
        } else {
          //DO NOTHING
        }
        audioPlayer.play_chunk();
 8003cd4:	4b9d      	ldr	r3, [pc, #628]	; (8003f4c <main+0x7d4>)
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7ff fc56 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
        break;
 8003cdc:	e0fa      	b.n	8003ed4 <main+0x75c>

      ///////////////////////////////////////////////////////////////////////////////////
      // Rocket Explosion
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_rocketExplode:
        if (audioPlayer.play_chunk()) {
 8003cde:	4b9b      	ldr	r3, [pc, #620]	; (8003f4c <main+0x7d4>)
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7ff fc51 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	1e5a      	subs	r2, r3, #1
 8003cea:	4193      	sbcs	r3, r2
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d020      	beq.n	8003d34 <main+0x5bc>
          uint32_t timer_new = HAL_GetTick();
 8003cf2:	f001 f8b5 	bl	8004e60 <HAL_GetTick>
 8003cf6:	0003      	movs	r3, r0
 8003cf8:	617b      	str	r3, [r7, #20]
          if (timer_new - timer > ROCKET_EXPLOSION_TRANS_MS) {
 8003cfa:	4b9a      	ldr	r3, [pc, #616]	; (8003f64 <main+0x7ec>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	1ad2      	subs	r2, r2, r3
 8003d02:	4b9a      	ldr	r3, [pc, #616]	; (8003f6c <main+0x7f4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d800      	bhi.n	8003d0c <main+0x594>
 8003d0a:	e0e0      	b.n	8003ece <main+0x756>
            rocketStream.incrementLaunch();
 8003d0c:	4b94      	ldr	r3, [pc, #592]	; (8003f60 <main+0x7e8>)
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f7fc fec7 	bl	8000aa2 <_ZN12RocketStream15incrementLaunchEv>
            audioPlayer.play_chunk();
 8003d14:	4b8d      	ldr	r3, [pc, #564]	; (8003f4c <main+0x7d4>)
 8003d16:	0018      	movs	r0, r3
 8003d18:	f7ff fc36 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
            rocketStream.showPixels();
 8003d1c:	4b90      	ldr	r3, [pc, #576]	; (8003f60 <main+0x7e8>)
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7fc ffff 	bl	8000d22 <_ZN12RocketStream10showPixelsEv>
            audioPlayer.play_chunk();
 8003d24:	4b89      	ldr	r3, [pc, #548]	; (8003f4c <main+0x7d4>)
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7ff fc2e 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
            timer = timer_new;
 8003d2c:	4b8d      	ldr	r3, [pc, #564]	; (8003f64 <main+0x7ec>)
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	601a      	str	r2, [r3, #0]
          }
        } else {
          audioPlayer.open_wav("ToTheMoon.wav");
          state = ST_rocketSong;
        }
        break;
 8003d32:	e0cc      	b.n	8003ece <main+0x756>
          audioPlayer.open_wav("ToTheMoon.wav");
 8003d34:	4a8e      	ldr	r2, [pc, #568]	; (8003f70 <main+0x7f8>)
 8003d36:	4b85      	ldr	r3, [pc, #532]	; (8003f4c <main+0x7d4>)
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7ff fbde 	bl	80034fc <_ZN9WavPlayer8open_wavEPc>
          state = ST_rocketSong;
 8003d40:	4b84      	ldr	r3, [pc, #528]	; (8003f54 <main+0x7dc>)
 8003d42:	2207      	movs	r2, #7
 8003d44:	701a      	strb	r2, [r3, #0]
        break;
 8003d46:	e0c2      	b.n	8003ece <main+0x756>

      ///////////////////////////////////////////////////////////////////////////////////
      // Rocket Song
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_rocketSong:
        if (audioPlayer.play_chunk()) {
 8003d48:	4b80      	ldr	r3, [pc, #512]	; (8003f4c <main+0x7d4>)
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7ff fc1c 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
 8003d50:	0003      	movs	r3, r0
 8003d52:	1e5a      	subs	r2, r3, #1
 8003d54:	4193      	sbcs	r3, r2
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d100      	bne.n	8003d5e <main+0x5e6>
 8003d5c:	e0a8      	b.n	8003eb0 <main+0x738>
          uint32_t timer_new = HAL_GetTick();
 8003d5e:	f001 f87f 	bl	8004e60 <HAL_GetTick>
 8003d62:	0003      	movs	r3, r0
 8003d64:	61fb      	str	r3, [r7, #28]
          if (timer_new - timer > ROCKET_SONG_TRANS_MS) {
 8003d66:	4b7f      	ldr	r3, [pc, #508]	; (8003f64 <main+0x7ec>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	1ad2      	subs	r2, r2, r3
 8003d6e:	4b81      	ldr	r3, [pc, #516]	; (8003f74 <main+0x7fc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d912      	bls.n	8003d9c <main+0x624>
            rocketStream.incrementLaunch();
 8003d76:	4b7a      	ldr	r3, [pc, #488]	; (8003f60 <main+0x7e8>)
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7fc fe92 	bl	8000aa2 <_ZN12RocketStream15incrementLaunchEv>
            audioPlayer.play_chunk();
 8003d7e:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <main+0x7d4>)
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7ff fc01 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
            rocketStream.showPixels();
 8003d86:	4b76      	ldr	r3, [pc, #472]	; (8003f60 <main+0x7e8>)
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f7fc ffca 	bl	8000d22 <_ZN12RocketStream10showPixelsEv>
            audioPlayer.play_chunk();
 8003d8e:	4b6f      	ldr	r3, [pc, #444]	; (8003f4c <main+0x7d4>)
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7ff fbf9 	bl	8003588 <_ZN9WavPlayer10play_chunkEv>
            timer = timer_new;
 8003d96:	4b73      	ldr	r3, [pc, #460]	; (8003f64 <main+0x7ec>)
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	601a      	str	r2, [r3, #0]
          }
          if (timer_new - timer2 > ROCKET_SONG_STAR_TRANS_MS) {
 8003d9c:	4b76      	ldr	r3, [pc, #472]	; (8003f78 <main+0x800>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <main+0x804>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d800      	bhi.n	8003dae <main+0x636>
 8003dac:	e091      	b.n	8003ed2 <main+0x75a>
            uint8_t star1 = (HAL_RNG_GetRandomNumber(&hrng) % NUM_BOARDS);
 8003dae:	4b74      	ldr	r3, [pc, #464]	; (8003f80 <main+0x808>)
 8003db0:	0018      	movs	r0, r3
 8003db2:	f001 ff55 	bl	8005c60 <HAL_RNG_GetRandomNumber>
 8003db6:	0003      	movs	r3, r0
 8003db8:	2118      	movs	r1, #24
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7fc fa2a 	bl	8000214 <__aeabi_uidivmod>
 8003dc0:	000b      	movs	r3, r1
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	261b      	movs	r6, #27
 8003dc6:	19bb      	adds	r3, r7, r6
 8003dc8:	701a      	strb	r2, [r3, #0]
            uint8_t star2 = (HAL_RNG_GetRandomNumber(&hrng) % NUM_BOARDS);
 8003dca:	4b6d      	ldr	r3, [pc, #436]	; (8003f80 <main+0x808>)
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f001 ff47 	bl	8005c60 <HAL_RNG_GetRandomNumber>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	2118      	movs	r1, #24
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fc fa1c 	bl	8000214 <__aeabi_uidivmod>
 8003ddc:	000b      	movs	r3, r1
 8003dde:	001a      	movs	r2, r3
 8003de0:	231a      	movs	r3, #26
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	701a      	strb	r2, [r3, #0]
            uint8_t star3 = (HAL_RNG_GetRandomNumber(&hrng) % NUM_BOARDS);
 8003de6:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <main+0x808>)
 8003de8:	0018      	movs	r0, r3
 8003dea:	f001 ff39 	bl	8005c60 <HAL_RNG_GetRandomNumber>
 8003dee:	0003      	movs	r3, r0
 8003df0:	2118      	movs	r1, #24
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fc fa0e 	bl	8000214 <__aeabi_uidivmod>
 8003df8:	000b      	movs	r3, r1
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	2119      	movs	r1, #25
 8003dfe:	187b      	adds	r3, r7, r1
 8003e00:	701a      	strb	r2, [r3, #0]
            uint8_t star4 = (HAL_RNG_GetRandomNumber(&hrng) % NUM_BOARDS);
 8003e02:	4b5f      	ldr	r3, [pc, #380]	; (8003f80 <main+0x808>)
 8003e04:	0018      	movs	r0, r3
 8003e06:	f001 ff2b 	bl	8005c60 <HAL_RNG_GetRandomNumber>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	2118      	movs	r1, #24
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7fc fa00 	bl	8000214 <__aeabi_uidivmod>
 8003e14:	000b      	movs	r3, r1
 8003e16:	001a      	movs	r2, r3
 8003e18:	2018      	movs	r0, #24
 8003e1a:	183b      	adds	r3, r7, r0
 8003e1c:	701a      	strb	r2, [r3, #0]
            touchGroup0.setAllPixelColor(0, 0, 0);
 8003e1e:	484a      	ldr	r0, [pc, #296]	; (8003f48 <main+0x7d0>)
 8003e20:	2300      	movs	r3, #0
 8003e22:	2200      	movs	r2, #0
 8003e24:	2100      	movs	r1, #0
 8003e26:	f7fd f981 	bl	800112c <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
            touchGroup0.setBoardColor(star1, starColorDef.r, starColorDef.g, starColorDef.b);
 8003e2a:	4b56      	ldr	r3, [pc, #344]	; (8003f84 <main+0x80c>)
 8003e2c:	781c      	ldrb	r4, [r3, #0]
 8003e2e:	4b55      	ldr	r3, [pc, #340]	; (8003f84 <main+0x80c>)
 8003e30:	785d      	ldrb	r5, [r3, #1]
 8003e32:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <main+0x80c>)
 8003e34:	789b      	ldrb	r3, [r3, #2]
 8003e36:	19ba      	adds	r2, r7, r6
 8003e38:	7811      	ldrb	r1, [r2, #0]
 8003e3a:	4843      	ldr	r0, [pc, #268]	; (8003f48 <main+0x7d0>)
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	002b      	movs	r3, r5
 8003e40:	0022      	movs	r2, r4
 8003e42:	f7fd f9a6 	bl	8001192 <_ZN15TouchBoardGroup13setBoardColorEhhhh>
            touchGroup0.setBoardColor(star2, starColorDef.r, starColorDef.g, starColorDef.b);
 8003e46:	4b4f      	ldr	r3, [pc, #316]	; (8003f84 <main+0x80c>)
 8003e48:	781c      	ldrb	r4, [r3, #0]
 8003e4a:	4b4e      	ldr	r3, [pc, #312]	; (8003f84 <main+0x80c>)
 8003e4c:	785d      	ldrb	r5, [r3, #1]
 8003e4e:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <main+0x80c>)
 8003e50:	789b      	ldrb	r3, [r3, #2]
 8003e52:	221a      	movs	r2, #26
 8003e54:	18ba      	adds	r2, r7, r2
 8003e56:	7811      	ldrb	r1, [r2, #0]
 8003e58:	483b      	ldr	r0, [pc, #236]	; (8003f48 <main+0x7d0>)
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	002b      	movs	r3, r5
 8003e5e:	0022      	movs	r2, r4
 8003e60:	f7fd f997 	bl	8001192 <_ZN15TouchBoardGroup13setBoardColorEhhhh>
            touchGroup0.setBoardColor(star3, starColorDef.r, starColorDef.g, starColorDef.b);
 8003e64:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <main+0x80c>)
 8003e66:	781c      	ldrb	r4, [r3, #0]
 8003e68:	4b46      	ldr	r3, [pc, #280]	; (8003f84 <main+0x80c>)
 8003e6a:	785d      	ldrb	r5, [r3, #1]
 8003e6c:	4b45      	ldr	r3, [pc, #276]	; (8003f84 <main+0x80c>)
 8003e6e:	789b      	ldrb	r3, [r3, #2]
 8003e70:	2119      	movs	r1, #25
 8003e72:	187a      	adds	r2, r7, r1
 8003e74:	7811      	ldrb	r1, [r2, #0]
 8003e76:	4834      	ldr	r0, [pc, #208]	; (8003f48 <main+0x7d0>)
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	002b      	movs	r3, r5
 8003e7c:	0022      	movs	r2, r4
 8003e7e:	f7fd f988 	bl	8001192 <_ZN15TouchBoardGroup13setBoardColorEhhhh>
            touchGroup0.setBoardColor(star4, starColorDef.r, starColorDef.g, starColorDef.b);
 8003e82:	4b40      	ldr	r3, [pc, #256]	; (8003f84 <main+0x80c>)
 8003e84:	781c      	ldrb	r4, [r3, #0]
 8003e86:	4b3f      	ldr	r3, [pc, #252]	; (8003f84 <main+0x80c>)
 8003e88:	785d      	ldrb	r5, [r3, #1]
 8003e8a:	4b3e      	ldr	r3, [pc, #248]	; (8003f84 <main+0x80c>)
 8003e8c:	789b      	ldrb	r3, [r3, #2]
 8003e8e:	2018      	movs	r0, #24
 8003e90:	183a      	adds	r2, r7, r0
 8003e92:	7811      	ldrb	r1, [r2, #0]
 8003e94:	482c      	ldr	r0, [pc, #176]	; (8003f48 <main+0x7d0>)
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	002b      	movs	r3, r5
 8003e9a:	0022      	movs	r2, r4
 8003e9c:	f7fd f979 	bl	8001192 <_ZN15TouchBoardGroup13setBoardColorEhhhh>
            touchGroup0.showPixels();
 8003ea0:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <main+0x7d0>)
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f7fd fb79 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
            timer2 = timer_new;
 8003ea8:	4b33      	ldr	r3, [pc, #204]	; (8003f78 <main+0x800>)
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	601a      	str	r2, [r3, #0]
          }
        } else {
          inactivity_timer = HAL_GetTick();
          state = ST_reset;
        }
        break;
 8003eae:	e010      	b.n	8003ed2 <main+0x75a>
          inactivity_timer = HAL_GetTick();
 8003eb0:	f000 ffd6 	bl	8004e60 <HAL_GetTick>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <main+0x7d8>)
 8003eb8:	601a      	str	r2, [r3, #0]
          state = ST_reset;
 8003eba:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <main+0x7dc>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	701a      	strb	r2, [r3, #0]
        break;
 8003ec0:	e007      	b.n	8003ed2 <main+0x75a>

      default:
        state = ST_idle;
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <main+0x7dc>)
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e004      	b.n	8003ed4 <main+0x75c>
        break;
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	e002      	b.n	8003ed4 <main+0x75c>
        break;
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	e000      	b.n	8003ed4 <main+0x75c>
        break;
 8003ed2:	46c0      	nop			; (mov r8, r8)
    }

    if (state != ST_off) {
 8003ed4:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <main+0x7dc>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d100      	bne.n	8003ede <main+0x766>
 8003edc:	e49c      	b.n	8003818 <main+0xa0>
      uint32_t inactivity_timer_new = HAL_GetTick();
 8003ede:	f000 ffbf 	bl	8004e60 <HAL_GetTick>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	613b      	str	r3, [r7, #16]
      if (inactivity_timer_new - inactivity_timer > INACTIVITY_TO_MS) {
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <main+0x7d8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	1ad2      	subs	r2, r2, r3
 8003eee:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <main+0x810>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d800      	bhi.n	8003ef8 <main+0x780>
 8003ef6:	e48f      	b.n	8003818 <main+0xa0>
        touchGroup0.setAllPixelColor(0,0,0);
 8003ef8:	4813      	ldr	r0, [pc, #76]	; (8003f48 <main+0x7d0>)
 8003efa:	2300      	movs	r3, #0
 8003efc:	2200      	movs	r2, #0
 8003efe:	2100      	movs	r1, #0
 8003f00:	f7fd f914 	bl	800112c <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
        touchGroup0.showPixels();
 8003f04:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <main+0x7d0>)
 8003f06:	0018      	movs	r0, r3
 8003f08:	f7fd fb47 	bl	800159a <_ZN15TouchBoardGroup10showPixelsEv>
        rocketStream.setAllRocketColor(0, 0, 0);
 8003f0c:	4814      	ldr	r0, [pc, #80]	; (8003f60 <main+0x7e8>)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2200      	movs	r2, #0
 8003f12:	2100      	movs	r1, #0
 8003f14:	f7fc fd05 	bl	8000922 <_ZN12RocketStream17setAllRocketColorEhhh>
        rocketStream.setAllStreamColor(0, 0, 0);
 8003f18:	4811      	ldr	r0, [pc, #68]	; (8003f60 <main+0x7e8>)
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2100      	movs	r1, #0
 8003f20:	f7fc fd60 	bl	80009e4 <_ZN12RocketStream17setAllStreamColorEhhh>
        rocketStream.showPixels();
 8003f24:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <main+0x7e8>)
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7fc fefb 	bl	8000d22 <_ZN12RocketStream10showPixelsEv>
        buttonR.setLedState(OFF);
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <main+0x814>)
 8003f2e:	2100      	movs	r1, #0
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7fc faed 	bl	8000510 <_ZN9LedButton11setLedStateE13LedState_enum>
        buttonL.setLedState(OFF);
 8003f36:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <main+0x7e0>)
 8003f38:	2100      	movs	r1, #0
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f7fc fae8 	bl	8000510 <_ZN9LedButton11setLedStateE13LedState_enum>
        state = ST_off;
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <main+0x7dc>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
    }

	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8003f46:	e467      	b.n	8003818 <main+0xa0>
 8003f48:	20000638 	.word	0x20000638
 8003f4c:	200006b0 	.word	0x200006b0
 8003f50:	20000d44 	.word	0x20000d44
 8003f54:	20000d54 	.word	0x20000d54
 8003f58:	20000d08 	.word	0x20000d08
 8003f5c:	20000d38 	.word	0x20000d38
 8003f60:	20000ce0 	.word	0x20000ce0
 8003f64:	20000d3c 	.word	0x20000d3c
 8003f68:	0800822c 	.word	0x0800822c
 8003f6c:	200000f8 	.word	0x200000f8
 8003f70:	0800823c 	.word	0x0800823c
 8003f74:	200000fc 	.word	0x200000fc
 8003f78:	20000d40 	.word	0x20000d40
 8003f7c:	20000100 	.word	0x20000100
 8003f80:	20000400 	.word	0x20000400
 8003f84:	200000f0 	.word	0x200000f0
 8003f88:	200000f4 	.word	0x200000f4
 8003f8c:	20000d20 	.word	0x20000d20

08003f90 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b095      	sub	sp, #84	; 0x54
 8003f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f96:	2418      	movs	r4, #24
 8003f98:	193b      	adds	r3, r7, r4
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	2338      	movs	r3, #56	; 0x38
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	f003 ff84 	bl	8007eae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	0018      	movs	r0, r3
 8003faa:	2314      	movs	r3, #20
 8003fac:	001a      	movs	r2, r3
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f003 ff7d 	bl	8007eae <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fb4:	4b26      	ldr	r3, [pc, #152]	; (8004050 <_Z18SystemClock_Configv+0xc0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a26      	ldr	r2, [pc, #152]	; (8004054 <_Z18SystemClock_Configv+0xc4>)
 8003fba:	401a      	ands	r2, r3
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <_Z18SystemClock_Configv+0xc0>)
 8003fbe:	2180      	movs	r1, #128	; 0x80
 8003fc0:	0109      	lsls	r1, r1, #4
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fc6:	0021      	movs	r1, r4
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	2202      	movs	r2, #2
 8003fcc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fce:	187b      	adds	r3, r7, r1
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2202      	movs	r2, #2
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	2280      	movs	r2, #128	; 0x80
 8003fea:	02d2      	lsls	r2, r2, #11
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003fee:	187b      	adds	r3, r7, r1
 8003ff0:	2280      	movs	r2, #128	; 0x80
 8003ff2:	03d2      	lsls	r2, r2, #15
 8003ff4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ff6:	187b      	adds	r3, r7, r1
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f001 fa8b 	bl	8005514 <HAL_RCC_OscConfig>
 8003ffe:	0003      	movs	r3, r0
 8004000:	1e5a      	subs	r2, r3, #1
 8004002:	4193      	sbcs	r3, r2
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 800400a:	f000 faf7 	bl	80045fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	220f      	movs	r2, #15
 8004012:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	2203      	movs	r2, #3
 8004018:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	2200      	movs	r2, #0
 800401e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	2200      	movs	r2, #0
 8004024:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	2200      	movs	r2, #0
 800402a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800402c:	1d3b      	adds	r3, r7, #4
 800402e:	2101      	movs	r1, #1
 8004030:	0018      	movs	r0, r3
 8004032:	f001 fcf9 	bl	8005a28 <HAL_RCC_ClockConfig>
 8004036:	0003      	movs	r3, r0
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	4193      	sbcs	r3, r2
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8004042:	f000 fadb 	bl	80045fc <Error_Handler>
  }
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	46bd      	mov	sp, r7
 800404a:	b015      	add	sp, #84	; 0x54
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	40007000 	.word	0x40007000
 8004054:	ffffe7ff 	.word	0xffffe7ff

08004058 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <_ZL12MX_I2S2_Initv+0x50>)
 800405e:	4a13      	ldr	r2, [pc, #76]	; (80040ac <_ZL12MX_I2S2_Initv+0x54>)
 8004060:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <_ZL12MX_I2S2_Initv+0x50>)
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	0092      	lsls	r2, r2, #2
 8004068:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <_ZL12MX_I2S2_Initv+0x50>)
 800406c:	2200      	movs	r2, #0
 800406e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <_ZL12MX_I2S2_Initv+0x50>)
 8004072:	2200      	movs	r2, #0
 8004074:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <_ZL12MX_I2S2_Initv+0x50>)
 8004078:	2200      	movs	r2, #0
 800407a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <_ZL12MX_I2S2_Initv+0x50>)
 800407e:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <_ZL12MX_I2S2_Initv+0x58>)
 8004080:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <_ZL12MX_I2S2_Initv+0x50>)
 8004084:	2208      	movs	r2, #8
 8004086:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8004088:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <_ZL12MX_I2S2_Initv+0x50>)
 800408a:	0018      	movs	r0, r3
 800408c:	f001 f8f6 	bl	800527c <HAL_I2S_Init>
 8004090:	0003      	movs	r3, r0
 8004092:	1e5a      	subs	r2, r3, #1
 8004094:	4193      	sbcs	r3, r2
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <_ZL12MX_I2S2_Initv+0x48>
  {
    Error_Handler();
 800409c:	f000 faae 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	2000017c 	.word	0x2000017c
 80040ac:	40003800 	.word	0x40003800
 80040b0:	0000ac44 	.word	0x0000ac44

080040b4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040ba:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <_ZL12MX_SPI1_Initv+0x74>)
 80040bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80040be:	4b19      	ldr	r3, [pc, #100]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040c0:	2282      	movs	r2, #130	; 0x82
 80040c2:	0052      	lsls	r2, r2, #1
 80040c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80040c6:	4b17      	ldr	r3, [pc, #92]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80040cc:	4b15      	ldr	r3, [pc, #84]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040d2:	4b14      	ldr	r3, [pc, #80]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040d8:	4b12      	ldr	r3, [pc, #72]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040da:	2200      	movs	r2, #0
 80040dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80040de:	4b11      	ldr	r3, [pc, #68]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040e0:	2280      	movs	r2, #128	; 0x80
 80040e2:	0092      	lsls	r2, r2, #2
 80040e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80040e6:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040e8:	2208      	movs	r2, #8
 80040ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80040fe:	4b09      	ldr	r3, [pc, #36]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 8004100:	2207      	movs	r2, #7
 8004102:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <_ZL12MX_SPI1_Initv+0x70>)
 8004106:	0018      	movs	r0, r3
 8004108:	f001 fe6e 	bl	8005de8 <HAL_SPI_Init>
 800410c:	0003      	movs	r3, r0
 800410e:	1e5a      	subs	r2, r3, #1
 8004110:	4193      	sbcs	r3, r2
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <_ZL12MX_SPI1_Initv+0x68>
  {
    Error_Handler();
 8004118:	f000 fa70 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	20000200 	.word	0x20000200
 8004128:	40013000 	.word	0x40013000

0800412c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	; 0x28
 8004130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004132:	2318      	movs	r3, #24
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	0018      	movs	r0, r3
 8004138:	2310      	movs	r3, #16
 800413a:	001a      	movs	r2, r3
 800413c:	2100      	movs	r1, #0
 800413e:	f003 feb6 	bl	8007eae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004142:	2310      	movs	r3, #16
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	0018      	movs	r0, r3
 8004148:	2308      	movs	r3, #8
 800414a:	001a      	movs	r2, r3
 800414c:	2100      	movs	r1, #0
 800414e:	f003 feae 	bl	8007eae <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004152:	003b      	movs	r3, r7
 8004154:	0018      	movs	r0, r3
 8004156:	2310      	movs	r3, #16
 8004158:	001a      	movs	r2, r3
 800415a:	2100      	movs	r1, #0
 800415c:	f003 fea7 	bl	8007eae <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004160:	4b48      	ldr	r3, [pc, #288]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 8004162:	2280      	movs	r2, #128	; 0x80
 8004164:	05d2      	lsls	r2, r2, #23
 8004166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004168:	4b46      	ldr	r3, [pc, #280]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 800416a:	2200      	movs	r2, #0
 800416c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800416e:	4b45      	ldr	r3, [pc, #276]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 8004170:	2200      	movs	r2, #0
 8004172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 35;
 8004174:	4b43      	ldr	r3, [pc, #268]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 8004176:	2223      	movs	r2, #35	; 0x23
 8004178:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800417a:	4b42      	ldr	r3, [pc, #264]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 800417c:	2200      	movs	r2, #0
 800417e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004180:	4b40      	ldr	r3, [pc, #256]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 8004182:	2200      	movs	r2, #0
 8004184:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 8004188:	0018      	movs	r0, r3
 800418a:	f002 f980 	bl	800648e <HAL_TIM_Base_Init>
 800418e:	0003      	movs	r3, r0
 8004190:	1e5a      	subs	r2, r3, #1
 8004192:	4193      	sbcs	r3, r2
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 800419a:	f000 fa2f 	bl	80045fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800419e:	2118      	movs	r1, #24
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	0152      	lsls	r2, r2, #5
 80041a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041a8:	187a      	adds	r2, r7, r1
 80041aa:	4b36      	ldr	r3, [pc, #216]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 80041ac:	0011      	movs	r1, r2
 80041ae:	0018      	movs	r0, r3
 80041b0:	f002 fb30 	bl	8006814 <HAL_TIM_ConfigClockSource>
 80041b4:	0003      	movs	r3, r0
 80041b6:	1e5a      	subs	r2, r3, #1
 80041b8:	4193      	sbcs	r3, r2
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80041c0:	f000 fa1c 	bl	80045fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80041c4:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 80041c6:	0018      	movs	r0, r3
 80041c8:	f002 fa6b 	bl	80066a2 <HAL_TIM_PWM_Init>
 80041cc:	0003      	movs	r3, r0
 80041ce:	1e5a      	subs	r2, r3, #1
 80041d0:	4193      	sbcs	r3, r2
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 80041d8:	f000 fa10 	bl	80045fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041dc:	2110      	movs	r1, #16
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e4:	187b      	adds	r3, r7, r1
 80041e6:	2200      	movs	r2, #0
 80041e8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041ea:	187a      	adds	r2, r7, r1
 80041ec:	4b25      	ldr	r3, [pc, #148]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 80041ee:	0011      	movs	r1, r2
 80041f0:	0018      	movs	r0, r3
 80041f2:	f002 fc3b 	bl	8006a6c <HAL_TIMEx_MasterConfigSynchronization>
 80041f6:	0003      	movs	r3, r0
 80041f8:	1e5a      	subs	r2, r3, #1
 80041fa:	4193      	sbcs	r3, r2
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8004202:	f000 f9fb 	bl	80045fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004206:	003b      	movs	r3, r7
 8004208:	2260      	movs	r2, #96	; 0x60
 800420a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800420c:	003b      	movs	r3, r7
 800420e:	2200      	movs	r2, #0
 8004210:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004212:	003b      	movs	r3, r7
 8004214:	2200      	movs	r2, #0
 8004216:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004218:	003b      	movs	r3, r7
 800421a:	2204      	movs	r2, #4
 800421c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800421e:	0039      	movs	r1, r7
 8004220:	4b18      	ldr	r3, [pc, #96]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 8004222:	2200      	movs	r2, #0
 8004224:	0018      	movs	r0, r3
 8004226:	f002 fa65 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 800422a:	0003      	movs	r3, r0
 800422c:	1e5a      	subs	r2, r3, #1
 800422e:	4193      	sbcs	r3, r2
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8004236:	f000 f9e1 	bl	80045fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800423a:	0039      	movs	r1, r7
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 800423e:	2208      	movs	r2, #8
 8004240:	0018      	movs	r0, r3
 8004242:	f002 fa57 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 8004246:	0003      	movs	r3, r0
 8004248:	1e5a      	subs	r2, r3, #1
 800424a:	4193      	sbcs	r3, r2
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8004252:	f000 f9d3 	bl	80045fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004256:	0039      	movs	r1, r7
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 800425a:	220c      	movs	r2, #12
 800425c:	0018      	movs	r0, r3
 800425e:	f002 fa49 	bl	80066f4 <HAL_TIM_PWM_ConfigChannel>
 8004262:	0003      	movs	r3, r0
 8004264:	1e5a      	subs	r2, r3, #1
 8004266:	4193      	sbcs	r3, r2
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <_ZL12MX_TIM2_Initv+0x146>
  {
    Error_Handler();
 800426e:	f000 f9c5 	bl	80045fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <_ZL12MX_TIM2_Initv+0x158>)
 8004274:	0018      	movs	r0, r3
 8004276:	f000 fcd3 	bl	8004c20 <HAL_TIM_MspPostInit>

}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	b00a      	add	sp, #40	; 0x28
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	200002e8 	.word	0x200002e8

08004288 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800428e:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <_ZL11MX_DMA_Initv+0x58>)
 8004290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <_ZL11MX_DMA_Initv+0x58>)
 8004294:	2101      	movs	r1, #1
 8004296:	430a      	orrs	r2, r1
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
 800429a:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <_ZL11MX_DMA_Initv+0x58>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	2201      	movs	r2, #1
 80042a0:	4013      	ands	r3, r2
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80042a6:	2200      	movs	r2, #0
 80042a8:	2100      	movs	r1, #0
 80042aa:	2009      	movs	r0, #9
 80042ac:	f000 fdf0 	bl	8004e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80042b0:	2009      	movs	r0, #9
 80042b2:	f000 fe17 	bl	8004ee4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80042b6:	2200      	movs	r2, #0
 80042b8:	2100      	movs	r1, #0
 80042ba:	200a      	movs	r0, #10
 80042bc:	f000 fde8 	bl	8004e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80042c0:	200a      	movs	r0, #10
 80042c2:	f000 fe0f 	bl	8004ee4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2100      	movs	r1, #0
 80042ca:	200b      	movs	r0, #11
 80042cc:	f000 fde0 	bl	8004e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80042d0:	200b      	movs	r0, #11
 80042d2:	f000 fe07 	bl	8004ee4 <HAL_NVIC_EnableIRQ>

}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	46bd      	mov	sp, r7
 80042da:	b002      	add	sp, #8
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	40021000 	.word	0x40021000

080042e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b08d      	sub	sp, #52	; 0x34
 80042e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ea:	241c      	movs	r4, #28
 80042ec:	193b      	adds	r3, r7, r4
 80042ee:	0018      	movs	r0, r3
 80042f0:	2314      	movs	r3, #20
 80042f2:	001a      	movs	r2, r3
 80042f4:	2100      	movs	r1, #0
 80042f6:	f003 fdda 	bl	8007eae <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042fa:	4ba7      	ldr	r3, [pc, #668]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	4ba6      	ldr	r3, [pc, #664]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004300:	2110      	movs	r1, #16
 8004302:	430a      	orrs	r2, r1
 8004304:	62da      	str	r2, [r3, #44]	; 0x2c
 8004306:	4ba4      	ldr	r3, [pc, #656]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430a:	2210      	movs	r2, #16
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004312:	4ba1      	ldr	r3, [pc, #644]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004316:	4ba0      	ldr	r3, [pc, #640]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004318:	2104      	movs	r1, #4
 800431a:	430a      	orrs	r2, r1
 800431c:	62da      	str	r2, [r3, #44]	; 0x2c
 800431e:	4b9e      	ldr	r3, [pc, #632]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	2204      	movs	r2, #4
 8004324:	4013      	ands	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800432a:	4b9b      	ldr	r3, [pc, #620]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 800432c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432e:	4b9a      	ldr	r3, [pc, #616]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004330:	2180      	movs	r1, #128	; 0x80
 8004332:	430a      	orrs	r2, r1
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
 8004336:	4b98      	ldr	r3, [pc, #608]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004342:	4b95      	ldr	r3, [pc, #596]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	4b94      	ldr	r3, [pc, #592]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004348:	2101      	movs	r1, #1
 800434a:	430a      	orrs	r2, r1
 800434c:	62da      	str	r2, [r3, #44]	; 0x2c
 800434e:	4b92      	ldr	r3, [pc, #584]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	2201      	movs	r2, #1
 8004354:	4013      	ands	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800435a:	4b8f      	ldr	r3, [pc, #572]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 800435c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435e:	4b8e      	ldr	r3, [pc, #568]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004360:	2102      	movs	r1, #2
 8004362:	430a      	orrs	r2, r1
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
 8004366:	4b8c      	ldr	r3, [pc, #560]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	2202      	movs	r2, #2
 800436c:	4013      	ands	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004372:	4b89      	ldr	r3, [pc, #548]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004376:	4b88      	ldr	r3, [pc, #544]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004378:	2108      	movs	r1, #8
 800437a:	430a      	orrs	r2, r1
 800437c:	62da      	str	r2, [r3, #44]	; 0x2c
 800437e:	4b86      	ldr	r3, [pc, #536]	; (8004598 <_ZL12MX_GPIO_Initv+0x2b4>)
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	2208      	movs	r2, #8
 8004384:	4013      	ands	r3, r2
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin, GPIO_PIN_RESET);
 800438a:	4b84      	ldr	r3, [pc, #528]	; (800459c <_ZL12MX_GPIO_Initv+0x2b8>)
 800438c:	2200      	movs	r2, #0
 800438e:	2120      	movs	r1, #32
 8004390:	0018      	movs	r0, r3
 8004392:	f000 ff6d 	bl	8005270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin, GPIO_PIN_RESET);
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	01db      	lsls	r3, r3, #7
 800439a:	4881      	ldr	r0, [pc, #516]	; (80045a0 <_ZL12MX_GPIO_Initv+0x2bc>)
 800439c:	2200      	movs	r2, #0
 800439e:	0019      	movs	r1, r3
 80043a0:	f000 ff66 	bl	8005270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	487e      	ldr	r0, [pc, #504]	; (80045a4 <_ZL12MX_GPIO_Initv+0x2c0>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	0019      	movs	r1, r3
 80043ae:	f000 ff5f 	bl	8005270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AUDIO_SD_N_L_Pin|AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
 80043b2:	23c0      	movs	r3, #192	; 0xc0
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	487c      	ldr	r0, [pc, #496]	; (80045a8 <_ZL12MX_GPIO_Initv+0x2c4>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	0019      	movs	r1, r3
 80043bc:	f000 ff58 	bl	8005270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI1_CS_N_GPIO_Port, SD_SPI1_CS_N_Pin, GPIO_PIN_RESET);
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	0219      	lsls	r1, r3, #8
 80043c4:	23a0      	movs	r3, #160	; 0xa0
 80043c6:	05db      	lsls	r3, r3, #23
 80043c8:	2200      	movs	r2, #0
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 ff50 	bl	8005270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_L_Pin SD_DET_A_Pin SD_DET_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_L_Pin|SD_DET_A_Pin|SD_DET_B_Pin;
 80043d0:	193b      	adds	r3, r7, r4
 80043d2:	22c8      	movs	r2, #200	; 0xc8
 80043d4:	0052      	lsls	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043d8:	193b      	adds	r3, r7, r4
 80043da:	2200      	movs	r2, #0
 80043dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	193b      	adds	r3, r7, r4
 80043e0:	2200      	movs	r2, #0
 80043e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043e4:	193b      	adds	r3, r7, r4
 80043e6:	4a6d      	ldr	r2, [pc, #436]	; (800459c <_ZL12MX_GPIO_Initv+0x2b8>)
 80043e8:	0019      	movs	r1, r3
 80043ea:	0010      	movs	r0, r2
 80043ec:	f000 fe70 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_L_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_L_Pin;
 80043f0:	193b      	adds	r3, r7, r4
 80043f2:	2220      	movs	r2, #32
 80043f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043f6:	193b      	adds	r3, r7, r4
 80043f8:	2201      	movs	r2, #1
 80043fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fc:	193b      	adds	r3, r7, r4
 80043fe:	2200      	movs	r2, #0
 8004400:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004402:	193b      	adds	r3, r7, r4
 8004404:	2200      	movs	r2, #0
 8004406:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_L_GPIO_Port, &GPIO_InitStruct);
 8004408:	193b      	adds	r3, r7, r4
 800440a:	4a64      	ldr	r2, [pc, #400]	; (800459c <_ZL12MX_GPIO_Initv+0x2b8>)
 800440c:	0019      	movs	r1, r3
 800440e:	0010      	movs	r0, r2
 8004410:	f000 fe5e 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_R_Pin TOUCH_STAR_0_Pin TOUCH_STAR_1_Pin TOUCH_STAR_2_Pin
                           TOUCH_STAR_15_Pin TOUCH_STAR_16_Pin TOUCH_STAR_17_Pin */
  GPIO_InitStruct.Pin = BUTTON_R_Pin|TOUCH_STAR_0_Pin|TOUCH_STAR_1_Pin|TOUCH_STAR_2_Pin
 8004414:	193b      	adds	r3, r7, r4
 8004416:	4a65      	ldr	r2, [pc, #404]	; (80045ac <_ZL12MX_GPIO_Initv+0x2c8>)
 8004418:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_15_Pin|TOUCH_STAR_16_Pin|TOUCH_STAR_17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800441a:	193b      	adds	r3, r7, r4
 800441c:	2200      	movs	r2, #0
 800441e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004420:	193b      	adds	r3, r7, r4
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004426:	193b      	adds	r3, r7, r4
 8004428:	4a5d      	ldr	r2, [pc, #372]	; (80045a0 <_ZL12MX_GPIO_Initv+0x2bc>)
 800442a:	0019      	movs	r1, r3
 800442c:	0010      	movs	r0, r2
 800442e:	f000 fe4f 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_R_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_R_Pin;
 8004432:	0021      	movs	r1, r4
 8004434:	187b      	adds	r3, r7, r1
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	01d2      	lsls	r2, r2, #7
 800443a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800443c:	000c      	movs	r4, r1
 800443e:	193b      	adds	r3, r7, r4
 8004440:	2201      	movs	r2, #1
 8004442:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	193b      	adds	r3, r7, r4
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444a:	193b      	adds	r3, r7, r4
 800444c:	2200      	movs	r2, #0
 800444e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_R_GPIO_Port, &GPIO_InitStruct);
 8004450:	193b      	adds	r3, r7, r4
 8004452:	4a53      	ldr	r2, [pc, #332]	; (80045a0 <_ZL12MX_GPIO_Initv+0x2bc>)
 8004454:	0019      	movs	r1, r3
 8004456:	0010      	movs	r0, r2
 8004458:	f000 fe3a 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 800445c:	0021      	movs	r1, r4
 800445e:	187b      	adds	r3, r7, r1
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	00d2      	lsls	r2, r2, #3
 8004464:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004466:	000c      	movs	r4, r1
 8004468:	193b      	adds	r3, r7, r4
 800446a:	2201      	movs	r2, #1
 800446c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	193b      	adds	r3, r7, r4
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004474:	193b      	adds	r3, r7, r4
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800447a:	193b      	adds	r3, r7, r4
 800447c:	4a49      	ldr	r2, [pc, #292]	; (80045a4 <_ZL12MX_GPIO_Initv+0x2c0>)
 800447e:	0019      	movs	r1, r3
 8004480:	0010      	movs	r0, r2
 8004482:	f000 fe25 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_G7_1_SAMP_Pin */
  GPIO_InitStruct.Pin = TOUCH_G7_1_SAMP_Pin;
 8004486:	193b      	adds	r3, r7, r4
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448c:	193b      	adds	r3, r7, r4
 800448e:	2202      	movs	r2, #2
 8004490:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	193b      	adds	r3, r7, r4
 8004494:	2200      	movs	r2, #0
 8004496:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004498:	193b      	adds	r3, r7, r4
 800449a:	2200      	movs	r2, #0
 800449c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800449e:	193b      	adds	r3, r7, r4
 80044a0:	2203      	movs	r2, #3
 80044a2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(TOUCH_G7_1_SAMP_GPIO_Port, &GPIO_InitStruct);
 80044a4:	193b      	adds	r3, r7, r4
 80044a6:	4a3e      	ldr	r2, [pc, #248]	; (80045a0 <_ZL12MX_GPIO_Initv+0x2bc>)
 80044a8:	0019      	movs	r1, r3
 80044aa:	0010      	movs	r0, r2
 80044ac:	f000 fe10 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_STAR_3_Pin TOUCH_STAR_4_Pin TOUCH_STAR_5_Pin TOUCH_STAR_6_Pin
                           TOUCH_STAR_7_Pin TOUCH_STAR_8_Pin TOUCH_STAR_18_Pin TOUCH_STAR_19_Pin
                           TOUCH_STAR_20_Pin */
  GPIO_InitStruct.Pin = TOUCH_STAR_3_Pin|TOUCH_STAR_4_Pin|TOUCH_STAR_5_Pin|TOUCH_STAR_6_Pin
 80044b0:	193b      	adds	r3, r7, r4
 80044b2:	4a3f      	ldr	r2, [pc, #252]	; (80045b0 <_ZL12MX_GPIO_Initv+0x2cc>)
 80044b4:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_7_Pin|TOUCH_STAR_8_Pin|TOUCH_STAR_18_Pin|TOUCH_STAR_19_Pin
                          |TOUCH_STAR_20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044b6:	193b      	adds	r3, r7, r4
 80044b8:	2200      	movs	r2, #0
 80044ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044bc:	193b      	adds	r3, r7, r4
 80044be:	2200      	movs	r2, #0
 80044c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c2:	193a      	adds	r2, r7, r4
 80044c4:	23a0      	movs	r3, #160	; 0xa0
 80044c6:	05db      	lsls	r3, r3, #23
 80044c8:	0011      	movs	r1, r2
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 fe00 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_STAR_9_Pin TOUCH_STAR_10_Pin TOUCH_STAR_11_Pin TOUCH_STAR_12_Pin
                           TOUCH_STAR_13_Pin TOUCH_STAR_14_Pin TOUCH_STAR_21_Pin TOUCH_STAR_22_Pin
                           TOUCH_STAR_23_Pin */
  GPIO_InitStruct.Pin = TOUCH_STAR_9_Pin|TOUCH_STAR_10_Pin|TOUCH_STAR_11_Pin|TOUCH_STAR_12_Pin
 80044d0:	193b      	adds	r3, r7, r4
 80044d2:	4a38      	ldr	r2, [pc, #224]	; (80045b4 <_ZL12MX_GPIO_Initv+0x2d0>)
 80044d4:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_13_Pin|TOUCH_STAR_14_Pin|TOUCH_STAR_21_Pin|TOUCH_STAR_22_Pin
                          |TOUCH_STAR_23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044d6:	193b      	adds	r3, r7, r4
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	193b      	adds	r3, r7, r4
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044e2:	193b      	adds	r3, r7, r4
 80044e4:	4a34      	ldr	r2, [pc, #208]	; (80045b8 <_ZL12MX_GPIO_Initv+0x2d4>)
 80044e6:	0019      	movs	r1, r3
 80044e8:	0010      	movs	r0, r2
 80044ea:	f000 fdf1 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_L_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_L_Pin;
 80044ee:	0021      	movs	r1, r4
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	00d2      	lsls	r2, r2, #3
 80044f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f8:	000c      	movs	r4, r1
 80044fa:	193b      	adds	r3, r7, r4
 80044fc:	2201      	movs	r2, #1
 80044fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	193b      	adds	r3, r7, r4
 8004502:	2200      	movs	r2, #0
 8004504:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004506:	193b      	adds	r3, r7, r4
 8004508:	2200      	movs	r2, #0
 800450a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_L_GPIO_Port, &GPIO_InitStruct);
 800450c:	193b      	adds	r3, r7, r4
 800450e:	4a26      	ldr	r2, [pc, #152]	; (80045a8 <_ZL12MX_GPIO_Initv+0x2c4>)
 8004510:	0019      	movs	r1, r3
 8004512:	0010      	movs	r0, r2
 8004514:	f000 fddc 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_R_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_R_Pin;
 8004518:	0021      	movs	r1, r4
 800451a:	187b      	adds	r3, r7, r1
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	0112      	lsls	r2, r2, #4
 8004520:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004522:	000c      	movs	r4, r1
 8004524:	193b      	adds	r3, r7, r4
 8004526:	2201      	movs	r2, #1
 8004528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	193b      	adds	r3, r7, r4
 800452c:	2200      	movs	r2, #0
 800452e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004530:	193b      	adds	r3, r7, r4
 8004532:	2200      	movs	r2, #0
 8004534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_R_GPIO_Port, &GPIO_InitStruct);
 8004536:	193b      	adds	r3, r7, r4
 8004538:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <_ZL12MX_GPIO_Initv+0x2c4>)
 800453a:	0019      	movs	r1, r3
 800453c:	0010      	movs	r0, r2
 800453e:	f000 fdc7 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 8004542:	0021      	movs	r1, r4
 8004544:	187b      	adds	r3, r7, r1
 8004546:	2280      	movs	r2, #128	; 0x80
 8004548:	0212      	lsls	r2, r2, #8
 800454a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800454c:	000c      	movs	r4, r1
 800454e:	193b      	adds	r3, r7, r4
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	193b      	adds	r3, r7, r4
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 800455a:	193b      	adds	r3, r7, r4
 800455c:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <_ZL12MX_GPIO_Initv+0x2c4>)
 800455e:	0019      	movs	r1, r3
 8004560:	0010      	movs	r0, r2
 8004562:	f000 fdb5 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI1_CS_N_Pin */
  GPIO_InitStruct.Pin = SD_SPI1_CS_N_Pin;
 8004566:	0021      	movs	r1, r4
 8004568:	187b      	adds	r3, r7, r1
 800456a:	2280      	movs	r2, #128	; 0x80
 800456c:	0212      	lsls	r2, r2, #8
 800456e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004570:	187b      	adds	r3, r7, r1
 8004572:	2201      	movs	r2, #1
 8004574:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004576:	187b      	adds	r3, r7, r1
 8004578:	2200      	movs	r2, #0
 800457a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457c:	187b      	adds	r3, r7, r1
 800457e:	2200      	movs	r2, #0
 8004580:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_SPI1_CS_N_GPIO_Port, &GPIO_InitStruct);
 8004582:	187a      	adds	r2, r7, r1
 8004584:	23a0      	movs	r3, #160	; 0xa0
 8004586:	05db      	lsls	r3, r3, #23
 8004588:	0011      	movs	r1, r2
 800458a:	0018      	movs	r0, r3
 800458c:	f000 fda0 	bl	80050d0 <HAL_GPIO_Init>

}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b00d      	add	sp, #52	; 0x34
 8004596:	bd90      	pop	{r4, r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	50001000 	.word	0x50001000
 80045a0:	50000800 	.word	0x50000800
 80045a4:	50001c00 	.word	0x50001c00
 80045a8:	50000c00 	.word	0x50000c00
 80045ac:	0000238e 	.word	0x0000238e
 80045b0:	00001cee 	.word	0x00001cee
 80045b4:	000070d7 	.word	0x000070d7
 80045b8:	50000400 	.word	0x50000400

080045bc <_ZL11MX_RNG_Initv>:

/* RNG init function */
static void MX_RNG_Init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  hrng.Instance = RNG;
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <_ZL11MX_RNG_Initv+0x28>)
 80045c2:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <_ZL11MX_RNG_Initv+0x2c>)
 80045c4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80045c6:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <_ZL11MX_RNG_Initv+0x28>)
 80045c8:	0018      	movs	r0, r3
 80045ca:	f001 fafb 	bl	8005bc4 <HAL_RNG_Init>
 80045ce:	0003      	movs	r3, r0
 80045d0:	1e5a      	subs	r2, r3, #1
 80045d2:	4193      	sbcs	r3, r2
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <_ZL11MX_RNG_Initv+0x22>
  {
    Error_Handler();
 80045da:	f000 f80f 	bl	80045fc <Error_Handler>
  }
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20000400 	.word	0x20000400
 80045e8:	40025000 	.word	0x40025000

080045ec <HAL_I2S_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef* hi2s) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  return;
 80045f4:	46c0      	nop			; (mov r8, r8)
}
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b002      	add	sp, #8
 80045fa:	bd80      	pop	{r7, pc}

080045fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004600:	b672      	cpsid	i
}
 8004602:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004604:	e7fe      	b.n	8004604 <Error_Handler+0x8>

08004606 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEaSEOS2_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8004606:	b590      	push	{r4, r7, lr}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8004610:	230f      	movs	r3, #15
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	2201      	movs	r2, #1
 8004616:	701a      	strb	r2, [r3, #0]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	0018      	movs	r0, r3
 800461c:	f000 f80b 	bl	8004636 <_ZSt4moveIRSt6vectorI15TouchEvent_enumSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8004620:	0001      	movs	r1, r0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	1c22      	adds	r2, r4, #0
 8004626:	0018      	movs	r0, r3
 8004628:	f000 f80e 	bl	8004648 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>
	return *this;
 800462c:	687b      	ldr	r3, [r7, #4]
      }
 800462e:	0018      	movs	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	b005      	add	sp, #20
 8004634:	bd90      	pop	{r4, r7, pc}

08004636 <_ZSt4moveIRSt6vectorI15TouchEvent_enumSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	0018      	movs	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	b002      	add	sp, #8
 8004646:	bd80      	pop	{r7, pc}

08004648 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8004648:	b5b0      	push	{r4, r5, r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	1d3b      	adds	r3, r7, #4
 8004654:	701a      	strb	r2, [r3, #0]
      {
	vector __tmp(get_allocator());
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	241c      	movs	r4, #28
 800465a:	193b      	adds	r3, r7, r4
 800465c:	0011      	movs	r1, r2
 800465e:	0018      	movs	r0, r3
 8004660:	f000 f82c 	bl	80046bc <_ZNKSt12_Vector_baseI15TouchEvent_enumSaIS0_EE13get_allocatorEv>
 8004664:	193a      	adds	r2, r7, r4
 8004666:	2510      	movs	r5, #16
 8004668:	197b      	adds	r3, r7, r5
 800466a:	0011      	movs	r1, r2
 800466c:	0018      	movs	r0, r3
 800466e:	f000 f838 	bl	80046e2 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEC1ERKS1_>
 8004672:	193b      	adds	r3, r7, r4
 8004674:	0018      	movs	r0, r3
 8004676:	f7fd f93e 	bl	80018f6 <_ZNSaI15TouchEvent_enumED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	0011      	movs	r1, r2
 8004680:	0018      	movs	r0, r3
 8004682:	f000 f83e 	bl	8004702 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	197b      	adds	r3, r7, r5
 800468a:	0011      	movs	r1, r2
 800468c:	0018      	movs	r0, r3
 800468e:	f000 f838 	bl	8004702 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	0018      	movs	r0, r3
 8004696:	f7fd fc98 	bl	8001fca <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 800469a:	0004      	movs	r4, r0
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	0018      	movs	r0, r3
 80046a0:	f7fd fc93 	bl	8001fca <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 80046a4:	0003      	movs	r3, r0
 80046a6:	0019      	movs	r1, r3
 80046a8:	0020      	movs	r0, r4
 80046aa:	f000 f84a 	bl	8004742 <_ZSt15__alloc_on_moveISaI15TouchEvent_enumEEvRT_S3_>
      }
 80046ae:	197b      	adds	r3, r7, r5
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fd f94b 	bl	800194c <_ZNSt6vectorI15TouchEvent_enumSaIS0_EED1Ev>
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b008      	add	sp, #32
 80046ba:	bdb0      	pop	{r4, r5, r7, pc}

080046bc <_ZNKSt12_Vector_baseI15TouchEvent_enumSaIS0_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fd fcb3 	bl	8002034 <_ZNKSt12_Vector_baseI15TouchEvent_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 80046ce:	0002      	movs	r2, r0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	0011      	movs	r1, r2
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7fd fec9 	bl	800246c <_ZNSaI15TouchEvent_enumEC1ERKS0_>
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	46bd      	mov	sp, r7
 80046de:	b002      	add	sp, #8
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEC1ERKS1_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	0011      	movs	r1, r2
 80046f2:	0018      	movs	r0, r3
 80046f4:	f000 f833 	bl	800475e <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EEC1ERKS1_>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}

08004702 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8004702:	b590      	push	{r4, r7, lr}
 8004704:	b087      	sub	sp, #28
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 800470c:	240c      	movs	r4, #12
 800470e:	193b      	adds	r3, r7, r4
 8004710:	0018      	movs	r0, r3
 8004712:	f7fe f8ff 	bl	8002914 <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	193b      	adds	r3, r7, r4
 800471a:	0011      	movs	r1, r2
 800471c:	0018      	movs	r0, r3
 800471e:	f000 f82e 	bl	800477e <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	  _M_copy_data(__x);
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	0011      	movs	r1, r2
 8004728:	0018      	movs	r0, r3
 800472a:	f000 f828 	bl	800477e <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	  __x._M_copy_data(__tmp);
 800472e:	193a      	adds	r2, r7, r4
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	0011      	movs	r1, r2
 8004734:	0018      	movs	r0, r3
 8004736:	f000 f822 	bl	800477e <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	46bd      	mov	sp, r7
 800473e:	b007      	add	sp, #28
 8004740:	bd90      	pop	{r4, r7, pc}

08004742 <_ZSt15__alloc_on_moveISaI15TouchEvent_enumEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 f829 	bl	80047a8 <_ZSt18__do_alloc_on_moveISaI15TouchEvent_enumEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	b002      	add	sp, #8
 800475c:	bd80      	pop	{r7, pc}

0800475e <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	0011      	movs	r1, r2
 800476e:	0018      	movs	r0, r3
 8004770:	f7fd fe8c 	bl	800248c <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE12_Vector_implC1ERKS1_>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b002      	add	sp, #8
 800477c:	bd80      	pop	{r7, pc}

0800477e <_ZNSt12_Vector_baseI15TouchEvent_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	609a      	str	r2, [r3, #8]
	}
 80047a0:	46c0      	nop			; (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b002      	add	sp, #8
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <_ZSt18__do_alloc_on_moveISaI15TouchEvent_enumEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	701a      	strb	r2, [r3, #0]
    { __one = std::move(__two); }
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f000 f804 	bl	80047c6 <_ZSt4moveIRSaI15TouchEvent_enumEEONSt16remove_referenceIT_E4typeEOS4_>
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b004      	add	sp, #16
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <_ZSt4moveIRSaI15TouchEvent_enumEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b082      	sub	sp, #8
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80047d8:	b5b0      	push	{r4, r5, r7, lr}
 80047da:	b08c      	sub	sp, #48	; 0x30
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d165      	bne.n	80048b4 <_Z41__static_initialization_and_destruction_0ii+0xdc>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4a48      	ldr	r2, [pc, #288]	; (800490c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d161      	bne.n	80048b4 <_Z41__static_initialization_and_destruction_0ii+0xdc>
TouchBoardGroup touchGroup0 = TouchBoardGroup(NUM_BOARDS, htim2, TIM_CHANNEL_1, hdma_tim2_ch1);
 80047f0:	4a47      	ldr	r2, [pc, #284]	; (8004910 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80047f2:	4848      	ldr	r0, [pc, #288]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80047f4:	4b48      	ldr	r3, [pc, #288]	; (8004918 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2300      	movs	r3, #0
 80047fa:	2118      	movs	r1, #24
 80047fc:	f7fc fbac 	bl	8000f58 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
std::vector<TouchState_enum> touchStates(NUM_BOARDS);
 8004800:	2408      	movs	r4, #8
 8004802:	193b      	adds	r3, r7, r4
 8004804:	0018      	movs	r0, r3
 8004806:	f7fd f816 	bl	8001836 <_ZNSaI15TouchState_enumEC1Ev>
 800480a:	193a      	adds	r2, r7, r4
 800480c:	4b43      	ldr	r3, [pc, #268]	; (800491c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800480e:	2118      	movs	r1, #24
 8004810:	0018      	movs	r0, r3
 8004812:	f7fd f82a 	bl	800186a <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>
 8004816:	193b      	adds	r3, r7, r4
 8004818:	0018      	movs	r0, r3
 800481a:	f7fd f819 	bl	8001850 <_ZNSaI15TouchState_enumED1Ev>
std::vector<TouchEvent_enum> touchEvents(NUM_BOARDS);
 800481e:	240c      	movs	r4, #12
 8004820:	193b      	adds	r3, r7, r4
 8004822:	0018      	movs	r0, r3
 8004824:	f7fd f85a 	bl	80018dc <_ZNSaI15TouchEvent_enumEC1Ev>
 8004828:	193a      	adds	r2, r7, r4
 800482a:	4b3d      	ldr	r3, [pc, #244]	; (8004920 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800482c:	2118      	movs	r1, #24
 800482e:	0018      	movs	r0, r3
 8004830:	f7fd f86e 	bl	8001910 <_ZNSt6vectorI15TouchEvent_enumSaIS0_EEC1EjRKS1_>
 8004834:	193b      	adds	r3, r7, r4
 8004836:	0018      	movs	r0, r3
 8004838:	f7fd f85d 	bl	80018f6 <_ZNSaI15TouchEvent_enumED1Ev>
WavPlayer audioPlayer = WavPlayer(hi2s2);
 800483c:	4a39      	ldr	r2, [pc, #228]	; (8004924 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800483e:	4b3a      	ldr	r3, [pc, #232]	; (8004928 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004840:	0011      	movs	r1, r2
 8004842:	0018      	movs	r0, r3
 8004844:	f7fe fd4d 	bl	80032e2 <_ZN9WavPlayerC1ER17I2S_HandleTypeDef>
RocketStream rocketStream = RocketStream(htim2, TIM_CHANNEL_3, hdma_tim2_ch3);
 8004848:	4b38      	ldr	r3, [pc, #224]	; (800492c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 800484a:	4931      	ldr	r1, [pc, #196]	; (8004910 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 800484c:	4838      	ldr	r0, [pc, #224]	; (8004930 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800484e:	2208      	movs	r2, #8
 8004850:	f7fb ffdc 	bl	800080c <_ZN12RocketStreamC1ER17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
LedButton buttonL = LedButton(BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin, BUTTON_L_GPIO_Port, BUTTON_L_Pin);
 8004854:	4a37      	ldr	r2, [pc, #220]	; (8004934 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004856:	4937      	ldr	r1, [pc, #220]	; (8004934 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004858:	4837      	ldr	r0, [pc, #220]	; (8004938 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800485a:	2310      	movs	r3, #16
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	0013      	movs	r3, r2
 8004860:	2220      	movs	r2, #32
 8004862:	f7fb fe21 	bl	80004a8 <_ZN9LedButtonC1EP12GPIO_TypeDeftS1_t>
LedButton buttonR = LedButton(BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin, BUTTON_R_GPIO_Port, BUTTON_R_Pin);
 8004866:	4c35      	ldr	r4, [pc, #212]	; (800493c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	01da      	lsls	r2, r3, #7
 800486c:	4933      	ldr	r1, [pc, #204]	; (800493c <_Z41__static_initialization_and_destruction_0ii+0x164>)
 800486e:	4834      	ldr	r0, [pc, #208]	; (8004940 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	019b      	lsls	r3, r3, #6
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	0023      	movs	r3, r4
 8004878:	f7fb fe16 	bl	80004a8 <_ZN9LedButtonC1EP12GPIO_TypeDeftS1_t>
std::vector<PixelColor_s> starColors = {
 800487c:	2518      	movs	r5, #24
 800487e:	197b      	adds	r3, r7, r5
 8004880:	4a30      	ldr	r2, [pc, #192]	; (8004944 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004882:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004884:	c313      	stmia	r3!, {r0, r1, r4}
 8004886:	2410      	movs	r4, #16
 8004888:	193b      	adds	r3, r7, r4
 800488a:	197a      	adds	r2, r7, r5
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	193b      	adds	r3, r7, r4
 8004890:	2204      	movs	r2, #4
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	2524      	movs	r5, #36	; 0x24
 8004896:	197b      	adds	r3, r7, r5
 8004898:	0018      	movs	r0, r3
 800489a:	f7fc ff22 	bl	80016e2 <_ZNSaI12PixelColor_sEC1Ev>
 800489e:	197b      	adds	r3, r7, r5
 80048a0:	193a      	adds	r2, r7, r4
 80048a2:	4829      	ldr	r0, [pc, #164]	; (8004948 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80048a4:	6811      	ldr	r1, [r2, #0]
 80048a6:	6852      	ldr	r2, [r2, #4]
 80048a8:	f7fc ff35 	bl	8001716 <_ZNSt6vectorI12PixelColor_sSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 80048ac:	197b      	adds	r3, r7, r5
 80048ae:	0018      	movs	r0, r3
 80048b0:	f7fc ff24 	bl	80016fc <_ZNSaI12PixelColor_sED1Ev>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d123      	bne.n	8004902 <_Z41__static_initialization_and_destruction_0ii+0x12a>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	4a13      	ldr	r2, [pc, #76]	; (800490c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d11f      	bne.n	8004902 <_Z41__static_initialization_and_destruction_0ii+0x12a>
 80048c2:	4b21      	ldr	r3, [pc, #132]	; (8004948 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7fc ff48 	bl	800175a <_ZNSt6vectorI12PixelColor_sSaIS0_EED1Ev>
LedButton buttonR = LedButton(BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin, BUTTON_R_GPIO_Port, BUTTON_R_Pin);
 80048ca:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80048cc:	0018      	movs	r0, r3
 80048ce:	f7fb fe16 	bl	80004fe <_ZN9LedButtonD1Ev>
LedButton buttonL = LedButton(BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin, BUTTON_L_GPIO_Port, BUTTON_L_Pin);
 80048d2:	4b19      	ldr	r3, [pc, #100]	; (8004938 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7fb fe12 	bl	80004fe <_ZN9LedButtonD1Ev>
RocketStream rocketStream = RocketStream(htim2, TIM_CHANNEL_3, hdma_tim2_ch3);
 80048da:	4b15      	ldr	r3, [pc, #84]	; (8004930 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80048dc:	0018      	movs	r0, r3
 80048de:	f7fb ffe1 	bl	80008a4 <_ZN12RocketStreamD1Ev>
WavPlayer audioPlayer = WavPlayer(hi2s2);
 80048e2:	4b11      	ldr	r3, [pc, #68]	; (8004928 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7fe fd0f 	bl	8003308 <_ZN9WavPlayerD1Ev>
std::vector<TouchEvent_enum> touchEvents(NUM_BOARDS);
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80048ec:	0018      	movs	r0, r3
 80048ee:	f7fd f82d 	bl	800194c <_ZNSt6vectorI15TouchEvent_enumSaIS0_EED1Ev>
std::vector<TouchState_enum> touchStates(NUM_BOARDS);
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7fc ffd6 	bl	80018a6 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
TouchBoardGroup touchGroup0 = TouchBoardGroup(NUM_BOARDS, htim2, TIM_CHANNEL_1, hdma_tim2_ch1);
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80048fc:	0018      	movs	r0, r3
 80048fe:	f7fc fbf3 	bl	80010e8 <_ZN15TouchBoardGroupD1Ev>
}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	46bd      	mov	sp, r7
 8004906:	b00a      	add	sp, #40	; 0x28
 8004908:	bdb0      	pop	{r4, r5, r7, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	0000ffff 	.word	0x0000ffff
 8004910:	200002e8 	.word	0x200002e8
 8004914:	20000638 	.word	0x20000638
 8004918:	20000328 	.word	0x20000328
 800491c:	20000698 	.word	0x20000698
 8004920:	200006a4 	.word	0x200006a4
 8004924:	2000017c 	.word	0x2000017c
 8004928:	200006b0 	.word	0x200006b0
 800492c:	20000370 	.word	0x20000370
 8004930:	20000ce0 	.word	0x20000ce0
 8004934:	50001000 	.word	0x50001000
 8004938:	20000d08 	.word	0x20000d08
 800493c:	50000800 	.word	0x50000800
 8004940:	20000d20 	.word	0x20000d20
 8004944:	08008280 	.word	0x08008280
 8004948:	20000d48 	.word	0x20000d48

0800494c <_GLOBAL__sub_I_hi2s2>:
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <_GLOBAL__sub_I_hi2s2+0x14>)
 8004952:	0019      	movs	r1, r3
 8004954:	2001      	movs	r0, #1
 8004956:	f7ff ff3f 	bl	80047d8 <_Z41__static_initialization_and_destruction_0ii>
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	0000ffff 	.word	0x0000ffff

08004964 <_GLOBAL__sub_D_hi2s2>:
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <_GLOBAL__sub_D_hi2s2+0x14>)
 800496a:	0019      	movs	r1, r3
 800496c:	2000      	movs	r0, #0
 800496e:	f7ff ff33 	bl	80047d8 <_Z41__static_initialization_and_destruction_0ii>
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	0000ffff 	.word	0x0000ffff

0800497c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497c:	2201      	movs	r2, #1
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_MspInit+0x18>)
 8004980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004982:	430a      	orrs	r2, r1
 8004984:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004986:	2280      	movs	r2, #128	; 0x80
 8004988:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800498a:	0552      	lsls	r2, r2, #21
 800498c:	430a      	orrs	r2, r1
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004990:	4770      	bx	lr
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	40021000 	.word	0x40021000

08004998 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800499a:	0005      	movs	r5, r0
 800499c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800499e:	2214      	movs	r2, #20
 80049a0:	2100      	movs	r1, #0
 80049a2:	a803      	add	r0, sp, #12
 80049a4:	f003 fa83 	bl	8007eae <memset>
  if(hi2s->Instance==SPI2)
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_I2S_MspInit+0xa4>)
 80049aa:	682a      	ldr	r2, [r5, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d143      	bne.n	8004a38 <HAL_I2S_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049b0:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b2:	2602      	movs	r6, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049b4:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <HAL_I2S_MspInit+0xa8>)
 80049b6:	01d2      	lsls	r2, r2, #7
 80049b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PD1     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ba:	2403      	movs	r4, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049bc:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049be:	2108      	movs	r1, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80049c4:	481f      	ldr	r0, [pc, #124]	; (8004a44 <HAL_I2S_MspInit+0xac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c6:	4332      	orrs	r2, r6
 80049c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80049ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c

    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049cc:	2700      	movs	r7, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ce:	4032      	ands	r2, r6
 80049d0:	9201      	str	r2, [sp, #4]
 80049d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d6:	430a      	orrs	r2, r1
 80049d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049dc:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049de:	400b      	ands	r3, r1
 80049e0:	9302      	str	r3, [sp, #8]
 80049e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 80049e4:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80049e6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ec:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80049ee:	f000 fb6f 	bl	80050d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80049f2:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049f4:	4814      	ldr	r0, [pc, #80]	; (8004a48 <HAL_I2S_MspInit+0xb0>)
 80049f6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
 80049f8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049fa:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80049fc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fe:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a02:	f000 fb65 	bl	80050d0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel7;
 8004a06:	4c11      	ldr	r4, [pc, #68]	; (8004a4c <HAL_I2S_MspInit+0xb4>)
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <HAL_I2S_MspInit+0xb8>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004a0a:	0020      	movs	r0, r4
    hdma_spi2_tx.Instance = DMA1_Channel7;
 8004a0c:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a0e:	2310      	movs	r3, #16
 8004a10:	60a3      	str	r3, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a12:	3370      	adds	r3, #112	; 0x70
 8004a14:	6123      	str	r3, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a16:	3380      	adds	r3, #128	; 0x80
 8004a18:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	00db      	lsls	r3, r3, #3
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 8004a1e:	6066      	str	r6, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a20:	60e7      	str	r7, [r4, #12]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a22:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004a24:	61e7      	str	r7, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a26:	6227      	str	r7, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004a28:	f000 fa82 	bl	8004f30 <HAL_DMA_Init>
 8004a2c:	42b8      	cmp	r0, r7
 8004a2e:	d001      	beq.n	8004a34 <HAL_I2S_MspInit+0x9c>
    {
      Error_Handler();
 8004a30:	f7ff fde4 	bl	80045fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8004a34:	62ec      	str	r4, [r5, #44]	; 0x2c
 8004a36:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004a38:	b009      	add	sp, #36	; 0x24
 8004a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a3c:	40003800 	.word	0x40003800
 8004a40:	40021000 	.word	0x40021000
 8004a44:	50000400 	.word	0x50000400
 8004a48:	50000c00 	.word	0x50000c00
 8004a4c:	200001b8 	.word	0x200001b8
 8004a50:	40020080 	.word	0x40020080

08004a54 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8004a54:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_RNG_MspInit+0x24>)
 8004a56:	6802      	ldr	r2, [r0, #0]
{
 8004a58:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d109      	bne.n	8004a72 <HAL_RNG_MspInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RNG_MspInit+0x28>)
 8004a62:	0349      	lsls	r1, r1, #13
 8004a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a66:	430a      	orrs	r2, r1
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
 8004a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6c:	400b      	ands	r3, r1
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004a72:	b002      	add	sp, #8
 8004a74:	4770      	bx	lr
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	40025000 	.word	0x40025000
 8004a7c:	40021000 	.word	0x40021000

08004a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a80:	b530      	push	{r4, r5, lr}
 8004a82:	0005      	movs	r5, r0
 8004a84:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a86:	2214      	movs	r2, #20
 8004a88:	2100      	movs	r1, #0
 8004a8a:	a801      	add	r0, sp, #4
 8004a8c:	f003 fa0f 	bl	8007eae <memset>
  if(hspi->Instance==SPI1)
 8004a90:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <HAL_SPI_MspInit+0xb0>)
 8004a92:	682a      	ldr	r2, [r5, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d148      	bne.n	8004b2a <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a98:	2280      	movs	r2, #128	; 0x80
 8004a9a:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <HAL_SPI_MspInit+0xb4>)
 8004a9c:	0152      	lsls	r2, r2, #5
 8004a9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004aa0:	4825      	ldr	r0, [pc, #148]	; (8004b38 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004aa2:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004aa4:	2110      	movs	r1, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004aa6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab0:	2203      	movs	r2, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ab2:	400b      	ands	r3, r1
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
 8004ab8:	23e0      	movs	r3, #224	; 0xe0
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abe:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ac0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
 8004ac6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ac8:	f000 fb02 	bl	80050d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8004acc:	4c1b      	ldr	r4, [pc, #108]	; (8004b3c <HAL_SPI_MspInit+0xbc>)
 8004ace:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <HAL_SPI_MspInit+0xc0>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ad0:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8004ad2:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ad8:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004ada:	0020      	movs	r0, r4
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004adc:	60a3      	str	r3, [r4, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ade:	60e3      	str	r3, [r4, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ae0:	6122      	str	r2, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ae2:	6163      	str	r3, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ae4:	61a3      	str	r3, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004ae6:	61e3      	str	r3, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ae8:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004aea:	f000 fa21 	bl	8004f30 <HAL_DMA_Init>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 8004af2:	f7ff fd83 	bl	80045fc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <HAL_SPI_MspInit+0xc4>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004af8:	64ec      	str	r4, [r5, #76]	; 0x4c
 8004afa:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004afc:	4c12      	ldr	r4, [pc, #72]	; (8004b48 <HAL_SPI_MspInit+0xc8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004afe:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004b00:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8004b02:	2301      	movs	r3, #1
 8004b04:	6063      	str	r3, [r4, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b06:	330f      	adds	r3, #15
 8004b08:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b0a:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004b0c:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b0e:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b10:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b12:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b14:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004b16:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b18:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004b1a:	f000 fa09 	bl	8004f30 <HAL_DMA_Init>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_SPI_MspInit+0xa6>
    {
      Error_Handler();
 8004b22:	f7ff fd6b 	bl	80045fc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004b26:	64ac      	str	r4, [r5, #72]	; 0x48
 8004b28:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004b2a:	b007      	add	sp, #28
 8004b2c:	bd30      	pop	{r4, r5, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	40013000 	.word	0x40013000
 8004b34:	40021000 	.word	0x40021000
 8004b38:	50001000 	.word	0x50001000
 8004b3c:	20000258 	.word	0x20000258
 8004b40:	4002001c 	.word	0x4002001c
 8004b44:	40020030 	.word	0x40020030
 8004b48:	200002a0 	.word	0x200002a0

08004b4c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	6802      	ldr	r2, [r0, #0]
{
 8004b50:	b570      	push	{r4, r5, r6, lr}
  if(htim_base->Instance==TIM2)
 8004b52:	05db      	lsls	r3, r3, #23
{
 8004b54:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM2)
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d152      	bne.n	8004c00 <HAL_TIM_Base_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4a29      	ldr	r2, [pc, #164]	; (8004c04 <HAL_TIM_Base_MspInit+0xb8>)

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8004b5e:	4c2a      	ldr	r4, [pc, #168]	; (8004c08 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b60:	6b91      	ldr	r1, [r2, #56]	; 0x38
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8004b62:	0020      	movs	r0, r4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b64:	430b      	orrs	r3, r1
 8004b66:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8004b68:	4b28      	ldr	r3, [pc, #160]	; (8004c0c <HAL_TIM_Base_MspInit+0xc0>)
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004b6a:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8004b6c:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8004b6e:	2308      	movs	r3, #8
 8004b70:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b72:	18db      	adds	r3, r3, r3
 8004b74:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b76:	2300      	movs	r3, #0
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004b78:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b7a:	3281      	adds	r2, #129	; 0x81
 8004b7c:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b7e:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b80:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b82:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8004b84:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004b86:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8004b88:	f000 f9d2 	bl	8004f30 <HAL_DMA_Init>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_TIM_Base_MspInit+0x48>
    {
      Error_Handler();
 8004b90:	f7ff fd34 	bl	80045fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8004b94:	622c      	str	r4, [r5, #32]

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8004b96:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <HAL_TIM_Base_MspInit+0xc4>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8004b98:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8004b9a:	4c1e      	ldr	r4, [pc, #120]	; (8004c14 <HAL_TIM_Base_MspInit+0xc8>)
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004b9c:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8004b9e:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ba4:	18db      	adds	r3, r3, r3
 8004ba6:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ba8:	2300      	movs	r3, #0
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004baa:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004bac:	3281      	adds	r2, #129	; 0x81
 8004bae:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8004bb0:	0020      	movs	r0, r4
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb2:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004bb4:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bb6:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8004bb8:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8004bba:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8004bbc:	f000 f9b8 	bl	8004f30 <HAL_DMA_Init>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_TIM_Base_MspInit+0x7c>
    {
      Error_Handler();
 8004bc4:	f7ff fd1a 	bl	80045fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);

    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8004bc8:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <HAL_TIM_Base_MspInit+0xcc>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8004bca:	62ac      	str	r4, [r5, #40]	; 0x28
 8004bcc:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8004bce:	4c13      	ldr	r4, [pc, #76]	; (8004c1c <HAL_TIM_Base_MspInit+0xd0>)
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8004bd0:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8004bd2:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bd8:	18db      	adds	r3, r3, r3
 8004bda:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bdc:	2300      	movs	r3, #0
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8004bde:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004be0:	3281      	adds	r2, #129	; 0x81
 8004be2:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8004be4:	0020      	movs	r0, r4
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8004be6:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004be8:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bea:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8004bec:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8004bee:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8004bf0:	f000 f99e 	bl	8004f30 <HAL_DMA_Init>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_TIM_Base_MspInit+0xb0>
    {
      Error_Handler();
 8004bf8:	f7ff fd00 	bl	80045fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8004bfc:	62ec      	str	r4, [r5, #44]	; 0x2c
 8004bfe:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	40021000 	.word	0x40021000
 8004c08:	20000328 	.word	0x20000328
 8004c0c:	40020058 	.word	0x40020058
 8004c10:	40020008 	.word	0x40020008
 8004c14:	20000370 	.word	0x20000370
 8004c18:	40020044 	.word	0x40020044
 8004c1c:	200003b8 	.word	0x200003b8

08004c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c20:	b510      	push	{r4, lr}
 8004c22:	0004      	movs	r4, r0
 8004c24:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c26:	2214      	movs	r2, #20
 8004c28:	2100      	movs	r1, #0
 8004c2a:	a801      	add	r0, sp, #4
 8004c2c:	f003 f93f 	bl	8007eae <memset>
  if(htim->Instance==TIM2)
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	6822      	ldr	r2, [r4, #0]
 8004c34:	05db      	lsls	r3, r3, #23
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d111      	bne.n	8004c5e <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c3a:	2110      	movs	r1, #16
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM2;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c3e:	480a      	ldr	r0, [pc, #40]	; (8004c68 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c42:	430a      	orrs	r2, r1
 8004c44:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	400b      	ands	r3, r1
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
 8004c4e:	23d0      	movs	r3, #208	; 0xd0
 8004c50:	015b      	lsls	r3, r3, #5
 8004c52:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c54:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c56:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c58:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c5a:	f000 fa39 	bl	80050d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004c5e:	b006      	add	sp, #24
 8004c60:	bd10      	pop	{r4, pc}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	40021000 	.word	0x40021000
 8004c68:	50001000 	.word	0x50001000

08004c6c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c6c:	4770      	bx	lr

08004c6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c6e:	e7fe      	b.n	8004c6e <HardFault_Handler>

08004c70 <SVC_Handler>:
 8004c70:	4770      	bx	lr

08004c72 <PendSV_Handler>:
 8004c72:	4770      	bx	lr

08004c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c76:	f000 f8e7 	bl	8004e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c7a:	bd10      	pop	{r4, pc}

08004c7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004c7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8004c7e:	4802      	ldr	r0, [pc, #8]	; (8004c88 <DMA1_Channel1_IRQHandler+0xc>)
 8004c80:	f000 f9da 	bl	8005038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	20000370 	.word	0x20000370

08004c8c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004c8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004c8e:	4803      	ldr	r0, [pc, #12]	; (8004c9c <DMA1_Channel2_3_IRQHandler+0x10>)
 8004c90:	f000 f9d2 	bl	8005038 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004c94:	4802      	ldr	r0, [pc, #8]	; (8004ca0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8004c96:	f000 f9cf 	bl	8005038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004c9a:	bd10      	pop	{r4, pc}
 8004c9c:	20000258 	.word	0x20000258
 8004ca0:	200002a0 	.word	0x200002a0

08004ca4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004ca4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8004ca6:	4805      	ldr	r0, [pc, #20]	; (8004cbc <DMA1_Channel4_5_6_7_IRQHandler+0x18>)
 8004ca8:	f000 f9c6 	bl	8005038 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8004cac:	4804      	ldr	r0, [pc, #16]	; (8004cc0 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8004cae:	f000 f9c3 	bl	8005038 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004cb2:	4804      	ldr	r0, [pc, #16]	; (8004cc4 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8004cb4:	f000 f9c0 	bl	8005038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	200003b8 	.word	0x200003b8
 8004cc0:	20000328 	.word	0x20000328
 8004cc4:	200001b8 	.word	0x200001b8

08004cc8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004cc8:	2001      	movs	r0, #1
 8004cca:	4770      	bx	lr

08004ccc <_kill>:

int _kill(int pid, int sig)
{
 8004ccc:	b510      	push	{r4, lr}
	errno = EINVAL;
 8004cce:	f003 f953 	bl	8007f78 <__errno>
 8004cd2:	2316      	movs	r3, #22
 8004cd4:	6003      	str	r3, [r0, #0]
	return -1;
 8004cd6:	2001      	movs	r0, #1
}
 8004cd8:	4240      	negs	r0, r0
 8004cda:	bd10      	pop	{r4, pc}

08004cdc <_exit>:

void _exit (int status)
{
 8004cdc:	b510      	push	{r4, lr}
	errno = EINVAL;
 8004cde:	f003 f94b 	bl	8007f78 <__errno>
 8004ce2:	2316      	movs	r3, #22
 8004ce4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004ce6:	e7fe      	b.n	8004ce6 <_exit+0xa>

08004ce8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ce8:	490b      	ldr	r1, [pc, #44]	; (8004d18 <_sbrk+0x30>)
 8004cea:	4a0c      	ldr	r2, [pc, #48]	; (8004d1c <_sbrk+0x34>)
{
 8004cec:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cee:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cf0:	490b      	ldr	r1, [pc, #44]	; (8004d20 <_sbrk+0x38>)
{
 8004cf2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8004cf4:	6808      	ldr	r0, [r1, #0]
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d101      	bne.n	8004cfe <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8004cfa:	480a      	ldr	r0, [pc, #40]	; (8004d24 <_sbrk+0x3c>)
 8004cfc:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cfe:	6808      	ldr	r0, [r1, #0]
 8004d00:	18c3      	adds	r3, r0, r3
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d906      	bls.n	8004d14 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8004d06:	f003 f937 	bl	8007f78 <__errno>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004d0e:	2001      	movs	r0, #1
 8004d10:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004d12:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004d14:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8004d16:	e7fc      	b.n	8004d12 <_sbrk+0x2a>
 8004d18:	00000400 	.word	0x00000400
 8004d1c:	20005000 	.word	0x20005000
 8004d20:	20000d58 	.word	0x20000d58
 8004d24:	200010c8 	.word	0x200010c8

08004d28 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004d28:	2280      	movs	r2, #128	; 0x80
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <SystemInit+0x44>)
 8004d2c:	0052      	lsls	r2, r2, #1
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	490e      	ldr	r1, [pc, #56]	; (8004d70 <SystemInit+0x48>)
 8004d38:	400a      	ands	r2, r1
 8004d3a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	490d      	ldr	r1, [pc, #52]	; (8004d74 <SystemInit+0x4c>)
 8004d40:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004d42:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004d44:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	438a      	bics	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	490a      	ldr	r1, [pc, #40]	; (8004d78 <SystemInit+0x50>)
 8004d50:	400a      	ands	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	4909      	ldr	r1, [pc, #36]	; (8004d7c <SystemInit+0x54>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d60:	2280      	movs	r2, #128	; 0x80
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <SystemInit+0x58>)
 8004d64:	0512      	lsls	r2, r2, #20
 8004d66:	609a      	str	r2, [r3, #8]
#endif
}
 8004d68:	4770      	bx	lr
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	88ff400c 	.word	0x88ff400c
 8004d74:	fef6fff6 	.word	0xfef6fff6
 8004d78:	fffbffff 	.word	0xfffbffff
 8004d7c:	ff02ffff 	.word	0xff02ffff
 8004d80:	e000ed00 	.word	0xe000ed00

08004d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004d84:	480d      	ldr	r0, [pc, #52]	; (8004dbc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004d86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004d88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d8a:	e003      	b.n	8004d94 <LoopCopyDataInit>

08004d8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004d8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d92:	3104      	adds	r1, #4

08004d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d94:	480b      	ldr	r0, [pc, #44]	; (8004dc4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004d96:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004d98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d9c:	d3f6      	bcc.n	8004d8c <CopyDataInit>
  ldr  r2, =_sbss
 8004d9e:	4a0b      	ldr	r2, [pc, #44]	; (8004dcc <LoopForever+0x12>)
  b  LoopFillZerobss
 8004da0:	e002      	b.n	8004da8 <LoopFillZerobss>

08004da2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004da2:	2300      	movs	r3, #0
  str  r3, [r2]
 8004da4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004da6:	3204      	adds	r2, #4

08004da8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <LoopForever+0x16>)
  cmp  r2, r3
 8004daa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004dac:	d3f9      	bcc.n	8004da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004dae:	f7ff ffbb 	bl	8004d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004db2:	f003 f8e7 	bl	8007f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004db6:	f7fe fcdf 	bl	8003778 <main>

08004dba <LoopForever>:

LoopForever:
    b LoopForever
 8004dba:	e7fe      	b.n	8004dba <LoopForever>
   ldr   r0, =_estack
 8004dbc:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004dc0:	08008c40 	.word	0x08008c40
  ldr  r0, =_sdata
 8004dc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004dc8:	20000160 	.word	0x20000160
  ldr  r2, =_sbss
 8004dcc:	20000160 	.word	0x20000160
  ldr  r3, = _ebss
 8004dd0:	200010c8 	.word	0x200010c8

08004dd4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dd4:	e7fe      	b.n	8004dd4 <ADC1_COMP_IRQHandler>
	...

08004dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ddc:	20fa      	movs	r0, #250	; 0xfa
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <HAL_InitTick+0x3c>)
 8004de0:	0080      	lsls	r0, r0, #2
 8004de2:	7819      	ldrb	r1, [r3, #0]
 8004de4:	f7fb f990 	bl	8000108 <__udivsi3>
 8004de8:	4c0b      	ldr	r4, [pc, #44]	; (8004e18 <HAL_InitTick+0x40>)
 8004dea:	0001      	movs	r1, r0
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	f7fb f98b 	bl	8000108 <__udivsi3>
 8004df2:	f000 f883 	bl	8004efc <HAL_SYSTICK_Config>
 8004df6:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8004df8:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004dfa:	2c00      	cmp	r4, #0
 8004dfc:	d109      	bne.n	8004e12 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dfe:	2d03      	cmp	r5, #3
 8004e00:	d807      	bhi.n	8004e12 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e02:	3802      	subs	r0, #2
 8004e04:	0022      	movs	r2, r4
 8004e06:	0029      	movs	r1, r5
 8004e08:	f000 f842 	bl	8004e90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e0c:	0020      	movs	r0, r4
 8004e0e:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <HAL_InitTick+0x44>)
 8004e10:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	20000108 	.word	0x20000108
 8004e18:	20000104 	.word	0x20000104
 8004e1c:	2000010c 	.word	0x2000010c

08004e20 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004e20:	2340      	movs	r3, #64	; 0x40
 8004e22:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <HAL_Init+0x24>)
{
 8004e24:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004e26:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e28:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e2e:	f7ff ffd3 	bl	8004dd8 <HAL_InitTick>
 8004e32:	1e04      	subs	r4, r0, #0
 8004e34:	d103      	bne.n	8004e3e <HAL_Init+0x1e>
    HAL_MspInit();
 8004e36:	f7ff fda1 	bl	800497c <HAL_MspInit>
}
 8004e3a:	0020      	movs	r0, r4
 8004e3c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004e3e:	2401      	movs	r4, #1
 8004e40:	e7fb      	b.n	8004e3a <HAL_Init+0x1a>
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	40022000 	.word	0x40022000

08004e48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004e48:	4a03      	ldr	r2, [pc, #12]	; (8004e58 <HAL_IncTick+0x10>)
 8004e4a:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <HAL_IncTick+0x14>)
 8004e4c:	6811      	ldr	r1, [r2, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	185b      	adds	r3, r3, r1
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	4770      	bx	lr
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	20000d5c 	.word	0x20000d5c
 8004e5c:	20000108 	.word	0x20000108

08004e60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004e60:	4b01      	ldr	r3, [pc, #4]	; (8004e68 <HAL_GetTick+0x8>)
 8004e62:	6818      	ldr	r0, [r3, #0]
}
 8004e64:	4770      	bx	lr
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	20000d5c 	.word	0x20000d5c

08004e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004e70:	f7ff fff6 	bl	8004e60 <HAL_GetTick>
 8004e74:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e76:	1c63      	adds	r3, r4, #1
 8004e78:	d002      	beq.n	8004e80 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e7a:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <HAL_Delay+0x20>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e80:	f7ff ffee 	bl	8004e60 <HAL_GetTick>
 8004e84:	1b40      	subs	r0, r0, r5
 8004e86:	42a0      	cmp	r0, r4
 8004e88:	d3fa      	bcc.n	8004e80 <HAL_Delay+0x14>
  {
  }
}
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	20000108 	.word	0x20000108

08004e90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e90:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e92:	25ff      	movs	r5, #255	; 0xff
 8004e94:	2403      	movs	r4, #3
 8004e96:	002a      	movs	r2, r5
 8004e98:	4004      	ands	r4, r0
 8004e9a:	00e4      	lsls	r4, r4, #3
 8004e9c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e9e:	0189      	lsls	r1, r1, #6
 8004ea0:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ea2:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ea4:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ea6:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	db0a      	blt.n	8004ec2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004eac:	24c0      	movs	r4, #192	; 0xc0
 8004eae:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_NVIC_SetPriority+0x4c>)
 8004eb0:	0880      	lsrs	r0, r0, #2
 8004eb2:	0080      	lsls	r0, r0, #2
 8004eb4:	18c0      	adds	r0, r0, r3
 8004eb6:	00a4      	lsls	r4, r4, #2
 8004eb8:	5903      	ldr	r3, [r0, r4]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004ec0:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ec2:	200f      	movs	r0, #15
 8004ec4:	4003      	ands	r3, r0
 8004ec6:	3b08      	subs	r3, #8
 8004ec8:	4805      	ldr	r0, [pc, #20]	; (8004ee0 <HAL_NVIC_SetPriority+0x50>)
 8004eca:	089b      	lsrs	r3, r3, #2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	181b      	adds	r3, r3, r0
 8004ed0:	69d8      	ldr	r0, [r3, #28]
 8004ed2:	4002      	ands	r2, r0
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	61da      	str	r2, [r3, #28]
 8004ed8:	e7f2      	b.n	8004ec0 <HAL_NVIC_SetPriority+0x30>
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	e000e100 	.word	0xe000e100
 8004ee0:	e000ed00 	.word	0xe000ed00

08004ee4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	db05      	blt.n	8004ef4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee8:	231f      	movs	r3, #31
 8004eea:	4018      	ands	r0, r3
 8004eec:	3b1e      	subs	r3, #30
 8004eee:	4083      	lsls	r3, r0
 8004ef0:	4a01      	ldr	r2, [pc, #4]	; (8004ef8 <HAL_NVIC_EnableIRQ+0x14>)
 8004ef2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004ef4:	4770      	bx	lr
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	e000e100 	.word	0xe000e100

08004efc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004efc:	2280      	movs	r2, #128	; 0x80
 8004efe:	1e43      	subs	r3, r0, #1
 8004f00:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f02:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d20d      	bcs.n	8004f24 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f08:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f0a:	4a07      	ldr	r2, [pc, #28]	; (8004f28 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f0c:	4807      	ldr	r0, [pc, #28]	; (8004f2c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f0e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f10:	6a03      	ldr	r3, [r0, #32]
 8004f12:	0609      	lsls	r1, r1, #24
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	0a1b      	lsrs	r3, r3, #8
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f1c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f1e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f20:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f22:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004f24:	4770      	bx	lr
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	e000e010 	.word	0xe000e010
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004f34:	2001      	movs	r0, #1
  if(hdma == NULL)
 8004f36:	2c00      	cmp	r4, #0
 8004f38:	d035      	beq.n	8004fa6 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f3a:	6825      	ldr	r5, [r4, #0]
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <HAL_DMA_Init+0x78>)
 8004f3e:	2114      	movs	r1, #20
 8004f40:	18e8      	adds	r0, r5, r3
 8004f42:	f7fb f8e1 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8004f46:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f48:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8004f4a:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f50:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f52:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f54:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f56:	4b16      	ldr	r3, [pc, #88]	; (8004fb0 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f58:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f5a:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8004f5c:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5e:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8004f60:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f62:	433b      	orrs	r3, r7
 8004f64:	6967      	ldr	r7, [r4, #20]
 8004f66:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f68:	69a7      	ldr	r7, [r4, #24]
 8004f6a:	433b      	orrs	r3, r7
 8004f6c:	69e7      	ldr	r7, [r4, #28]
 8004f6e:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f70:	6a27      	ldr	r7, [r4, #32]
 8004f72:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8004f74:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f76:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	01db      	lsls	r3, r3, #7
 8004f7c:	4299      	cmp	r1, r3
 8004f7e:	d00c      	beq.n	8004f9a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004f80:	251c      	movs	r5, #28
 8004f82:	4028      	ands	r0, r5
 8004f84:	3d0d      	subs	r5, #13
 8004f86:	4085      	lsls	r5, r0
 8004f88:	490a      	ldr	r1, [pc, #40]	; (8004fb4 <HAL_DMA_Init+0x84>)
 8004f8a:	680b      	ldr	r3, [r1, #0]
 8004f8c:	43ab      	bics	r3, r5
 8004f8e:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004f90:	6863      	ldr	r3, [r4, #4]
 8004f92:	680d      	ldr	r5, [r1, #0]
 8004f94:	4083      	lsls	r3, r0
 8004f96:	432b      	orrs	r3, r5
 8004f98:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f9a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004f9c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f9e:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004fa0:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8004fa2:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8004fa4:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8004fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa8:	bffdfff8 	.word	0xbffdfff8
 8004fac:	40020000 	.word	0x40020000
 8004fb0:	ffff800f 	.word	0xffff800f
 8004fb4:	400200a8 	.word	0x400200a8

08004fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fba:	1d45      	adds	r5, r0, #5
{
 8004fbc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8004fbe:	7feb      	ldrb	r3, [r5, #31]
{
 8004fc0:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8004fc2:	2002      	movs	r0, #2
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d029      	beq.n	800501c <HAL_DMA_Start_IT+0x64>
 8004fc8:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fca:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8004fcc:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fce:	7ffb      	ldrb	r3, [r7, #31]
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	469c      	mov	ip, r3
 8004fd4:	4660      	mov	r0, ip
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2801      	cmp	r0, #1
 8004fda:	d12a      	bne.n	8005032 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fdc:	3001      	adds	r0, #1
 8004fde:	77f8      	strb	r0, [r7, #31]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004fe0:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE(hdma);
 8004fe2:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe4:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004fe6:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004fe8:	6c26      	ldr	r6, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8004fea:	439d      	bics	r5, r3
 8004fec:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004fee:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8004ff0:	403d      	ands	r5, r7
 8004ff2:	40ab      	lsls	r3, r5
 8004ff4:	6073      	str	r3, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ff6:	9b01      	ldr	r3, [sp, #4]
 8004ff8:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ffa:	68a3      	ldr	r3, [r4, #8]
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d10e      	bne.n	800501e <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005000:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005002:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8005004:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00c      	beq.n	8005024 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800500a:	230e      	movs	r3, #14
 800500c:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800500e:	4313      	orrs	r3, r2
 8005010:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8005012:	2301      	movs	r3, #1
 8005014:	6802      	ldr	r2, [r0, #0]
 8005016:	4313      	orrs	r3, r2
 8005018:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501a:	2000      	movs	r0, #0
}
 800501c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800501e:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005020:	60c2      	str	r2, [r0, #12]
 8005022:	e7ef      	b.n	8005004 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005024:	2204      	movs	r2, #4
 8005026:	6803      	ldr	r3, [r0, #0]
 8005028:	4393      	bics	r3, r2
 800502a:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800502c:	6802      	ldr	r2, [r0, #0]
 800502e:	230a      	movs	r3, #10
 8005030:	e7ed      	b.n	800500e <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8005032:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8005034:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8005036:	e7f1      	b.n	800501c <HAL_DMA_Start_IT+0x64>

08005038 <HAL_DMA_IRQHandler>:
{
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800503a:	261c      	movs	r6, #28
 800503c:	2704      	movs	r7, #4
 800503e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005040:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005042:	4032      	ands	r2, r6
 8005044:	003e      	movs	r6, r7
 8005046:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005048:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800504a:	6803      	ldr	r3, [r0, #0]
 800504c:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800504e:	4235      	tst	r5, r6
 8005050:	d00d      	beq.n	800506e <HAL_DMA_IRQHandler+0x36>
 8005052:	423c      	tst	r4, r7
 8005054:	d00b      	beq.n	800506e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	0692      	lsls	r2, r2, #26
 800505a:	d402      	bmi.n	8005062 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	43ba      	bics	r2, r7
 8005060:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8005062:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005064:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8005066:	2b00      	cmp	r3, #0
 8005068:	d019      	beq.n	800509e <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 800506a:	4798      	blx	r3
  return;
 800506c:	e017      	b.n	800509e <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800506e:	2702      	movs	r7, #2
 8005070:	003e      	movs	r6, r7
 8005072:	4096      	lsls	r6, r2
 8005074:	4235      	tst	r5, r6
 8005076:	d013      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x68>
 8005078:	423c      	tst	r4, r7
 800507a:	d011      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	0692      	lsls	r2, r2, #26
 8005080:	d406      	bmi.n	8005090 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005082:	240a      	movs	r4, #10
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	43a2      	bics	r2, r4
 8005088:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800508a:	2201      	movs	r2, #1
 800508c:	1d83      	adds	r3, r0, #6
 800508e:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8005090:	2200      	movs	r2, #0
 8005092:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005094:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005096:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8005098:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800509a:	4293      	cmp	r3, r2
 800509c:	d1e5      	bne.n	800506a <HAL_DMA_IRQHandler+0x32>
}
 800509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80050a0:	2608      	movs	r6, #8
 80050a2:	0037      	movs	r7, r6
 80050a4:	4097      	lsls	r7, r2
 80050a6:	423d      	tst	r5, r7
 80050a8:	d0f9      	beq.n	800509e <HAL_DMA_IRQHandler+0x66>
 80050aa:	4234      	tst	r4, r6
 80050ac:	d0f7      	beq.n	800509e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ae:	250e      	movs	r5, #14
 80050b0:	681c      	ldr	r4, [r3, #0]
 80050b2:	43ac      	bics	r4, r5
 80050b4:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80050b6:	2301      	movs	r3, #1
 80050b8:	001c      	movs	r4, r3
 80050ba:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80050bc:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80050be:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050c0:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80050c2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80050c4:	2200      	movs	r2, #0
 80050c6:	1d43      	adds	r3, r0, #5
 80050c8:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80050ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050cc:	e7e5      	b.n	800509a <HAL_DMA_IRQHandler+0x62>
	...

080050d0 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80050d0:	4a5c      	ldr	r2, [pc, #368]	; (8005244 <HAL_GPIO_Init+0x174>)
{
 80050d2:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80050d4:	1882      	adds	r2, r0, r2
 80050d6:	1e54      	subs	r4, r2, #1
 80050d8:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 80050da:	2300      	movs	r3, #0
{
 80050dc:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80050de:	3205      	adds	r2, #5
 80050e0:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80050e2:	680a      	ldr	r2, [r1, #0]
 80050e4:	0014      	movs	r4, r2
 80050e6:	40dc      	lsrs	r4, r3
 80050e8:	d101      	bne.n	80050ee <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80050ea:	b007      	add	sp, #28
 80050ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80050ee:	2401      	movs	r4, #1
 80050f0:	0025      	movs	r5, r4
 80050f2:	46a4      	mov	ip, r4
 80050f4:	409d      	lsls	r5, r3
 80050f6:	0014      	movs	r4, r2
 80050f8:	402c      	ands	r4, r5
 80050fa:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 80050fc:	422a      	tst	r2, r5
 80050fe:	d100      	bne.n	8005102 <HAL_GPIO_Init+0x32>
 8005100:	e09e      	b.n	8005240 <HAL_GPIO_Init+0x170>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005102:	2403      	movs	r4, #3
 8005104:	684a      	ldr	r2, [r1, #4]
 8005106:	005f      	lsls	r7, r3, #1
 8005108:	9201      	str	r2, [sp, #4]
 800510a:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800510c:	40bc      	lsls	r4, r7
 800510e:	43e4      	mvns	r4, r4
 8005110:	9403      	str	r4, [sp, #12]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005112:	1e54      	subs	r4, r2, #1
 8005114:	4564      	cmp	r4, ip
 8005116:	d82f      	bhi.n	8005178 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR;
 8005118:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800511a:	9c03      	ldr	r4, [sp, #12]
 800511c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800511e:	68cc      	ldr	r4, [r1, #12]
 8005120:	40bc      	lsls	r4, r7
 8005122:	4334      	orrs	r4, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005124:	4666      	mov	r6, ip
        GPIOx->OSPEEDR = temp;
 8005126:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005128:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800512a:	43ac      	bics	r4, r5
 800512c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800512e:	9c01      	ldr	r4, [sp, #4]
 8005130:	0924      	lsrs	r4, r4, #4
 8005132:	4034      	ands	r4, r6
 8005134:	409c      	lsls	r4, r3
 8005136:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8005138:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800513a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800513c:	9c03      	ldr	r4, [sp, #12]
 800513e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005140:	688c      	ldr	r4, [r1, #8]
 8005142:	40bc      	lsls	r4, r7
 8005144:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8005146:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005148:	2a02      	cmp	r2, #2
 800514a:	d117      	bne.n	800517c <HAL_GPIO_Init+0xac>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800514c:	2507      	movs	r5, #7
 800514e:	260f      	movs	r6, #15
 8005150:	401d      	ands	r5, r3
 8005152:	00ad      	lsls	r5, r5, #2
 8005154:	40ae      	lsls	r6, r5
 8005156:	46b4      	mov	ip, r6
        temp = GPIOx->AFR[position >> 3U];
 8005158:	08dc      	lsrs	r4, r3, #3
 800515a:	00a4      	lsls	r4, r4, #2
 800515c:	1904      	adds	r4, r0, r4
 800515e:	9404      	str	r4, [sp, #16]
 8005160:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005162:	0026      	movs	r6, r4
 8005164:	4664      	mov	r4, ip
 8005166:	43a6      	bics	r6, r4
 8005168:	46b4      	mov	ip, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800516a:	690e      	ldr	r6, [r1, #16]
 800516c:	4664      	mov	r4, ip
 800516e:	40ae      	lsls	r6, r5
 8005170:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8005172:	9c04      	ldr	r4, [sp, #16]
 8005174:	6226      	str	r6, [r4, #32]
 8005176:	e001      	b.n	800517c <HAL_GPIO_Init+0xac>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005178:	2a03      	cmp	r2, #3
 800517a:	d1de      	bne.n	800513a <HAL_GPIO_Init+0x6a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800517c:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800517e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005180:	9d03      	ldr	r5, [sp, #12]
 8005182:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005184:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8005186:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005188:	22c0      	movs	r2, #192	; 0xc0
 800518a:	9c01      	ldr	r4, [sp, #4]
 800518c:	0292      	lsls	r2, r2, #10
 800518e:	4214      	tst	r4, r2
 8005190:	d056      	beq.n	8005240 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005192:	2701      	movs	r7, #1
 8005194:	4c2c      	ldr	r4, [pc, #176]	; (8005248 <HAL_GPIO_Init+0x178>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005196:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005198:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800519a:	433a      	orrs	r2, r7
 800519c:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800519e:	4a2b      	ldr	r2, [pc, #172]	; (800524c <HAL_GPIO_Init+0x17c>)
 80051a0:	089c      	lsrs	r4, r3, #2
 80051a2:	00a4      	lsls	r4, r4, #2
 80051a4:	18a4      	adds	r4, r4, r2
 80051a6:	68a2      	ldr	r2, [r4, #8]
 80051a8:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80051aa:	2203      	movs	r2, #3
 80051ac:	4015      	ands	r5, r2
 80051ae:	00ad      	lsls	r5, r5, #2
 80051b0:	320c      	adds	r2, #12
 80051b2:	40aa      	lsls	r2, r5
 80051b4:	4666      	mov	r6, ip
 80051b6:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80051b8:	22a0      	movs	r2, #160	; 0xa0
 80051ba:	05d2      	lsls	r2, r2, #23
 80051bc:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80051be:	9603      	str	r6, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80051c0:	2200      	movs	r2, #0
 80051c2:	4560      	cmp	r0, ip
 80051c4:	d011      	beq.n	80051ea <HAL_GPIO_Init+0x11a>
 80051c6:	4a22      	ldr	r2, [pc, #136]	; (8005250 <HAL_GPIO_Init+0x180>)
 80051c8:	4694      	mov	ip, r2
 80051ca:	003a      	movs	r2, r7
 80051cc:	4560      	cmp	r0, ip
 80051ce:	d00c      	beq.n	80051ea <HAL_GPIO_Init+0x11a>
 80051d0:	4f20      	ldr	r7, [pc, #128]	; (8005254 <HAL_GPIO_Init+0x184>)
 80051d2:	1892      	adds	r2, r2, r2
 80051d4:	42b8      	cmp	r0, r7
 80051d6:	d008      	beq.n	80051ea <HAL_GPIO_Init+0x11a>
 80051d8:	4f1f      	ldr	r7, [pc, #124]	; (8005258 <HAL_GPIO_Init+0x188>)
 80051da:	3201      	adds	r2, #1
 80051dc:	42b8      	cmp	r0, r7
 80051de:	d004      	beq.n	80051ea <HAL_GPIO_Init+0x11a>
 80051e0:	4e1e      	ldr	r6, [pc, #120]	; (800525c <HAL_GPIO_Init+0x18c>)
 80051e2:	3201      	adds	r2, #1
 80051e4:	42b0      	cmp	r0, r6
 80051e6:	d000      	beq.n	80051ea <HAL_GPIO_Init+0x11a>
 80051e8:	9a05      	ldr	r2, [sp, #20]
 80051ea:	40aa      	lsls	r2, r5
 80051ec:	9d03      	ldr	r5, [sp, #12]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051ee:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80051f0:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051f2:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80051f4:	4a1a      	ldr	r2, [pc, #104]	; (8005260 <HAL_GPIO_Init+0x190>)
        temp &= ~((uint32_t)iocurrent);
 80051f6:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 80051f8:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80051fa:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 80051fc:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80051fe:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005200:	03ff      	lsls	r7, r7, #15
 8005202:	d401      	bmi.n	8005208 <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 8005204:	0035      	movs	r5, r6
 8005206:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8005208:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800520a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800520c:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800520e:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8005210:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005212:	03bf      	lsls	r7, r7, #14
 8005214:	d401      	bmi.n	800521a <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 8005216:	0035      	movs	r5, r6
 8005218:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800521a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800521c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800521e:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005220:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8005222:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005224:	02ff      	lsls	r7, r7, #11
 8005226:	d401      	bmi.n	800522c <HAL_GPIO_Init+0x15c>
        temp &= ~((uint32_t)iocurrent);
 8005228:	0035      	movs	r5, r6
 800522a:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800522c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800522e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8005230:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005232:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8005234:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005236:	02bf      	lsls	r7, r7, #10
 8005238:	d401      	bmi.n	800523e <HAL_GPIO_Init+0x16e>
        temp &= ~((uint32_t)iocurrent);
 800523a:	4025      	ands	r5, r4
 800523c:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800523e:	60d6      	str	r6, [r2, #12]
    position++;
 8005240:	3301      	adds	r3, #1
 8005242:	e74e      	b.n	80050e2 <HAL_GPIO_Init+0x12>
 8005244:	afffe400 	.word	0xafffe400
 8005248:	40021000 	.word	0x40021000
 800524c:	40010000 	.word	0x40010000
 8005250:	50000400 	.word	0x50000400
 8005254:	50000800 	.word	0x50000800
 8005258:	50000c00 	.word	0x50000c00
 800525c:	50001000 	.word	0x50001000
 8005260:	40010400 	.word	0x40010400

08005264 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005264:	6900      	ldr	r0, [r0, #16]
 8005266:	4008      	ands	r0, r1
 8005268:	1e43      	subs	r3, r0, #1
 800526a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800526c:	b2c0      	uxtb	r0, r0
}
 800526e:	4770      	bx	lr

08005270 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005270:	2a00      	cmp	r2, #0
 8005272:	d001      	beq.n	8005278 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005274:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005276:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8005278:	6281      	str	r1, [r0, #40]	; 0x28
}
 800527a:	e7fc      	b.n	8005276 <HAL_GPIO_WritePin+0x6>

0800527c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	0004      	movs	r4, r0
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
  {
    return HAL_ERROR;
 8005280:	2001      	movs	r0, #1
  if (hi2s == NULL)
 8005282:	2c00      	cmp	r4, #0
 8005284:	d045      	beq.n	8005312 <HAL_I2S_Init+0x96>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005286:	0026      	movs	r6, r4
 8005288:	3635      	adds	r6, #53	; 0x35
 800528a:	7833      	ldrb	r3, [r6, #0]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d105      	bne.n	800529e <HAL_I2S_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005292:	0023      	movs	r3, r4
 8005294:	3334      	adds	r3, #52	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005296:	0020      	movs	r0, r4
    hi2s->Lock = HAL_UNLOCKED;
 8005298:	701a      	strb	r2, [r3, #0]
    HAL_I2S_MspInit(hi2s);
 800529a:	f7ff fb7d 	bl	8004998 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800529e:	2102      	movs	r1, #2
 80052a0:	7031      	strb	r1, [r6, #0]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	4830      	ldr	r0, [pc, #192]	; (8005368 <HAL_I2S_Init+0xec>)
 80052a6:	69da      	ldr	r2, [r3, #28]
 80052a8:	4002      	ands	r2, r0
 80052aa:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80052ac:	6219      	str	r1, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80052ae:	6963      	ldr	r3, [r4, #20]
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80052b0:	68e2      	ldr	r2, [r4, #12]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80052b2:	428b      	cmp	r3, r1
 80052b4:	d035      	beq.n	8005322 <HAL_I2S_Init+0xa6>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80052b6:	2510      	movs	r5, #16
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80052b8:	2a00      	cmp	r2, #0
 80052ba:	d000      	beq.n	80052be <HAL_I2S_Init+0x42>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80052bc:	196d      	adds	r5, r5, r5
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80052be:	68a3      	ldr	r3, [r4, #8]
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d800      	bhi.n	80052c6 <HAL_I2S_Init+0x4a>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80052c4:	006d      	lsls	r5, r5, #1
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80052c6:	f000 f8dd 	bl	8005484 <HAL_RCC_GetSysClockFreq>

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80052ca:	2380      	movs	r3, #128	; 0x80
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d11f      	bne.n	8005314 <HAL_I2S_Init+0x98>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80052d4:	68e3      	ldr	r3, [r4, #12]
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052d6:	6967      	ldr	r7, [r4, #20]
 80052d8:	00a9      	lsls	r1, r5, #2
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d100      	bne.n	80052e0 <HAL_I2S_Init+0x64>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052de:	00e9      	lsls	r1, r5, #3
 80052e0:	f7fa ff12 	bl	8000108 <__udivsi3>
 80052e4:	230a      	movs	r3, #10
 80052e6:	0039      	movs	r1, r7
 80052e8:	4358      	muls	r0, r3
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052ea:	f7fa ff0d 	bl	8000108 <__udivsi3>
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80052ee:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80052f0:	3005      	adds	r0, #5
    tmp = tmp / 10U;
 80052f2:	f7fa ff09 	bl	8000108 <__udivsi3>
 80052f6:	0003      	movs	r3, r0

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80052f8:	2001      	movs	r0, #1
 80052fa:	0019      	movs	r1, r3

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80052fc:	4383      	bics	r3, r0
 80052fe:	40c3      	lsrs	r3, r0
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005300:	4001      	ands	r1, r0
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005302:	1e9a      	subs	r2, r3, #2
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005304:	0209      	lsls	r1, r1, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005306:	2afd      	cmp	r2, #253	; 0xfd
 8005308:	d90c      	bls.n	8005324 <HAL_I2S_Init+0xa8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800530a:	2310      	movs	r3, #16
 800530c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800530e:	4313      	orrs	r3, r2
 8005310:	63a3      	str	r3, [r4, #56]	; 0x38

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8005312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005314:	0029      	movs	r1, r5
 8005316:	f7fa fef7 	bl	8000108 <__udivsi3>
 800531a:	230a      	movs	r3, #10
 800531c:	6961      	ldr	r1, [r4, #20]
 800531e:	4358      	muls	r0, r3
 8005320:	e7e3      	b.n	80052ea <HAL_I2S_Init+0x6e>
    i2sodd = 0U;
 8005322:	2100      	movs	r1, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005324:	430b      	orrs	r3, r1
 8005326:	6921      	ldr	r1, [r4, #16]
 8005328:	6822      	ldr	r2, [r4, #0]
 800532a:	430b      	orrs	r3, r1
 800532c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800532e:	68a1      	ldr	r1, [r4, #8]
 8005330:	69d0      	ldr	r0, [r2, #28]
 8005332:	6863      	ldr	r3, [r4, #4]
 8005334:	4d0c      	ldr	r5, [pc, #48]	; (8005368 <HAL_I2S_Init+0xec>)
 8005336:	430b      	orrs	r3, r1
 8005338:	4028      	ands	r0, r5
 800533a:	4303      	orrs	r3, r0
 800533c:	68e0      	ldr	r0, [r4, #12]
 800533e:	4303      	orrs	r3, r0
 8005340:	69a0      	ldr	r0, [r4, #24]
 8005342:	4303      	orrs	r3, r0
 8005344:	2080      	movs	r0, #128	; 0x80
 8005346:	0100      	lsls	r0, r0, #4
 8005348:	4303      	orrs	r3, r0
 800534a:	61d3      	str	r3, [r2, #28]
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	4399      	bics	r1, r3
 8005350:	2930      	cmp	r1, #48	; 0x30
 8005352:	d104      	bne.n	800535e <HAL_I2S_Init+0xe2>
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	69d1      	ldr	r1, [r2, #28]
 8005358:	015b      	lsls	r3, r3, #5
 800535a:	430b      	orrs	r3, r1
 800535c:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800535e:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8005360:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005362:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8005364:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 8005366:	e7d4      	b.n	8005312 <HAL_I2S_Init+0x96>
 8005368:	fffff040 	.word	0xfffff040

0800536c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	0004      	movs	r4, r0
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
  {
    return  HAL_ERROR;
 8005370:	2501      	movs	r5, #1
  if ((pData == NULL) || (Size == 0U))
 8005372:	2900      	cmp	r1, #0
 8005374:	d012      	beq.n	800539c <HAL_I2S_Transmit_DMA+0x30>
 8005376:	2a00      	cmp	r2, #0
 8005378:	d010      	beq.n	800539c <HAL_I2S_Transmit_DMA+0x30>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800537a:	0006      	movs	r6, r0
 800537c:	3634      	adds	r6, #52	; 0x34
 800537e:	7833      	ldrb	r3, [r6, #0]
 8005380:	196d      	adds	r5, r5, r5
 8005382:	2b01      	cmp	r3, #1
 8005384:	d00a      	beq.n	800539c <HAL_I2S_Transmit_DMA+0x30>
 8005386:	2301      	movs	r3, #1

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005388:	0007      	movs	r7, r0
  __HAL_LOCK(hi2s);
 800538a:	7033      	strb	r3, [r6, #0]
  if (hi2s->State != HAL_I2S_STATE_READY)
 800538c:	3735      	adds	r7, #53	; 0x35
 800538e:	7838      	ldrb	r0, [r7, #0]
 8005390:	2300      	movs	r3, #0
 8005392:	b2c5      	uxtb	r5, r0
 8005394:	2801      	cmp	r0, #1
 8005396:	d003      	beq.n	80053a0 <HAL_I2S_Transmit_DMA+0x34>
  {
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
 8005398:	2502      	movs	r5, #2
    __HAL_UNLOCK(hi2s);
 800539a:	7033      	strb	r3, [r6, #0]
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
  }

  __HAL_UNLOCK(hi2s);
  return HAL_OK;
}
 800539c:	0028      	movs	r0, r5
 800539e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80053a0:	2003      	movs	r0, #3
 80053a2:	7038      	strb	r0, [r7, #0]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80053a4:	63a3      	str	r3, [r4, #56]	; 0x38
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	3004      	adds	r0, #4
 80053aa:	469c      	mov	ip, r3
 80053ac:	69db      	ldr	r3, [r3, #28]
  hi2s->pTxBuffPtr = pData;
 80053ae:	61e1      	str	r1, [r4, #28]
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80053b0:	4003      	ands	r3, r0
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80053b2:	3b03      	subs	r3, #3
 80053b4:	3805      	subs	r0, #5
 80053b6:	4383      	bics	r3, r0
 80053b8:	d101      	bne.n	80053be <HAL_I2S_Transmit_DMA+0x52>
    hi2s->TxXferSize = (Size << 1U);
 80053ba:	0052      	lsls	r2, r2, #1
 80053bc:	b292      	uxth	r2, r2
    hi2s->TxXferSize = Size;
 80053be:	8422      	strh	r2, [r4, #32]
    hi2s->TxXferCount = Size;
 80053c0:	8462      	strh	r2, [r4, #34]	; 0x22
                                 (uint32_t)&hi2s->Instance->DR,
 80053c2:	4662      	mov	r2, ip
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80053c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <HAL_I2S_Transmit_DMA+0xac>)
                                 (uint32_t)&hi2s->Instance->DR,
 80053c8:	320c      	adds	r2, #12
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80053ca:	6303      	str	r3, [r0, #48]	; 0x30
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80053cc:	4b13      	ldr	r3, [pc, #76]	; (800541c <HAL_I2S_Transmit_DMA+0xb0>)
 80053ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80053d0:	4b13      	ldr	r3, [pc, #76]	; (8005420 <HAL_I2S_Transmit_DMA+0xb4>)
 80053d2:	6343      	str	r3, [r0, #52]	; 0x34
                                 hi2s->TxXferSize))
 80053d4:	8c23      	ldrh	r3, [r4, #32]
 80053d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80053d8:	f7ff fdee 	bl	8004fb8 <HAL_DMA_Start_IT>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d008      	beq.n	80053f2 <HAL_I2S_Transmit_DMA+0x86>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80053e0:	2308      	movs	r3, #8
 80053e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80053e4:	4313      	orrs	r3, r2
 80053e6:	63a3      	str	r3, [r4, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80053e8:	2301      	movs	r3, #1
 80053ea:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(hi2s);
 80053ec:	2300      	movs	r3, #0
 80053ee:	7033      	strb	r3, [r6, #0]
    return HAL_ERROR;
 80053f0:	e7d4      	b.n	800539c <HAL_I2S_Transmit_DMA+0x30>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80053f2:	2280      	movs	r2, #128	; 0x80
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	00d2      	lsls	r2, r2, #3
 80053f8:	69d9      	ldr	r1, [r3, #28]
 80053fa:	4211      	tst	r1, r2
 80053fc:	d102      	bne.n	8005404 <HAL_I2S_Transmit_DMA+0x98>
    __HAL_I2S_ENABLE(hi2s);
 80053fe:	69d9      	ldr	r1, [r3, #28]
 8005400:	430a      	orrs	r2, r1
 8005402:	61da      	str	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005404:	2202      	movs	r2, #2
 8005406:	6859      	ldr	r1, [r3, #4]
 8005408:	4211      	tst	r1, r2
 800540a:	d102      	bne.n	8005412 <HAL_I2S_Transmit_DMA+0xa6>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800540c:	6859      	ldr	r1, [r3, #4]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8005412:	2500      	movs	r5, #0
 8005414:	7035      	strb	r5, [r6, #0]
  return HAL_OK;
 8005416:	e7c1      	b.n	800539c <HAL_I2S_Transmit_DMA+0x30>
 8005418:	08005427 	.word	0x08005427
 800541c:	08005431 	.word	0x08005431
 8005420:	08005459 	.word	0x08005459

08005424 <HAL_I2S_TxHalfCpltCallback>:
 8005424:	4770      	bx	lr

08005426 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005426:	b510      	push	{r4, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005428:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800542a:	f7ff fffb 	bl	8005424 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800542e:	bd10      	pop	{r4, pc}

08005430 <I2S_DMATxCplt>:
{
 8005430:	0003      	movs	r3, r0
  if (hdma->Init.Mode == DMA_NORMAL)
 8005432:	69da      	ldr	r2, [r3, #28]
{
 8005434:	b510      	push	{r4, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005436:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hdma->Init.Mode == DMA_NORMAL)
 8005438:	2a00      	cmp	r2, #0
 800543a:	d109      	bne.n	8005450 <I2S_DMATxCplt+0x20>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800543c:	2402      	movs	r4, #2
 800543e:	6801      	ldr	r1, [r0, #0]
 8005440:	684b      	ldr	r3, [r1, #4]
 8005442:	43a3      	bics	r3, r4
 8005444:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8005446:	0003      	movs	r3, r0
    hi2s->TxXferCount = 0U;
 8005448:	8442      	strh	r2, [r0, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 800544a:	3335      	adds	r3, #53	; 0x35
 800544c:	3201      	adds	r2, #1
 800544e:	701a      	strb	r2, [r3, #0]
  HAL_I2S_TxCpltCallback(hi2s);
 8005450:	f7ff f8cc 	bl	80045ec <HAL_I2S_TxCpltCallback>
}
 8005454:	bd10      	pop	{r4, pc}

08005456 <HAL_I2S_ErrorCallback>:
 8005456:	4770      	bx	lr

08005458 <I2S_DMAError>:
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005458:	2103      	movs	r1, #3
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800545a:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800545c:	b510      	push	{r4, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800545e:	6802      	ldr	r2, [r0, #0]
 8005460:	6853      	ldr	r3, [r2, #4]
 8005462:	438b      	bics	r3, r1
 8005464:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	8443      	strh	r3, [r0, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 800546a:	8543      	strh	r3, [r0, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800546c:	0003      	movs	r3, r0
 800546e:	2201      	movs	r2, #1
 8005470:	3335      	adds	r3, #53	; 0x35
 8005472:	701a      	strb	r2, [r3, #0]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005474:	2308      	movs	r3, #8
 8005476:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005478:	4313      	orrs	r3, r2
 800547a:	6383      	str	r3, [r0, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800547c:	f7ff ffeb 	bl	8005456 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005480:	bd10      	pop	{r4, pc}
	...

08005484 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005484:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8005486:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <HAL_RCC_GetSysClockFreq+0x78>)
{
 8005488:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800548a:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800548c:	4022      	ands	r2, r4
 800548e:	2a08      	cmp	r2, #8
 8005490:	d031      	beq.n	80054f6 <HAL_RCC_GetSysClockFreq+0x72>
 8005492:	2a0c      	cmp	r2, #12
 8005494:	d009      	beq.n	80054aa <HAL_RCC_GetSysClockFreq+0x26>
 8005496:	2a04      	cmp	r2, #4
 8005498:	d125      	bne.n	80054e6 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800549a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800549c:	4b18      	ldr	r3, [pc, #96]	; (8005500 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800549e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80054a0:	17c0      	asrs	r0, r0, #31
 80054a2:	4018      	ands	r0, r3
 80054a4:	4b17      	ldr	r3, [pc, #92]	; (8005504 <HAL_RCC_GetSysClockFreq+0x80>)
 80054a6:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80054a8:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80054aa:	02a2      	lsls	r2, r4, #10
 80054ac:	4816      	ldr	r0, [pc, #88]	; (8005508 <HAL_RCC_GetSysClockFreq+0x84>)
 80054ae:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054b0:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054b2:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80054b4:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054b6:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80054b8:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ba:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80054bc:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054be:	4211      	tst	r1, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054c2:	4a12      	ldr	r2, [pc, #72]	; (800550c <HAL_RCC_GetSysClockFreq+0x88>)
 80054c4:	2300      	movs	r3, #0
 80054c6:	2100      	movs	r1, #0
 80054c8:	f7fa feca 	bl	8000260 <__aeabi_lmul>
 80054cc:	0022      	movs	r2, r4
 80054ce:	2300      	movs	r3, #0
 80054d0:	f7fa fea6 	bl	8000220 <__aeabi_uldivmod>
 80054d4:	e7e8      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	2310      	movs	r3, #16
 80054da:	421a      	tst	r2, r3
 80054dc:	d001      	beq.n	80054e2 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80054de:	4a0c      	ldr	r2, [pc, #48]	; (8005510 <HAL_RCC_GetSysClockFreq+0x8c>)
 80054e0:	e7f0      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <HAL_RCC_GetSysClockFreq+0x80>)
 80054e4:	e7ee      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80054e6:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80054e8:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80054ea:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80054f0:	3301      	adds	r3, #1
 80054f2:	4098      	lsls	r0, r3
      break;
 80054f4:	e7d8      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80054f6:	4805      	ldr	r0, [pc, #20]	; (800550c <HAL_RCC_GetSysClockFreq+0x88>)
 80054f8:	e7d6      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x24>
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	40021000 	.word	0x40021000
 8005500:	ff48e500 	.word	0xff48e500
 8005504:	00f42400 	.word	0x00f42400
 8005508:	080082c8 	.word	0x080082c8
 800550c:	007a1200 	.word	0x007a1200
 8005510:	003d0900 	.word	0x003d0900

08005514 <HAL_RCC_OscConfig>:
{
 8005514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005516:	0005      	movs	r5, r0
 8005518:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800551a:	2800      	cmp	r0, #0
 800551c:	d059      	beq.n	80055d2 <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800551e:	230c      	movs	r3, #12
 8005520:	4cb8      	ldr	r4, [pc, #736]	; (8005804 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005522:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005524:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005526:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005528:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	025b      	lsls	r3, r3, #9
 800552e:	0019      	movs	r1, r3
 8005530:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005532:	07d2      	lsls	r2, r2, #31
 8005534:	d441      	bmi.n	80055ba <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005536:	682b      	ldr	r3, [r5, #0]
 8005538:	079b      	lsls	r3, r3, #30
 800553a:	d500      	bpl.n	800553e <HAL_RCC_OscConfig+0x2a>
 800553c:	e08a      	b.n	8005654 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	06db      	lsls	r3, r3, #27
 8005542:	d528      	bpl.n	8005596 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005544:	2e00      	cmp	r6, #0
 8005546:	d000      	beq.n	800554a <HAL_RCC_OscConfig+0x36>
 8005548:	e0e3      	b.n	8005712 <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	059b      	lsls	r3, r3, #22
 800554e:	d502      	bpl.n	8005556 <HAL_RCC_OscConfig+0x42>
 8005550:	69eb      	ldr	r3, [r5, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d03d      	beq.n	80055d2 <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005556:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005558:	6862      	ldr	r2, [r4, #4]
 800555a:	49ab      	ldr	r1, [pc, #684]	; (8005808 <HAL_RCC_OscConfig+0x2f4>)
 800555c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800555e:	400a      	ands	r2, r1
 8005560:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005562:	0b5b      	lsrs	r3, r3, #13
 8005564:	3301      	adds	r3, #1
 8005566:	023f      	lsls	r7, r7, #8
 8005568:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800556a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800556c:	6861      	ldr	r1, [r4, #4]
 800556e:	6a2a      	ldr	r2, [r5, #32]
 8005570:	0209      	lsls	r1, r1, #8
 8005572:	0a09      	lsrs	r1, r1, #8
 8005574:	0612      	lsls	r2, r2, #24
 8005576:	430a      	orrs	r2, r1
 8005578:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800557a:	68e1      	ldr	r1, [r4, #12]
 800557c:	48a3      	ldr	r0, [pc, #652]	; (800580c <HAL_RCC_OscConfig+0x2f8>)
 800557e:	060b      	lsls	r3, r1, #24
 8005580:	0f1b      	lsrs	r3, r3, #28
 8005582:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005584:	4aa2      	ldr	r2, [pc, #648]	; (8005810 <HAL_RCC_OscConfig+0x2fc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005586:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8005588:	4ba2      	ldr	r3, [pc, #648]	; (8005814 <HAL_RCC_OscConfig+0x300>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800558a:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	f7ff fc23 	bl	8004dd8 <HAL_InitTick>
        if(status != HAL_OK)
 8005592:	2800      	cmp	r0, #0
 8005594:	d134      	bne.n	8005600 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	071b      	lsls	r3, r3, #28
 800559a:	d500      	bpl.n	800559e <HAL_RCC_OscConfig+0x8a>
 800559c:	e0f0      	b.n	8005780 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800559e:	682b      	ldr	r3, [r5, #0]
 80055a0:	075b      	lsls	r3, r3, #29
 80055a2:	d500      	bpl.n	80055a6 <HAL_RCC_OscConfig+0x92>
 80055a4:	e112      	b.n	80057cc <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	069b      	lsls	r3, r3, #26
 80055aa:	d500      	bpl.n	80055ae <HAL_RCC_OscConfig+0x9a>
 80055ac:	e197      	b.n	80058de <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d000      	beq.n	80055b6 <HAL_RCC_OscConfig+0xa2>
 80055b4:	e1c6      	b.n	8005944 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 80055b6:	2000      	movs	r0, #0
 80055b8:	e022      	b.n	8005600 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055ba:	2e08      	cmp	r6, #8
 80055bc:	d003      	beq.n	80055c6 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055be:	2e0c      	cmp	r6, #12
 80055c0:	d109      	bne.n	80055d6 <HAL_RCC_OscConfig+0xc2>
 80055c2:	2f00      	cmp	r7, #0
 80055c4:	d007      	beq.n	80055d6 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	039b      	lsls	r3, r3, #14
 80055ca:	d5b4      	bpl.n	8005536 <HAL_RCC_OscConfig+0x22>
 80055cc:	686b      	ldr	r3, [r5, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1b1      	bne.n	8005536 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 80055d2:	2001      	movs	r0, #1
 80055d4:	e014      	b.n	8005600 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055d6:	686a      	ldr	r2, [r5, #4]
 80055d8:	428a      	cmp	r2, r1
 80055da:	d113      	bne.n	8005604 <HAL_RCC_OscConfig+0xf0>
 80055dc:	6822      	ldr	r2, [r4, #0]
 80055de:	4313      	orrs	r3, r2
 80055e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80055e2:	f7ff fc3d 	bl	8004e60 <HAL_GetTick>
 80055e6:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055e8:	2280      	movs	r2, #128	; 0x80
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	0292      	lsls	r2, r2, #10
 80055ee:	4213      	tst	r3, r2
 80055f0:	d1a1      	bne.n	8005536 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f2:	f7ff fc35 	bl	8004e60 <HAL_GetTick>
 80055f6:	9b00      	ldr	r3, [sp, #0]
 80055f8:	1ac0      	subs	r0, r0, r3
 80055fa:	2864      	cmp	r0, #100	; 0x64
 80055fc:	d9f4      	bls.n	80055e8 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 80055fe:	2003      	movs	r0, #3
}
 8005600:	b005      	add	sp, #20
 8005602:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005604:	21a0      	movs	r1, #160	; 0xa0
 8005606:	02c9      	lsls	r1, r1, #11
 8005608:	428a      	cmp	r2, r1
 800560a:	d105      	bne.n	8005618 <HAL_RCC_OscConfig+0x104>
 800560c:	2280      	movs	r2, #128	; 0x80
 800560e:	6821      	ldr	r1, [r4, #0]
 8005610:	02d2      	lsls	r2, r2, #11
 8005612:	430a      	orrs	r2, r1
 8005614:	6022      	str	r2, [r4, #0]
 8005616:	e7e1      	b.n	80055dc <HAL_RCC_OscConfig+0xc8>
 8005618:	6821      	ldr	r1, [r4, #0]
 800561a:	487f      	ldr	r0, [pc, #508]	; (8005818 <HAL_RCC_OscConfig+0x304>)
 800561c:	4001      	ands	r1, r0
 800561e:	6021      	str	r1, [r4, #0]
 8005620:	6821      	ldr	r1, [r4, #0]
 8005622:	400b      	ands	r3, r1
 8005624:	9303      	str	r3, [sp, #12]
 8005626:	9b03      	ldr	r3, [sp, #12]
 8005628:	497c      	ldr	r1, [pc, #496]	; (800581c <HAL_RCC_OscConfig+0x308>)
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	400b      	ands	r3, r1
 800562e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005630:	2a00      	cmp	r2, #0
 8005632:	d1d6      	bne.n	80055e2 <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8005634:	f7ff fc14 	bl	8004e60 <HAL_GetTick>
 8005638:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800563a:	2280      	movs	r2, #128	; 0x80
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	0292      	lsls	r2, r2, #10
 8005640:	4213      	tst	r3, r2
 8005642:	d100      	bne.n	8005646 <HAL_RCC_OscConfig+0x132>
 8005644:	e777      	b.n	8005536 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005646:	f7ff fc0b 	bl	8004e60 <HAL_GetTick>
 800564a:	9b00      	ldr	r3, [sp, #0]
 800564c:	1ac0      	subs	r0, r0, r3
 800564e:	2864      	cmp	r0, #100	; 0x64
 8005650:	d9f3      	bls.n	800563a <HAL_RCC_OscConfig+0x126>
 8005652:	e7d4      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005654:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8005656:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005658:	4213      	tst	r3, r2
 800565a:	d003      	beq.n	8005664 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800565c:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800565e:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005660:	4311      	orrs	r1, r2
 8005662:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005664:	2e04      	cmp	r6, #4
 8005666:	d003      	beq.n	8005670 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005668:	2e0c      	cmp	r6, #12
 800566a:	d124      	bne.n	80056b6 <HAL_RCC_OscConfig+0x1a2>
 800566c:	2f00      	cmp	r7, #0
 800566e:	d122      	bne.n	80056b6 <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005670:	6822      	ldr	r2, [r4, #0]
 8005672:	0752      	lsls	r2, r2, #29
 8005674:	d501      	bpl.n	800567a <HAL_RCC_OscConfig+0x166>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0ab      	beq.n	80055d2 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567a:	6861      	ldr	r1, [r4, #4]
 800567c:	692a      	ldr	r2, [r5, #16]
 800567e:	4868      	ldr	r0, [pc, #416]	; (8005820 <HAL_RCC_OscConfig+0x30c>)
 8005680:	0212      	lsls	r2, r2, #8
 8005682:	4001      	ands	r1, r0
 8005684:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005686:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005688:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	438a      	bics	r2, r1
 800568e:	4313      	orrs	r3, r2
 8005690:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005692:	f7ff fef7 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8005696:	68e3      	ldr	r3, [r4, #12]
 8005698:	4a5c      	ldr	r2, [pc, #368]	; (800580c <HAL_RCC_OscConfig+0x2f8>)
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	0f1b      	lsrs	r3, r3, #28
 800569e:	5cd3      	ldrb	r3, [r2, r3]
 80056a0:	495b      	ldr	r1, [pc, #364]	; (8005810 <HAL_RCC_OscConfig+0x2fc>)
 80056a2:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 80056a4:	4b5b      	ldr	r3, [pc, #364]	; (8005814 <HAL_RCC_OscConfig+0x300>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056a6:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	f7ff fb95 	bl	8004dd8 <HAL_InitTick>
      if(status != HAL_OK)
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d100      	bne.n	80056b4 <HAL_RCC_OscConfig+0x1a0>
 80056b2:	e744      	b.n	800553e <HAL_RCC_OscConfig+0x2a>
 80056b4:	e7a4      	b.n	8005600 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d019      	beq.n	80056ee <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80056ba:	2109      	movs	r1, #9
 80056bc:	6822      	ldr	r2, [r4, #0]
 80056be:	438a      	bics	r2, r1
 80056c0:	4313      	orrs	r3, r2
 80056c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80056c4:	f7ff fbcc 	bl	8004e60 <HAL_GetTick>
 80056c8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ca:	2204      	movs	r2, #4
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	4213      	tst	r3, r2
 80056d0:	d007      	beq.n	80056e2 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d2:	6862      	ldr	r2, [r4, #4]
 80056d4:	692b      	ldr	r3, [r5, #16]
 80056d6:	4952      	ldr	r1, [pc, #328]	; (8005820 <HAL_RCC_OscConfig+0x30c>)
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	400a      	ands	r2, r1
 80056dc:	4313      	orrs	r3, r2
 80056de:	6063      	str	r3, [r4, #4]
 80056e0:	e72d      	b.n	800553e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056e2:	f7ff fbbd 	bl	8004e60 <HAL_GetTick>
 80056e6:	1bc0      	subs	r0, r0, r7
 80056e8:	2802      	cmp	r0, #2
 80056ea:	d9ee      	bls.n	80056ca <HAL_RCC_OscConfig+0x1b6>
 80056ec:	e787      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 80056ee:	2201      	movs	r2, #1
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	4393      	bics	r3, r2
 80056f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80056f6:	f7ff fbb3 	bl	8004e60 <HAL_GetTick>
 80056fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056fc:	2204      	movs	r2, #4
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	4213      	tst	r3, r2
 8005702:	d100      	bne.n	8005706 <HAL_RCC_OscConfig+0x1f2>
 8005704:	e71b      	b.n	800553e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005706:	f7ff fbab 	bl	8004e60 <HAL_GetTick>
 800570a:	1bc0      	subs	r0, r0, r7
 800570c:	2802      	cmp	r0, #2
 800570e:	d9f5      	bls.n	80056fc <HAL_RCC_OscConfig+0x1e8>
 8005710:	e775      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005712:	69eb      	ldr	r3, [r5, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d020      	beq.n	800575a <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	4313      	orrs	r3, r2
 8005720:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005722:	f7ff fb9d 	bl	8004e60 <HAL_GetTick>
 8005726:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005728:	2280      	movs	r2, #128	; 0x80
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	0092      	lsls	r2, r2, #2
 800572e:	4213      	tst	r3, r2
 8005730:	d00d      	beq.n	800574e <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005732:	6863      	ldr	r3, [r4, #4]
 8005734:	4a34      	ldr	r2, [pc, #208]	; (8005808 <HAL_RCC_OscConfig+0x2f4>)
 8005736:	4013      	ands	r3, r2
 8005738:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800573a:	4313      	orrs	r3, r2
 800573c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800573e:	6862      	ldr	r2, [r4, #4]
 8005740:	6a2b      	ldr	r3, [r5, #32]
 8005742:	0212      	lsls	r2, r2, #8
 8005744:	061b      	lsls	r3, r3, #24
 8005746:	0a12      	lsrs	r2, r2, #8
 8005748:	4313      	orrs	r3, r2
 800574a:	6063      	str	r3, [r4, #4]
 800574c:	e723      	b.n	8005596 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800574e:	f7ff fb87 	bl	8004e60 <HAL_GetTick>
 8005752:	1bc0      	subs	r0, r0, r7
 8005754:	2802      	cmp	r0, #2
 8005756:	d9e7      	bls.n	8005728 <HAL_RCC_OscConfig+0x214>
 8005758:	e751      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	4a31      	ldr	r2, [pc, #196]	; (8005824 <HAL_RCC_OscConfig+0x310>)
 800575e:	4013      	ands	r3, r2
 8005760:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005762:	f7ff fb7d 	bl	8004e60 <HAL_GetTick>
 8005766:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005768:	2280      	movs	r2, #128	; 0x80
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	0092      	lsls	r2, r2, #2
 800576e:	4213      	tst	r3, r2
 8005770:	d100      	bne.n	8005774 <HAL_RCC_OscConfig+0x260>
 8005772:	e710      	b.n	8005596 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005774:	f7ff fb74 	bl	8004e60 <HAL_GetTick>
 8005778:	1bc0      	subs	r0, r0, r7
 800577a:	2802      	cmp	r0, #2
 800577c:	d9f4      	bls.n	8005768 <HAL_RCC_OscConfig+0x254>
 800577e:	e73e      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005780:	696a      	ldr	r2, [r5, #20]
 8005782:	2301      	movs	r3, #1
 8005784:	2a00      	cmp	r2, #0
 8005786:	d010      	beq.n	80057aa <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8005788:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800578a:	4313      	orrs	r3, r2
 800578c:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800578e:	f7ff fb67 	bl	8004e60 <HAL_GetTick>
 8005792:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005794:	2202      	movs	r2, #2
 8005796:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005798:	4213      	tst	r3, r2
 800579a:	d000      	beq.n	800579e <HAL_RCC_OscConfig+0x28a>
 800579c:	e6ff      	b.n	800559e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800579e:	f7ff fb5f 	bl	8004e60 <HAL_GetTick>
 80057a2:	1bc0      	subs	r0, r0, r7
 80057a4:	2802      	cmp	r0, #2
 80057a6:	d9f5      	bls.n	8005794 <HAL_RCC_OscConfig+0x280>
 80057a8:	e729      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 80057aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80057ac:	439a      	bics	r2, r3
 80057ae:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80057b0:	f7ff fb56 	bl	8004e60 <HAL_GetTick>
 80057b4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057b6:	2202      	movs	r2, #2
 80057b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80057ba:	4213      	tst	r3, r2
 80057bc:	d100      	bne.n	80057c0 <HAL_RCC_OscConfig+0x2ac>
 80057be:	e6ee      	b.n	800559e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057c0:	f7ff fb4e 	bl	8004e60 <HAL_GetTick>
 80057c4:	1bc0      	subs	r0, r0, r7
 80057c6:	2802      	cmp	r0, #2
 80057c8:	d9f5      	bls.n	80057b6 <HAL_RCC_OscConfig+0x2a2>
 80057ca:	e718      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057cc:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80057ce:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057d2:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80057d4:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d6:	421a      	tst	r2, r3
 80057d8:	d104      	bne.n	80057e4 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80057da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057dc:	4313      	orrs	r3, r2
 80057de:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80057e0:	2301      	movs	r3, #1
 80057e2:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e4:	2280      	movs	r2, #128	; 0x80
 80057e6:	4f10      	ldr	r7, [pc, #64]	; (8005828 <HAL_RCC_OscConfig+0x314>)
 80057e8:	0052      	lsls	r2, r2, #1
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	4213      	tst	r3, r2
 80057ee:	d01d      	beq.n	800582c <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	68ab      	ldr	r3, [r5, #8]
 80057f4:	0052      	lsls	r2, r2, #1
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d12c      	bne.n	8005854 <HAL_RCC_OscConfig+0x340>
 80057fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80057fc:	4313      	orrs	r3, r2
 80057fe:	6523      	str	r3, [r4, #80]	; 0x50
 8005800:	e04d      	b.n	800589e <HAL_RCC_OscConfig+0x38a>
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	40021000 	.word	0x40021000
 8005808:	ffff1fff 	.word	0xffff1fff
 800580c:	080082b8 	.word	0x080082b8
 8005810:	20000104 	.word	0x20000104
 8005814:	2000010c 	.word	0x2000010c
 8005818:	fffeffff 	.word	0xfffeffff
 800581c:	fffbffff 	.word	0xfffbffff
 8005820:	ffffe0ff 	.word	0xffffe0ff
 8005824:	fffffeff 	.word	0xfffffeff
 8005828:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800582c:	2280      	movs	r2, #128	; 0x80
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	0052      	lsls	r2, r2, #1
 8005832:	4313      	orrs	r3, r2
 8005834:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005836:	f7ff fb13 	bl	8004e60 <HAL_GetTick>
 800583a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583c:	2280      	movs	r2, #128	; 0x80
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	0052      	lsls	r2, r2, #1
 8005842:	4213      	tst	r3, r2
 8005844:	d1d4      	bne.n	80057f0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005846:	f7ff fb0b 	bl	8004e60 <HAL_GetTick>
 800584a:	9b01      	ldr	r3, [sp, #4]
 800584c:	1ac0      	subs	r0, r0, r3
 800584e:	2864      	cmp	r0, #100	; 0x64
 8005850:	d9f4      	bls.n	800583c <HAL_RCC_OscConfig+0x328>
 8005852:	e6d4      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005854:	2b00      	cmp	r3, #0
 8005856:	d116      	bne.n	8005886 <HAL_RCC_OscConfig+0x372>
 8005858:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800585a:	4a6b      	ldr	r2, [pc, #428]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 800585c:	4013      	ands	r3, r2
 800585e:	6523      	str	r3, [r4, #80]	; 0x50
 8005860:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005862:	4a6a      	ldr	r2, [pc, #424]	; (8005a0c <HAL_RCC_OscConfig+0x4f8>)
 8005864:	4013      	ands	r3, r2
 8005866:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005868:	f7ff fafa 	bl	8004e60 <HAL_GetTick>
 800586c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005872:	0092      	lsls	r2, r2, #2
 8005874:	4213      	tst	r3, r2
 8005876:	d01a      	beq.n	80058ae <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005878:	f7ff faf2 	bl	8004e60 <HAL_GetTick>
 800587c:	4b64      	ldr	r3, [pc, #400]	; (8005a10 <HAL_RCC_OscConfig+0x4fc>)
 800587e:	1bc0      	subs	r0, r0, r7
 8005880:	4298      	cmp	r0, r3
 8005882:	d9f4      	bls.n	800586e <HAL_RCC_OscConfig+0x35a>
 8005884:	e6bb      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005886:	21a0      	movs	r1, #160	; 0xa0
 8005888:	00c9      	lsls	r1, r1, #3
 800588a:	428b      	cmp	r3, r1
 800588c:	d118      	bne.n	80058c0 <HAL_RCC_OscConfig+0x3ac>
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	430b      	orrs	r3, r1
 8005896:	6523      	str	r3, [r4, #80]	; 0x50
 8005898:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800589a:	431a      	orrs	r2, r3
 800589c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800589e:	f7ff fadf 	bl	8004e60 <HAL_GetTick>
 80058a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058a4:	2280      	movs	r2, #128	; 0x80
 80058a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058a8:	0092      	lsls	r2, r2, #2
 80058aa:	4213      	tst	r3, r2
 80058ac:	d010      	beq.n	80058d0 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d000      	beq.n	80058b6 <HAL_RCC_OscConfig+0x3a2>
 80058b4:	e677      	b.n	80055a6 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058b8:	4a56      	ldr	r2, [pc, #344]	; (8005a14 <HAL_RCC_OscConfig+0x500>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80058be:	e672      	b.n	80055a6 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058c2:	4a51      	ldr	r2, [pc, #324]	; (8005a08 <HAL_RCC_OscConfig+0x4f4>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	6523      	str	r3, [r4, #80]	; 0x50
 80058c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058ca:	4a50      	ldr	r2, [pc, #320]	; (8005a0c <HAL_RCC_OscConfig+0x4f8>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	e796      	b.n	80057fe <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058d0:	f7ff fac6 	bl	8004e60 <HAL_GetTick>
 80058d4:	4b4e      	ldr	r3, [pc, #312]	; (8005a10 <HAL_RCC_OscConfig+0x4fc>)
 80058d6:	1bc0      	subs	r0, r0, r7
 80058d8:	4298      	cmp	r0, r3
 80058da:	d9e3      	bls.n	80058a4 <HAL_RCC_OscConfig+0x390>
 80058dc:	e68f      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058de:	69aa      	ldr	r2, [r5, #24]
 80058e0:	2101      	movs	r1, #1
 80058e2:	4b4d      	ldr	r3, [pc, #308]	; (8005a18 <HAL_RCC_OscConfig+0x504>)
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	d018      	beq.n	800591a <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 80058e8:	68a2      	ldr	r2, [r4, #8]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	60a2      	str	r2, [r4, #8]
 80058ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80058f0:	430a      	orrs	r2, r1
 80058f2:	6362      	str	r2, [r4, #52]	; 0x34
 80058f4:	2280      	movs	r2, #128	; 0x80
 80058f6:	6a19      	ldr	r1, [r3, #32]
 80058f8:	0192      	lsls	r2, r2, #6
 80058fa:	430a      	orrs	r2, r1
 80058fc:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80058fe:	f7ff faaf 	bl	8004e60 <HAL_GetTick>
 8005902:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005904:	2202      	movs	r2, #2
 8005906:	68a3      	ldr	r3, [r4, #8]
 8005908:	4213      	tst	r3, r2
 800590a:	d000      	beq.n	800590e <HAL_RCC_OscConfig+0x3fa>
 800590c:	e64f      	b.n	80055ae <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800590e:	f7ff faa7 	bl	8004e60 <HAL_GetTick>
 8005912:	1bc0      	subs	r0, r0, r7
 8005914:	2802      	cmp	r0, #2
 8005916:	d9f5      	bls.n	8005904 <HAL_RCC_OscConfig+0x3f0>
 8005918:	e671      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 800591a:	68a2      	ldr	r2, [r4, #8]
 800591c:	438a      	bics	r2, r1
 800591e:	60a2      	str	r2, [r4, #8]
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	493e      	ldr	r1, [pc, #248]	; (8005a1c <HAL_RCC_OscConfig+0x508>)
 8005924:	400a      	ands	r2, r1
 8005926:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8005928:	f7ff fa9a 	bl	8004e60 <HAL_GetTick>
 800592c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800592e:	2202      	movs	r2, #2
 8005930:	68a3      	ldr	r3, [r4, #8]
 8005932:	4213      	tst	r3, r2
 8005934:	d100      	bne.n	8005938 <HAL_RCC_OscConfig+0x424>
 8005936:	e63a      	b.n	80055ae <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005938:	f7ff fa92 	bl	8004e60 <HAL_GetTick>
 800593c:	1bc0      	subs	r0, r0, r7
 800593e:	2802      	cmp	r0, #2
 8005940:	d9f5      	bls.n	800592e <HAL_RCC_OscConfig+0x41a>
 8005942:	e65c      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005944:	2e0c      	cmp	r6, #12
 8005946:	d043      	beq.n	80059d0 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005948:	4a35      	ldr	r2, [pc, #212]	; (8005a20 <HAL_RCC_OscConfig+0x50c>)
 800594a:	2b02      	cmp	r3, #2
 800594c:	d12e      	bne.n	80059ac <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 800594e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005950:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005952:	4013      	ands	r3, r2
 8005954:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005956:	f7ff fa83 	bl	8004e60 <HAL_GetTick>
 800595a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800595c:	04bf      	lsls	r7, r7, #18
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	423b      	tst	r3, r7
 8005962:	d11d      	bne.n	80059a0 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005964:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005966:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005968:	68e2      	ldr	r2, [r4, #12]
 800596a:	430b      	orrs	r3, r1
 800596c:	492d      	ldr	r1, [pc, #180]	; (8005a24 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800596e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005970:	400a      	ands	r2, r1
 8005972:	4313      	orrs	r3, r2
 8005974:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005976:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005978:	4313      	orrs	r3, r2
 800597a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	6822      	ldr	r2, [r4, #0]
 8005980:	045b      	lsls	r3, r3, #17
 8005982:	4313      	orrs	r3, r2
 8005984:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005986:	f7ff fa6b 	bl	8004e60 <HAL_GetTick>
 800598a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	4233      	tst	r3, r6
 8005990:	d000      	beq.n	8005994 <HAL_RCC_OscConfig+0x480>
 8005992:	e610      	b.n	80055b6 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005994:	f7ff fa64 	bl	8004e60 <HAL_GetTick>
 8005998:	1b40      	subs	r0, r0, r5
 800599a:	2802      	cmp	r0, #2
 800599c:	d9f6      	bls.n	800598c <HAL_RCC_OscConfig+0x478>
 800599e:	e62e      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a0:	f7ff fa5e 	bl	8004e60 <HAL_GetTick>
 80059a4:	1b80      	subs	r0, r0, r6
 80059a6:	2802      	cmp	r0, #2
 80059a8:	d9d9      	bls.n	800595e <HAL_RCC_OscConfig+0x44a>
 80059aa:	e628      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 80059ac:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80059ae:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80059b0:	4013      	ands	r3, r2
 80059b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80059b4:	f7ff fa54 	bl	8004e60 <HAL_GetTick>
 80059b8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80059ba:	04b6      	lsls	r6, r6, #18
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	4233      	tst	r3, r6
 80059c0:	d100      	bne.n	80059c4 <HAL_RCC_OscConfig+0x4b0>
 80059c2:	e5f8      	b.n	80055b6 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c4:	f7ff fa4c 	bl	8004e60 <HAL_GetTick>
 80059c8:	1b40      	subs	r0, r0, r5
 80059ca:	2802      	cmp	r0, #2
 80059cc:	d9f6      	bls.n	80059bc <HAL_RCC_OscConfig+0x4a8>
 80059ce:	e616      	b.n	80055fe <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 80059d0:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d100      	bne.n	80059d8 <HAL_RCC_OscConfig+0x4c4>
 80059d6:	e613      	b.n	8005600 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d8:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80059da:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059dc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80059de:	0252      	lsls	r2, r2, #9
 80059e0:	401a      	ands	r2, r3
 80059e2:	428a      	cmp	r2, r1
 80059e4:	d000      	beq.n	80059e8 <HAL_RCC_OscConfig+0x4d4>
 80059e6:	e5f4      	b.n	80055d2 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059e8:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059ec:	0392      	lsls	r2, r2, #14
 80059ee:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f0:	428a      	cmp	r2, r1
 80059f2:	d000      	beq.n	80059f6 <HAL_RCC_OscConfig+0x4e2>
 80059f4:	e5ed      	b.n	80055d2 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80059f6:	22c0      	movs	r2, #192	; 0xc0
 80059f8:	0412      	lsls	r2, r2, #16
 80059fa:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059fc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d100      	bne.n	8005a04 <HAL_RCC_OscConfig+0x4f0>
 8005a02:	e5d8      	b.n	80055b6 <HAL_RCC_OscConfig+0xa2>
 8005a04:	e5e5      	b.n	80055d2 <HAL_RCC_OscConfig+0xbe>
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	fffffeff 	.word	0xfffffeff
 8005a0c:	fffffbff 	.word	0xfffffbff
 8005a10:	00001388 	.word	0x00001388
 8005a14:	efffffff 	.word	0xefffffff
 8005a18:	40010000 	.word	0x40010000
 8005a1c:	ffffdfff 	.word	0xffffdfff
 8005a20:	feffffff 	.word	0xfeffffff
 8005a24:	ff02ffff 	.word	0xff02ffff

08005a28 <HAL_RCC_ClockConfig>:
{
 8005a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a2a:	1e04      	subs	r4, r0, #0
 8005a2c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8005a30:	2001      	movs	r0, #1
}
 8005a32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a34:	2501      	movs	r5, #1
 8005a36:	4e5b      	ldr	r6, [pc, #364]	; (8005ba4 <HAL_RCC_ClockConfig+0x17c>)
 8005a38:	9a01      	ldr	r2, [sp, #4]
 8005a3a:	6833      	ldr	r3, [r6, #0]
 8005a3c:	402b      	ands	r3, r5
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d331      	bcc.n	8005aa6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a42:	6822      	ldr	r2, [r4, #0]
 8005a44:	0793      	lsls	r3, r2, #30
 8005a46:	d443      	bmi.n	8005ad0 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a48:	07d2      	lsls	r2, r2, #31
 8005a4a:	d449      	bmi.n	8005ae0 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a4c:	2501      	movs	r5, #1
 8005a4e:	6833      	ldr	r3, [r6, #0]
 8005a50:	9a01      	ldr	r2, [sp, #4]
 8005a52:	402b      	ands	r3, r5
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d909      	bls.n	8005a6c <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a58:	6833      	ldr	r3, [r6, #0]
 8005a5a:	43ab      	bics	r3, r5
 8005a5c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005a5e:	f7ff f9ff 	bl	8004e60 <HAL_GetTick>
 8005a62:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a64:	6833      	ldr	r3, [r6, #0]
 8005a66:	422b      	tst	r3, r5
 8005a68:	d000      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x44>
 8005a6a:	e08c      	b.n	8005b86 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	4d4e      	ldr	r5, [pc, #312]	; (8005ba8 <HAL_RCC_ClockConfig+0x180>)
 8005a70:	0753      	lsls	r3, r2, #29
 8005a72:	d500      	bpl.n	8005a76 <HAL_RCC_ClockConfig+0x4e>
 8005a74:	e08f      	b.n	8005b96 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a76:	0712      	lsls	r2, r2, #28
 8005a78:	d506      	bpl.n	8005a88 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a7a:	68ea      	ldr	r2, [r5, #12]
 8005a7c:	6923      	ldr	r3, [r4, #16]
 8005a7e:	494b      	ldr	r1, [pc, #300]	; (8005bac <HAL_RCC_ClockConfig+0x184>)
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	400a      	ands	r2, r1
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a88:	f7ff fcfc 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8005a8c:	68eb      	ldr	r3, [r5, #12]
 8005a8e:	4a48      	ldr	r2, [pc, #288]	; (8005bb0 <HAL_RCC_ClockConfig+0x188>)
 8005a90:	061b      	lsls	r3, r3, #24
 8005a92:	0f1b      	lsrs	r3, r3, #28
 8005a94:	5cd3      	ldrb	r3, [r2, r3]
 8005a96:	4947      	ldr	r1, [pc, #284]	; (8005bb4 <HAL_RCC_ClockConfig+0x18c>)
 8005a98:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8005a9a:	4b47      	ldr	r3, [pc, #284]	; (8005bb8 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a9c:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8005a9e:	6818      	ldr	r0, [r3, #0]
 8005aa0:	f7ff f99a 	bl	8004dd8 <HAL_InitTick>
  if(status != HAL_OK)
 8005aa4:	e7c5      	b.n	8005a32 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa6:	6833      	ldr	r3, [r6, #0]
 8005aa8:	9a01      	ldr	r2, [sp, #4]
 8005aaa:	43ab      	bics	r3, r5
 8005aac:	4313      	orrs	r3, r2
 8005aae:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005ab0:	f7ff f9d6 	bl	8004e60 <HAL_GetTick>
 8005ab4:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab6:	6833      	ldr	r3, [r6, #0]
 8005ab8:	9a01      	ldr	r2, [sp, #4]
 8005aba:	402b      	ands	r3, r5
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d0c0      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac0:	f7ff f9ce 	bl	8004e60 <HAL_GetTick>
 8005ac4:	4b3d      	ldr	r3, [pc, #244]	; (8005bbc <HAL_RCC_ClockConfig+0x194>)
 8005ac6:	1bc0      	subs	r0, r0, r7
 8005ac8:	4298      	cmp	r0, r3
 8005aca:	d9f4      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8005acc:	2003      	movs	r0, #3
 8005ace:	e7b0      	b.n	8005a32 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad0:	20f0      	movs	r0, #240	; 0xf0
 8005ad2:	4935      	ldr	r1, [pc, #212]	; (8005ba8 <HAL_RCC_ClockConfig+0x180>)
 8005ad4:	68cb      	ldr	r3, [r1, #12]
 8005ad6:	4383      	bics	r3, r0
 8005ad8:	68a0      	ldr	r0, [r4, #8]
 8005ada:	4303      	orrs	r3, r0
 8005adc:	60cb      	str	r3, [r1, #12]
 8005ade:	e7b3      	b.n	8005a48 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae0:	4d31      	ldr	r5, [pc, #196]	; (8005ba8 <HAL_RCC_ClockConfig+0x180>)
 8005ae2:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ae4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae6:	2a02      	cmp	r2, #2
 8005ae8:	d118      	bne.n	8005b1c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005aea:	039b      	lsls	r3, r3, #14
 8005aec:	d5a0      	bpl.n	8005a30 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aee:	2103      	movs	r1, #3
 8005af0:	68eb      	ldr	r3, [r5, #12]
 8005af2:	438b      	bics	r3, r1
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8005af8:	f7ff f9b2 	bl	8004e60 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005afc:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8005afe:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d118      	bne.n	8005b36 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b04:	220c      	movs	r2, #12
 8005b06:	68eb      	ldr	r3, [r5, #12]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d09e      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b0e:	f7ff f9a7 	bl	8004e60 <HAL_GetTick>
 8005b12:	4b2a      	ldr	r3, [pc, #168]	; (8005bbc <HAL_RCC_ClockConfig+0x194>)
 8005b14:	1bc0      	subs	r0, r0, r7
 8005b16:	4298      	cmp	r0, r3
 8005b18:	d9f4      	bls.n	8005b04 <HAL_RCC_ClockConfig+0xdc>
 8005b1a:	e7d7      	b.n	8005acc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b1c:	2a03      	cmp	r2, #3
 8005b1e:	d102      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b20:	019b      	lsls	r3, r3, #6
 8005b22:	d4e4      	bmi.n	8005aee <HAL_RCC_ClockConfig+0xc6>
 8005b24:	e784      	b.n	8005a30 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b26:	2a01      	cmp	r2, #1
 8005b28:	d102      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b2a:	075b      	lsls	r3, r3, #29
 8005b2c:	d4df      	bmi.n	8005aee <HAL_RCC_ClockConfig+0xc6>
 8005b2e:	e77f      	b.n	8005a30 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005b30:	059b      	lsls	r3, r3, #22
 8005b32:	d4dc      	bmi.n	8005aee <HAL_RCC_ClockConfig+0xc6>
 8005b34:	e77c      	b.n	8005a30 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d10b      	bne.n	8005b52 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b3a:	220c      	movs	r2, #12
 8005b3c:	68eb      	ldr	r3, [r5, #12]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d083      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b44:	f7ff f98c 	bl	8004e60 <HAL_GetTick>
 8005b48:	4b1c      	ldr	r3, [pc, #112]	; (8005bbc <HAL_RCC_ClockConfig+0x194>)
 8005b4a:	1bc0      	subs	r0, r0, r7
 8005b4c:	4298      	cmp	r0, r3
 8005b4e:	d9f4      	bls.n	8005b3a <HAL_RCC_ClockConfig+0x112>
 8005b50:	e7bc      	b.n	8005acc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d011      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b56:	220c      	movs	r2, #12
 8005b58:	68eb      	ldr	r3, [r5, #12]
 8005b5a:	4213      	tst	r3, r2
 8005b5c:	d100      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x138>
 8005b5e:	e775      	b.n	8005a4c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b60:	f7ff f97e 	bl	8004e60 <HAL_GetTick>
 8005b64:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <HAL_RCC_ClockConfig+0x194>)
 8005b66:	1bc0      	subs	r0, r0, r7
 8005b68:	4298      	cmp	r0, r3
 8005b6a:	d9f4      	bls.n	8005b56 <HAL_RCC_ClockConfig+0x12e>
 8005b6c:	e7ae      	b.n	8005acc <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b6e:	f7ff f977 	bl	8004e60 <HAL_GetTick>
 8005b72:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <HAL_RCC_ClockConfig+0x194>)
 8005b74:	1bc0      	subs	r0, r0, r7
 8005b76:	4298      	cmp	r0, r3
 8005b78:	d8a8      	bhi.n	8005acc <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b7a:	220c      	movs	r2, #12
 8005b7c:	68eb      	ldr	r3, [r5, #12]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d1f4      	bne.n	8005b6e <HAL_RCC_ClockConfig+0x146>
 8005b84:	e762      	b.n	8005a4c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b86:	f7ff f96b 	bl	8004e60 <HAL_GetTick>
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <HAL_RCC_ClockConfig+0x194>)
 8005b8c:	1bc0      	subs	r0, r0, r7
 8005b8e:	4298      	cmp	r0, r3
 8005b90:	d800      	bhi.n	8005b94 <HAL_RCC_ClockConfig+0x16c>
 8005b92:	e767      	b.n	8005a64 <HAL_RCC_ClockConfig+0x3c>
 8005b94:	e79a      	b.n	8005acc <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b96:	68eb      	ldr	r3, [r5, #12]
 8005b98:	4909      	ldr	r1, [pc, #36]	; (8005bc0 <HAL_RCC_ClockConfig+0x198>)
 8005b9a:	400b      	ands	r3, r1
 8005b9c:	68e1      	ldr	r1, [r4, #12]
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	60eb      	str	r3, [r5, #12]
 8005ba2:	e768      	b.n	8005a76 <HAL_RCC_ClockConfig+0x4e>
 8005ba4:	40022000 	.word	0x40022000
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	ffffc7ff 	.word	0xffffc7ff
 8005bb0:	080082b8 	.word	0x080082b8
 8005bb4:	20000104 	.word	0x20000104
 8005bb8:	2000010c 	.word	0x2000010c
 8005bbc:	00001388 	.word	0x00001388
 8005bc0:	fffff8ff 	.word	0xfffff8ff

08005bc4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	0004      	movs	r4, r0
  /* Check the RNG handle allocation */
  if (hrng == NULL)
  {
    return HAL_ERROR;
 8005bc8:	2001      	movs	r0, #1
  if (hrng == NULL)
 8005bca:	2c00      	cmp	r4, #0
 8005bcc:	d012      	beq.n	8005bf4 <HAL_RNG_Init+0x30>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005bce:	7963      	ldrb	r3, [r4, #5]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <HAL_RNG_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005bd6:	0020      	movs	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 8005bd8:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 8005bda:	f7fe ff3b 	bl	8004a54 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005bde:	2302      	movs	r3, #2


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005be0:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8005be2:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8005be4:	6811      	ldr	r1, [r2, #0]
 8005be6:	18db      	adds	r3, r3, r3
 8005be8:	430b      	orrs	r3, r1
 8005bea:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005bec:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005bf2:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 8005bf4:	bd10      	pop	{r4, pc}

08005bf6 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005bf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005bf8:	7903      	ldrb	r3, [r0, #4]
{
 8005bfa:	0004      	movs	r4, r0
 8005bfc:	000f      	movs	r7, r1
  __HAL_LOCK(hrng);
 8005bfe:	2502      	movs	r5, #2
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d027      	beq.n	8005c54 <HAL_RNG_GenerateRandomNumber+0x5e>
 8005c04:	2301      	movs	r3, #1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005c06:	7942      	ldrb	r2, [r0, #5]
  __HAL_LOCK(hrng);
 8005c08:	7103      	strb	r3, [r0, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 8005c0a:	b2d5      	uxtb	r5, r2
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d123      	bne.n	8005c58 <HAL_RNG_GenerateRandomNumber+0x62>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005c10:	18db      	adds	r3, r3, r3
 8005c12:	7143      	strb	r3, [r0, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c14:	f7ff f924 	bl	8004e60 <HAL_GetTick>

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c18:	002e      	movs	r6, r5
    tickstart = HAL_GetTick();
 8005c1a:	9001      	str	r0, [sp, #4]
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	4232      	tst	r2, r6
 8005c22:	d007      	beq.n	8005c34 <HAL_RNG_GenerateRandomNumber+0x3e>
  HAL_StatusTypeDef status = HAL_OK;
 8005c24:	2500      	movs	r5, #0
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 8005c2a:	603b      	str	r3, [r7, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005c2c:	7166      	strb	r6, [r4, #5]
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	7123      	strb	r3, [r4, #4]

  return status;
 8005c32:	e00f      	b.n	8005c54 <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c34:	f7ff f914 	bl	8004e60 <HAL_GetTick>
 8005c38:	9b01      	ldr	r3, [sp, #4]
 8005c3a:	1ac0      	subs	r0, r0, r3
 8005c3c:	2802      	cmp	r0, #2
 8005c3e:	d9ed      	bls.n	8005c1c <HAL_RNG_GenerateRandomNumber+0x26>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	001a      	movs	r2, r3
 8005c46:	4032      	ands	r2, r6
 8005c48:	4233      	tst	r3, r6
 8005c4a:	d1e7      	bne.n	8005c1c <HAL_RNG_GenerateRandomNumber+0x26>
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005c4c:	2302      	movs	r3, #2
          hrng->State = HAL_RNG_STATE_READY;
 8005c4e:	7166      	strb	r6, [r4, #5]
          __HAL_UNLOCK(hrng);
 8005c50:	7122      	strb	r2, [r4, #4]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005c52:	60a3      	str	r3, [r4, #8]
}
 8005c54:	0028      	movs	r0, r5
 8005c56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005c58:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8005c5a:	001d      	movs	r5, r3
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005c5c:	6082      	str	r2, [r0, #8]
    status = HAL_ERROR;
 8005c5e:	e7e6      	b.n	8005c2e <HAL_RNG_GenerateRandomNumber+0x38>

08005c60 <HAL_RNG_GetRandomNumber>:
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005c60:	0001      	movs	r1, r0
{
 8005c62:	b510      	push	{r4, lr}
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005c64:	310c      	adds	r1, #12
{
 8005c66:	0004      	movs	r4, r0
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005c68:	f7ff ffc5 	bl	8005bf6 <HAL_RNG_GenerateRandomNumber>
  {
    return hrng->RandomNumber;
  }
  else
  {
    return 0U;
 8005c6c:	2300      	movs	r3, #0
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005c6e:	4298      	cmp	r0, r3
 8005c70:	d100      	bne.n	8005c74 <HAL_RNG_GetRandomNumber+0x14>
    return hrng->RandomNumber;
 8005c72:	68e3      	ldr	r3, [r4, #12]
  }
}
 8005c74:	0018      	movs	r0, r3
 8005c76:	bd10      	pop	{r4, pc}

08005c78 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7a:	001d      	movs	r5, r3
 8005c7c:	0017      	movs	r7, r2
 8005c7e:	b085      	sub	sp, #20
 8005c80:	000e      	movs	r6, r1
 8005c82:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c84:	f7ff f8ec 	bl	8004e60 <HAL_GetTick>
 8005c88:	19ed      	adds	r5, r5, r7
 8005c8a:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005c8c:	f7ff f8e8 	bl	8004e60 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c90:	4b25      	ldr	r3, [pc, #148]	; (8005d28 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8005c92:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	015b      	lsls	r3, r3, #5
 8005c98:	0d1b      	lsrs	r3, r3, #20
 8005c9a:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c9c:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8005c9e:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca0:	6893      	ldr	r3, [r2, #8]
 8005ca2:	4033      	ands	r3, r6
 8005ca4:	429e      	cmp	r6, r3
 8005ca6:	d001      	beq.n	8005cac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8005ca8:	2000      	movs	r0, #0
 8005caa:	e032      	b.n	8005d12 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8005cac:	1c7b      	adds	r3, r7, #1
 8005cae:	d0f7      	beq.n	8005ca0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cb0:	f7ff f8d6 	bl	8004e60 <HAL_GetTick>
 8005cb4:	9b01      	ldr	r3, [sp, #4]
 8005cb6:	1ac0      	subs	r0, r0, r3
 8005cb8:	42a8      	cmp	r0, r5
 8005cba:	d32c      	bcc.n	8005d16 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cbc:	21e0      	movs	r1, #224	; 0xe0
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	438a      	bics	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc6:	2282      	movs	r2, #130	; 0x82
 8005cc8:	6861      	ldr	r1, [r4, #4]
 8005cca:	0052      	lsls	r2, r2, #1
 8005ccc:	4291      	cmp	r1, r2
 8005cce:	d10c      	bne.n	8005cea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	68a2      	ldr	r2, [r4, #8]
 8005cd4:	0209      	lsls	r1, r1, #8
 8005cd6:	428a      	cmp	r2, r1
 8005cd8:	d003      	beq.n	8005ce2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cda:	2180      	movs	r1, #128	; 0x80
 8005cdc:	00c9      	lsls	r1, r1, #3
 8005cde:	428a      	cmp	r2, r1
 8005ce0:	d103      	bne.n	8005cea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8005ce2:	2140      	movs	r1, #64	; 0x40
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	438a      	bics	r2, r1
 8005ce8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cea:	2180      	movs	r1, #128	; 0x80
 8005cec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005cee:	0189      	lsls	r1, r1, #6
 8005cf0:	428a      	cmp	r2, r1
 8005cf2:	d106      	bne.n	8005d02 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8005cf4:	6819      	ldr	r1, [r3, #0]
 8005cf6:	480d      	ldr	r0, [pc, #52]	; (8005d2c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8005cf8:	4001      	ands	r1, r0
 8005cfa:	6019      	str	r1, [r3, #0]
 8005cfc:	6819      	ldr	r1, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005d02:	0023      	movs	r3, r4
 8005d04:	2201      	movs	r2, #1
 8005d06:	3351      	adds	r3, #81	; 0x51
 8005d08:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8005d0a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8005d0c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8005d0e:	3450      	adds	r4, #80	; 0x50
 8005d10:	7023      	strb	r3, [r4, #0]
}
 8005d12:	b005      	add	sp, #20
 8005d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8005d16:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8005d18:	1e5a      	subs	r2, r3, #1
 8005d1a:	4193      	sbcs	r3, r2
 8005d1c:	425b      	negs	r3, r3
 8005d1e:	401d      	ands	r5, r3
      count--;
 8005d20:	9b03      	ldr	r3, [sp, #12]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	e7ba      	b.n	8005c9c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	20000104 	.word	0x20000104
 8005d2c:	ffffdfff 	.word	0xffffdfff

08005d30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d34:	2282      	movs	r2, #130	; 0x82
{
 8005d36:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d38:	6840      	ldr	r0, [r0, #4]
 8005d3a:	0052      	lsls	r2, r2, #1
 8005d3c:	4290      	cmp	r0, r2
 8005d3e:	d11e      	bne.n	8005d7e <SPI_EndRxTransaction+0x4e>
 8005d40:	2080      	movs	r0, #128	; 0x80
 8005d42:	2580      	movs	r5, #128	; 0x80
 8005d44:	68a2      	ldr	r2, [r4, #8]
 8005d46:	0200      	lsls	r0, r0, #8
 8005d48:	00ed      	lsls	r5, r5, #3
 8005d4a:	4282      	cmp	r2, r0
 8005d4c:	d001      	beq.n	8005d52 <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d4e:	42aa      	cmp	r2, r5
 8005d50:	d106      	bne.n	8005d60 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d52:	2740      	movs	r7, #64	; 0x40
 8005d54:	6826      	ldr	r6, [r4, #0]
 8005d56:	6830      	ldr	r0, [r6, #0]
 8005d58:	43b8      	bics	r0, r7
 8005d5a:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d5c:	42aa      	cmp	r2, r5
 8005d5e:	d00e      	beq.n	8005d7e <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d60:	000a      	movs	r2, r1
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	0020      	movs	r0, r4
 8005d66:	f7ff ff87 	bl	8005c78 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d101      	bne.n	8005d72 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8005d6e:	2000      	movs	r0, #0
}
 8005d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d72:	2320      	movs	r3, #32
 8005d74:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d76:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d7c:	e7f8      	b.n	8005d70 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d7e:	000a      	movs	r2, r1
 8005d80:	2101      	movs	r1, #1
 8005d82:	e7ef      	b.n	8005d64 <SPI_EndRxTransaction+0x34>

08005d84 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d84:	4b16      	ldr	r3, [pc, #88]	; (8005de0 <SPI_EndRxTxTransaction+0x5c>)
{
 8005d86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d88:	0004      	movs	r4, r0
 8005d8a:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	4915      	ldr	r1, [pc, #84]	; (8005de4 <SPI_EndRxTxTransaction+0x60>)
{
 8005d90:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d92:	f7fa f9b9 	bl	8000108 <__udivsi3>
 8005d96:	23fa      	movs	r3, #250	; 0xfa
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4343      	muls	r3, r0
 8005d9c:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d9e:	2382      	movs	r3, #130	; 0x82
 8005da0:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005da2:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	4299      	cmp	r1, r3
 8005da8:	d10d      	bne.n	8005dc6 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005daa:	0033      	movs	r3, r6
 8005dac:	002a      	movs	r2, r5
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	0020      	movs	r0, r4
 8005db2:	f7ff ff61 	bl	8005c78 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d00f      	beq.n	8005dda <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dba:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8005dbc:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dbe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8005dc4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8005dc6:	9b01      	ldr	r3, [sp, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d006      	beq.n	8005dda <SPI_EndRxTxTransaction+0x56>
      count--;
 8005dcc:	9b01      	ldr	r3, [sp, #4]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	4213      	tst	r3, r2
 8005dd8:	d1f5      	bne.n	8005dc6 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8005dda:	2000      	movs	r0, #0
 8005ddc:	e7f2      	b.n	8005dc4 <SPI_EndRxTxTransaction+0x40>
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	20000104 	.word	0x20000104
 8005de4:	016e3600 	.word	0x016e3600

08005de8 <HAL_SPI_Init>:
{
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005dec:	2001      	movs	r0, #1
  if (hspi == NULL)
 8005dee:	2c00      	cmp	r4, #0
 8005df0:	d054      	beq.n	8005e9c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d152      	bne.n	8005e9e <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005df8:	2282      	movs	r2, #130	; 0x82
 8005dfa:	6861      	ldr	r1, [r4, #4]
 8005dfc:	0052      	lsls	r2, r2, #1
 8005dfe:	4291      	cmp	r1, r2
 8005e00:	d000      	beq.n	8005e04 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e02:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e04:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e06:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e08:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e0a:	3551      	adds	r5, #81	; 0x51
 8005e0c:	782b      	ldrb	r3, [r5, #0]
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d105      	bne.n	8005e20 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8005e14:	0023      	movs	r3, r4
 8005e16:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8005e18:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005e1a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8005e1c:	f7fe fe30 	bl	8004a80 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005e20:	2602      	movs	r6, #2
  __HAL_SPI_DISABLE(hspi);
 8005e22:	2240      	movs	r2, #64	; 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e24:	2082      	movs	r0, #130	; 0x82
 8005e26:	2784      	movs	r7, #132	; 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 8005e28:	702e      	strb	r6, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005e2a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e2c:	0040      	lsls	r0, r0, #1
  __HAL_SPI_DISABLE(hspi);
 8005e2e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e30:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 8005e32:	4393      	bics	r3, r2
 8005e34:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e36:	6863      	ldr	r3, [r4, #4]
 8005e38:	69a2      	ldr	r2, [r4, #24]
 8005e3a:	4003      	ands	r3, r0
 8005e3c:	68a0      	ldr	r0, [r4, #8]
 8005e3e:	4038      	ands	r0, r7
 8005e40:	2780      	movs	r7, #128	; 0x80
 8005e42:	4303      	orrs	r3, r0
 8005e44:	68e0      	ldr	r0, [r4, #12]
 8005e46:	013f      	lsls	r7, r7, #4
 8005e48:	4038      	ands	r0, r7
 8005e4a:	4303      	orrs	r3, r0
 8005e4c:	6920      	ldr	r0, [r4, #16]
 8005e4e:	2738      	movs	r7, #56	; 0x38
 8005e50:	4030      	ands	r0, r6
 8005e52:	4303      	orrs	r3, r0
 8005e54:	6960      	ldr	r0, [r4, #20]
 8005e56:	3e01      	subs	r6, #1
 8005e58:	4030      	ands	r0, r6
 8005e5a:	4303      	orrs	r3, r0
 8005e5c:	2080      	movs	r0, #128	; 0x80
 8005e5e:	0080      	lsls	r0, r0, #2
 8005e60:	4010      	ands	r0, r2
 8005e62:	4303      	orrs	r3, r0
 8005e64:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e66:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e68:	4038      	ands	r0, r7
 8005e6a:	4303      	orrs	r3, r0
 8005e6c:	6a20      	ldr	r0, [r4, #32]
 8005e6e:	3748      	adds	r7, #72	; 0x48
 8005e70:	4038      	ands	r0, r7
 8005e72:	2780      	movs	r7, #128	; 0x80
 8005e74:	4303      	orrs	r3, r0
 8005e76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005e78:	01bf      	lsls	r7, r7, #6
 8005e7a:	4038      	ands	r0, r7
 8005e7c:	4303      	orrs	r3, r0
 8005e7e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e80:	2304      	movs	r3, #4
 8005e82:	2010      	movs	r0, #16
 8005e84:	401a      	ands	r2, r3
 8005e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e88:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e8a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e90:	69cb      	ldr	r3, [r1, #28]
 8005e92:	4a05      	ldr	r2, [pc, #20]	; (8005ea8 <HAL_SPI_Init+0xc0>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e98:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e9a:	702e      	strb	r6, [r5, #0]
}
 8005e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ea2:	6163      	str	r3, [r4, #20]
 8005ea4:	e7ae      	b.n	8005e04 <HAL_SPI_Init+0x1c>
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	fffff7ff 	.word	0xfffff7ff

08005eac <HAL_SPI_TransmitReceive>:
{
 8005eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eae:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8005eb0:	0003      	movs	r3, r0
 8005eb2:	3350      	adds	r3, #80	; 0x50
{
 8005eb4:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8005eb6:	781a      	ldrb	r2, [r3, #0]
{
 8005eb8:	0004      	movs	r4, r0
 8005eba:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8005ebc:	2002      	movs	r0, #2
{
 8005ebe:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8005ec0:	2a01      	cmp	r2, #1
 8005ec2:	d100      	bne.n	8005ec6 <HAL_SPI_TransmitReceive+0x1a>
 8005ec4:	e092      	b.n	8005fec <HAL_SPI_TransmitReceive+0x140>
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005eca:	f7fe ffc9 	bl	8004e60 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005ece:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8005ed0:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8005ed2:	3351      	adds	r3, #81	; 0x51
 8005ed4:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005ed6:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8005ed8:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d00a      	beq.n	8005ef4 <HAL_SPI_TransmitReceive+0x48>
 8005ede:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8005ee0:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4299      	cmp	r1, r3
 8005ee6:	d000      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x3e>
 8005ee8:	e079      	b.n	8005fde <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005eea:	68a3      	ldr	r3, [r4, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d176      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x132>
 8005ef0:	2a04      	cmp	r2, #4
 8005ef2:	d174      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8005ef4:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ef6:	2d00      	cmp	r5, #0
 8005ef8:	d071      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x132>
 8005efa:	2f00      	cmp	r7, #0
 8005efc:	d06f      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x132>
 8005efe:	2e00      	cmp	r6, #0
 8005f00:	d06d      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f02:	0023      	movs	r3, r4
 8005f04:	3351      	adds	r3, #81	; 0x51
 8005f06:	781a      	ldrb	r2, [r3, #0]
 8005f08:	2a04      	cmp	r2, #4
 8005f0a:	d001      	beq.n	8005f10 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f0c:	2205      	movs	r2, #5
 8005f0e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f10:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f12:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f14:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8005f16:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f18:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f1a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005f1c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8005f1e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f20:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f22:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005f24:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f26:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f28:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f2a:	4210      	tst	r0, r2
 8005f2c:	d102      	bne.n	8005f34 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	4302      	orrs	r2, r0
 8005f32:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f34:	2280      	movs	r2, #128	; 0x80
 8005f36:	68e0      	ldr	r0, [r4, #12]
 8005f38:	0112      	lsls	r2, r2, #4
 8005f3a:	4290      	cmp	r0, r2
 8005f3c:	d158      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f3e:	2900      	cmp	r1, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x9a>
 8005f42:	2e01      	cmp	r6, #1
 8005f44:	d107      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f46:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f48:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f4a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005f4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f4e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005f56:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f58:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f5a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10e      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0xd4>
 8005f62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f68:	0020      	movs	r0, r4
 8005f6a:	9a01      	ldr	r2, [sp, #4]
 8005f6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f6e:	f7ff ff09 	bl	8005d84 <SPI_EndRxTxTransaction>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d100      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0xcc>
 8005f76:	e083      	b.n	8006080 <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f78:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8005f7a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f7c:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8005f7e:	e02e      	b.n	8005fde <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f80:	6821      	ldr	r1, [r4, #0]
 8005f82:	688b      	ldr	r3, [r1, #8]
 8005f84:	423b      	tst	r3, r7
 8005f86:	d00e      	beq.n	8005fa6 <HAL_SPI_TransmitReceive+0xfa>
 8005f88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <HAL_SPI_TransmitReceive+0xfa>
 8005f8e:	2d01      	cmp	r5, #1
 8005f90:	d109      	bne.n	8005fa6 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8005f92:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f96:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f98:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9a:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f9c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005f9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fa6:	688b      	ldr	r3, [r1, #8]
 8005fa8:	001a      	movs	r2, r3
 8005faa:	4032      	ands	r2, r6
 8005fac:	4233      	tst	r3, r6
 8005fae:	d00c      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x11e>
 8005fb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8005fb6:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fb8:	68c9      	ldr	r1, [r1, #12]
 8005fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005fbc:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fbe:	3302      	adds	r3, #2
 8005fc0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005fc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fca:	f7fe ff49 	bl	8004e60 <HAL_GetTick>
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	1ac0      	subs	r0, r0, r3
 8005fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd4:	4298      	cmp	r0, r3
 8005fd6:	d3c1      	bcc.n	8005f5c <HAL_SPI_TransmitReceive+0xb0>
 8005fd8:	3301      	adds	r3, #1
 8005fda:	d0bf      	beq.n	8005f5c <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8005fdc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005fde:	0023      	movs	r3, r4
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	3351      	adds	r3, #81	; 0x51
 8005fe4:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	3450      	adds	r4, #80	; 0x50
 8005fea:	7023      	strb	r3, [r4, #0]
}
 8005fec:	b005      	add	sp, #20
 8005fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_SPI_TransmitReceive+0x14c>
 8005ff4:	2e01      	cmp	r6, #1
 8005ff6:	d108      	bne.n	800600a <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ff8:	782a      	ldrb	r2, [r5, #0]
 8005ffa:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ffc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ffe:	3301      	adds	r3, #1
 8006000:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006002:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006004:	3b01      	subs	r3, #1
 8006006:	b29b      	uxth	r3, r3
 8006008:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800600a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800600c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800600e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006010:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <HAL_SPI_TransmitReceive+0x170>
 8006016:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0a5      	beq.n	8005f68 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	423a      	tst	r2, r7
 8006022:	d00f      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x198>
 8006024:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006026:	2a00      	cmp	r2, #0
 8006028:	d00c      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x198>
 800602a:	2d01      	cmp	r5, #1
 800602c:	d10a      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 800602e:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006030:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006036:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006038:	3301      	adds	r3, #1
 800603a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800603c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800603e:	3b01      	subs	r3, #1
 8006040:	b29b      	uxth	r3, r3
 8006042:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	6899      	ldr	r1, [r3, #8]
 8006048:	000a      	movs	r2, r1
 800604a:	4032      	ands	r2, r6
 800604c:	4231      	tst	r1, r6
 800604e:	d00d      	beq.n	800606c <HAL_SPI_TransmitReceive+0x1c0>
 8006050:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006052:	2900      	cmp	r1, #0
 8006054:	d00a      	beq.n	800606c <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8006056:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006058:	68d9      	ldr	r1, [r3, #12]
 800605a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800605c:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 800605e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006060:	3301      	adds	r3, #1
 8006062:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006064:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006066:	3b01      	subs	r3, #1
 8006068:	b29b      	uxth	r3, r3
 800606a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800606c:	f7fe fef8 	bl	8004e60 <HAL_GetTick>
 8006070:	9b01      	ldr	r3, [sp, #4]
 8006072:	1ac0      	subs	r0, r0, r3
 8006074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006076:	4298      	cmp	r0, r3
 8006078:	d3ca      	bcc.n	8006010 <HAL_SPI_TransmitReceive+0x164>
 800607a:	3301      	adds	r3, #1
 800607c:	d0c8      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x164>
 800607e:	e7ad      	b.n	8005fdc <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006080:	68a3      	ldr	r3, [r4, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1ab      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	9003      	str	r0, [sp, #12]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	9203      	str	r2, [sp, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	9303      	str	r3, [sp, #12]
 8006092:	9b03      	ldr	r3, [sp, #12]
 8006094:	e7a3      	b.n	8005fde <HAL_SPI_TransmitReceive+0x132>
	...

08006098 <HAL_SPI_TransmitReceive_DMA>:
{
 8006098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800609a:	0006      	movs	r6, r0
 800609c:	3650      	adds	r6, #80	; 0x50
 800609e:	7835      	ldrb	r5, [r6, #0]
{
 80060a0:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80060a2:	2002      	movs	r0, #2
 80060a4:	2d01      	cmp	r5, #1
 80060a6:	d047      	beq.n	8006138 <HAL_SPI_TransmitReceive_DMA+0xa0>
  tmp_state           = hspi->State;
 80060a8:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 80060aa:	3801      	subs	r0, #1
 80060ac:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 80060ae:	3551      	adds	r5, #81	; 0x51
 80060b0:	7828      	ldrb	r0, [r5, #0]
 80060b2:	b2c7      	uxtb	r7, r0
 80060b4:	9701      	str	r7, [sp, #4]
  tmp_mode            = hspi->Init.Mode;
 80060b6:	6867      	ldr	r7, [r4, #4]
 80060b8:	46bc      	mov	ip, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80060ba:	2801      	cmp	r0, #1
 80060bc:	d00a      	beq.n	80060d4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80060be:	2782      	movs	r7, #130	; 0x82
    errorcode = HAL_BUSY;
 80060c0:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80060c2:	007f      	lsls	r7, r7, #1
 80060c4:	45bc      	cmp	ip, r7
 80060c6:	d135      	bne.n	8006134 <HAL_SPI_TransmitReceive_DMA+0x9c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060c8:	68a7      	ldr	r7, [r4, #8]
 80060ca:	2f00      	cmp	r7, #0
 80060cc:	d132      	bne.n	8006134 <HAL_SPI_TransmitReceive_DMA+0x9c>
 80060ce:	9f01      	ldr	r7, [sp, #4]
 80060d0:	2f04      	cmp	r7, #4
 80060d2:	d12f      	bne.n	8006134 <HAL_SPI_TransmitReceive_DMA+0x9c>
    errorcode = HAL_ERROR;
 80060d4:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060d6:	2900      	cmp	r1, #0
 80060d8:	d02c      	beq.n	8006134 <HAL_SPI_TransmitReceive_DMA+0x9c>
 80060da:	2a00      	cmp	r2, #0
 80060dc:	d02a      	beq.n	8006134 <HAL_SPI_TransmitReceive_DMA+0x9c>
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d028      	beq.n	8006134 <HAL_SPI_TransmitReceive_DMA+0x9c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060e2:	7828      	ldrb	r0, [r5, #0]
 80060e4:	2804      	cmp	r0, #4
 80060e6:	d001      	beq.n	80060ec <HAL_SPI_TransmitReceive_DMA+0x54>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060e8:	2005      	movs	r0, #5
 80060ea:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060ec:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060ee:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060f0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80060f2:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80060f4:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 80060f6:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->TxXferSize  = Size;
 80060f8:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060fa:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060fc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006100:	782b      	ldrb	r3, [r5, #0]
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006102:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006104:	2b04      	cmp	r3, #4
 8006106:	d118      	bne.n	800613a <HAL_SPI_TransmitReceive_DMA+0xa2>
 8006108:	4922      	ldr	r1, [pc, #136]	; (8006194 <HAL_SPI_TransmitReceive_DMA+0xfc>)
 800610a:	4b23      	ldr	r3, [pc, #140]	; (8006198 <HAL_SPI_TransmitReceive_DMA+0x100>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800610c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <HAL_SPI_TransmitReceive_DMA+0x104>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006110:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006112:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8006114:	2300      	movs	r3, #0
 8006116:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 8006118:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800611a:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 800611c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800611e:	310c      	adds	r1, #12
 8006120:	f7fe ff4a 	bl	8004fb8 <HAL_DMA_Start_IT>
 8006124:	1e03      	subs	r3, r0, #0
 8006126:	d00b      	beq.n	8006140 <HAL_SPI_TransmitReceive_DMA+0xa8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006128:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 800612a:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800612c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800612e:	4313      	orrs	r3, r2
 8006130:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8006132:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8006134:	2300      	movs	r3, #0
 8006136:	7033      	strb	r3, [r6, #0]
}
 8006138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800613a:	4919      	ldr	r1, [pc, #100]	; (80061a0 <HAL_SPI_TransmitReceive_DMA+0x108>)
 800613c:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <HAL_SPI_TransmitReceive_DMA+0x10c>)
 800613e:	e7e5      	b.n	800610c <HAL_SPI_TransmitReceive_DMA+0x74>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006140:	2701      	movs	r7, #1
 8006142:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006144:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006146:	6851      	ldr	r1, [r2, #4]
 8006148:	4339      	orrs	r1, r7
 800614a:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800614c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800614e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006150:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006152:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 8006154:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006156:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                 hspi->TxXferCount))
 8006158:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800615a:	320c      	adds	r2, #12
 800615c:	f7fe ff2c 	bl	8004fb8 <HAL_DMA_Start_IT>
 8006160:	2800      	cmp	r0, #0
 8006162:	d006      	beq.n	8006172 <HAL_SPI_TransmitReceive_DMA+0xda>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006164:	2310      	movs	r3, #16
 8006166:	6d62      	ldr	r2, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006168:	0038      	movs	r0, r7
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800616a:	4313      	orrs	r3, r2
 800616c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800616e:	702f      	strb	r7, [r5, #0]
    goto error;
 8006170:	e7e0      	b.n	8006134 <HAL_SPI_TransmitReceive_DMA+0x9c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006172:	2240      	movs	r2, #64	; 0x40
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	6819      	ldr	r1, [r3, #0]
 8006178:	4211      	tst	r1, r2
 800617a:	d102      	bne.n	8006182 <HAL_SPI_TransmitReceive_DMA+0xea>
    __HAL_SPI_ENABLE(hspi);
 800617c:	6819      	ldr	r1, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006182:	2220      	movs	r2, #32
 8006184:	6859      	ldr	r1, [r3, #4]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800618a:	2202      	movs	r2, #2
 800618c:	6859      	ldr	r1, [r3, #4]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	e7cf      	b.n	8006134 <HAL_SPI_TransmitReceive_DMA+0x9c>
 8006194:	0800629d 	.word	0x0800629d
 8006198:	080062d9 	.word	0x080062d9
 800619c:	080062b5 	.word	0x080062b5
 80061a0:	080062a9 	.word	0x080062a9
 80061a4:	08006347 	.word	0x08006347

080061a8 <HAL_SPI_Receive_DMA>:
{
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80061ac:	6880      	ldr	r0, [r0, #8]
{
 80061ae:	0013      	movs	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d10f      	bne.n	80061d4 <HAL_SPI_Receive_DMA+0x2c>
 80061b4:	2282      	movs	r2, #130	; 0x82
 80061b6:	6865      	ldr	r5, [r4, #4]
 80061b8:	0052      	lsls	r2, r2, #1
 80061ba:	4295      	cmp	r5, r2
 80061bc:	d10a      	bne.n	80061d4 <HAL_SPI_Receive_DMA+0x2c>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061be:	0022      	movs	r2, r4
 80061c0:	3004      	adds	r0, #4
 80061c2:	3251      	adds	r2, #81	; 0x51
 80061c4:	7010      	strb	r0, [r2, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80061c6:	000a      	movs	r2, r1
 80061c8:	0020      	movs	r0, r4
 80061ca:	f7ff ff65 	bl	8006098 <HAL_SPI_TransmitReceive_DMA>
 80061ce:	0005      	movs	r5, r0
}
 80061d0:	0028      	movs	r0, r5
 80061d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 80061d4:	0026      	movs	r6, r4
 80061d6:	3650      	adds	r6, #80	; 0x50
 80061d8:	7832      	ldrb	r2, [r6, #0]
 80061da:	2502      	movs	r5, #2
 80061dc:	2a01      	cmp	r2, #1
 80061de:	d0f7      	beq.n	80061d0 <HAL_SPI_Receive_DMA+0x28>
 80061e0:	2201      	movs	r2, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 80061e2:	0027      	movs	r7, r4
  __HAL_LOCK(hspi);
 80061e4:	7032      	strb	r2, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80061e6:	3751      	adds	r7, #81	; 0x51
 80061e8:	783a      	ldrb	r2, [r7, #0]
 80061ea:	b2d5      	uxtb	r5, r2
 80061ec:	2a01      	cmp	r2, #1
 80061ee:	d149      	bne.n	8006284 <HAL_SPI_Receive_DMA+0xdc>
  if ((pData == NULL) || (Size == 0U))
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d032      	beq.n	800625a <HAL_SPI_Receive_DMA+0xb2>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d030      	beq.n	800625a <HAL_SPI_Receive_DMA+0xb2>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061f8:	3203      	adds	r2, #3
 80061fa:	703a      	strb	r2, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061fc:	2200      	movs	r2, #0
  hspi->RxXferSize  = Size;
 80061fe:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006200:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8006202:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006204:	2380      	movs	r3, #128	; 0x80
  hspi->RxISR       = NULL;
 8006206:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006208:	6462      	str	r2, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800620a:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800620c:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800620e:	63a1      	str	r1, [r4, #56]	; 0x38
    __HAL_SPI_DISABLE(hspi);
 8006210:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	4298      	cmp	r0, r3
 8006216:	d107      	bne.n	8006228 <HAL_SPI_Receive_DMA+0x80>
    __HAL_SPI_DISABLE(hspi);
 8006218:	2040      	movs	r0, #64	; 0x40
 800621a:	6813      	ldr	r3, [r2, #0]
 800621c:	4383      	bics	r3, r0
 800621e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8006220:	6813      	ldr	r3, [r2, #0]
 8006222:	4819      	ldr	r0, [pc, #100]	; (8006288 <HAL_SPI_Receive_DMA+0xe0>)
 8006224:	4003      	ands	r3, r0
 8006226:	6013      	str	r3, [r2, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006228:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800622a:	4b18      	ldr	r3, [pc, #96]	; (800628c <HAL_SPI_Receive_DMA+0xe4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800622c:	320c      	adds	r2, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800622e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006230:	4b17      	ldr	r3, [pc, #92]	; (8006290 <HAL_SPI_Receive_DMA+0xe8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006232:	4694      	mov	ip, r2
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006234:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006236:	4b17      	ldr	r3, [pc, #92]	; (8006294 <HAL_SPI_Receive_DMA+0xec>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006238:	000a      	movs	r2, r1
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800623a:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 800623c:	2300      	movs	r3, #0
 800623e:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 8006240:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006242:	4661      	mov	r1, ip
                                 hspi->RxXferCount))
 8006244:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006246:	f7fe feb7 	bl	8004fb8 <HAL_DMA_Start_IT>
 800624a:	2800      	cmp	r0, #0
 800624c:	d008      	beq.n	8006260 <HAL_SPI_Receive_DMA+0xb8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800624e:	2310      	movs	r3, #16
 8006250:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006252:	4313      	orrs	r3, r2
 8006254:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8006256:	2301      	movs	r3, #1
 8006258:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 800625a:	2300      	movs	r3, #0
 800625c:	7033      	strb	r3, [r6, #0]
  return errorcode;
 800625e:	e7b7      	b.n	80061d0 <HAL_SPI_Receive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006260:	2240      	movs	r2, #64	; 0x40
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	6819      	ldr	r1, [r3, #0]
 8006266:	4211      	tst	r1, r2
 8006268:	d102      	bne.n	8006270 <HAL_SPI_Receive_DMA+0xc8>
    __HAL_SPI_ENABLE(hspi);
 800626a:	6819      	ldr	r1, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006270:	2220      	movs	r2, #32
 8006272:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006274:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800627a:	2201      	movs	r2, #1
 800627c:	6859      	ldr	r1, [r3, #4]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	e7ea      	b.n	800625a <HAL_SPI_Receive_DMA+0xb2>
    errorcode = HAL_BUSY;
 8006284:	2502      	movs	r5, #2
 8006286:	e7e8      	b.n	800625a <HAL_SPI_Receive_DMA+0xb2>
 8006288:	ffffbfff 	.word	0xffffbfff
 800628c:	0800629d 	.word	0x0800629d
 8006290:	080062d9 	.word	0x080062d9
 8006294:	080062b5 	.word	0x080062b5

08006298 <HAL_SPI_TxRxCpltCallback>:
 8006298:	4770      	bx	lr

0800629a <HAL_SPI_RxHalfCpltCallback>:
 800629a:	4770      	bx	lr

0800629c <SPI_DMAHalfReceiveCplt>:
{
 800629c:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800629e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80062a0:	f7ff fffb 	bl	800629a <HAL_SPI_RxHalfCpltCallback>
}
 80062a4:	bd10      	pop	{r4, pc}

080062a6 <HAL_SPI_TxRxHalfCpltCallback>:
 80062a6:	4770      	bx	lr

080062a8 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80062a8:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80062aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80062ac:	f7ff fffb 	bl	80062a6 <HAL_SPI_TxRxHalfCpltCallback>
}
 80062b0:	bd10      	pop	{r4, pc}

080062b2 <HAL_SPI_ErrorCallback>:
 80062b2:	4770      	bx	lr

080062b4 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80062b4:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80062b8:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80062ba:	6802      	ldr	r2, [r0, #0]
 80062bc:	6853      	ldr	r3, [r2, #4]
 80062be:	438b      	bics	r3, r1
 80062c0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062c2:	2310      	movs	r3, #16
 80062c4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80062c6:	4313      	orrs	r3, r2
 80062c8:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80062ca:	0003      	movs	r3, r0
 80062cc:	2201      	movs	r2, #1
 80062ce:	3351      	adds	r3, #81	; 0x51
 80062d0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 80062d2:	f7ff ffee 	bl	80062b2 <HAL_SPI_ErrorCallback>
}
 80062d6:	bd10      	pop	{r4, pc}

080062d8 <SPI_DMAReceiveCplt>:
{
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80062de:	f7fe fdbf 	bl	8004e60 <HAL_GetTick>
 80062e2:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80062e4:	2020      	movs	r0, #32
 80062e6:	682b      	ldr	r3, [r5, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4203      	tst	r3, r0
 80062ec:	d127      	bne.n	800633e <SPI_DMAReceiveCplt+0x66>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	6859      	ldr	r1, [r3, #4]
 80062f2:	4381      	bics	r1, r0
 80062f4:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80062f6:	68a1      	ldr	r1, [r4, #8]
 80062f8:	2900      	cmp	r1, #0
 80062fa:	d11d      	bne.n	8006338 <SPI_DMAReceiveCplt+0x60>
 80062fc:	3105      	adds	r1, #5
 80062fe:	6860      	ldr	r0, [r4, #4]
 8006300:	31ff      	adds	r1, #255	; 0xff
 8006302:	4288      	cmp	r0, r1
 8006304:	d118      	bne.n	8006338 <SPI_DMAReceiveCplt+0x60>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006306:	2003      	movs	r0, #3
 8006308:	6859      	ldr	r1, [r3, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800630a:	4381      	bics	r1, r0
 800630c:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800630e:	0020      	movs	r0, r4
 8006310:	2164      	movs	r1, #100	; 0x64
 8006312:	f7ff fd0d 	bl	8005d30 <SPI_EndRxTransaction>
 8006316:	2800      	cmp	r0, #0
 8006318:	d001      	beq.n	800631e <SPI_DMAReceiveCplt+0x46>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800631a:	2320      	movs	r3, #32
 800631c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006322:	0023      	movs	r3, r4
 8006324:	2201      	movs	r2, #1
 8006326:	3351      	adds	r3, #81	; 0x51
 8006328:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800632a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <SPI_DMAReceiveCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 8006330:	0020      	movs	r0, r4
 8006332:	f7ff ffbe 	bl	80062b2 <HAL_SPI_ErrorCallback>
}
 8006336:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006338:	2001      	movs	r0, #1
 800633a:	6859      	ldr	r1, [r3, #4]
 800633c:	e7e5      	b.n	800630a <SPI_DMAReceiveCplt+0x32>
  HAL_SPI_RxCpltCallback(hspi);
 800633e:	0020      	movs	r0, r4
 8006340:	f000 ff5a 	bl	80071f8 <HAL_SPI_RxCpltCallback>
 8006344:	e7f7      	b.n	8006336 <SPI_DMAReceiveCplt+0x5e>

08006346 <SPI_DMATransmitReceiveCplt>:
{
 8006346:	b570      	push	{r4, r5, r6, lr}
 8006348:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800634a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800634c:	f7fe fd88 	bl	8004e60 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	2520      	movs	r5, #32
 8006354:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8006356:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006358:	422b      	tst	r3, r5
 800635a:	d11f      	bne.n	800639c <SPI_DMATransmitReceiveCplt+0x56>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800635c:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800635e:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006360:	684b      	ldr	r3, [r1, #4]
 8006362:	43ab      	bics	r3, r5
 8006364:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006366:	2164      	movs	r1, #100	; 0x64
 8006368:	f7ff fd0c 	bl	8005d84 <SPI_EndRxTxTransaction>
 800636c:	2800      	cmp	r0, #0
 800636e:	d002      	beq.n	8006376 <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006370:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006372:	431d      	orrs	r5, r3
 8006374:	6565      	str	r5, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006376:	2103      	movs	r1, #3
 8006378:	6822      	ldr	r2, [r4, #0]
 800637a:	6853      	ldr	r3, [r2, #4]
 800637c:	438b      	bics	r3, r1
 800637e:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006384:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006386:	0023      	movs	r3, r4
 8006388:	2201      	movs	r2, #1
 800638a:	3351      	adds	r3, #81	; 0x51
 800638c:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800638e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <SPI_DMATransmitReceiveCplt+0x56>
      HAL_SPI_ErrorCallback(hspi);
 8006394:	0020      	movs	r0, r4
 8006396:	f7ff ff8c 	bl	80062b2 <HAL_SPI_ErrorCallback>
}
 800639a:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 800639c:	0020      	movs	r0, r4
 800639e:	f7ff ff7b 	bl	8006298 <HAL_SPI_TxRxCpltCallback>
 80063a2:	e7fa      	b.n	800639a <SPI_DMATransmitReceiveCplt+0x54>

080063a4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a4:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 80063a6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a8:	05d2      	lsls	r2, r2, #23
 80063aa:	4290      	cmp	r0, r2
 80063ac:	d008      	beq.n	80063c0 <TIM_Base_SetConfig+0x1c>
 80063ae:	4a15      	ldr	r2, [pc, #84]	; (8006404 <TIM_Base_SetConfig+0x60>)
 80063b0:	4290      	cmp	r0, r2
 80063b2:	d005      	beq.n	80063c0 <TIM_Base_SetConfig+0x1c>
 80063b4:	4a14      	ldr	r2, [pc, #80]	; (8006408 <TIM_Base_SetConfig+0x64>)
 80063b6:	4290      	cmp	r0, r2
 80063b8:	d002      	beq.n	80063c0 <TIM_Base_SetConfig+0x1c>
 80063ba:	4a14      	ldr	r2, [pc, #80]	; (800640c <TIM_Base_SetConfig+0x68>)
 80063bc:	4290      	cmp	r0, r2
 80063be:	d114      	bne.n	80063ea <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c0:	2270      	movs	r2, #112	; 0x70
 80063c2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80063c4:	684a      	ldr	r2, [r1, #4]
 80063c6:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c8:	2280      	movs	r2, #128	; 0x80
 80063ca:	05d2      	lsls	r2, r2, #23
 80063cc:	4290      	cmp	r0, r2
 80063ce:	d008      	beq.n	80063e2 <TIM_Base_SetConfig+0x3e>
 80063d0:	4a0c      	ldr	r2, [pc, #48]	; (8006404 <TIM_Base_SetConfig+0x60>)
 80063d2:	4290      	cmp	r0, r2
 80063d4:	d005      	beq.n	80063e2 <TIM_Base_SetConfig+0x3e>
 80063d6:	4a0c      	ldr	r2, [pc, #48]	; (8006408 <TIM_Base_SetConfig+0x64>)
 80063d8:	4290      	cmp	r0, r2
 80063da:	d002      	beq.n	80063e2 <TIM_Base_SetConfig+0x3e>
 80063dc:	4a0b      	ldr	r2, [pc, #44]	; (800640c <TIM_Base_SetConfig+0x68>)
 80063de:	4290      	cmp	r0, r2
 80063e0:	d103      	bne.n	80063ea <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063e2:	4a0b      	ldr	r2, [pc, #44]	; (8006410 <TIM_Base_SetConfig+0x6c>)
 80063e4:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e6:	68cb      	ldr	r3, [r1, #12]
 80063e8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ea:	2280      	movs	r2, #128	; 0x80
 80063ec:	4393      	bics	r3, r2
 80063ee:	690a      	ldr	r2, [r1, #16]
 80063f0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80063f2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f4:	688b      	ldr	r3, [r1, #8]
 80063f6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f8:	680b      	ldr	r3, [r1, #0]
 80063fa:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063fc:	2301      	movs	r3, #1
 80063fe:	6143      	str	r3, [r0, #20]
}
 8006400:	4770      	bx	lr
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	40000400 	.word	0x40000400
 8006408:	40010800 	.word	0x40010800
 800640c:	40011400 	.word	0x40011400
 8006410:	fffffcff 	.word	0xfffffcff

08006414 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006414:	2201      	movs	r2, #1
{
 8006416:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006418:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800641a:	6a03      	ldr	r3, [r0, #32]
 800641c:	4393      	bics	r3, r2
 800641e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006420:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006422:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006424:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006426:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006428:	680d      	ldr	r5, [r1, #0]
 800642a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800642c:	2502      	movs	r5, #2
 800642e:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006430:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006432:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006434:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006436:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8006438:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 800643a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643c:	6203      	str	r3, [r0, #32]
}
 800643e:	bd30      	pop	{r4, r5, pc}

08006440 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006440:	2210      	movs	r2, #16
 8006442:	6a03      	ldr	r3, [r0, #32]
{
 8006444:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006446:	4393      	bics	r3, r2
 8006448:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800644c:	4a08      	ldr	r2, [pc, #32]	; (8006470 <TIM_OC2_SetConfig+0x30>)
  tmpcr2 =  TIMx->CR2;
 800644e:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006450:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006452:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006454:	680a      	ldr	r2, [r1, #0]
 8006456:	0212      	lsls	r2, r2, #8
 8006458:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800645a:	2320      	movs	r3, #32
 800645c:	439c      	bics	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800645e:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006460:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006462:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006464:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006466:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006468:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 800646a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646c:	6203      	str	r3, [r0, #32]
}
 800646e:	bd30      	pop	{r4, r5, pc}
 8006470:	ffff8cff 	.word	0xffff8cff

08006474 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006474:	231f      	movs	r3, #31
{
 8006476:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006478:	2401      	movs	r4, #1
 800647a:	4019      	ands	r1, r3
 800647c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800647e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8006480:	6a03      	ldr	r3, [r0, #32]
 8006482:	43a3      	bics	r3, r4
 8006484:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006486:	6a03      	ldr	r3, [r0, #32]
 8006488:	431a      	orrs	r2, r3
 800648a:	6202      	str	r2, [r0, #32]
}
 800648c:	bd10      	pop	{r4, pc}

0800648e <HAL_TIM_Base_Init>:
{
 800648e:	b570      	push	{r4, r5, r6, lr}
 8006490:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006492:	2001      	movs	r0, #1
  if (htim == NULL)
 8006494:	2c00      	cmp	r4, #0
 8006496:	d01d      	beq.n	80064d4 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006498:	0025      	movs	r5, r4
 800649a:	3539      	adds	r5, #57	; 0x39
 800649c:	782b      	ldrb	r3, [r5, #0]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80064a4:	0023      	movs	r3, r4
 80064a6:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80064a8:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80064aa:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80064ac:	f7fe fb4e 	bl	8004b4c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	2302      	movs	r3, #2
 80064b2:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b4:	6820      	ldr	r0, [r4, #0]
 80064b6:	1d21      	adds	r1, r4, #4
 80064b8:	f7ff ff74 	bl	80063a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064bc:	0022      	movs	r2, r4
 80064be:	2301      	movs	r3, #1
  return HAL_OK;
 80064c0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c2:	323e      	adds	r2, #62	; 0x3e
 80064c4:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c6:	343d      	adds	r4, #61	; 0x3d
 80064c8:	3a04      	subs	r2, #4
 80064ca:	7013      	strb	r3, [r2, #0]
 80064cc:	7053      	strb	r3, [r2, #1]
 80064ce:	7093      	strb	r3, [r2, #2]
 80064d0:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80064d2:	702b      	strb	r3, [r5, #0]
}
 80064d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080064d8 <HAL_TIM_OC_Start_DMA>:
{
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	000e      	movs	r6, r1
 80064dc:	0004      	movs	r4, r0
 80064de:	0011      	movs	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80064e0:	0002      	movs	r2, r0
 80064e2:	2e00      	cmp	r6, #0
 80064e4:	d105      	bne.n	80064f2 <HAL_TIM_OC_Start_DMA+0x1a>
 80064e6:	323a      	adds	r2, #58	; 0x3a
 80064e8:	7812      	ldrb	r2, [r2, #0]
 80064ea:	b2d0      	uxtb	r0, r2
 80064ec:	2a02      	cmp	r2, #2
 80064ee:	d10d      	bne.n	800650c <HAL_TIM_OC_Start_DMA+0x34>
}
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80064f2:	2e04      	cmp	r6, #4
 80064f4:	d115      	bne.n	8006522 <HAL_TIM_OC_Start_DMA+0x4a>
 80064f6:	323b      	adds	r2, #59	; 0x3b
 80064f8:	7815      	ldrb	r5, [r2, #0]
    return HAL_BUSY;
 80064fa:	2002      	movs	r0, #2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80064fc:	3d02      	subs	r5, #2
 80064fe:	426a      	negs	r2, r5
 8006500:	4155      	adcs	r5, r2
 8006502:	b2ed      	uxtb	r5, r5
 8006504:	2d00      	cmp	r5, #0
 8006506:	d1f3      	bne.n	80064f0 <HAL_TIM_OC_Start_DMA+0x18>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006508:	2e00      	cmp	r6, #0
 800650a:	d110      	bne.n	800652e <HAL_TIM_OC_Start_DMA+0x56>
 800650c:	0022      	movs	r2, r4
 800650e:	323a      	adds	r2, #58	; 0x3a
 8006510:	7812      	ldrb	r2, [r2, #0]
 8006512:	3a01      	subs	r2, #1
 8006514:	4250      	negs	r0, r2
 8006516:	4142      	adcs	r2, r0
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	2a00      	cmp	r2, #0
 800651c:	d12e      	bne.n	800657c <HAL_TIM_OC_Start_DMA+0xa4>
    return HAL_ERROR;
 800651e:	2001      	movs	r0, #1
 8006520:	e7e6      	b.n	80064f0 <HAL_TIM_OC_Start_DMA+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006522:	2e08      	cmp	r6, #8
 8006524:	d101      	bne.n	800652a <HAL_TIM_OC_Start_DMA+0x52>
 8006526:	323c      	adds	r2, #60	; 0x3c
 8006528:	e7e6      	b.n	80064f8 <HAL_TIM_OC_Start_DMA+0x20>
 800652a:	323d      	adds	r2, #61	; 0x3d
 800652c:	e7e4      	b.n	80064f8 <HAL_TIM_OC_Start_DMA+0x20>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800652e:	0022      	movs	r2, r4
 8006530:	2e04      	cmp	r6, #4
 8006532:	d101      	bne.n	8006538 <HAL_TIM_OC_Start_DMA+0x60>
 8006534:	323b      	adds	r2, #59	; 0x3b
 8006536:	e7eb      	b.n	8006510 <HAL_TIM_OC_Start_DMA+0x38>
 8006538:	2e08      	cmp	r6, #8
 800653a:	d106      	bne.n	800654a <HAL_TIM_OC_Start_DMA+0x72>
 800653c:	323c      	adds	r2, #60	; 0x3c
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	2a01      	cmp	r2, #1
 8006542:	d1ec      	bne.n	800651e <HAL_TIM_OC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 8006544:	2900      	cmp	r1, #0
 8006546:	d16e      	bne.n	8006626 <HAL_TIM_OC_Start_DMA+0x14e>
 8006548:	e01a      	b.n	8006580 <HAL_TIM_OC_Start_DMA+0xa8>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800654a:	323d      	adds	r2, #61	; 0x3d
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	2a01      	cmp	r2, #1
 8006550:	d1e5      	bne.n	800651e <HAL_TIM_OC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 8006552:	2900      	cmp	r1, #0
 8006554:	d101      	bne.n	800655a <HAL_TIM_OC_Start_DMA+0x82>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e1      	bne.n	800651e <HAL_TIM_OC_Start_DMA+0x46>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800655a:	0022      	movs	r2, r4
 800655c:	2002      	movs	r0, #2
 800655e:	323d      	adds	r2, #61	; 0x3d
 8006560:	7010      	strb	r0, [r2, #0]
  switch (Channel)
 8006562:	2e0c      	cmp	r6, #12
 8006564:	d076      	beq.n	8006654 <HAL_TIM_OC_Start_DMA+0x17c>
 8006566:	3801      	subs	r0, #1
 8006568:	2e0c      	cmp	r6, #12
 800656a:	d8c1      	bhi.n	80064f0 <HAL_TIM_OC_Start_DMA+0x18>
 800656c:	2e08      	cmp	r6, #8
 800656e:	d05e      	beq.n	800662e <HAL_TIM_OC_Start_DMA+0x156>
 8006570:	d8be      	bhi.n	80064f0 <HAL_TIM_OC_Start_DMA+0x18>
 8006572:	2e00      	cmp	r6, #0
 8006574:	d00c      	beq.n	8006590 <HAL_TIM_OC_Start_DMA+0xb8>
 8006576:	2e04      	cmp	r6, #4
 8006578:	d1ba      	bne.n	80064f0 <HAL_TIM_OC_Start_DMA+0x18>
 800657a:	e040      	b.n	80065fe <HAL_TIM_OC_Start_DMA+0x126>
    if ((pData == NULL) && (Length > 0U))
 800657c:	2900      	cmp	r1, #0
 800657e:	d101      	bne.n	8006584 <HAL_TIM_OC_Start_DMA+0xac>
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1cc      	bne.n	800651e <HAL_TIM_OC_Start_DMA+0x46>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006584:	2202      	movs	r2, #2
 8006586:	2e00      	cmp	r6, #0
 8006588:	d134      	bne.n	80065f4 <HAL_TIM_OC_Start_DMA+0x11c>
 800658a:	0020      	movs	r0, r4
 800658c:	303a      	adds	r0, #58	; 0x3a
 800658e:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006590:	6a20      	ldr	r0, [r4, #32]
 8006592:	4a3d      	ldr	r2, [pc, #244]	; (8006688 <HAL_TIM_OC_Start_DMA+0x1b0>)
 8006594:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006596:	4a3d      	ldr	r2, [pc, #244]	; (800668c <HAL_TIM_OC_Start_DMA+0x1b4>)
 8006598:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800659a:	4a3d      	ldr	r2, [pc, #244]	; (8006690 <HAL_TIM_OC_Start_DMA+0x1b8>)
 800659c:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	3234      	adds	r2, #52	; 0x34
 80065a2:	f7fe fd09 	bl	8004fb8 <HAL_DMA_Start_IT>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d1b9      	bne.n	800651e <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80065aa:	2380      	movs	r3, #128	; 0x80
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	68d1      	ldr	r1, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065b2:	6824      	ldr	r4, [r4, #0]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80065b4:	430b      	orrs	r3, r1
 80065b6:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065b8:	0031      	movs	r1, r6
 80065ba:	2201      	movs	r2, #1
 80065bc:	0020      	movs	r0, r4
 80065be:	f7ff ff59 	bl	8006474 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c2:	2380      	movs	r3, #128	; 0x80
 80065c4:	05db      	lsls	r3, r3, #23
 80065c6:	429c      	cmp	r4, r3
 80065c8:	d008      	beq.n	80065dc <HAL_TIM_OC_Start_DMA+0x104>
 80065ca:	4b32      	ldr	r3, [pc, #200]	; (8006694 <HAL_TIM_OC_Start_DMA+0x1bc>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	d005      	beq.n	80065dc <HAL_TIM_OC_Start_DMA+0x104>
 80065d0:	4b31      	ldr	r3, [pc, #196]	; (8006698 <HAL_TIM_OC_Start_DMA+0x1c0>)
 80065d2:	429c      	cmp	r4, r3
 80065d4:	d002      	beq.n	80065dc <HAL_TIM_OC_Start_DMA+0x104>
 80065d6:	4b31      	ldr	r3, [pc, #196]	; (800669c <HAL_TIM_OC_Start_DMA+0x1c4>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	d14e      	bne.n	800667a <HAL_TIM_OC_Start_DMA+0x1a2>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065dc:	2207      	movs	r2, #7
 80065de:	68a3      	ldr	r3, [r4, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e0:	2000      	movs	r0, #0
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065e2:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e4:	2b06      	cmp	r3, #6
 80065e6:	d100      	bne.n	80065ea <HAL_TIM_OC_Start_DMA+0x112>
 80065e8:	e782      	b.n	80064f0 <HAL_TIM_OC_Start_DMA+0x18>
        __HAL_TIM_ENABLE(htim);
 80065ea:	2301      	movs	r3, #1
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	e77d      	b.n	80064f0 <HAL_TIM_OC_Start_DMA+0x18>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f4:	2e04      	cmp	r6, #4
 80065f6:	d114      	bne.n	8006622 <HAL_TIM_OC_Start_DMA+0x14a>
 80065f8:	0020      	movs	r0, r4
 80065fa:	303b      	adds	r0, #59	; 0x3b
 80065fc:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80065fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006600:	4a21      	ldr	r2, [pc, #132]	; (8006688 <HAL_TIM_OC_Start_DMA+0x1b0>)
 8006602:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006604:	4a21      	ldr	r2, [pc, #132]	; (800668c <HAL_TIM_OC_Start_DMA+0x1b4>)
 8006606:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006608:	4a21      	ldr	r2, [pc, #132]	; (8006690 <HAL_TIM_OC_Start_DMA+0x1b8>)
 800660a:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800660c:	6822      	ldr	r2, [r4, #0]
 800660e:	3238      	adds	r2, #56	; 0x38
 8006610:	f7fe fcd2 	bl	8004fb8 <HAL_DMA_Start_IT>
 8006614:	2800      	cmp	r0, #0
 8006616:	d182      	bne.n	800651e <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	68d1      	ldr	r1, [r2, #12]
 8006620:	e7c7      	b.n	80065b2 <HAL_TIM_OC_Start_DMA+0xda>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006622:	2e08      	cmp	r6, #8
 8006624:	d199      	bne.n	800655a <HAL_TIM_OC_Start_DMA+0x82>
 8006626:	0022      	movs	r2, r4
 8006628:	2002      	movs	r0, #2
 800662a:	323c      	adds	r2, #60	; 0x3c
 800662c:	7010      	strb	r0, [r2, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800662e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006630:	4a15      	ldr	r2, [pc, #84]	; (8006688 <HAL_TIM_OC_Start_DMA+0x1b0>)
 8006632:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006634:	4a15      	ldr	r2, [pc, #84]	; (800668c <HAL_TIM_OC_Start_DMA+0x1b4>)
 8006636:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006638:	4a15      	ldr	r2, [pc, #84]	; (8006690 <HAL_TIM_OC_Start_DMA+0x1b8>)
 800663a:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800663c:	6822      	ldr	r2, [r4, #0]
 800663e:	323c      	adds	r2, #60	; 0x3c
 8006640:	f7fe fcba 	bl	8004fb8 <HAL_DMA_Start_IT>
 8006644:	2800      	cmp	r0, #0
 8006646:	d000      	beq.n	800664a <HAL_TIM_OC_Start_DMA+0x172>
 8006648:	e769      	b.n	800651e <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800664a:	2380      	movs	r3, #128	; 0x80
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	68d1      	ldr	r1, [r2, #12]
 8006652:	e7ae      	b.n	80065b2 <HAL_TIM_OC_Start_DMA+0xda>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006654:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006656:	4a0c      	ldr	r2, [pc, #48]	; (8006688 <HAL_TIM_OC_Start_DMA+0x1b0>)
 8006658:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800665a:	4a0c      	ldr	r2, [pc, #48]	; (800668c <HAL_TIM_OC_Start_DMA+0x1b4>)
 800665c:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800665e:	4a0c      	ldr	r2, [pc, #48]	; (8006690 <HAL_TIM_OC_Start_DMA+0x1b8>)
 8006660:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006662:	6822      	ldr	r2, [r4, #0]
 8006664:	3240      	adds	r2, #64	; 0x40
 8006666:	f7fe fca7 	bl	8004fb8 <HAL_DMA_Start_IT>
 800666a:	2800      	cmp	r0, #0
 800666c:	d000      	beq.n	8006670 <HAL_TIM_OC_Start_DMA+0x198>
 800666e:	e756      	b.n	800651e <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	6822      	ldr	r2, [r4, #0]
 8006674:	015b      	lsls	r3, r3, #5
 8006676:	68d1      	ldr	r1, [r2, #12]
 8006678:	e79b      	b.n	80065b2 <HAL_TIM_OC_Start_DMA+0xda>
      __HAL_TIM_ENABLE(htim);
 800667a:	2301      	movs	r3, #1
 800667c:	6822      	ldr	r2, [r4, #0]
 800667e:	2000      	movs	r0, #0
 8006680:	4313      	orrs	r3, r2
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	e734      	b.n	80064f0 <HAL_TIM_OC_Start_DMA+0x18>
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	08006963 	.word	0x08006963
 800668c:	080069d5 	.word	0x080069d5
 8006690:	08006a0f 	.word	0x08006a0f
 8006694:	40000400 	.word	0x40000400
 8006698:	40010800 	.word	0x40010800
 800669c:	40011400 	.word	0x40011400

080066a0 <HAL_TIM_PWM_MspInit>:
 80066a0:	4770      	bx	lr

080066a2 <HAL_TIM_PWM_Init>:
{
 80066a2:	b570      	push	{r4, r5, r6, lr}
 80066a4:	0004      	movs	r4, r0
    return HAL_ERROR;
 80066a6:	2001      	movs	r0, #1
  if (htim == NULL)
 80066a8:	2c00      	cmp	r4, #0
 80066aa:	d01d      	beq.n	80066e8 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 80066ac:	0025      	movs	r5, r4
 80066ae:	3539      	adds	r5, #57	; 0x39
 80066b0:	782b      	ldrb	r3, [r5, #0]
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d105      	bne.n	80066c4 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80066b8:	0023      	movs	r3, r4
 80066ba:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80066bc:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80066be:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 80066c0:	f7ff ffee 	bl	80066a0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80066c4:	2302      	movs	r3, #2
 80066c6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c8:	6820      	ldr	r0, [r4, #0]
 80066ca:	1d21      	adds	r1, r4, #4
 80066cc:	f7ff fe6a 	bl	80063a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d0:	0022      	movs	r2, r4
 80066d2:	2301      	movs	r3, #1
  return HAL_OK;
 80066d4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d6:	323e      	adds	r2, #62	; 0x3e
 80066d8:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066da:	343d      	adds	r4, #61	; 0x3d
 80066dc:	3a04      	subs	r2, #4
 80066de:	7013      	strb	r3, [r2, #0]
 80066e0:	7053      	strb	r3, [r2, #1]
 80066e2:	7093      	strb	r3, [r2, #2]
 80066e4:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80066e6:	702b      	strb	r3, [r5, #0]
}
 80066e8:	bd70      	pop	{r4, r5, r6, pc}

080066ea <HAL_TIM_PWM_Start_DMA>:
 80066ea:	b510      	push	{r4, lr}
 80066ec:	f7ff fef4 	bl	80064d8 <HAL_TIM_OC_Start_DMA>
 80066f0:	bd10      	pop	{r4, pc}
	...

080066f4 <HAL_TIM_PWM_ConfigChannel>:
{
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80066f6:	0005      	movs	r5, r0
 80066f8:	3538      	adds	r5, #56	; 0x38
{
 80066fa:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 80066fc:	782a      	ldrb	r2, [r5, #0]
{
 80066fe:	0003      	movs	r3, r0
 8006700:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8006702:	2002      	movs	r0, #2
 8006704:	2a01      	cmp	r2, #1
 8006706:	d00a      	beq.n	800671e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8006708:	3801      	subs	r0, #1
 800670a:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 800670c:	2e08      	cmp	r6, #8
 800670e:	d052      	beq.n	80067b6 <HAL_TIM_PWM_ConfigChannel+0xc2>
 8006710:	d806      	bhi.n	8006720 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8006712:	2e00      	cmp	r6, #0
 8006714:	d02a      	beq.n	800676c <HAL_TIM_PWM_ConfigChannel+0x78>
 8006716:	2e04      	cmp	r6, #4
 8006718:	d03a      	beq.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 800671a:	2300      	movs	r3, #0
 800671c:	702b      	strb	r3, [r5, #0]
}
 800671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8006720:	2e0c      	cmp	r6, #12
 8006722:	d1fa      	bne.n	800671a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006724:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006726:	4935      	ldr	r1, [pc, #212]	; (80067fc <HAL_TIM_PWM_ConfigChannel+0x108>)
 8006728:	6a1a      	ldr	r2, [r3, #32]
 800672a:	400a      	ands	r2, r1
 800672c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800672e:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006730:	4933      	ldr	r1, [pc, #204]	; (8006800 <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpcr2 =  TIMx->CR2;
 8006732:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006734:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006736:	400a      	ands	r2, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006738:	6821      	ldr	r1, [r4, #0]
 800673a:	0209      	lsls	r1, r1, #8
 800673c:	4311      	orrs	r1, r2
  tmpccer &= ~TIM_CCER_CC4P;
 800673e:	4a31      	ldr	r2, [pc, #196]	; (8006804 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8006740:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006742:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8006744:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006746:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8006748:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800674a:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800674c:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 800674e:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8006750:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006752:	2280      	movs	r2, #128	; 0x80
 8006754:	69d9      	ldr	r1, [r3, #28]
 8006756:	0112      	lsls	r2, r2, #4
 8006758:	430a      	orrs	r2, r1
 800675a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800675c:	69da      	ldr	r2, [r3, #28]
 800675e:	492a      	ldr	r1, [pc, #168]	; (8006808 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8006760:	400a      	ands	r2, r1
 8006762:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006764:	68e2      	ldr	r2, [r4, #12]
 8006766:	69d9      	ldr	r1, [r3, #28]
 8006768:	0212      	lsls	r2, r2, #8
 800676a:	e043      	b.n	80067f4 <HAL_TIM_PWM_ConfigChannel+0x100>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800676c:	681f      	ldr	r7, [r3, #0]
 800676e:	0038      	movs	r0, r7
 8006770:	f7ff fe50 	bl	8006414 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006774:	2308      	movs	r3, #8
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800677a:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800677c:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	4393      	bics	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	68e2      	ldr	r2, [r4, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800678c:	2000      	movs	r0, #0
      break;
 800678e:	e7c4      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006790:	681e      	ldr	r6, [r3, #0]
 8006792:	0030      	movs	r0, r6
 8006794:	f7ff fe54 	bl	8006440 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006798:	2380      	movs	r3, #128	; 0x80
 800679a:	69b2      	ldr	r2, [r6, #24]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	4313      	orrs	r3, r2
 80067a0:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067a2:	69b3      	ldr	r3, [r6, #24]
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <HAL_TIM_PWM_ConfigChannel+0x114>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067aa:	68e3      	ldr	r3, [r4, #12]
 80067ac:	69b2      	ldr	r2, [r6, #24]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	4313      	orrs	r3, r2
 80067b2:	61b3      	str	r3, [r6, #24]
      break;
 80067b4:	e7ea      	b.n	800678c <HAL_TIM_PWM_ConfigChannel+0x98>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067b6:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067b8:	4914      	ldr	r1, [pc, #80]	; (800680c <HAL_TIM_PWM_ConfigChannel+0x118>)
 80067ba:	6a1a      	ldr	r2, [r3, #32]
 80067bc:	400a      	ands	r2, r1
 80067be:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067c0:	2273      	movs	r2, #115	; 0x73
  tmpccer = TIMx->CCER;
 80067c2:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80067c4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80067c6:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067c8:	4391      	bics	r1, r2
  tmpccmrx |= OC_Config->OCMode;
 80067ca:	6822      	ldr	r2, [r4, #0]
 80067cc:	4311      	orrs	r1, r2
  tmpccer &= ~TIM_CCER_CC3P;
 80067ce:	4a10      	ldr	r2, [pc, #64]	; (8006810 <HAL_TIM_PWM_ConfigChannel+0x11c>)
 80067d0:	4017      	ands	r7, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067d2:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80067d4:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80067d6:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80067d8:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067da:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 80067dc:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067de:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067e0:	433a      	orrs	r2, r7
  TIMx->CCER = tmpccer;
 80067e2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067e4:	69da      	ldr	r2, [r3, #28]
 80067e6:	4316      	orrs	r6, r2
 80067e8:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	438a      	bics	r2, r1
 80067ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067f0:	69da      	ldr	r2, [r3, #28]
 80067f2:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067f4:	430a      	orrs	r2, r1
 80067f6:	61da      	str	r2, [r3, #28]
 80067f8:	e7c8      	b.n	800678c <HAL_TIM_PWM_ConfigChannel+0x98>
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	ffffefff 	.word	0xffffefff
 8006800:	ffff8cff 	.word	0xffff8cff
 8006804:	ffffdfff 	.word	0xffffdfff
 8006808:	fffffbff 	.word	0xfffffbff
 800680c:	fffffeff 	.word	0xfffffeff
 8006810:	fffffdff 	.word	0xfffffdff

08006814 <HAL_TIM_ConfigClockSource>:
{
 8006814:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8006816:	0005      	movs	r5, r0
 8006818:	2202      	movs	r2, #2
 800681a:	3538      	adds	r5, #56	; 0x38
 800681c:	782c      	ldrb	r4, [r5, #0]
{
 800681e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8006820:	0010      	movs	r0, r2
 8006822:	2c01      	cmp	r4, #1
 8006824:	d01d      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8006826:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8006828:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800682a:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 800682c:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800682e:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006830:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006832:	4848      	ldr	r0, [pc, #288]	; (8006954 <HAL_TIM_ConfigClockSource+0x140>)
  tmpsmcr = htim->Instance->SMCR;
 8006834:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006836:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8006838:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800683a:	680a      	ldr	r2, [r1, #0]
 800683c:	2a60      	cmp	r2, #96	; 0x60
 800683e:	d05c      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0xe6>
 8006840:	d82f      	bhi.n	80068a2 <HAL_TIM_ConfigClockSource+0x8e>
 8006842:	2a40      	cmp	r2, #64	; 0x40
 8006844:	d100      	bne.n	8006848 <HAL_TIM_ConfigClockSource+0x34>
 8006846:	e06f      	b.n	8006928 <HAL_TIM_ConfigClockSource+0x114>
 8006848:	d814      	bhi.n	8006874 <HAL_TIM_ConfigClockSource+0x60>
 800684a:	2a20      	cmp	r2, #32
 800684c:	d00c      	beq.n	8006868 <HAL_TIM_ConfigClockSource+0x54>
 800684e:	d809      	bhi.n	8006864 <HAL_TIM_ConfigClockSource+0x50>
 8006850:	2110      	movs	r1, #16
 8006852:	0010      	movs	r0, r2
 8006854:	4388      	bics	r0, r1
 8006856:	d007      	beq.n	8006868 <HAL_TIM_ConfigClockSource+0x54>
 8006858:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 800685a:	2301      	movs	r3, #1
 800685c:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 800685e:	2300      	movs	r3, #0
 8006860:	702b      	strb	r3, [r5, #0]
}
 8006862:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8006864:	2a30      	cmp	r2, #48	; 0x30
 8006866:	d1f7      	bne.n	8006858 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 8006868:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800686a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800686c:	4381      	bics	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800686e:	430a      	orrs	r2, r1
 8006870:	2107      	movs	r1, #7
 8006872:	e02f      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8006874:	2a50      	cmp	r2, #80	; 0x50
 8006876:	d1ef      	bne.n	8006858 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006878:	6848      	ldr	r0, [r1, #4]
 800687a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800687c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800687e:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006880:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006882:	43a7      	bics	r7, r4
 8006884:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006886:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8006888:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800688a:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800688c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800688e:	240a      	movs	r4, #10
  TIMx->CCMR1 = tmpccmr1;
 8006890:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006892:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006894:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8006896:	4301      	orrs	r1, r0
  TIMx->CCER = tmpccer;
 8006898:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800689a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800689c:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800689e:	3a19      	subs	r2, #25
 80068a0:	e018      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80068a2:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 80068a4:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 80068a6:	017f      	lsls	r7, r7, #5
 80068a8:	42ba      	cmp	r2, r7
 80068aa:	d0d6      	beq.n	800685a <HAL_TIM_ConfigClockSource+0x46>
 80068ac:	2080      	movs	r0, #128	; 0x80
 80068ae:	0180      	lsls	r0, r0, #6
 80068b0:	4282      	cmp	r2, r0
 80068b2:	d013      	beq.n	80068dc <HAL_TIM_ConfigClockSource+0xc8>
 80068b4:	0020      	movs	r0, r4
 80068b6:	2a70      	cmp	r2, #112	; 0x70
 80068b8:	d1cf      	bne.n	800685a <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 80068ba:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068bc:	4a26      	ldr	r2, [pc, #152]	; (8006958 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068be:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c0:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c2:	688a      	ldr	r2, [r1, #8]
 80068c4:	68c9      	ldr	r1, [r1, #12]
 80068c6:	4322      	orrs	r2, r4
 80068c8:	0209      	lsls	r1, r1, #8
 80068ca:	430a      	orrs	r2, r1
 80068cc:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80068ce:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068d0:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80068d2:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068d4:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 80068d6:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80068d8:	609a      	str	r2, [r3, #8]
}
 80068da:	e7be      	b.n	800685a <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 80068dc:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068de:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068e0:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068e2:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068e4:	688a      	ldr	r2, [r1, #8]
 80068e6:	68c9      	ldr	r1, [r1, #12]
 80068e8:	4322      	orrs	r2, r4
 80068ea:	0209      	lsls	r1, r1, #8
 80068ec:	430a      	orrs	r2, r1
 80068ee:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80068f0:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	6899      	ldr	r1, [r3, #8]
 80068f6:	01d2      	lsls	r2, r2, #7
 80068f8:	e7ec      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0xc0>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fa:	2410      	movs	r4, #16
 80068fc:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068fe:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006900:	43a0      	bics	r0, r4
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006902:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006904:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006906:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006908:	4f14      	ldr	r7, [pc, #80]	; (800695c <HAL_TIM_ConfigClockSource+0x148>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800690a:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800690c:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800690e:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006910:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8006912:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006914:	0112      	lsls	r2, r2, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006916:	43a0      	bics	r0, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8006918:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800691a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800691c:	621a      	str	r2, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800691e:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8006920:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006922:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006924:	3a09      	subs	r2, #9
 8006926:	e7d5      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006928:	6848      	ldr	r0, [r1, #4]
 800692a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800692c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800692e:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006930:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006932:	43a7      	bics	r7, r4
 8006934:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006936:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8006938:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800693a:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800693c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693e:	240a      	movs	r4, #10
  TIMx->CCMR1 = tmpccmr1;
 8006940:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006942:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006944:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8006946:	4301      	orrs	r1, r0
  TIMx->CCER = tmpccer;
 8006948:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800694a:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800694c:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800694e:	3a29      	subs	r2, #41	; 0x29
 8006950:	e7c0      	b.n	80068d4 <HAL_TIM_ConfigClockSource+0xc0>
 8006952:	46c0      	nop			; (mov r8, r8)
 8006954:	ffff0088 	.word	0xffff0088
 8006958:	ffff00ff 	.word	0xffff00ff
 800695c:	ffff0fff 	.word	0xffff0fff

08006960 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006960:	4770      	bx	lr

08006962 <TIM_DMADelayPulseCplt>:
{
 8006962:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006964:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006966:	6a22      	ldr	r2, [r4, #32]
 8006968:	4282      	cmp	r2, r0
 800696a:	d10d      	bne.n	8006988 <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800696c:	2301      	movs	r3, #1
 800696e:	7623      	strb	r3, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006970:	69d2      	ldr	r2, [r2, #28]
 8006972:	2a00      	cmp	r2, #0
 8006974:	d102      	bne.n	800697c <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006976:	0022      	movs	r2, r4
 8006978:	323a      	adds	r2, #58	; 0x3a
 800697a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800697c:	0020      	movs	r0, r4
 800697e:	f7ff ffef 	bl	8006960 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006982:	2300      	movs	r3, #0
 8006984:	7623      	strb	r3, [r4, #24]
}
 8006986:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800698a:	4283      	cmp	r3, r0
 800698c:	d109      	bne.n	80069a2 <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800698e:	2202      	movs	r2, #2
 8006990:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1f1      	bne.n	800697c <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	0023      	movs	r3, r4
 800699a:	3a01      	subs	r2, #1
 800699c:	333b      	adds	r3, #59	; 0x3b
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800699e:	701a      	strb	r2, [r3, #0]
 80069a0:	e7ec      	b.n	800697c <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80069a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069a4:	4283      	cmp	r3, r0
 80069a6:	d108      	bne.n	80069ba <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069a8:	2204      	movs	r2, #4
 80069aa:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e4      	bne.n	800697c <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80069b2:	0023      	movs	r3, r4
 80069b4:	3a03      	subs	r2, #3
 80069b6:	333c      	adds	r3, #60	; 0x3c
 80069b8:	e7f1      	b.n	800699e <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80069ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069bc:	4283      	cmp	r3, r0
 80069be:	d1dd      	bne.n	800697c <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069c0:	2208      	movs	r2, #8
 80069c2:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1d8      	bne.n	800697c <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80069ca:	0023      	movs	r3, r4
 80069cc:	3a07      	subs	r2, #7
 80069ce:	333d      	adds	r3, #61	; 0x3d
 80069d0:	e7e5      	b.n	800699e <TIM_DMADelayPulseCplt+0x3c>

080069d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 80069d2:	4770      	bx	lr

080069d4 <TIM_DMADelayPulseHalfCplt>:
{
 80069d4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069d6:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80069d8:	6a23      	ldr	r3, [r4, #32]
 80069da:	4283      	cmp	r3, r0
 80069dc:	d107      	bne.n	80069ee <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069de:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e0:	7623      	strb	r3, [r4, #24]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80069e2:	0020      	movs	r0, r4
 80069e4:	f7ff fff5 	bl	80069d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e8:	2300      	movs	r3, #0
 80069ea:	7623      	strb	r3, [r4, #24]
}
 80069ec:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80069ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069f0:	4283      	cmp	r3, r0
 80069f2:	d101      	bne.n	80069f8 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069f4:	2302      	movs	r3, #2
 80069f6:	e7f3      	b.n	80069e0 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80069f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069fa:	4283      	cmp	r3, r0
 80069fc:	d101      	bne.n	8006a02 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069fe:	2304      	movs	r3, #4
 8006a00:	e7ee      	b.n	80069e0 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a04:	4283      	cmp	r3, r0
 8006a06:	d1ec      	bne.n	80069e2 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a08:	2308      	movs	r3, #8
 8006a0a:	e7e9      	b.n	80069e0 <TIM_DMADelayPulseHalfCplt+0xc>

08006a0c <HAL_TIM_ErrorCallback>:
 8006a0c:	4770      	bx	lr

08006a0e <TIM_DMAError>:
{
 8006a0e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a10:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a12:	6a23      	ldr	r3, [r4, #32]
 8006a14:	4283      	cmp	r3, r0
 8006a16:	d105      	bne.n	8006a24 <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a18:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a1a:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a1c:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a1e:	323a      	adds	r2, #58	; 0x3a
    htim->State = HAL_TIM_STATE_READY;
 8006a20:	7013      	strb	r3, [r2, #0]
 8006a22:	e008      	b.n	8006a36 <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a26:	4283      	cmp	r3, r0
 8006a28:	d10b      	bne.n	8006a42 <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a2e:	0023      	movs	r3, r4
 8006a30:	2201      	movs	r2, #1
 8006a32:	333b      	adds	r3, #59	; 0x3b
 8006a34:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 8006a36:	0020      	movs	r0, r4
 8006a38:	f7ff ffe8 	bl	8006a0c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	7623      	strb	r3, [r4, #24]
}
 8006a40:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006a44:	2301      	movs	r3, #1
 8006a46:	4282      	cmp	r2, r0
 8006a48:	d104      	bne.n	8006a54 <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	7622      	strb	r2, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a4e:	0022      	movs	r2, r4
 8006a50:	323c      	adds	r2, #60	; 0x3c
 8006a52:	e7e5      	b.n	8006a20 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006a56:	4282      	cmp	r2, r0
 8006a58:	d104      	bne.n	8006a64 <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a5a:	2208      	movs	r2, #8
 8006a5c:	7622      	strb	r2, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006a5e:	0022      	movs	r2, r4
 8006a60:	323d      	adds	r2, #61	; 0x3d
 8006a62:	e7dd      	b.n	8006a20 <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 8006a64:	0022      	movs	r2, r4
 8006a66:	3239      	adds	r2, #57	; 0x39
 8006a68:	e7da      	b.n	8006a20 <TIM_DMAError+0x12>
	...

08006a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a6c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a6e:	0004      	movs	r4, r0
 8006a70:	2202      	movs	r2, #2
 8006a72:	3438      	adds	r4, #56	; 0x38
 8006a74:	7825      	ldrb	r5, [r4, #0]
{
 8006a76:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8006a78:	0010      	movs	r0, r2
 8006a7a:	2d01      	cmp	r5, #1
 8006a7c:	d020      	beq.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a80:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8006a82:	3539      	adds	r5, #57	; 0x39
 8006a84:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006a8a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a8c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a8e:	680e      	ldr	r6, [r1, #0]
 8006a90:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a92:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a94:	2080      	movs	r0, #128	; 0x80
 8006a96:	05c0      	lsls	r0, r0, #23
 8006a98:	4283      	cmp	r3, r0
 8006a9a:	d008      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8006a9c:	4809      	ldr	r0, [pc, #36]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8006a9e:	4283      	cmp	r3, r0
 8006aa0:	d005      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8006aa2:	4809      	ldr	r0, [pc, #36]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8006aa4:	4283      	cmp	r3, r0
 8006aa6:	d002      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8006aa8:	4808      	ldr	r0, [pc, #32]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8006aaa:	4283      	cmp	r3, r0
 8006aac:	d104      	bne.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aae:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ab0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab2:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ab4:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab8:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006aba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006abc:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8006abe:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40010800 	.word	0x40010800
 8006acc:	40011400 	.word	0x40011400

08006ad0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006ad0:	287f      	cmp	r0, #127	; 0x7f
 8006ad2:	d907      	bls.n	8006ae4 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006ad4:	2900      	cmp	r1, #0
 8006ad6:	d006      	beq.n	8006ae6 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006ad8:	28ff      	cmp	r0, #255	; 0xff
 8006ada:	d810      	bhi.n	8006afe <ff_convert+0x2e>
 8006adc:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <ff_convert+0x34>)
 8006ade:	3880      	subs	r0, #128	; 0x80
 8006ae0:	0040      	lsls	r0, r0, #1
 8006ae2:	5ac0      	ldrh	r0, [r0, r3]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8006ae4:	4770      	bx	lr
 8006ae6:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <ff_convert+0x34>)
				if (chr == Tbl[c]) break;
 8006ae8:	881a      	ldrh	r2, [r3, #0]
 8006aea:	4282      	cmp	r2, r0
 8006aec:	d004      	beq.n	8006af8 <ff_convert+0x28>
			for (c = 0; c < 0x80; c++) {
 8006aee:	3101      	adds	r1, #1
 8006af0:	b289      	uxth	r1, r1
 8006af2:	3302      	adds	r3, #2
 8006af4:	2980      	cmp	r1, #128	; 0x80
 8006af6:	d1f7      	bne.n	8006ae8 <ff_convert+0x18>
			c = (c + 0x80) & 0xFF;
 8006af8:	3180      	adds	r1, #128	; 0x80
 8006afa:	b2c8      	uxtb	r0, r1
 8006afc:	e7f2      	b.n	8006ae4 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006afe:	2000      	movs	r0, #0
 8006b00:	e7f0      	b.n	8006ae4 <ff_convert+0x14>
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	080082d2 	.word	0x080082d2

08006b08 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted */
)
{
 8006b08:	b5f0      	push	{r4, r5, r6, r7, lr}
									0xFF21,0xFF22,0xFF23,0xFF24,0xFF25,0xFF26,0xFF27,0xFF28,0xFF29,0xFF2A,0xFF2B,0xFF2C,0xFF2D,0xFF2E,0xFF2F,0xFF30,0xFF31,0xFF32,0xFF33,0xFF34,0xFF35,0xFF36,0xFF37,0xFF38,0xFF39,0xFF3A
	};
	UINT i, n, hi, li;


	if (chr < 0x80) {	/* ASCII characters (acceleration) */
 8006b0a:	287f      	cmp	r0, #127	; 0x7f
 8006b0c:	d806      	bhi.n	8006b1c <ff_wtoupper+0x14>
		if (chr >= 0x61 && chr <= 0x7A) chr -= 0x20;
 8006b0e:	0003      	movs	r3, r0
 8006b10:	3b61      	subs	r3, #97	; 0x61
 8006b12:	2b19      	cmp	r3, #25
 8006b14:	d801      	bhi.n	8006b1a <ff_wtoupper+0x12>
 8006b16:	3820      	subs	r0, #32
 8006b18:	b280      	uxth	r0, r0
		} while (--n);
		if (n) chr = upper[i];
	}

	return chr;
}
 8006b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n = 12; li = 0; hi = sizeof lower / sizeof lower[0];
 8006b1c:	25f7      	movs	r5, #247	; 0xf7
 8006b1e:	220c      	movs	r2, #12
 8006b20:	2100      	movs	r1, #0
			if (chr == lower[i]) break;
 8006b22:	4e0a      	ldr	r6, [pc, #40]	; (8006b4c <ff_wtoupper+0x44>)
		n = 12; li = 0; hi = sizeof lower / sizeof lower[0];
 8006b24:	006d      	lsls	r5, r5, #1
			i = li + (hi - li) / 2;
 8006b26:	1a6b      	subs	r3, r5, r1
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	185b      	adds	r3, r3, r1
			if (chr == lower[i]) break;
 8006b2c:	005c      	lsls	r4, r3, #1
 8006b2e:	5ba7      	ldrh	r7, [r4, r6]
 8006b30:	4287      	cmp	r7, r0
 8006b32:	d007      	beq.n	8006b44 <ff_wtoupper+0x3c>
			if (chr > lower[i]) li = i; else hi = i;
 8006b34:	d304      	bcc.n	8006b40 <ff_wtoupper+0x38>
			i = li + (hi - li) / 2;
 8006b36:	001d      	movs	r5, r3
		} while (--n);
 8006b38:	3a01      	subs	r2, #1
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d1f3      	bne.n	8006b26 <ff_wtoupper+0x1e>
 8006b3e:	e7ec      	b.n	8006b1a <ff_wtoupper+0x12>
			i = li + (hi - li) / 2;
 8006b40:	0019      	movs	r1, r3
 8006b42:	e7f9      	b.n	8006b38 <ff_wtoupper+0x30>
		if (n) chr = upper[i];
 8006b44:	4b02      	ldr	r3, [pc, #8]	; (8006b50 <ff_wtoupper+0x48>)
 8006b46:	5ae0      	ldrh	r0, [r4, r3]
	return chr;
 8006b48:	e7e7      	b.n	8006b1a <ff_wtoupper+0x12>
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	080083d2 	.word	0x080083d2
 8006b50:	080087ae 	.word	0x080087ae

08006b54 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	if (SD_ff_hw.initialized)
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <disk_status+0xc>)
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	4243      	negs	r3, r0
 8006b5a:	4158      	adcs	r0, r3
		return 0;

	return STA_NOINIT;
}
 8006b5c:	b2c0      	uxtb	r0, r0
 8006b5e:	4770      	bx	lr
 8006b60:	20000d60 	.word	0x20000d60

08006b64 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006b64:	b510      	push	{r4, lr}
	if (hwif_init(&SD_ff_hw) == 0)
 8006b66:	4803      	ldr	r0, [pc, #12]	; (8006b74 <disk_initialize+0x10>)
 8006b68:	f000 fa7c 	bl	8007064 <hwif_init>
 8006b6c:	1e43      	subs	r3, r0, #1
 8006b6e:	4198      	sbcs	r0, r3
		return 0;

	return STA_NOINIT;
}
 8006b70:	b2c0      	uxtb	r0, r0
 8006b72:	bd10      	pop	{r4, pc}
 8006b74:	20000d60 	.word	0x20000d60

08006b78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	0014      	movs	r4, r2
 8006b7c:	000d      	movs	r5, r1
 8006b7e:	189e      	adds	r6, r3, r2
	int i;

	for (i=0; i<count; i++)
 8006b80:	42b4      	cmp	r4, r6
 8006b82:	d101      	bne.n	8006b88 <disk_read+0x10>
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
			return RES_ERROR;

	return RES_OK;
 8006b84:	2000      	movs	r0, #0
}
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
 8006b88:	002a      	movs	r2, r5
 8006b8a:	0021      	movs	r1, r4
 8006b8c:	4805      	ldr	r0, [pc, #20]	; (8006ba4 <disk_read+0x2c>)
 8006b8e:	f000 fb13 	bl	80071b8 <sd_read>
 8006b92:	2380      	movs	r3, #128	; 0x80
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	3401      	adds	r4, #1
 8006b98:	18ed      	adds	r5, r5, r3
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d0f0      	beq.n	8006b80 <disk_read+0x8>
			return RES_ERROR;
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	e7f1      	b.n	8006b86 <disk_read+0xe>
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	20000d60 	.word	0x20000d60

08006ba8 <crc7_one>:
	int i;
	const uint8_t g = 0x89;
	t ^= data;
	for (i=0; i<8; i++) {
		if (t & 0x80)
			t ^= g;
 8006ba8:	2277      	movs	r2, #119	; 0x77
	t ^= data;
 8006baa:	2308      	movs	r3, #8
 8006bac:	4048      	eors	r0, r1
			t ^= g;
 8006bae:	4252      	negs	r2, r2
		if (t & 0x80)
 8006bb0:	b241      	sxtb	r1, r0
 8006bb2:	2900      	cmp	r1, #0
 8006bb4:	da01      	bge.n	8006bba <crc7_one+0x12>
			t ^= g;
 8006bb6:	4050      	eors	r0, r2
 8006bb8:	b2c0      	uxtb	r0, r0
		t <<= 1;
 8006bba:	0040      	lsls	r0, r0, #1
	for (i=0; i<8; i++) {
 8006bbc:	3b01      	subs	r3, #1
		t <<= 1;
 8006bbe:	b2c0      	uxtb	r0, r0
	for (i=0; i<8; i++) {
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f5      	bne.n	8006bb0 <crc7_one+0x8>
	}
	return t;
}
 8006bc4:	4770      	bx	lr
	...

08006bc8 <spi_txrx>:
{
 8006bc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t out = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	466a      	mov	r2, sp
{
 8006bce:	210f      	movs	r1, #15
	uint8_t out = 0;
 8006bd0:	75d3      	strb	r3, [r2, #23]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8006bd2:	2217      	movs	r2, #23
{
 8006bd4:	4469      	add	r1, sp
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8006bd6:	3b01      	subs	r3, #1
{
 8006bd8:	7008      	strb	r0, [r1, #0]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8006bda:	446a      	add	r2, sp
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4804      	ldr	r0, [pc, #16]	; (8006bf0 <spi_txrx+0x28>)
 8006be0:	3302      	adds	r3, #2
 8006be2:	f7ff f963 	bl	8005eac <HAL_SPI_TransmitReceive>
	return out;
 8006be6:	466b      	mov	r3, sp
 8006be8:	7dd8      	ldrb	r0, [r3, #23]
}
 8006bea:	b007      	add	sp, #28
 8006bec:	bd00      	pop	{pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	20000200 	.word	0x20000200

08006bf4 <sd_cmd>:


/*** sd functions - on top of spi code ***/

static void sd_cmd(uint8_t cmd, uint32_t arg)
{
 8006bf4:	b570      	push	{r4, r5, r6, lr}
	uint8_t crc = 0;
	spi_txrx(0x40 | cmd);
 8006bf6:	2540      	movs	r5, #64	; 0x40
 8006bf8:	4305      	orrs	r5, r0
 8006bfa:	0028      	movs	r0, r5
{
 8006bfc:	000c      	movs	r4, r1
	spi_txrx(0x40 | cmd);
 8006bfe:	f7ff ffe3 	bl	8006bc8 <spi_txrx>
	crc = crc7_one(crc, 0x40 | cmd);
 8006c02:	0029      	movs	r1, r5
 8006c04:	2000      	movs	r0, #0
 8006c06:	f7ff ffcf 	bl	8006ba8 <crc7_one>
 8006c0a:	0005      	movs	r5, r0
	spi_txrx(arg >> 24);
 8006c0c:	0e26      	lsrs	r6, r4, #24
 8006c0e:	0030      	movs	r0, r6
 8006c10:	f7ff ffda 	bl	8006bc8 <spi_txrx>
	crc = crc7_one(crc, arg >> 24);
 8006c14:	0031      	movs	r1, r6
 8006c16:	0028      	movs	r0, r5
 8006c18:	f7ff ffc6 	bl	8006ba8 <crc7_one>
 8006c1c:	0006      	movs	r6, r0
	spi_txrx(arg >> 16);
 8006c1e:	0c25      	lsrs	r5, r4, #16
 8006c20:	b2ed      	uxtb	r5, r5
 8006c22:	0028      	movs	r0, r5
 8006c24:	f7ff ffd0 	bl	8006bc8 <spi_txrx>
	crc = crc7_one(crc, arg >> 16);
 8006c28:	0029      	movs	r1, r5
 8006c2a:	0030      	movs	r0, r6
 8006c2c:	f7ff ffbc 	bl	8006ba8 <crc7_one>
 8006c30:	0006      	movs	r6, r0
	spi_txrx(arg >> 8);
 8006c32:	0a25      	lsrs	r5, r4, #8
 8006c34:	b2ed      	uxtb	r5, r5
 8006c36:	0028      	movs	r0, r5
 8006c38:	f7ff ffc6 	bl	8006bc8 <spi_txrx>
	crc = crc7_one(crc, arg >> 8);
 8006c3c:	0029      	movs	r1, r5
 8006c3e:	0030      	movs	r0, r6
 8006c40:	f7ff ffb2 	bl	8006ba8 <crc7_one>
 8006c44:	0005      	movs	r5, r0
	spi_txrx(arg);
 8006c46:	b2e4      	uxtb	r4, r4
 8006c48:	0020      	movs	r0, r4
 8006c4a:	f7ff ffbd 	bl	8006bc8 <spi_txrx>
	crc = crc7_one(crc, arg);
 8006c4e:	0021      	movs	r1, r4
 8006c50:	0028      	movs	r0, r5
 8006c52:	f7ff ffa9 	bl	8006ba8 <crc7_one>
	//spi_txrx(0x95);
	spi_txrx(crc | 0x1);	/* crc7, for cmd0 */
 8006c56:	2301      	movs	r3, #1
 8006c58:	4318      	orrs	r0, r3
 8006c5a:	b2c0      	uxtb	r0, r0
 8006c5c:	f7ff ffb4 	bl	8006bc8 <spi_txrx>
}
 8006c60:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c64 <sd_get_r1>:

static uint8_t sd_get_r1()
{
 8006c64:	b510      	push	{r4, lr}
	int tries = 1000;
	uint8_t r;

	while (tries--) {
 8006c66:	4c05      	ldr	r4, [pc, #20]	; (8006c7c <sd_get_r1+0x18>)
 8006c68:	3c01      	subs	r4, #1
		r = spi_txrx(0xff);
 8006c6a:	20ff      	movs	r0, #255	; 0xff
	while (tries--) {
 8006c6c:	2c00      	cmp	r4, #0
 8006c6e:	d003      	beq.n	8006c78 <sd_get_r1+0x14>
		r = spi_txrx(0xff);
 8006c70:	f7ff ffaa 	bl	8006bc8 <spi_txrx>
		if ((r & 0x80) == 0)
 8006c74:	0603      	lsls	r3, r0, #24
 8006c76:	d4f7      	bmi.n	8006c68 <sd_get_r1+0x4>
			return r;
	}
	return 0xff;
}
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	000003e9 	.word	0x000003e9

08006c80 <sd_nec>:


/* Nec (=Ncr? which is limited to [0,8]) dummy bytes before lowering CS,
 * as described in sandisk doc, 5.4. */
static void sd_nec()
{
 8006c80:	b510      	push	{r4, lr}
 8006c82:	2408      	movs	r4, #8
	int i;
	for (i=0; i<8; i++)
		spi_txrx(0xff);
 8006c84:	20ff      	movs	r0, #255	; 0xff
	for (i=0; i<8; i++)
 8006c86:	3c01      	subs	r4, #1
		spi_txrx(0xff);
 8006c88:	f7ff ff9e 	bl	8006bc8 <spi_txrx>
	for (i=0; i<8; i++)
 8006c8c:	2c00      	cmp	r4, #0
 8006c8e:	d1f9      	bne.n	8006c84 <sd_nec+0x4>
}
 8006c90:	bd10      	pop	{r4, pc}

08006c92 <sd_get_r7>:
{
 8006c92:	b570      	push	{r4, r5, r6, lr}
 8006c94:	0006      	movs	r6, r0
	r = sd_get_r1();
 8006c96:	f7ff ffe5 	bl	8006c64 <sd_get_r1>
 8006c9a:	0005      	movs	r5, r0
	if (r != 0x01)
 8006c9c:	2801      	cmp	r0, #1
 8006c9e:	d113      	bne.n	8006cc8 <sd_get_r7+0x36>
	r = spi_txrx(0xff) << 24;
 8006ca0:	20ff      	movs	r0, #255	; 0xff
 8006ca2:	f7ff ff91 	bl	8006bc8 <spi_txrx>
 8006ca6:	0004      	movs	r4, r0
	r |= spi_txrx(0xff) << 16;
 8006ca8:	20ff      	movs	r0, #255	; 0xff
 8006caa:	f7ff ff8d 	bl	8006bc8 <spi_txrx>
	r = spi_txrx(0xff) << 24;
 8006cae:	0624      	lsls	r4, r4, #24
	r |= spi_txrx(0xff) << 16;
 8006cb0:	0400      	lsls	r0, r0, #16
 8006cb2:	4304      	orrs	r4, r0
	r |= spi_txrx(0xff) << 8;
 8006cb4:	20ff      	movs	r0, #255	; 0xff
 8006cb6:	f7ff ff87 	bl	8006bc8 <spi_txrx>
 8006cba:	0200      	lsls	r0, r0, #8
 8006cbc:	4304      	orrs	r4, r0
	r |= spi_txrx(0xff);
 8006cbe:	20ff      	movs	r0, #255	; 0xff
 8006cc0:	f7ff ff82 	bl	8006bc8 <spi_txrx>
 8006cc4:	4320      	orrs	r0, r4
	*r7 = r;
 8006cc6:	6030      	str	r0, [r6, #0]
}
 8006cc8:	0028      	movs	r0, r5
 8006cca:	bd70      	pop	{r4, r5, r6, pc}

08006ccc <sd_get_data.constprop.0>:

	return 0;
}

/* 0xfe marks data start, then len bytes of data and crc16 */
static int sd_get_data(hwif *hw, uint8_t *buf, int len)
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	0006      	movs	r6, r0
 8006cd0:	000c      	movs	r4, r1
 8006cd2:	4d0c      	ldr	r5, [pc, #48]	; (8006d04 <sd_get_data.constprop.0+0x38>)
	uint8_t r;
	uint16_t _crc16;
	uint16_t calc_crc;
	int i;

	while (tries--) {
 8006cd4:	3d01      	subs	r5, #1
 8006cd6:	2d00      	cmp	r5, #0
 8006cd8:	d102      	bne.n	8006ce0 <sd_get_data.constprop.0+0x14>
		r = spi_txrx(0xff);
		if (r == 0xfe)
			break;
	}
	if (tries < 0)
		return -1;
 8006cda:	2001      	movs	r0, #1
 8006cdc:	4240      	negs	r0, r0
	//if (_crc16 != calc_crc) {
	//	return -1;
	//}

	return 0;
}
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 8006ce0:	20ff      	movs	r0, #255	; 0xff
 8006ce2:	f7ff ff71 	bl	8006bc8 <spi_txrx>
		if (r == 0xfe)
 8006ce6:	28fe      	cmp	r0, #254	; 0xfe
 8006ce8:	d1f4      	bne.n	8006cd4 <sd_get_data.constprop.0+0x8>
	dma_complete = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	4d06      	ldr	r5, [pc, #24]	; (8006d08 <sd_get_data.constprop.0+0x3c>)
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 8006cee:	0031      	movs	r1, r6
 8006cf0:	4806      	ldr	r0, [pc, #24]	; (8006d0c <sd_get_data.constprop.0+0x40>)
 8006cf2:	b2a2      	uxth	r2, r4
	dma_complete = 0;
 8006cf4:	702b      	strb	r3, [r5, #0]
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 8006cf6:	f7ff fa57 	bl	80061a8 <HAL_SPI_Receive_DMA>
	while (dma_complete == 0);
 8006cfa:	782b      	ldrb	r3, [r5, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0fc      	beq.n	8006cfa <sd_get_data.constprop.0+0x2e>
 8006d00:	2000      	movs	r0, #0
 8006d02:	e7ec      	b.n	8006cde <sd_get_data.constprop.0+0x12>
 8006d04:	00004e21 	.word	0x00004e21
 8006d08:	20000d70 	.word	0x20000d70
 8006d0c:	20000200 	.word	0x20000200

08006d10 <sd_readsector>:
	return 0;
}


static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
{
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	0005      	movs	r5, r0
 8006d14:	000c      	movs	r4, r1
	int r;

	spi_cs_low();
 8006d16:	20a0      	movs	r0, #160	; 0xa0
 8006d18:	2180      	movs	r1, #128	; 0x80
{
 8006d1a:	0016      	movs	r6, r2
	spi_cs_low();
 8006d1c:	0209      	lsls	r1, r1, #8
 8006d1e:	2200      	movs	r2, #0
 8006d20:	05c0      	lsls	r0, r0, #23
 8006d22:	f7fe faa5 	bl	8005270 <HAL_GPIO_WritePin>
	if (hw->capabilities & CAP_SDHC)
 8006d26:	68eb      	ldr	r3, [r5, #12]
		sd_cmd(17, address); /* read single block */
 8006d28:	0021      	movs	r1, r4
	if (hw->capabilities & CAP_SDHC)
 8006d2a:	079b      	lsls	r3, r3, #30
 8006d2c:	d400      	bmi.n	8006d30 <sd_readsector+0x20>
	else
		sd_cmd(17, address*512); /* read single block */
 8006d2e:	0261      	lsls	r1, r4, #9
 8006d30:	2011      	movs	r0, #17
 8006d32:	f7ff ff5f 	bl	8006bf4 <sd_cmd>

	r = sd_get_r1();
 8006d36:	f7ff ff95 	bl	8006c64 <sd_get_r1>
	if (r == 0xff) {
 8006d3a:	28ff      	cmp	r0, #255	; 0xff
 8006d3c:	d109      	bne.n	8006d52 <sd_readsector+0x42>
		spi_cs_high();
 8006d3e:	2180      	movs	r1, #128	; 0x80
 8006d40:	20a0      	movs	r0, #160	; 0xa0
 8006d42:	2201      	movs	r2, #1
 8006d44:	05c0      	lsls	r0, r0, #23
 8006d46:	0209      	lsls	r1, r1, #8
 8006d48:	f7fe fa92 	bl	8005270 <HAL_GPIO_WritePin>
		r = -1;
 8006d4c:	2001      	movs	r0, #1

	r = sd_get_data(hw, buf, 512);
	sd_nec();
	spi_cs_high();
	if (r == -1) {
		r = -3;
 8006d4e:	4240      	negs	r0, r0
	}

	return 0;
 fail:
	return r;
}
 8006d50:	bd70      	pop	{r4, r5, r6, pc}
	if (r & 0xfe) {
 8006d52:	2501      	movs	r5, #1
 8006d54:	43a8      	bics	r0, r5
 8006d56:	b2c4      	uxtb	r4, r0
 8006d58:	2c00      	cmp	r4, #0
 8006d5a:	d008      	beq.n	8006d6e <sd_readsector+0x5e>
		spi_cs_high();
 8006d5c:	2180      	movs	r1, #128	; 0x80
 8006d5e:	20a0      	movs	r0, #160	; 0xa0
 8006d60:	002a      	movs	r2, r5
 8006d62:	05c0      	lsls	r0, r0, #23
 8006d64:	0209      	lsls	r1, r1, #8
 8006d66:	f7fe fa83 	bl	8005270 <HAL_GPIO_WritePin>
		r = -2;
 8006d6a:	2002      	movs	r0, #2
 8006d6c:	e7ef      	b.n	8006d4e <sd_readsector+0x3e>
	r = sd_get_data(hw, buf, 512);
 8006d6e:	2180      	movs	r1, #128	; 0x80
 8006d70:	0030      	movs	r0, r6
 8006d72:	0089      	lsls	r1, r1, #2
 8006d74:	f7ff ffaa 	bl	8006ccc <sd_get_data.constprop.0>
 8006d78:	0006      	movs	r6, r0
	sd_nec();
 8006d7a:	f7ff ff81 	bl	8006c80 <sd_nec>
	spi_cs_high();
 8006d7e:	2180      	movs	r1, #128	; 0x80
 8006d80:	20a0      	movs	r0, #160	; 0xa0
 8006d82:	002a      	movs	r2, r5
 8006d84:	05c0      	lsls	r0, r0, #23
 8006d86:	0209      	lsls	r1, r1, #8
 8006d88:	f7fe fa72 	bl	8005270 <HAL_GPIO_WritePin>
	return 0;
 8006d8c:	0020      	movs	r0, r4
	if (r == -1) {
 8006d8e:	3601      	adds	r6, #1
 8006d90:	d1de      	bne.n	8006d50 <sd_readsector+0x40>
		r = -3;
 8006d92:	2003      	movs	r0, #3
 8006d94:	e7db      	b.n	8006d4e <sd_readsector+0x3e>
	...

08006d98 <sd_read_status.constprop.0.isra.0>:
	spi_cs_low();
 8006d98:	2180      	movs	r1, #128	; 0x80
 8006d9a:	20a0      	movs	r0, #160	; 0xa0
static int sd_read_status(hwif *hw)
 8006d9c:	b510      	push	{r4, lr}
	spi_cs_low();
 8006d9e:	2200      	movs	r2, #0
 8006da0:	0209      	lsls	r1, r1, #8
 8006da2:	05c0      	lsls	r0, r0, #23
 8006da4:	f7fe fa64 	bl	8005270 <HAL_GPIO_WritePin>
	sd_cmd(13, 0);
 8006da8:	2100      	movs	r1, #0
 8006daa:	200d      	movs	r0, #13
 8006dac:	f7ff ff22 	bl	8006bf4 <sd_cmd>
 8006db0:	4c0b      	ldr	r4, [pc, #44]	; (8006de0 <sd_read_status.constprop.0.isra.0+0x48>)
	while (tries--) {
 8006db2:	3c01      	subs	r4, #1
 8006db4:	2c00      	cmp	r4, #0
 8006db6:	d109      	bne.n	8006dcc <sd_read_status.constprop.0.isra.0+0x34>
	sd_nec();
 8006db8:	f7ff ff62 	bl	8006c80 <sd_nec>
	spi_cs_high();
 8006dbc:	2180      	movs	r1, #128	; 0x80
 8006dbe:	20a0      	movs	r0, #160	; 0xa0
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	0209      	lsls	r1, r1, #8
 8006dc4:	05c0      	lsls	r0, r0, #23
 8006dc6:	f7fe fa53 	bl	8005270 <HAL_GPIO_WritePin>
}
 8006dca:	bd10      	pop	{r4, pc}
		r = spi_txrx(0xff);
 8006dcc:	20ff      	movs	r0, #255	; 0xff
 8006dce:	f7ff fefb 	bl	8006bc8 <spi_txrx>
		if ((r & 0x80) == 0)
 8006dd2:	0600      	lsls	r0, r0, #24
 8006dd4:	d4ed      	bmi.n	8006db2 <sd_read_status.constprop.0.isra.0+0x1a>
	r = r<<8 | spi_txrx(0xff);
 8006dd6:	20ff      	movs	r0, #255	; 0xff
 8006dd8:	f7ff fef6 	bl	8006bc8 <spi_txrx>
	return r;
 8006ddc:	e7ec      	b.n	8006db8 <sd_read_status.constprop.0.isra.0+0x20>
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	000003e9 	.word	0x000003e9

08006de4 <sd_init>:
	hw->capabilities = 0;
 8006de4:	2300      	movs	r3, #0
{
 8006de6:	b5f0      	push	{r4, r5, r6, r7, lr}
	hw->capabilities = 0;
 8006de8:	60c3      	str	r3, [r0, #12]
{
 8006dea:	0004      	movs	r4, r0
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8006dec:	489b      	ldr	r0, [pc, #620]	; (800705c <sd_init+0x278>)
 8006dee:	3320      	adds	r3, #32
{
 8006df0:	b085      	sub	sp, #20
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8006df2:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8006df4:	f7fe fff8 	bl	8005de8 <HAL_SPI_Init>
	spi_cs_high();
 8006df8:	2180      	movs	r1, #128	; 0x80
 8006dfa:	20a0      	movs	r0, #160	; 0xa0
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	0209      	lsls	r1, r1, #8
 8006e00:	05c0      	lsls	r0, r0, #23
 8006e02:	f7fe fa35 	bl	8005270 <HAL_GPIO_WritePin>
 8006e06:	260a      	movs	r6, #10
		spi_txrx(0xff);
 8006e08:	20ff      	movs	r0, #255	; 0xff
	for (i=0; i<10; i++)
 8006e0a:	3e01      	subs	r6, #1
		spi_txrx(0xff);
 8006e0c:	f7ff fedc 	bl	8006bc8 <spi_txrx>
	for (i=0; i<10; i++)
 8006e10:	2e00      	cmp	r6, #0
 8006e12:	d1f9      	bne.n	8006e08 <sd_init+0x24>
	spi_cs_low();
 8006e14:	2180      	movs	r1, #128	; 0x80
 8006e16:	20a0      	movs	r0, #160	; 0xa0
 8006e18:	0032      	movs	r2, r6
 8006e1a:	0209      	lsls	r1, r1, #8
 8006e1c:	05c0      	lsls	r0, r0, #23
 8006e1e:	f7fe fa27 	bl	8005270 <HAL_GPIO_WritePin>
	sd_cmd(0, 0);
 8006e22:	0031      	movs	r1, r6
 8006e24:	0030      	movs	r0, r6
 8006e26:	f7ff fee5 	bl	8006bf4 <sd_cmd>
	r = sd_get_r1();
 8006e2a:	f7ff ff1b 	bl	8006c64 <sd_get_r1>
 8006e2e:	0005      	movs	r5, r0
	sd_nec();
 8006e30:	f7ff ff26 	bl	8006c80 <sd_nec>
	spi_cs_high();
 8006e34:	2180      	movs	r1, #128	; 0x80
 8006e36:	20a0      	movs	r0, #160	; 0xa0
 8006e38:	2201      	movs	r2, #1
 8006e3a:	0209      	lsls	r1, r1, #8
 8006e3c:	05c0      	lsls	r0, r0, #23
 8006e3e:	f7fe fa17 	bl	8005270 <HAL_GPIO_WritePin>
	if (r == 0xff)
 8006e42:	2dff      	cmp	r5, #255	; 0xff
 8006e44:	d104      	bne.n	8006e50 <sd_init+0x6c>
	return -1;
 8006e46:	2501      	movs	r5, #1
	return -2;
 8006e48:	426d      	negs	r5, r5
}
 8006e4a:	0028      	movs	r0, r5
 8006e4c:	b005      	add	sp, #20
 8006e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (r != 0x01) {
 8006e50:	2d01      	cmp	r5, #1
 8006e52:	d001      	beq.n	8006e58 <sd_init+0x74>
	return -2;
 8006e54:	2502      	movs	r5, #2
 8006e56:	e7f7      	b.n	8006e48 <sd_init+0x64>
	spi_cs_low();
 8006e58:	2180      	movs	r1, #128	; 0x80
 8006e5a:	20a0      	movs	r0, #160	; 0xa0
 8006e5c:	0032      	movs	r2, r6
 8006e5e:	0209      	lsls	r1, r1, #8
 8006e60:	05c0      	lsls	r0, r0, #23
 8006e62:	f7fe fa05 	bl	8005270 <HAL_GPIO_WritePin>
	sd_cmd(8, 0x1aa /* VHS = 1 */);
 8006e66:	21d5      	movs	r1, #213	; 0xd5
 8006e68:	2008      	movs	r0, #8
 8006e6a:	0049      	lsls	r1, r1, #1
 8006e6c:	f7ff fec2 	bl	8006bf4 <sd_cmd>
	r = sd_get_r7(&r7);
 8006e70:	a802      	add	r0, sp, #8
 8006e72:	f7ff ff0e 	bl	8006c92 <sd_get_r7>
 8006e76:	0006      	movs	r6, r0
	sd_nec();
 8006e78:	f7ff ff02 	bl	8006c80 <sd_nec>
	spi_cs_high();
 8006e7c:	2180      	movs	r1, #128	; 0x80
 8006e7e:	20a0      	movs	r0, #160	; 0xa0
 8006e80:	002a      	movs	r2, r5
 8006e82:	0209      	lsls	r1, r1, #8
 8006e84:	05c0      	lsls	r0, r0, #23
 8006e86:	f7fe f9f3 	bl	8005270 <HAL_GPIO_WritePin>
	hw->capabilities |= CAP_VER2_00;
 8006e8a:	002a      	movs	r2, r5
 8006e8c:	68e3      	ldr	r3, [r4, #12]
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	60e2      	str	r2, [r4, #12]
	if (r == 0xff)
 8006e92:	2eff      	cmp	r6, #255	; 0xff
 8006e94:	d0d7      	beq.n	8006e46 <sd_init+0x62>
	if (r == 0x01)
 8006e96:	2e01      	cmp	r6, #1
 8006e98:	d003      	beq.n	8006ea2 <sd_init+0xbe>
	else if (r & 0x4) {
 8006e9a:	0776      	lsls	r6, r6, #29
 8006e9c:	d5da      	bpl.n	8006e54 <sd_init+0x70>
		hw->capabilities &= ~CAP_VER2_00;
 8006e9e:	43ab      	bics	r3, r5
 8006ea0:	60e3      	str	r3, [r4, #12]
	spi_cs_low();
 8006ea2:	2180      	movs	r1, #128	; 0x80
 8006ea4:	20a0      	movs	r0, #160	; 0xa0
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	0209      	lsls	r1, r1, #8
 8006eaa:	05c0      	lsls	r0, r0, #23
 8006eac:	f7fe f9e0 	bl	8005270 <HAL_GPIO_WritePin>
	sd_cmd(58, 0);
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	203a      	movs	r0, #58	; 0x3a
 8006eb4:	f7ff fe9e 	bl	8006bf4 <sd_cmd>
	r = sd_get_r3(&r3);
 8006eb8:	a803      	add	r0, sp, #12
 8006eba:	f7ff feea 	bl	8006c92 <sd_get_r7>
 8006ebe:	0005      	movs	r5, r0
	sd_nec();
 8006ec0:	f7ff fede 	bl	8006c80 <sd_nec>
	spi_cs_high();
 8006ec4:	2180      	movs	r1, #128	; 0x80
 8006ec6:	20a0      	movs	r0, #160	; 0xa0
 8006ec8:	2201      	movs	r2, #1
 8006eca:	0209      	lsls	r1, r1, #8
 8006ecc:	05c0      	lsls	r0, r0, #23
 8006ece:	f7fe f9cf 	bl	8005270 <HAL_GPIO_WritePin>
	if (r == 0xff)
 8006ed2:	2dff      	cmp	r5, #255	; 0xff
 8006ed4:	d0b7      	beq.n	8006e46 <sd_init+0x62>
	if (r != 0x01 && !(r & 0x4)) { /* allow it to not be implemented - old cards */
 8006ed6:	2d01      	cmp	r5, #1
 8006ed8:	d001      	beq.n	8006ede <sd_init+0xfa>
 8006eda:	076d      	lsls	r5, r5, #29
 8006edc:	d5ba      	bpl.n	8006e54 <sd_init+0x70>
	if (hw->capabilities & CAP_VER2_00)
 8006ede:	2280      	movs	r2, #128	; 0x80
		spi_cs_low();
 8006ee0:	27a0      	movs	r7, #160	; 0xa0
	if (hw->capabilities & CAP_VER2_00)
 8006ee2:	68e3      	ldr	r3, [r4, #12]
 8006ee4:	05d2      	lsls	r2, r2, #23
 8006ee6:	079b      	lsls	r3, r3, #30
 8006ee8:	4013      	ands	r3, r2
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	4b5c      	ldr	r3, [pc, #368]	; (8007060 <sd_init+0x27c>)
		spi_cs_low();
 8006eee:	05ff      	lsls	r7, r7, #23
	if (hw->capabilities & CAP_VER2_00)
 8006ef0:	9300      	str	r3, [sp, #0]
		spi_cs_low();
 8006ef2:	2180      	movs	r1, #128	; 0x80
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	0038      	movs	r0, r7
 8006ef8:	0209      	lsls	r1, r1, #8
 8006efa:	f7fe f9b9 	bl	8005270 <HAL_GPIO_WritePin>
		sd_cmd(55, 0);
 8006efe:	2100      	movs	r1, #0
 8006f00:	2037      	movs	r0, #55	; 0x37
 8006f02:	f7ff fe77 	bl	8006bf4 <sd_cmd>
		r = sd_get_r1();
 8006f06:	f7ff fead 	bl	8006c64 <sd_get_r1>
 8006f0a:	0005      	movs	r5, r0
		sd_nec();
 8006f0c:	f7ff feb8 	bl	8006c80 <sd_nec>
		spi_cs_high();
 8006f10:	2180      	movs	r1, #128	; 0x80
 8006f12:	2201      	movs	r2, #1
 8006f14:	0038      	movs	r0, r7
 8006f16:	0209      	lsls	r1, r1, #8
 8006f18:	f7fe f9aa 	bl	8005270 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8006f1c:	2dff      	cmp	r5, #255	; 0xff
 8006f1e:	d100      	bne.n	8006f22 <sd_init+0x13e>
 8006f20:	e791      	b.n	8006e46 <sd_init+0x62>
		if (r & 0xfe) {
 8006f22:	2601      	movs	r6, #1
 8006f24:	43b5      	bics	r5, r6
 8006f26:	b2ea      	uxtb	r2, r5
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	d193      	bne.n	8006e54 <sd_init+0x70>
		spi_cs_low();
 8006f2c:	2180      	movs	r1, #128	; 0x80
 8006f2e:	0038      	movs	r0, r7
 8006f30:	0209      	lsls	r1, r1, #8
 8006f32:	f7fe f99d 	bl	8005270 <HAL_GPIO_WritePin>
		sd_cmd(41, hcs);
 8006f36:	9901      	ldr	r1, [sp, #4]
 8006f38:	2029      	movs	r0, #41	; 0x29
 8006f3a:	f7ff fe5b 	bl	8006bf4 <sd_cmd>
		r = sd_get_r1();
 8006f3e:	f7ff fe91 	bl	8006c64 <sd_get_r1>
 8006f42:	0005      	movs	r5, r0
		sd_nec();
 8006f44:	f7ff fe9c 	bl	8006c80 <sd_nec>
		spi_cs_high();
 8006f48:	2180      	movs	r1, #128	; 0x80
 8006f4a:	0032      	movs	r2, r6
 8006f4c:	0038      	movs	r0, r7
 8006f4e:	0209      	lsls	r1, r1, #8
 8006f50:	f7fe f98e 	bl	8005270 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8006f54:	2dff      	cmp	r5, #255	; 0xff
 8006f56:	d100      	bne.n	8006f5a <sd_init+0x176>
 8006f58:	e775      	b.n	8006e46 <sd_init+0x62>
		if (r & 0xfe) {
 8006f5a:	002b      	movs	r3, r5
 8006f5c:	43b3      	bics	r3, r6
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d000      	beq.n	8006f66 <sd_init+0x182>
 8006f64:	e776      	b.n	8006e54 <sd_init+0x70>
	} while (r != 0 && tries--);
 8006f66:	2d00      	cmp	r5, #0
 8006f68:	d023      	beq.n	8006fb2 <sd_init+0x1ce>
 8006f6a:	9b00      	ldr	r3, [sp, #0]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1be      	bne.n	8006ef2 <sd_init+0x10e>
 8006f74:	e76e      	b.n	8006e54 <sd_init+0x70>
		spi_cs_low();
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	20a0      	movs	r0, #160	; 0xa0
 8006f7a:	0209      	lsls	r1, r1, #8
 8006f7c:	05c0      	lsls	r0, r0, #23
 8006f7e:	f7fe f977 	bl	8005270 <HAL_GPIO_WritePin>
		sd_cmd(16, 512);
 8006f82:	2180      	movs	r1, #128	; 0x80
 8006f84:	2010      	movs	r0, #16
 8006f86:	0089      	lsls	r1, r1, #2
 8006f88:	f7ff fe34 	bl	8006bf4 <sd_cmd>
		r = sd_get_r1();
 8006f8c:	f7ff fe6a 	bl	8006c64 <sd_get_r1>
 8006f90:	0004      	movs	r4, r0
		sd_nec();
 8006f92:	f7ff fe75 	bl	8006c80 <sd_nec>
		spi_cs_high();
 8006f96:	2180      	movs	r1, #128	; 0x80
 8006f98:	20a0      	movs	r0, #160	; 0xa0
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	0209      	lsls	r1, r1, #8
 8006f9e:	05c0      	lsls	r0, r0, #23
 8006fa0:	f7fe f966 	bl	8005270 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8006fa4:	2cff      	cmp	r4, #255	; 0xff
 8006fa6:	d100      	bne.n	8006faa <sd_init+0x1c6>
 8006fa8:	e74d      	b.n	8006e46 <sd_init+0x62>
		if (r & 0xfe) {
 8006faa:	23fe      	movs	r3, #254	; 0xfe
 8006fac:	421c      	tst	r4, r3
 8006fae:	d030      	beq.n	8007012 <sd_init+0x22e>
 8006fb0:	e750      	b.n	8006e54 <sd_init+0x70>
	if (hw->capabilities & CAP_VER2_00) {
 8006fb2:	68e3      	ldr	r3, [r4, #12]
 8006fb4:	4233      	tst	r3, r6
 8006fb6:	d026      	beq.n	8007006 <sd_init+0x222>
		spi_cs_low();
 8006fb8:	2180      	movs	r1, #128	; 0x80
 8006fba:	20a0      	movs	r0, #160	; 0xa0
 8006fbc:	002a      	movs	r2, r5
 8006fbe:	0209      	lsls	r1, r1, #8
 8006fc0:	05c0      	lsls	r0, r0, #23
 8006fc2:	f7fe f955 	bl	8005270 <HAL_GPIO_WritePin>
		sd_cmd(58, 0);
 8006fc6:	0029      	movs	r1, r5
 8006fc8:	203a      	movs	r0, #58	; 0x3a
 8006fca:	f7ff fe13 	bl	8006bf4 <sd_cmd>
		r = sd_get_r3(&r3);
 8006fce:	a803      	add	r0, sp, #12
 8006fd0:	f7ff fe5f 	bl	8006c92 <sd_get_r7>
 8006fd4:	0007      	movs	r7, r0
		sd_nec();
 8006fd6:	f7ff fe53 	bl	8006c80 <sd_nec>
		spi_cs_high();
 8006fda:	2180      	movs	r1, #128	; 0x80
 8006fdc:	20a0      	movs	r0, #160	; 0xa0
 8006fde:	0032      	movs	r2, r6
 8006fe0:	0209      	lsls	r1, r1, #8
 8006fe2:	05c0      	lsls	r0, r0, #23
 8006fe4:	f7fe f944 	bl	8005270 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8006fe8:	2fff      	cmp	r7, #255	; 0xff
 8006fea:	d100      	bne.n	8006fee <sd_init+0x20a>
 8006fec:	e72b      	b.n	8006e46 <sd_init+0x62>
		if (r & 0xfe) {
 8006fee:	43b7      	bics	r7, r6
 8006ff0:	b2ff      	uxtb	r7, r7
 8006ff2:	2f00      	cmp	r7, #0
 8006ff4:	d000      	beq.n	8006ff8 <sd_init+0x214>
 8006ff6:	e72d      	b.n	8006e54 <sd_init+0x70>
			if (r3>>30 & 1) {
 8006ff8:	9b03      	ldr	r3, [sp, #12]
				hw->capabilities |= CAP_SDHC;
 8006ffa:	68e2      	ldr	r2, [r4, #12]
			if (r3>>30 & 1) {
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	d502      	bpl.n	8007006 <sd_init+0x222>
				hw->capabilities |= CAP_SDHC;
 8007000:	2302      	movs	r3, #2
 8007002:	4313      	orrs	r3, r2
 8007004:	60e3      	str	r3, [r4, #12]
	if ((hw->capabilities & CAP_SDHC) == 0) {
 8007006:	68e1      	ldr	r1, [r4, #12]
 8007008:	2302      	movs	r3, #2
 800700a:	000a      	movs	r2, r1
 800700c:	401a      	ands	r2, r3
 800700e:	4219      	tst	r1, r3
 8007010:	d0b1      	beq.n	8006f76 <sd_init+0x192>
	spi_cs_low();
 8007012:	2180      	movs	r1, #128	; 0x80
 8007014:	20a0      	movs	r0, #160	; 0xa0
 8007016:	2200      	movs	r2, #0
 8007018:	0209      	lsls	r1, r1, #8
 800701a:	05c0      	lsls	r0, r0, #23
 800701c:	f7fe f928 	bl	8005270 <HAL_GPIO_WritePin>
	sd_cmd(59, 0);
 8007020:	2100      	movs	r1, #0
 8007022:	203b      	movs	r0, #59	; 0x3b
 8007024:	f7ff fde6 	bl	8006bf4 <sd_cmd>
	r = sd_get_r1();
 8007028:	f7ff fe1c 	bl	8006c64 <sd_get_r1>
 800702c:	0004      	movs	r4, r0
	sd_nec();
 800702e:	f7ff fe27 	bl	8006c80 <sd_nec>
	spi_cs_high();
 8007032:	2180      	movs	r1, #128	; 0x80
 8007034:	20a0      	movs	r0, #160	; 0xa0
 8007036:	2201      	movs	r2, #1
 8007038:	0209      	lsls	r1, r1, #8
 800703a:	05c0      	lsls	r0, r0, #23
 800703c:	f7fe f918 	bl	8005270 <HAL_GPIO_WritePin>
	if (r == 0xff)
 8007040:	2cff      	cmp	r4, #255	; 0xff
 8007042:	d100      	bne.n	8007046 <sd_init+0x262>
 8007044:	e6ff      	b.n	8006e46 <sd_init+0x62>
	if (r & 0xfe) {
 8007046:	23fe      	movs	r3, #254	; 0xfe
 8007048:	0022      	movs	r2, r4
 800704a:	401a      	ands	r2, r3
 800704c:	421c      	tst	r4, r3
 800704e:	d000      	beq.n	8007052 <sd_init+0x26e>
 8007050:	e700      	b.n	8006e54 <sd_init+0x70>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8007052:	4802      	ldr	r0, [pc, #8]	; (800705c <sd_init+0x278>)
 8007054:	61c2      	str	r2, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8007056:	f7fe fec7 	bl	8005de8 <HAL_SPI_Init>
}
 800705a:	e6f6      	b.n	8006e4a <sd_init+0x66>
 800705c:	20000200 	.word	0x20000200
 8007060:	000003e9 	.word	0x000003e9

08007064 <hwif_init>:


/*** public API - on top of sd/spi code ***/

int hwif_init(hwif* hw)
{
 8007064:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int tries = 10;

	if (hw->initialized)
		return 0;
 8007066:	2500      	movs	r5, #0
	if (hw->initialized)
 8007068:	6803      	ldr	r3, [r0, #0]
{
 800706a:	0004      	movs	r4, r0
	if (hw->initialized)
 800706c:	42ab      	cmp	r3, r5
 800706e:	d10a      	bne.n	8007086 <hwif_init+0x22>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8007070:	2320      	movs	r3, #32
 8007072:	4850      	ldr	r0, [pc, #320]	; (80071b4 <hwif_init+0x150>)
}
 8007074:	260b      	movs	r6, #11
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8007076:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8007078:	f7fe feb6 	bl	8005de8 <HAL_SPI_Init>

	spi_init();

	while (tries--) {
 800707c:	3e01      	subs	r6, #1
 800707e:	2e00      	cmp	r6, #0
 8007080:	d104      	bne.n	800708c <hwif_init+0x28>
	/* read status register */
	sd_read_status(hw);

	sd_read_cid(hw);
	if (sd_read_csd(hw) != 0)
		return -1;
 8007082:	2501      	movs	r5, #1
 8007084:	426d      	negs	r5, r5

	hw->initialized = 1;
	return 0;
}
 8007086:	0028      	movs	r0, r5
 8007088:	b004      	add	sp, #16
 800708a:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_init(hw) == 0)
 800708c:	0020      	movs	r0, r4
 800708e:	f7ff fea9 	bl	8006de4 <sd_init>
 8007092:	1e05      	subs	r5, r0, #0
 8007094:	d1f2      	bne.n	800707c <hwif_init+0x18>
	sd_read_status(hw);
 8007096:	f7ff fe7f 	bl	8006d98 <sd_read_status.constprop.0.isra.0>
	spi_cs_low();
 800709a:	2180      	movs	r1, #128	; 0x80
 800709c:	20a0      	movs	r0, #160	; 0xa0
 800709e:	002a      	movs	r2, r5
 80070a0:	0209      	lsls	r1, r1, #8
 80070a2:	05c0      	lsls	r0, r0, #23
 80070a4:	f7fe f8e4 	bl	8005270 <HAL_GPIO_WritePin>
	sd_cmd(10, 0);
 80070a8:	0029      	movs	r1, r5
 80070aa:	200a      	movs	r0, #10
 80070ac:	f7ff fda2 	bl	8006bf4 <sd_cmd>
	r = sd_get_r1();
 80070b0:	f7ff fdd8 	bl	8006c64 <sd_get_r1>
	if (r == 0xff) {
 80070b4:	28ff      	cmp	r0, #255	; 0xff
 80070b6:	d11d      	bne.n	80070f4 <hwif_init+0x90>
		spi_cs_high();
 80070b8:	2201      	movs	r2, #1
	spi_cs_high();
 80070ba:	2180      	movs	r1, #128	; 0x80
 80070bc:	20a0      	movs	r0, #160	; 0xa0
 80070be:	0209      	lsls	r1, r1, #8
 80070c0:	05c0      	lsls	r0, r0, #23
 80070c2:	f7fe f8d5 	bl	8005270 <HAL_GPIO_WritePin>
	spi_cs_low();
 80070c6:	2180      	movs	r1, #128	; 0x80
 80070c8:	20a0      	movs	r0, #160	; 0xa0
 80070ca:	2200      	movs	r2, #0
 80070cc:	0209      	lsls	r1, r1, #8
 80070ce:	05c0      	lsls	r0, r0, #23
 80070d0:	f7fe f8ce 	bl	8005270 <HAL_GPIO_WritePin>
	sd_cmd(9, 0);
 80070d4:	2100      	movs	r1, #0
 80070d6:	2009      	movs	r0, #9
 80070d8:	f7ff fd8c 	bl	8006bf4 <sd_cmd>
	r = sd_get_r1();
 80070dc:	f7ff fdc2 	bl	8006c64 <sd_get_r1>
	if (r == 0xff) {
 80070e0:	28ff      	cmp	r0, #255	; 0xff
 80070e2:	d114      	bne.n	800710e <hwif_init+0xaa>
		spi_cs_high();
 80070e4:	2180      	movs	r1, #128	; 0x80
 80070e6:	20a0      	movs	r0, #160	; 0xa0
 80070e8:	2201      	movs	r2, #1
 80070ea:	0209      	lsls	r1, r1, #8
 80070ec:	05c0      	lsls	r0, r0, #23
 80070ee:	f7fe f8bf 	bl	8005270 <HAL_GPIO_WritePin>
 80070f2:	e7c6      	b.n	8007082 <hwif_init+0x1e>
	if (r & 0xfe) {
 80070f4:	2501      	movs	r5, #1
 80070f6:	43a8      	bics	r0, r5
 80070f8:	b2c0      	uxtb	r0, r0
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d1dc      	bne.n	80070b8 <hwif_init+0x54>
	r = sd_get_data(hw, buf, 16);
 80070fe:	2110      	movs	r1, #16
 8007100:	4668      	mov	r0, sp
 8007102:	f7ff fde3 	bl	8006ccc <sd_get_data.constprop.0>
	sd_nec();
 8007106:	f7ff fdbb 	bl	8006c80 <sd_nec>
	spi_cs_high();
 800710a:	002a      	movs	r2, r5
 800710c:	e7d5      	b.n	80070ba <hwif_init+0x56>
	if (r & 0xfe) {
 800710e:	2601      	movs	r6, #1
 8007110:	43b0      	bics	r0, r6
 8007112:	b2c0      	uxtb	r0, r0
 8007114:	2800      	cmp	r0, #0
 8007116:	d1e5      	bne.n	80070e4 <hwif_init+0x80>
	r = sd_get_data(hw, buf, 16);
 8007118:	2110      	movs	r1, #16
 800711a:	4668      	mov	r0, sp
 800711c:	f7ff fdd6 	bl	8006ccc <sd_get_data.constprop.0>
 8007120:	0005      	movs	r5, r0
	sd_nec();
 8007122:	f7ff fdad 	bl	8006c80 <sd_nec>
	spi_cs_high();
 8007126:	2180      	movs	r1, #128	; 0x80
 8007128:	20a0      	movs	r0, #160	; 0xa0
 800712a:	0032      	movs	r2, r6
 800712c:	0209      	lsls	r1, r1, #8
 800712e:	05c0      	lsls	r0, r0, #23
 8007130:	f7fe f89e 	bl	8005270 <HAL_GPIO_WritePin>
	if (r == -1) {
 8007134:	1c6b      	adds	r3, r5, #1
 8007136:	d0a6      	beq.n	8007086 <hwif_init+0x22>
	capacity = (((buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6)+1) << (2+(((buf[9]&3) << 1) | buf[10]>>7)) << ((buf[5] & 0xf) - 9);
 8007138:	466b      	mov	r3, sp
 800713a:	7a99      	ldrb	r1, [r3, #10]
 800713c:	79da      	ldrb	r2, [r3, #7]
 800713e:	7a1e      	ldrb	r6, [r3, #8]
 8007140:	7a58      	ldrb	r0, [r3, #9]
	if ((buf[0] >> 6) + 1 == 1) {
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	099b      	lsrs	r3, r3, #6
 8007146:	d12a      	bne.n	800719e <hwif_init+0x13a>
	capacity = (((buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6)+1) << (2+(((buf[9]&3) << 1) | buf[10]>>7)) << ((buf[5] & 0xf) - 9);
 8007148:	466b      	mov	r3, sp
 800714a:	799d      	ldrb	r5, [r3, #6]
 800714c:	23c0      	movs	r3, #192	; 0xc0
 800714e:	02ad      	lsls	r5, r5, #10
 8007150:	011b      	lsls	r3, r3, #4
 8007152:	0092      	lsls	r2, r2, #2
 8007154:	09b6      	lsrs	r6, r6, #6
 8007156:	401d      	ands	r5, r3
 8007158:	4332      	orrs	r2, r6
 800715a:	432a      	orrs	r2, r5
 800715c:	1c53      	adds	r3, r2, #1
 800715e:	2206      	movs	r2, #6
 8007160:	0040      	lsls	r0, r0, #1
 8007162:	4010      	ands	r0, r2
 8007164:	09ca      	lsrs	r2, r1, #7
 8007166:	4310      	orrs	r0, r2
 8007168:	466a      	mov	r2, sp
 800716a:	3002      	adds	r0, #2
 800716c:	4083      	lsls	r3, r0
 800716e:	200f      	movs	r0, #15
 8007170:	7952      	ldrb	r2, [r2, #5]
 8007172:	4002      	ands	r2, r0
 8007174:	3a09      	subs	r2, #9
 8007176:	4093      	lsls	r3, r2
	hw->sectors = capacity;
 8007178:	6063      	str	r3, [r4, #4]
	hw->erase_sectors = 1;
 800717a:	2301      	movs	r3, #1
	if (((buf[10]>>6)&1) == 0)
 800717c:	098a      	lsrs	r2, r1, #6
	hw->erase_sectors = 1;
 800717e:	60a3      	str	r3, [r4, #8]
	if (((buf[10]>>6)&1) == 0)
 8007180:	421a      	tst	r2, r3
 8007182:	d108      	bne.n	8007196 <hwif_init+0x132>
		hw->erase_sectors = ((buf[10]&0x3f)<<1 | buf[11]>>7) + 1;
 8007184:	4099      	lsls	r1, r3
 8007186:	337d      	adds	r3, #125	; 0x7d
 8007188:	4019      	ands	r1, r3
 800718a:	466b      	mov	r3, sp
 800718c:	7adb      	ldrb	r3, [r3, #11]
 800718e:	09db      	lsrs	r3, r3, #7
 8007190:	4319      	orrs	r1, r3
 8007192:	3101      	adds	r1, #1
 8007194:	60a1      	str	r1, [r4, #8]
	hw->initialized = 1;
 8007196:	2301      	movs	r3, #1
	return 0;
 8007198:	2500      	movs	r5, #0
	hw->initialized = 1;
 800719a:	6023      	str	r3, [r4, #0]
	return 0;
 800719c:	e773      	b.n	8007086 <hwif_init+0x22>
		hw->capabilities |= CAP_SDHC;
 800719e:	2302      	movs	r3, #2
 80071a0:	68e5      	ldr	r5, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 80071a2:	0236      	lsls	r6, r6, #8
		hw->capabilities |= CAP_SDHC;
 80071a4:	432b      	orrs	r3, r5
 80071a6:	60e3      	str	r3, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 80071a8:	0413      	lsls	r3, r2, #16
 80071aa:	4333      	orrs	r3, r6
 80071ac:	4303      	orrs	r3, r0
	capacity *= 1024; /* in 512 B sectors */
 80071ae:	029b      	lsls	r3, r3, #10
 80071b0:	e7e2      	b.n	8007178 <hwif_init+0x114>
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000200 	.word	0x20000200

080071b8 <sd_read>:

int sd_read(hwif* hw, uint32_t address, uint8_t *buf)
{
 80071b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ba:	0005      	movs	r5, r0
 80071bc:	000e      	movs	r6, r1
 80071be:	0017      	movs	r7, r2
	int r;
	int tries = 10;

	r = sd_readsector(hw, address, buf);
 80071c0:	f7ff fda6 	bl	8006d10 <sd_readsector>

	while (r < 0 && tries--) {
 80071c4:	230b      	movs	r3, #11
	r = sd_readsector(hw, address, buf);
 80071c6:	0004      	movs	r4, r0
	while (r < 0 && tries--) {
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	2c00      	cmp	r4, #0
 80071cc:	da04      	bge.n	80071d8 <sd_read+0x20>
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <sd_read+0x24>
		r = sd_readsector(hw, address, buf);
	}
	if (tries == -1)

	return r;
}
 80071d8:	0020      	movs	r0, r4
 80071da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (sd_init(hw) != 0)
 80071dc:	0028      	movs	r0, r5
 80071de:	f7ff fe01 	bl	8006de4 <sd_init>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d1f1      	bne.n	80071ca <sd_read+0x12>
		sd_read_status(hw);
 80071e6:	f7ff fdd7 	bl	8006d98 <sd_read_status.constprop.0.isra.0>
		r = sd_readsector(hw, address, buf);
 80071ea:	003a      	movs	r2, r7
 80071ec:	0031      	movs	r1, r6
 80071ee:	0028      	movs	r0, r5
 80071f0:	f7ff fd8e 	bl	8006d10 <sd_readsector>
 80071f4:	0004      	movs	r4, r0
 80071f6:	e7e8      	b.n	80071ca <sd_read+0x12>

080071f8 <HAL_SPI_RxCpltCallback>:

	return r;
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
    dma_complete = 1;
 80071f8:	2201      	movs	r2, #1
 80071fa:	4b01      	ldr	r3, [pc, #4]	; (8007200 <HAL_SPI_RxCpltCallback+0x8>)
 80071fc:	701a      	strb	r2, [r3, #0]
	return;
}
 80071fe:	4770      	bx	lr
 8007200:	20000d70 	.word	0x20000d70

08007204 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007204:	6802      	ldr	r2, [r0, #0]
 8007206:	1e13      	subs	r3, r2, #0
 8007208:	d103      	bne.n	8007212 <get_ldnumber+0xe>
	int vol = -1;
 800720a:	2001      	movs	r0, #1
 800720c:	4240      	negs	r0, r0
 800720e:	e00e      	b.n	800722e <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007210:	3301      	adds	r3, #1
 8007212:	7819      	ldrb	r1, [r3, #0]
 8007214:	291f      	cmp	r1, #31
 8007216:	d909      	bls.n	800722c <get_ldnumber+0x28>
 8007218:	293a      	cmp	r1, #58	; 0x3a
 800721a:	d1f9      	bne.n	8007210 <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 800721c:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800721e:	428b      	cmp	r3, r1
 8007220:	d1f3      	bne.n	800720a <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007222:	7812      	ldrb	r2, [r2, #0]
 8007224:	2a30      	cmp	r2, #48	; 0x30
 8007226:	d1f0      	bne.n	800720a <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 8007228:	3301      	adds	r3, #1
 800722a:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800722c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800722e:	4770      	bx	lr

08007230 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007230:	b510      	push	{r4, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007232:	2800      	cmp	r0, #0
 8007234:	d011      	beq.n	800725a <validate+0x2a>
 8007236:	6803      	ldr	r3, [r0, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00e      	beq.n	800725a <validate+0x2a>
 800723c:	781a      	ldrb	r2, [r3, #0]
 800723e:	2a00      	cmp	r2, #0
 8007240:	d00b      	beq.n	800725a <validate+0x2a>
 8007242:	88d9      	ldrh	r1, [r3, #6]
 8007244:	8882      	ldrh	r2, [r0, #4]
 8007246:	4291      	cmp	r1, r2
 8007248:	d107      	bne.n	800725a <validate+0x2a>
 800724a:	7858      	ldrb	r0, [r3, #1]
 800724c:	f7ff fc82 	bl	8006b54 <disk_status>
 8007250:	2201      	movs	r2, #1
 8007252:	0003      	movs	r3, r0
 8007254:	4013      	ands	r3, r2
 8007256:	4210      	tst	r0, r2
 8007258:	d000      	beq.n	800725c <validate+0x2c>
		return FR_INVALID_OBJECT;
 800725a:	2309      	movs	r3, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 800725c:	0018      	movs	r0, r3
 800725e:	bd10      	pop	{r4, pc}

08007260 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007260:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8007262:	b570      	push	{r4, r5, r6, lr}
 8007264:	0004      	movs	r4, r0
 8007266:	000d      	movs	r5, r1
	FRESULT res = FR_OK;
 8007268:	2000      	movs	r0, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800726a:	428b      	cmp	r3, r1
 800726c:	d00c      	beq.n	8007288 <move_window+0x28>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800726e:	000a      	movs	r2, r1
 8007270:	0021      	movs	r1, r4
 8007272:	2301      	movs	r3, #1
 8007274:	7860      	ldrb	r0, [r4, #1]
 8007276:	3128      	adds	r1, #40	; 0x28
 8007278:	f7ff fc7e 	bl	8006b78 <disk_read>
 800727c:	2800      	cmp	r0, #0
 800727e:	d002      	beq.n	8007286 <move_window+0x26>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007280:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 8007282:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007284:	426d      	negs	r5, r5
			fs->winsect = sector;
 8007286:	6265      	str	r5, [r4, #36]	; 0x24
}
 8007288:	bd70      	pop	{r4, r5, r6, pc}
	...

0800728c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800728c:	2300      	movs	r3, #0
{
 800728e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007290:	7103      	strb	r3, [r0, #4]
 8007292:	3b01      	subs	r3, #1
 8007294:	6243      	str	r3, [r0, #36]	; 0x24
{
 8007296:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007298:	f7ff ffe2 	bl	8007260 <move_window>
 800729c:	2800      	cmp	r0, #0
 800729e:	d11c      	bne.n	80072da <check_fs+0x4e>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80072a0:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <check_fs+0x58>)
 80072a2:	5ae2      	ldrh	r2, [r4, r3]
 80072a4:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <check_fs+0x5c>)
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d119      	bne.n	80072de <check_fs+0x52>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80072aa:	0023      	movs	r3, r4
 80072ac:	335e      	adds	r3, #94	; 0x5e
 80072ae:	881a      	ldrh	r2, [r3, #0]
 80072b0:	885b      	ldrh	r3, [r3, #2]
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	4313      	orrs	r3, r2
 80072b6:	4a0d      	ldr	r2, [pc, #52]	; (80072ec <check_fs+0x60>)
 80072b8:	021b      	lsls	r3, r3, #8
 80072ba:	0a1b      	lsrs	r3, r3, #8
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00b      	beq.n	80072d8 <check_fs+0x4c>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80072c0:	347a      	adds	r4, #122	; 0x7a
 80072c2:	8860      	ldrh	r0, [r4, #2]
 80072c4:	8823      	ldrh	r3, [r4, #0]
 80072c6:	0400      	lsls	r0, r0, #16
 80072c8:	4318      	orrs	r0, r3
 80072ca:	0200      	lsls	r0, r0, #8
 80072cc:	4b08      	ldr	r3, [pc, #32]	; (80072f0 <check_fs+0x64>)
 80072ce:	0a00      	lsrs	r0, r0, #8
 80072d0:	18c0      	adds	r0, r0, r3
 80072d2:	1e43      	subs	r3, r0, #1
 80072d4:	4198      	sbcs	r0, r3
		return 3;
 80072d6:	b2c0      	uxtb	r0, r0
}
 80072d8:	bd10      	pop	{r4, pc}
		return 3;
 80072da:	2003      	movs	r0, #3
 80072dc:	e7fc      	b.n	80072d8 <check_fs+0x4c>
		return 2;
 80072de:	2002      	movs	r0, #2
 80072e0:	e7fa      	b.n	80072d8 <check_fs+0x4c>
 80072e2:	46c0      	nop			; (mov r8, r8)
 80072e4:	00000226 	.word	0x00000226
 80072e8:	0000aa55 	.word	0x0000aa55
 80072ec:	00544146 	.word	0x00544146
 80072f0:	ffabbeba 	.word	0xffabbeba

080072f4 <find_volume.constprop.0>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 80072f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 80072f6:	2300      	movs	r3, #0
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 80072f8:	0007      	movs	r7, r0
 80072fa:	b08b      	sub	sp, #44	; 0x2c
 80072fc:	0008      	movs	r0, r1
	*rfs = 0;
 80072fe:	603b      	str	r3, [r7, #0]
	vol = get_ldnumber(path);
 8007300:	f7ff ff80 	bl	8007204 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007304:	250b      	movs	r5, #11
	vol = get_ldnumber(path);
 8007306:	1e06      	subs	r6, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 8007308:	db15      	blt.n	8007336 <find_volume.constprop.0+0x42>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800730a:	4b6f      	ldr	r3, [pc, #444]	; (80074c8 <find_volume.constprop.0+0x1d4>)
 800730c:	0082      	lsls	r2, r0, #2
 800730e:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007310:	3501      	adds	r5, #1
 8007312:	2c00      	cmp	r4, #0
 8007314:	d00f      	beq.n	8007336 <find_volume.constprop.0+0x42>
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007316:	7823      	ldrb	r3, [r4, #0]
	*rfs = fs;							/* Return pointer to the file system object */
 8007318:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10e      	bne.n	800733c <find_volume.constprop.0+0x48>
	fs->fs_type = 0;					/* Clear the file system object */
 800731e:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007320:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8007322:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007324:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007326:	f7ff fc1d 	bl	8006b64 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800732a:	2601      	movs	r6, #1
 800732c:	0007      	movs	r7, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800732e:	2503      	movs	r5, #3
 8007330:	4037      	ands	r7, r6
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007332:	4230      	tst	r0, r6
 8007334:	d00b      	beq.n	800734e <find_volume.constprop.0+0x5a>
}
 8007336:	0028      	movs	r0, r5
 8007338:	b00b      	add	sp, #44	; 0x2c
 800733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = disk_status(fs->drv);
 800733c:	7860      	ldrb	r0, [r4, #1]
 800733e:	f7ff fc09 	bl	8006b54 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007342:	2301      	movs	r3, #1
 8007344:	0005      	movs	r5, r0
 8007346:	401d      	ands	r5, r3
 8007348:	4218      	tst	r0, r3
 800734a:	d1e8      	bne.n	800731e <find_volume.constprop.0+0x2a>
 800734c:	e7f3      	b.n	8007336 <find_volume.constprop.0+0x42>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800734e:	0039      	movs	r1, r7
 8007350:	0020      	movs	r0, r4
 8007352:	f7ff ff9b 	bl	800728c <check_fs>
 8007356:	0005      	movs	r5, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007358:	2801      	cmp	r0, #1
 800735a:	d12c      	bne.n	80073b6 <find_volume.constprop.0+0xc2>
 800735c:	0023      	movs	r3, r4
 800735e:	4a5b      	ldr	r2, [pc, #364]	; (80074cc <find_volume.constprop.0+0x1d8>)
 8007360:	33e7      	adds	r3, #231	; 0xe7
 8007362:	a906      	add	r1, sp, #24
 8007364:	33ff      	adds	r3, #255	; 0xff
 8007366:	18a0      	adds	r0, r4, r2
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007368:	2200      	movs	r2, #0
 800736a:	791e      	ldrb	r6, [r3, #4]
 800736c:	4296      	cmp	r6, r2
 800736e:	d009      	beq.n	8007384 <find_volume.constprop.0+0x90>
 8007370:	7a5a      	ldrb	r2, [r3, #9]
 8007372:	7a1e      	ldrb	r6, [r3, #8]
 8007374:	0212      	lsls	r2, r2, #8
 8007376:	4332      	orrs	r2, r6
 8007378:	7a9e      	ldrb	r6, [r3, #10]
 800737a:	0436      	lsls	r6, r6, #16
 800737c:	4316      	orrs	r6, r2
 800737e:	7ada      	ldrb	r2, [r3, #11]
 8007380:	0612      	lsls	r2, r2, #24
 8007382:	4332      	orrs	r2, r6
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007384:	3310      	adds	r3, #16
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007386:	c104      	stmia	r1!, {r2}
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007388:	4283      	cmp	r3, r0
 800738a:	d1ed      	bne.n	8007368 <find_volume.constprop.0+0x74>
 800738c:	2600      	movs	r6, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800738e:	2702      	movs	r7, #2
			bsect = br[i];
 8007390:	00b3      	lsls	r3, r6, #2
 8007392:	aa06      	add	r2, sp, #24
 8007394:	58d3      	ldr	r3, [r2, r3]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007396:	0038      	movs	r0, r7
			bsect = br[i];
 8007398:	9301      	str	r3, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <find_volume.constprop.0+0xb6>
 800739e:	0019      	movs	r1, r3
 80073a0:	0020      	movs	r0, r4
 80073a2:	f7ff ff73 	bl	800728c <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d00d      	beq.n	80073c6 <find_volume.constprop.0+0xd2>
 80073aa:	3601      	adds	r6, #1
 80073ac:	2e04      	cmp	r6, #4
 80073ae:	d1ef      	bne.n	8007390 <find_volume.constprop.0+0x9c>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80073b0:	2803      	cmp	r0, #3
 80073b2:	d106      	bne.n	80073c2 <find_volume.constprop.0+0xce>
 80073b4:	e7bf      	b.n	8007336 <find_volume.constprop.0+0x42>
 80073b6:	2803      	cmp	r0, #3
 80073b8:	d100      	bne.n	80073bc <find_volume.constprop.0+0xc8>
 80073ba:	e083      	b.n	80074c4 <find_volume.constprop.0+0x1d0>
	bsect = 0;
 80073bc:	9701      	str	r7, [sp, #4]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80073be:	2800      	cmp	r0, #0
 80073c0:	d001      	beq.n	80073c6 <find_volume.constprop.0+0xd2>
 80073c2:	250d      	movs	r5, #13
 80073c4:	e7b7      	b.n	8007336 <find_volume.constprop.0+0x42>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80073c6:	0023      	movs	r3, r4
 80073c8:	2280      	movs	r2, #128	; 0x80
 80073ca:	3333      	adds	r3, #51	; 0x33
 80073cc:	7819      	ldrb	r1, [r3, #0]
 80073ce:	785b      	ldrb	r3, [r3, #1]
 80073d0:	0092      	lsls	r2, r2, #2
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	430b      	orrs	r3, r1
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d1f3      	bne.n	80073c2 <find_volume.constprop.0+0xce>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 80073da:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 80073dc:	2f00      	cmp	r7, #0
 80073de:	d100      	bne.n	80073e2 <find_volume.constprop.0+0xee>
 80073e0:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80073e2:	0023      	movs	r3, r4
	fs->fsize = fasize;
 80073e4:	6127      	str	r7, [r4, #16]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80073e6:	3338      	adds	r3, #56	; 0x38
 80073e8:	781a      	ldrb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80073ea:	1e53      	subs	r3, r2, #1
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80073ec:	70e2      	strb	r2, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d8e7      	bhi.n	80073c2 <find_volume.constprop.0+0xce>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 80073f2:	0023      	movs	r3, r4
 80073f4:	3335      	adds	r3, #53	; 0x35
 80073f6:	781e      	ldrb	r6, [r3, #0]
 80073f8:	70a6      	strb	r6, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80073fa:	2e00      	cmp	r6, #0
 80073fc:	d0e1      	beq.n	80073c2 <find_volume.constprop.0+0xce>
 80073fe:	1e73      	subs	r3, r6, #1
 8007400:	421e      	tst	r6, r3
 8007402:	d1de      	bne.n	80073c2 <find_volume.constprop.0+0xce>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007404:	0023      	movs	r3, r4
 8007406:	3339      	adds	r3, #57	; 0x39
 8007408:	785d      	ldrb	r5, [r3, #1]
 800740a:	7819      	ldrb	r1, [r3, #0]
 800740c:	022d      	lsls	r5, r5, #8
 800740e:	430d      	orrs	r5, r1
 8007410:	8125      	strh	r5, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007412:	072b      	lsls	r3, r5, #28
 8007414:	d1d5      	bne.n	80073c2 <find_volume.constprop.0+0xce>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 8007416:	0023      	movs	r3, r4
 8007418:	333b      	adds	r3, #59	; 0x3b
 800741a:	7819      	ldrb	r1, [r3, #0]
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	430b      	orrs	r3, r1
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 8007422:	d100      	bne.n	8007426 <find_volume.constprop.0+0x132>
 8007424:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007426:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8007428:	9102      	str	r1, [sp, #8]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800742a:	2900      	cmp	r1, #0
 800742c:	d0c9      	beq.n	80073c2 <find_volume.constprop.0+0xce>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800742e:	437a      	muls	r2, r7
 8007430:	9204      	str	r2, [sp, #16]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007432:	092a      	lsrs	r2, r5, #4
 8007434:	1852      	adds	r2, r2, r1
 8007436:	9904      	ldr	r1, [sp, #16]
 8007438:	1852      	adds	r2, r2, r1
 800743a:	9203      	str	r2, [sp, #12]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800743c:	429a      	cmp	r2, r3
 800743e:	d8c0      	bhi.n	80073c2 <find_volume.constprop.0+0xce>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007440:	1a9b      	subs	r3, r3, r2
 8007442:	0018      	movs	r0, r3
 8007444:	0031      	movs	r1, r6
 8007446:	9305      	str	r3, [sp, #20]
 8007448:	f7f8 fe5e 	bl	8000108 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800744c:	9b05      	ldr	r3, [sp, #20]
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800744e:	0002      	movs	r2, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007450:	42b3      	cmp	r3, r6
 8007452:	d3b6      	bcc.n	80073c2 <find_volume.constprop.0+0xce>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007454:	491e      	ldr	r1, [pc, #120]	; (80074d0 <find_volume.constprop.0+0x1dc>)
	fmt = FS_FAT12;
 8007456:	2301      	movs	r3, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007458:	4288      	cmp	r0, r1
 800745a:	d904      	bls.n	8007466 <find_volume.constprop.0+0x172>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800745c:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <find_volume.constprop.0+0x1e0>)
 800745e:	4283      	cmp	r3, r0
 8007460:	419b      	sbcs	r3, r3
 8007462:	425b      	negs	r3, r3
 8007464:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007466:	9801      	ldr	r0, [sp, #4]
	fs->volbase = bsect;								/* Volume start sector */
 8007468:	9901      	ldr	r1, [sp, #4]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800746a:	4684      	mov	ip, r0
	fs->volbase = bsect;								/* Volume start sector */
 800746c:	6161      	str	r1, [r4, #20]
	fs->database = bsect + sysect;						/* Data start sector */
 800746e:	9803      	ldr	r0, [sp, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007470:	9902      	ldr	r1, [sp, #8]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007472:	3202      	adds	r2, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007474:	4461      	add	r1, ip
	fs->database = bsect + sysect;						/* Data start sector */
 8007476:	4460      	add	r0, ip
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007478:	60e2      	str	r2, [r4, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800747a:	61a1      	str	r1, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 800747c:	6220      	str	r0, [r4, #32]
	if (fmt == FS_FAT32) {
 800747e:	2b03      	cmp	r3, #3
 8007480:	d112      	bne.n	80074a8 <find_volume.constprop.0+0x1b4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007482:	2d00      	cmp	r5, #0
 8007484:	d19d      	bne.n	80073c2 <find_volume.constprop.0+0xce>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8007486:	6d61      	ldr	r1, [r4, #84]	; 0x54
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007488:	0090      	lsls	r0, r2, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800748a:	4a13      	ldr	r2, [pc, #76]	; (80074d8 <find_volume.constprop.0+0x1e4>)
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 800748c:	61e1      	str	r1, [r4, #28]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800748e:	1880      	adds	r0, r0, r2
 8007490:	0a40      	lsrs	r0, r0, #9
 8007492:	4287      	cmp	r7, r0
 8007494:	d395      	bcc.n	80073c2 <find_volume.constprop.0+0xce>
	fs->id = ++Fsid;	/* File system mount ID */
 8007496:	4a11      	ldr	r2, [pc, #68]	; (80074dc <find_volume.constprop.0+0x1e8>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8007498:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800749a:	8813      	ldrh	r3, [r2, #0]
	return FR_OK;
 800749c:	2500      	movs	r5, #0
	fs->id = ++Fsid;	/* File system mount ID */
 800749e:	3301      	adds	r3, #1
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	8013      	strh	r3, [r2, #0]
 80074a4:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 80074a6:	e746      	b.n	8007336 <find_volume.constprop.0+0x42>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80074a8:	2d00      	cmp	r5, #0
 80074aa:	d08a      	beq.n	80073c2 <find_volume.constprop.0+0xce>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80074ac:	9804      	ldr	r0, [sp, #16]
 80074ae:	1841      	adds	r1, r0, r1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80074b0:	0050      	lsls	r0, r2, #1
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d0e9      	beq.n	800748a <find_volume.constprop.0+0x196>
 80074b6:	2003      	movs	r0, #3
 80074b8:	2501      	movs	r5, #1
 80074ba:	4350      	muls	r0, r2
 80074bc:	402a      	ands	r2, r5
 80074be:	0840      	lsrs	r0, r0, #1
 80074c0:	1880      	adds	r0, r0, r2
 80074c2:	e7e2      	b.n	800748a <find_volume.constprop.0+0x196>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80074c4:	0035      	movs	r5, r6
 80074c6:	e736      	b.n	8007336 <find_volume.constprop.0+0x42>
 80074c8:	20000d74 	.word	0x20000d74
 80074cc:	00000226 	.word	0x00000226
 80074d0:	00000ff5 	.word	0x00000ff5
 80074d4:	0000fff5 	.word	0x0000fff5
 80074d8:	000001ff 	.word	0x000001ff
 80074dc:	20000d78 	.word	0x20000d78

080074e0 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074e0:	68c2      	ldr	r2, [r0, #12]
	clst -= 2;
 80074e2:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074e4:	3a02      	subs	r2, #2
{
 80074e6:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074e8:	2000      	movs	r0, #0
 80074ea:	428a      	cmp	r2, r1
 80074ec:	d903      	bls.n	80074f6 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
 80074ee:	789a      	ldrb	r2, [r3, #2]
 80074f0:	6a18      	ldr	r0, [r3, #32]
 80074f2:	4351      	muls	r1, r2
 80074f4:	1808      	adds	r0, r1, r0
}
 80074f6:	4770      	bx	lr

080074f8 <get_fat>:
{
 80074f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 80074fa:	2501      	movs	r5, #1
{
 80074fc:	0006      	movs	r6, r0
 80074fe:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007500:	42a9      	cmp	r1, r5
 8007502:	d914      	bls.n	800752e <get_fat+0x36>
 8007504:	68c3      	ldr	r3, [r0, #12]
 8007506:	428b      	cmp	r3, r1
 8007508:	d911      	bls.n	800752e <get_fat+0x36>
		switch (fs->fs_type) {
 800750a:	7803      	ldrb	r3, [r0, #0]
 800750c:	2b02      	cmp	r3, #2
 800750e:	d02e      	beq.n	800756e <get_fat+0x76>
 8007510:	2b03      	cmp	r3, #3
 8007512:	d03e      	beq.n	8007592 <get_fat+0x9a>
 8007514:	42ab      	cmp	r3, r5
 8007516:	d10a      	bne.n	800752e <get_fat+0x36>
			bc = (UINT)clst; bc += bc / 2;
 8007518:	084f      	lsrs	r7, r1, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800751a:	6983      	ldr	r3, [r0, #24]
			bc = (UINT)clst; bc += bc / 2;
 800751c:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800751e:	0a79      	lsrs	r1, r7, #9
 8007520:	18c9      	adds	r1, r1, r3
 8007522:	f7ff fe9d 	bl	8007260 <move_window>
 8007526:	2800      	cmp	r0, #0
 8007528:	d003      	beq.n	8007532 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800752a:	2501      	movs	r5, #1
 800752c:	426d      	negs	r5, r5
}
 800752e:	0028      	movs	r0, r5
 8007530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8007532:	1c7b      	adds	r3, r7, #1
 8007534:	05ff      	lsls	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007536:	0a59      	lsrs	r1, r3, #9
			wc = fs->win[bc++ % SS(fs)];
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	0dff      	lsrs	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800753c:	69b3      	ldr	r3, [r6, #24]
			wc = fs->win[bc++ % SS(fs)];
 800753e:	19f7      	adds	r7, r6, r7
 8007540:	3728      	adds	r7, #40	; 0x28
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007542:	0030      	movs	r0, r6
 8007544:	18c9      	adds	r1, r1, r3
			wc = fs->win[bc++ % SS(fs)];
 8007546:	783f      	ldrb	r7, [r7, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007548:	f7ff fe8a 	bl	8007260 <move_window>
 800754c:	2800      	cmp	r0, #0
 800754e:	d1ec      	bne.n	800752a <get_fat+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007550:	9b01      	ldr	r3, [sp, #4]
 8007552:	05db      	lsls	r3, r3, #23
 8007554:	0ddb      	lsrs	r3, r3, #23
 8007556:	18f3      	adds	r3, r6, r3
 8007558:	3328      	adds	r3, #40	; 0x28
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	433b      	orrs	r3, r7
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007560:	422c      	tst	r4, r5
 8007562:	d001      	beq.n	8007568 <get_fat+0x70>
 8007564:	091d      	lsrs	r5, r3, #4
 8007566:	e7e2      	b.n	800752e <get_fat+0x36>
 8007568:	051b      	lsls	r3, r3, #20
 800756a:	0d1d      	lsrs	r5, r3, #20
 800756c:	e7df      	b.n	800752e <get_fat+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800756e:	6982      	ldr	r2, [r0, #24]
 8007570:	0a0b      	lsrs	r3, r1, #8
 8007572:	1899      	adds	r1, r3, r2
 8007574:	f7ff fe74 	bl	8007260 <move_window>
 8007578:	2800      	cmp	r0, #0
 800757a:	d1d6      	bne.n	800752a <get_fat+0x32>
			p = &fs->win[clst * 2 % SS(fs)];
 800757c:	23ff      	movs	r3, #255	; 0xff
 800757e:	0064      	lsls	r4, r4, #1
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	401c      	ands	r4, r3
			val = LD_WORD(p);
 8007584:	1934      	adds	r4, r6, r4
 8007586:	3428      	adds	r4, #40	; 0x28
 8007588:	7863      	ldrb	r3, [r4, #1]
 800758a:	7825      	ldrb	r5, [r4, #0]
 800758c:	021b      	lsls	r3, r3, #8
 800758e:	431d      	orrs	r5, r3
			break;
 8007590:	e7cd      	b.n	800752e <get_fat+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007592:	6982      	ldr	r2, [r0, #24]
 8007594:	09cb      	lsrs	r3, r1, #7
 8007596:	1899      	adds	r1, r3, r2
 8007598:	f7ff fe62 	bl	8007260 <move_window>
 800759c:	2800      	cmp	r0, #0
 800759e:	d1c4      	bne.n	800752a <get_fat+0x32>
			p = &fs->win[clst * 4 % SS(fs)];
 80075a0:	23fe      	movs	r3, #254	; 0xfe
 80075a2:	00a4      	lsls	r4, r4, #2
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	401c      	ands	r4, r3
 80075a8:	0023      	movs	r3, r4
 80075aa:	3328      	adds	r3, #40	; 0x28
 80075ac:	18f3      	adds	r3, r6, r3
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80075ae:	78dd      	ldrb	r5, [r3, #3]
 80075b0:	789a      	ldrb	r2, [r3, #2]
 80075b2:	1936      	adds	r6, r6, r4
 80075b4:	0412      	lsls	r2, r2, #16
 80075b6:	062d      	lsls	r5, r5, #24
 80075b8:	3628      	adds	r6, #40	; 0x28
 80075ba:	4315      	orrs	r5, r2
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	7832      	ldrb	r2, [r6, #0]
 80075c0:	021b      	lsls	r3, r3, #8
 80075c2:	4315      	orrs	r5, r2
 80075c4:	431d      	orrs	r5, r3
 80075c6:	012d      	lsls	r5, r5, #4
 80075c8:	092d      	lsrs	r5, r5, #4
			break;
 80075ca:	e7b0      	b.n	800752e <get_fat+0x36>

080075cc <dir_sdi.constprop.0>:
	dp->index = (WORD)idx;	/* Current index */
 80075cc:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80075ce:	b570      	push	{r4, r5, r6, lr}
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80075d0:	6884      	ldr	r4, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80075d2:	0005      	movs	r5, r0
	dp->index = (WORD)idx;	/* Current index */
 80075d4:	80c3      	strh	r3, [r0, #6]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80075d6:	2c01      	cmp	r4, #1
 80075d8:	d101      	bne.n	80075de <dir_sdi.constprop.0+0x12>
		return FR_INT_ERR;
 80075da:	2002      	movs	r0, #2
}
 80075dc:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80075de:	6803      	ldr	r3, [r0, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	4294      	cmp	r4, r2
 80075e4:	d2f9      	bcs.n	80075da <dir_sdi.constprop.0+0xe>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80075e6:	2c00      	cmp	r4, #0
 80075e8:	d112      	bne.n	8007610 <dir_sdi.constprop.0+0x44>
 80075ea:	781a      	ldrb	r2, [r3, #0]
 80075ec:	2a03      	cmp	r2, #3
 80075ee:	d102      	bne.n	80075f6 <dir_sdi.constprop.0+0x2a>
		clst = dp->fs->dirbase;
 80075f0:	69da      	ldr	r2, [r3, #28]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	d10d      	bne.n	8007612 <dir_sdi.constprop.0+0x46>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80075f6:	891a      	ldrh	r2, [r3, #8]
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	d0ee      	beq.n	80075da <dir_sdi.constprop.0+0xe>
		sect = dp->fs->dirbase;
 80075fc:	69d8      	ldr	r0, [r3, #28]
	dp->clust = clst;	/* Current cluster# */
 80075fe:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
 8007600:	2800      	cmp	r0, #0
 8007602:	d0ea      	beq.n	80075da <dir_sdi.constprop.0+0xe>
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007604:	682b      	ldr	r3, [r5, #0]
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007606:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007608:	3328      	adds	r3, #40	; 0x28
	return FR_OK;
 800760a:	2000      	movs	r0, #0
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800760c:	616b      	str	r3, [r5, #20]
	return FR_OK;
 800760e:	e7e5      	b.n	80075dc <dir_sdi.constprop.0+0x10>
 8007610:	0022      	movs	r2, r4
		while (idx >= ic) {	/* Follow cluster chain */
 8007612:	0014      	movs	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007614:	789e      	ldrb	r6, [r3, #2]
 8007616:	0136      	lsls	r6, r6, #4
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007618:	0021      	movs	r1, r4
 800761a:	6828      	ldr	r0, [r5, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800761c:	2e00      	cmp	r6, #0
 800761e:	d002      	beq.n	8007626 <dir_sdi.constprop.0+0x5a>
		sect = clust2sect(dp->fs, clst);
 8007620:	f7ff ff5e 	bl	80074e0 <clust2sect>
 8007624:	e7eb      	b.n	80075fe <dir_sdi.constprop.0+0x32>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007626:	f7ff ff67 	bl	80074f8 <get_fat>
 800762a:	0004      	movs	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d006      	beq.n	800763e <dir_sdi.constprop.0+0x72>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007630:	2801      	cmp	r0, #1
 8007632:	d9d2      	bls.n	80075da <dir_sdi.constprop.0+0xe>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	4298      	cmp	r0, r3
 800763a:	d3ed      	bcc.n	8007618 <dir_sdi.constprop.0+0x4c>
 800763c:	e7cd      	b.n	80075da <dir_sdi.constprop.0+0xe>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800763e:	2001      	movs	r0, #1
 8007640:	e7cc      	b.n	80075dc <dir_sdi.constprop.0+0x10>
	...

08007644 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007646:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8007648:	a803      	add	r0, sp, #12
{
 800764a:	0014      	movs	r4, r2
 800764c:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800764e:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8007650:	f7ff fdd8 	bl	8007204 <get_ldnumber>
 8007654:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 8007656:	200b      	movs	r0, #11
 8007658:	2b00      	cmp	r3, #0
 800765a:	db15      	blt.n	8007688 <f_mount+0x44>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800765c:	490b      	ldr	r1, [pc, #44]	; (800768c <f_mount+0x48>)
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	585a      	ldr	r2, [r3, r1]

	if (cfs) {
 8007662:	2a00      	cmp	r2, #0
 8007664:	d001      	beq.n	800766a <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007666:	2000      	movs	r0, #0
 8007668:	7010      	strb	r0, [r2, #0]
	}

	if (fs) {
 800766a:	9a01      	ldr	r2, [sp, #4]
 800766c:	2a00      	cmp	r2, #0
 800766e:	d001      	beq.n	8007674 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8007670:	2000      	movs	r0, #0
 8007672:	7010      	strb	r0, [r2, #0]
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007674:	1e10      	subs	r0, r2, #0
	FatFs[vol] = fs;					/* Register new fs object */
 8007676:	50ca      	str	r2, [r1, r3]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007678:	d006      	beq.n	8007688 <f_mount+0x44>
 800767a:	2000      	movs	r0, #0
 800767c:	2c01      	cmp	r4, #1
 800767e:	d103      	bne.n	8007688 <f_mount+0x44>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007680:	4669      	mov	r1, sp
 8007682:	a801      	add	r0, sp, #4
 8007684:	f7ff fe36 	bl	80072f4 <find_volume.constprop.0>
	LEAVE_FF(fs, res);
}
 8007688:	b004      	add	sp, #16
 800768a:	bd10      	pop	{r4, pc}
 800768c:	20000d74 	.word	0x20000d74

08007690 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007692:	b099      	sub	sp, #100	; 0x64
 8007694:	9002      	str	r0, [sp, #8]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007696:	9b02      	ldr	r3, [sp, #8]
 8007698:	2009      	movs	r0, #9
{
 800769a:	910b      	str	r1, [sp, #44]	; 0x2c
 800769c:	9209      	str	r2, [sp, #36]	; 0x24
	if (!fp) return FR_INVALID_OBJECT;
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d023      	beq.n	80076ea <f_open+0x5a>
	fp->fs = 0;			/* Clear file object */
 80076a2:	2300      	movs	r3, #0
 80076a4:	9a02      	ldr	r2, [sp, #8]
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
 80076a6:	a90b      	add	r1, sp, #44	; 0x2c
	fp->fs = 0;			/* Clear file object */
 80076a8:	6013      	str	r3, [r2, #0]
	res = find_volume(&dj.fs, &path, 0);
 80076aa:	a80f      	add	r0, sp, #60	; 0x3c
 80076ac:	f7ff fe22 	bl	80072f4 <find_volume.constprop.0>
#endif
	if (res == FR_OK) {
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d11a      	bne.n	80076ea <f_open+0x5a>
		INIT_BUF(dj);
 80076b4:	ab0c      	add	r3, sp, #48	; 0x30
 80076b6:	9315      	str	r3, [sp, #84]	; 0x54
 80076b8:	4b90      	ldr	r3, [pc, #576]	; (80078fc <f_open+0x26c>)
 80076ba:	9316      	str	r3, [sp, #88]	; 0x58
		res = follow_path(&dj, path);	/* Follow the file path */
 80076bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076be:	9301      	str	r3, [sp, #4]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b2f      	cmp	r3, #47	; 0x2f
 80076c4:	d001      	beq.n	80076ca <f_open+0x3a>
 80076c6:	2b5c      	cmp	r3, #92	; 0x5c
 80076c8:	d102      	bne.n	80076d0 <f_open+0x40>
		path++;
 80076ca:	9b01      	ldr	r3, [sp, #4]
 80076cc:	3301      	adds	r3, #1
 80076ce:	9301      	str	r3, [sp, #4]
	dp->sclust = 0;							/* Always start from the root directory */
 80076d0:	2400      	movs	r4, #0
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80076d2:	9b01      	ldr	r3, [sp, #4]
	dp->sclust = 0;							/* Always start from the root directory */
 80076d4:	9411      	str	r4, [sp, #68]	; 0x44
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b1f      	cmp	r3, #31
 80076da:	d80b      	bhi.n	80076f4 <f_open+0x64>
		res = dir_sdi(dp, 0);
 80076dc:	a80f      	add	r0, sp, #60	; 0x3c
 80076de:	f7ff ff75 	bl	80075cc <dir_sdi.constprop.0>
		dp->dir = 0;
 80076e2:	9414      	str	r4, [sp, #80]	; 0x50
			if (!fp->lockid) res = FR_INT_ERR;
#endif
		}

#else				/* R/O configuration */
		if (res == FR_OK) {					/* Follow succeeded */
 80076e4:	42a0      	cmp	r0, r4
 80076e6:	d100      	bne.n	80076ea <f_open+0x5a>
 80076e8:	e1e8      	b.n	8007abc <f_open+0x42c>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80076ea:	b019      	add	sp, #100	; 0x64
 80076ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80076ee:	9b01      	ldr	r3, [sp, #4]
 80076f0:	3301      	adds	r3, #1
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	9b01      	ldr	r3, [sp, #4]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b2f      	cmp	r3, #47	; 0x2f
 80076fa:	d0f8      	beq.n	80076ee <f_open+0x5e>
 80076fc:	2b5c      	cmp	r3, #92	; 0x5c
 80076fe:	d0f6      	beq.n	80076ee <f_open+0x5e>
	lfn = dp->lfn;
 8007700:	2500      	movs	r5, #0
 8007702:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007704:	9305      	str	r3, [sp, #20]
		w = p[si++];					/* Get a character */
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	1c6c      	adds	r4, r5, #1
 800770a:	5d5f      	ldrb	r7, [r3, r5]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800770c:	2f1f      	cmp	r7, #31
 800770e:	d91c      	bls.n	800774a <f_open+0xba>
 8007710:	2f2f      	cmp	r7, #47	; 0x2f
 8007712:	d01a      	beq.n	800774a <f_open+0xba>
 8007714:	2f5c      	cmp	r7, #92	; 0x5c
 8007716:	d018      	beq.n	800774a <f_open+0xba>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8007718:	2dff      	cmp	r5, #255	; 0xff
 800771a:	d00f      	beq.n	800773c <f_open+0xac>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800771c:	2101      	movs	r1, #1
 800771e:	0038      	movs	r0, r7
 8007720:	f7ff f9d6 	bl	8006ad0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007724:	2800      	cmp	r0, #0
 8007726:	d009      	beq.n	800773c <f_open+0xac>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8007728:	287f      	cmp	r0, #127	; 0x7f
 800772a:	d809      	bhi.n	8007740 <f_open+0xb0>
 800772c:	4b74      	ldr	r3, [pc, #464]	; (8007900 <f_open+0x270>)
 800772e:	e000      	b.n	8007732 <f_open+0xa2>
	while (*str && *str != chr) str++;
 8007730:	3301      	adds	r3, #1
 8007732:	781a      	ldrb	r2, [r3, #0]
 8007734:	2a00      	cmp	r2, #0
 8007736:	d003      	beq.n	8007740 <f_open+0xb0>
 8007738:	4290      	cmp	r0, r2
 800773a:	d1f9      	bne.n	8007730 <f_open+0xa0>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800773c:	2006      	movs	r0, #6
 800773e:	e7d4      	b.n	80076ea <f_open+0x5a>
		lfn[di++] = w;					/* Store the Unicode character */
 8007740:	9b05      	ldr	r3, [sp, #20]
 8007742:	006d      	lsls	r5, r5, #1
 8007744:	5358      	strh	r0, [r3, r5]
		w = p[si++];					/* Get a character */
 8007746:	0025      	movs	r5, r4
 8007748:	e7dd      	b.n	8007706 <f_open+0x76>
	*path = &p[si];						/* Return pointer to the next segment */
 800774a:	9b01      	ldr	r3, [sp, #4]
 800774c:	191b      	adds	r3, r3, r4
 800774e:	9301      	str	r3, [sp, #4]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007750:	9b05      	ldr	r3, [sp, #20]
 8007752:	1e9e      	subs	r6, r3, #2
 8007754:	2d00      	cmp	r5, #0
 8007756:	d0f1      	beq.n	800773c <f_open+0xac>
		w = lfn[di - 1];
 8007758:	006b      	lsls	r3, r5, #1
 800775a:	5af2      	ldrh	r2, [r6, r3]
		if (w != ' ' && w != '.') break;
 800775c:	2a20      	cmp	r2, #32
 800775e:	d002      	beq.n	8007766 <f_open+0xd6>
 8007760:	2a2e      	cmp	r2, #46	; 0x2e
 8007762:	d000      	beq.n	8007766 <f_open+0xd6>
 8007764:	e1e0      	b.n	8007b28 <f_open+0x498>
		di--;
 8007766:	3d01      	subs	r5, #1
 8007768:	e7f4      	b.n	8007754 <f_open+0xc4>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800776a:	3301      	adds	r3, #1
 800776c:	9905      	ldr	r1, [sp, #20]
 800776e:	005a      	lsls	r2, r3, #1
 8007770:	5a8a      	ldrh	r2, [r1, r2]
 8007772:	2a20      	cmp	r2, #32
 8007774:	d0f9      	beq.n	800776a <f_open+0xda>
 8007776:	2a2e      	cmp	r2, #46	; 0x2e
 8007778:	d0f7      	beq.n	800776a <f_open+0xda>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800777a:	2400      	movs	r4, #0
 800777c:	221f      	movs	r2, #31
 800777e:	42ba      	cmp	r2, r7
 8007780:	4164      	adcs	r4, r4
 8007782:	00a4      	lsls	r4, r4, #2
	if (si) cf |= NS_LOSS | NS_LFN;
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <f_open+0xfc>
 8007788:	3a1c      	subs	r2, #28
 800778a:	4314      	orrs	r4, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800778c:	006a      	lsls	r2, r5, #1
 800778e:	5ab2      	ldrh	r2, [r6, r2]
 8007790:	2a2e      	cmp	r2, #46	; 0x2e
 8007792:	d002      	beq.n	800779a <f_open+0x10a>
 8007794:	3d01      	subs	r5, #1
 8007796:	2d00      	cmp	r5, #0
 8007798:	d1f8      	bne.n	800778c <f_open+0xfc>
		dp->fn[i++] = (BYTE)w;
 800779a:	2600      	movs	r6, #0
 800779c:	2708      	movs	r7, #8
 800779e:	9604      	str	r6, [sp, #16]
		w = lfn[si++];					/* Get an LFN character */
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	9203      	str	r2, [sp, #12]
 80077a4:	9a05      	ldr	r2, [sp, #20]
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d018      	beq.n	80077e0 <f_open+0x150>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80077ae:	2820      	cmp	r0, #32
 80077b0:	d004      	beq.n	80077bc <f_open+0x12c>
 80077b2:	282e      	cmp	r0, #46	; 0x2e
 80077b4:	d106      	bne.n	80077c4 <f_open+0x134>
 80077b6:	9b03      	ldr	r3, [sp, #12]
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	d009      	beq.n	80077d0 <f_open+0x140>
			cf |= NS_LOSS | NS_LFN; continue;
 80077bc:	2303      	movs	r3, #3
 80077be:	431c      	orrs	r4, r3
		dp->fn[i++] = (BYTE)w;
 80077c0:	9b03      	ldr	r3, [sp, #12]
 80077c2:	e7ed      	b.n	80077a0 <f_open+0x110>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80077c4:	9b04      	ldr	r3, [sp, #16]
 80077c6:	42bb      	cmp	r3, r7
 80077c8:	d205      	bcs.n	80077d6 <f_open+0x146>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	42ab      	cmp	r3, r5
 80077ce:	d161      	bne.n	8007894 <f_open+0x204>
			if (ni == 11) {				/* Long extension */
 80077d0:	2f0b      	cmp	r7, #11
 80077d2:	d158      	bne.n	8007886 <f_open+0x1f6>
 80077d4:	e001      	b.n	80077da <f_open+0x14a>
 80077d6:	2f0b      	cmp	r7, #11
 80077d8:	d14d      	bne.n	8007876 <f_open+0x1e6>
				cf |= NS_LOSS | NS_LFN; break;
 80077da:	2303      	movs	r3, #3
 80077dc:	270b      	movs	r7, #11
 80077de:	431c      	orrs	r4, r3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80077e0:	9b06      	ldr	r3, [sp, #24]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2be5      	cmp	r3, #229	; 0xe5
 80077e6:	d102      	bne.n	80077ee <f_open+0x15e>
 80077e8:	9a06      	ldr	r2, [sp, #24]
 80077ea:	3be0      	subs	r3, #224	; 0xe0
 80077ec:	7013      	strb	r3, [r2, #0]
	if (ni == 8) b <<= 2;
 80077ee:	2f08      	cmp	r7, #8
 80077f0:	d101      	bne.n	80077f6 <f_open+0x166>
 80077f2:	00b6      	lsls	r6, r6, #2
 80077f4:	b2f6      	uxtb	r6, r6
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80077f6:	230c      	movs	r3, #12
 80077f8:	4033      	ands	r3, r6
 80077fa:	2b0c      	cmp	r3, #12
 80077fc:	d003      	beq.n	8007806 <f_open+0x176>
 80077fe:	2203      	movs	r2, #3
 8007800:	4032      	ands	r2, r6
 8007802:	2a03      	cmp	r2, #3
 8007804:	d101      	bne.n	800780a <f_open+0x17a>
		cf |= NS_LFN;
 8007806:	2202      	movs	r2, #2
 8007808:	4314      	orrs	r4, r2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800780a:	07a2      	lsls	r2, r4, #30
 800780c:	d409      	bmi.n	8007822 <f_open+0x192>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800780e:	2203      	movs	r2, #3
 8007810:	4016      	ands	r6, r2
 8007812:	2e01      	cmp	r6, #1
 8007814:	d101      	bne.n	800781a <f_open+0x18a>
 8007816:	320d      	adds	r2, #13
 8007818:	4314      	orrs	r4, r2
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800781a:	2b04      	cmp	r3, #4
 800781c:	d101      	bne.n	8007822 <f_open+0x192>
 800781e:	3304      	adds	r3, #4
 8007820:	431c      	orrs	r4, r3
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007822:	9b06      	ldr	r3, [sp, #24]
 8007824:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007826:	ac0f      	add	r4, sp, #60	; 0x3c
 8007828:	0020      	movs	r0, r4
 800782a:	f7ff fecf 	bl	80075cc <dir_sdi.constprop.0>
 800782e:	1e03      	subs	r3, r0, #0
	if (res != FR_OK) return res;
 8007830:	d113      	bne.n	800785a <f_open+0x1ca>
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007832:	3b01      	subs	r3, #1
 8007834:	8423      	strh	r3, [r4, #32]
 8007836:	3301      	adds	r3, #1
 8007838:	33ff      	adds	r3, #255	; 0xff
 800783a:	001e      	movs	r6, r3
 800783c:	9306      	str	r3, [sp, #24]
		res = move_window(dp->fs, dp->sect);
 800783e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007840:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007842:	0019      	movs	r1, r3
 8007844:	0038      	movs	r0, r7
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	f7ff fd0a 	bl	8007260 <move_window>
 800784c:	1e03      	subs	r3, r0, #0
		if (res != FR_OK) break;
 800784e:	d104      	bne.n	800785a <f_open+0x1ca>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007850:	9d14      	ldr	r5, [sp, #80]	; 0x50
		c = dir[DIR_Name];
 8007852:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007854:	2b00      	cmp	r3, #0
 8007856:	d142      	bne.n	80078de <f_open+0x24e>
 8007858:	2304      	movs	r3, #4
			ns = dp->fn[NSFLAG];
 800785a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800785c:	7ad2      	ldrb	r2, [r2, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800785e:	2b00      	cmp	r3, #0
 8007860:	d100      	bne.n	8007864 <f_open+0x1d4>
 8007862:	e115      	b.n	8007a90 <f_open+0x400>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007864:	2b04      	cmp	r3, #4
 8007866:	d000      	beq.n	800786a <f_open+0x1da>
 8007868:	e17a      	b.n	8007b60 <f_open+0x4d0>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800786a:	2005      	movs	r0, #5
 800786c:	421a      	tst	r2, r3
 800786e:	d100      	bne.n	8007872 <f_open+0x1e2>
 8007870:	e73b      	b.n	80076ea <f_open+0x5a>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007872:	2004      	movs	r0, #4
 8007874:	e739      	b.n	80076ea <f_open+0x5a>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	42ab      	cmp	r3, r5
 800787a:	d004      	beq.n	8007886 <f_open+0x1f6>
 800787c:	2303      	movs	r3, #3
 800787e:	431c      	orrs	r4, r3
			if (si > di) break;			/* No extension */
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	42ab      	cmp	r3, r5
 8007884:	d8ac      	bhi.n	80077e0 <f_open+0x150>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007886:	270b      	movs	r7, #11
 8007888:	2308      	movs	r3, #8
			b <<= 2; continue;
 800788a:	00b6      	lsls	r6, r6, #2
 800788c:	b2f6      	uxtb	r6, r6
 800788e:	9503      	str	r5, [sp, #12]
		dp->fn[i++] = (BYTE)w;
 8007890:	9304      	str	r3, [sp, #16]
 8007892:	e795      	b.n	80077c0 <f_open+0x130>
		if (w >= 0x80) {				/* Non ASCII character */
 8007894:	287f      	cmp	r0, #127	; 0x7f
 8007896:	d90d      	bls.n	80078b4 <f_open+0x224>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007898:	2100      	movs	r1, #0
 800789a:	f7ff f919 	bl	8006ad0 <ff_convert>
			cf |= NS_LFN;				/* Force create LFN entry */
 800789e:	2202      	movs	r2, #2
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80078a0:	0003      	movs	r3, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 80078a2:	4314      	orrs	r4, r2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d00c      	beq.n	80078c2 <f_open+0x232>
 80078a8:	4816      	ldr	r0, [pc, #88]	; (8007904 <f_open+0x274>)
 80078aa:	18c0      	adds	r0, r0, r3
 80078ac:	3880      	subs	r0, #128	; 0x80
 80078ae:	7800      	ldrb	r0, [r0, #0]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d006      	beq.n	80078c2 <f_open+0x232>
	while (*str && *str != chr) str++;
 80078b4:	4b14      	ldr	r3, [pc, #80]	; (8007908 <f_open+0x278>)
 80078b6:	781a      	ldrb	r2, [r3, #0]
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	d100      	bne.n	80078be <f_open+0x22e>
 80078bc:	e140      	b.n	8007b40 <f_open+0x4b0>
 80078be:	4282      	cmp	r2, r0
 80078c0:	d108      	bne.n	80078d4 <f_open+0x244>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80078c2:	2303      	movs	r3, #3
 80078c4:	205f      	movs	r0, #95	; 0x5f
 80078c6:	431c      	orrs	r4, r3
		dp->fn[i++] = (BYTE)w;
 80078c8:	9b06      	ldr	r3, [sp, #24]
 80078ca:	9a04      	ldr	r2, [sp, #16]
 80078cc:	5498      	strb	r0, [r3, r2]
 80078ce:	0013      	movs	r3, r2
 80078d0:	3301      	adds	r3, #1
 80078d2:	e7dd      	b.n	8007890 <f_open+0x200>
	while (*str && *str != chr) str++;
 80078d4:	3301      	adds	r3, #1
 80078d6:	e7ee      	b.n	80078b6 <f_open+0x226>
					b |= 2;
 80078d8:	2302      	movs	r3, #2
 80078da:	431e      	orrs	r6, r3
 80078dc:	e7f4      	b.n	80078c8 <f_open+0x238>
		a = dir[DIR_Attr] & AM_MASK;
 80078de:	7ae9      	ldrb	r1, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80078e0:	2be5      	cmp	r3, #229	; 0xe5
 80078e2:	d005      	beq.n	80078f0 <f_open+0x260>
		a = dir[DIR_Attr] & AM_MASK;
 80078e4:	223f      	movs	r2, #63	; 0x3f
 80078e6:	400a      	ands	r2, r1
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80078e8:	0709      	lsls	r1, r1, #28
 80078ea:	d50f      	bpl.n	800790c <f_open+0x27c>
 80078ec:	2a0f      	cmp	r2, #15
 80078ee:	d00f      	beq.n	8007910 <f_open+0x280>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80078f0:	2201      	movs	r2, #1
 80078f2:	ab0f      	add	r3, sp, #60	; 0x3c
 80078f4:	4252      	negs	r2, r2
 80078f6:	841a      	strh	r2, [r3, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80078f8:	26ff      	movs	r6, #255	; 0xff
 80078fa:	e051      	b.n	80079a0 <f_open+0x310>
 80078fc:	20000d7a 	.word	0x20000d7a
 8007900:	08008b8a 	.word	0x08008b8a
 8007904:	08008b9a 	.word	0x08008b9a
 8007908:	08008b93 	.word	0x08008b93
			if (a == AM_LFN) {			/* An LFN entry is found */
 800790c:	2a0f      	cmp	r2, #15
 800790e:	d179      	bne.n	8007a04 <f_open+0x374>
				if (dp->lfn) {
 8007910:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007912:	aa0f      	add	r2, sp, #60	; 0x3c
 8007914:	9105      	str	r1, [sp, #20]
 8007916:	2900      	cmp	r1, #0
 8007918:	d042      	beq.n	80079a0 <f_open+0x310>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800791a:	2140      	movs	r1, #64	; 0x40
 800791c:	420b      	tst	r3, r1
 800791e:	d063      	beq.n	80079e8 <f_open+0x358>
						c &= ~LLEF; ord = c;	/* LFN start order */
 8007920:	001e      	movs	r6, r3
						sum = dir[LDIR_Chksum];
 8007922:	7b68      	ldrb	r0, [r5, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8007924:	438e      	bics	r6, r1
						sum = dir[LDIR_Chksum];
 8007926:	9006      	str	r0, [sp, #24]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8007928:	88d1      	ldrh	r1, [r2, #6]
 800792a:	8411      	strh	r1, [r2, #32]
	if (LD_WORD(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800792c:	7eea      	ldrb	r2, [r5, #27]
 800792e:	7ea9      	ldrb	r1, [r5, #26]
 8007930:	0212      	lsls	r2, r2, #8
 8007932:	430a      	orrs	r2, r1
 8007934:	d1e0      	bne.n	80078f8 <f_open+0x268>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007936:	213f      	movs	r1, #63	; 0x3f
 8007938:	240d      	movs	r4, #13
 800793a:	400b      	ands	r3, r1
 800793c:	3b01      	subs	r3, #1
 800793e:	435c      	muls	r4, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007940:	393e      	subs	r1, #62	; 0x3e
 8007942:	9203      	str	r2, [sp, #12]
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007944:	4b87      	ldr	r3, [pc, #540]	; (8007b64 <f_open+0x4d4>)
 8007946:	9a03      	ldr	r2, [sp, #12]
 8007948:	5cd2      	ldrb	r2, [r2, r3]
 800794a:	18ab      	adds	r3, r5, r2
 800794c:	785b      	ldrb	r3, [r3, #1]
 800794e:	5caa      	ldrb	r2, [r5, r2]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	431a      	orrs	r2, r3
 8007954:	9207      	str	r2, [sp, #28]
		if (wc) {
 8007956:	2900      	cmp	r1, #0
 8007958:	d04f      	beq.n	80079fa <f_open+0x36a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800795a:	2cfe      	cmp	r4, #254	; 0xfe
 800795c:	d8cc      	bhi.n	80078f8 <f_open+0x268>
 800795e:	0010      	movs	r0, r2
 8007960:	f7ff f8d2 	bl	8006b08 <ff_wtoupper>
 8007964:	1c63      	adds	r3, r4, #1
 8007966:	9308      	str	r3, [sp, #32]
 8007968:	9b05      	ldr	r3, [sp, #20]
 800796a:	0064      	lsls	r4, r4, #1
 800796c:	900a      	str	r0, [sp, #40]	; 0x28
 800796e:	5ae0      	ldrh	r0, [r4, r3]
 8007970:	f7ff f8ca 	bl	8006b08 <ff_wtoupper>
 8007974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007976:	4283      	cmp	r3, r0
 8007978:	d1be      	bne.n	80078f8 <f_open+0x268>
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character */
 800797a:	9907      	ldr	r1, [sp, #28]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800797c:	9c08      	ldr	r4, [sp, #32]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	3301      	adds	r3, #1
 8007982:	9303      	str	r3, [sp, #12]
 8007984:	2b0d      	cmp	r3, #13
 8007986:	d1dd      	bne.n	8007944 <f_open+0x2b4>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8007988:	782b      	ldrb	r3, [r5, #0]
 800798a:	065b      	lsls	r3, r3, #25
 800798c:	d506      	bpl.n	800799c <f_open+0x30c>
 800798e:	2900      	cmp	r1, #0
 8007990:	d004      	beq.n	800799c <f_open+0x30c>
 8007992:	9b05      	ldr	r3, [sp, #20]
 8007994:	0064      	lsls	r4, r4, #1
 8007996:	5ae3      	ldrh	r3, [r4, r3]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1ad      	bne.n	80078f8 <f_open+0x268>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800799c:	3e01      	subs	r6, #1
 800799e:	b2f6      	uxtb	r6, r6
	i = dp->index + 1;
 80079a0:	ad0f      	add	r5, sp, #60	; 0x3c
 80079a2:	88ec      	ldrh	r4, [r5, #6]
 80079a4:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80079a6:	b2a3      	uxth	r3, r4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d100      	bne.n	80079ae <f_open+0x31e>
 80079ac:	e754      	b.n	8007858 <f_open+0x1c8>
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d100      	bne.n	80079b6 <f_open+0x326>
 80079b4:	e750      	b.n	8007858 <f_open+0x1c8>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80079b6:	230f      	movs	r3, #15
 80079b8:	0022      	movs	r2, r4
 80079ba:	401a      	ands	r2, r3
 80079bc:	9203      	str	r2, [sp, #12]
 80079be:	421c      	tst	r4, r3
 80079c0:	d109      	bne.n	80079d6 <f_open+0x346>
		dp->sect++;					/* Next sector */
 80079c2:	9b04      	ldr	r3, [sp, #16]
		if (!dp->clust) {		/* Static table */
 80079c4:	68e9      	ldr	r1, [r5, #12]
		dp->sect++;					/* Next sector */
 80079c6:	3301      	adds	r3, #1
 80079c8:	612b      	str	r3, [r5, #16]
		if (!dp->clust) {		/* Static table */
 80079ca:	2900      	cmp	r1, #0
 80079cc:	d143      	bne.n	8007a56 <f_open+0x3c6>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80079ce:	893b      	ldrh	r3, [r7, #8]
 80079d0:	429c      	cmp	r4, r3
 80079d2:	d300      	bcc.n	80079d6 <f_open+0x346>
 80079d4:	e740      	b.n	8007858 <f_open+0x1c8>
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80079d6:	003b      	movs	r3, r7
 80079d8:	9903      	ldr	r1, [sp, #12]
 80079da:	3328      	adds	r3, #40	; 0x28
 80079dc:	0149      	lsls	r1, r1, #5
	dp->index = (WORD)i;	/* Current index */
 80079de:	aa0f      	add	r2, sp, #60	; 0x3c
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80079e0:	185b      	adds	r3, r3, r1
	dp->index = (WORD)i;	/* Current index */
 80079e2:	80d4      	strh	r4, [r2, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80079e4:	9314      	str	r3, [sp, #80]	; 0x50
	} while (res == FR_OK);
 80079e6:	e72a      	b.n	800783e <f_open+0x1ae>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80079e8:	42b3      	cmp	r3, r6
 80079ea:	d000      	beq.n	80079ee <f_open+0x35e>
 80079ec:	e784      	b.n	80078f8 <f_open+0x268>
 80079ee:	7b6a      	ldrb	r2, [r5, #13]
 80079f0:	9906      	ldr	r1, [sp, #24]
 80079f2:	428a      	cmp	r2, r1
 80079f4:	d000      	beq.n	80079f8 <f_open+0x368>
 80079f6:	e77f      	b.n	80078f8 <f_open+0x268>
 80079f8:	e798      	b.n	800792c <f_open+0x29c>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80079fa:	4b5b      	ldr	r3, [pc, #364]	; (8007b68 <f_open+0x4d8>)
 80079fc:	9a07      	ldr	r2, [sp, #28]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d0bd      	beq.n	800797e <f_open+0x2ee>
 8007a02:	e779      	b.n	80078f8 <f_open+0x268>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007a04:	2e00      	cmp	r6, #0
 8007a06:	d10e      	bne.n	8007a26 <f_open+0x396>
 8007a08:	0029      	movs	r1, r5
 8007a0a:	002a      	movs	r2, r5
 8007a0c:	310b      	adds	r1, #11
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8007a0e:	0870      	lsrs	r0, r6, #1
 8007a10:	01f3      	lsls	r3, r6, #7
 8007a12:	4303      	orrs	r3, r0
 8007a14:	7810      	ldrb	r0, [r2, #0]
 8007a16:	3201      	adds	r2, #1
 8007a18:	181b      	adds	r3, r3, r0
 8007a1a:	b2de      	uxtb	r6, r3
 8007a1c:	428a      	cmp	r2, r1
 8007a1e:	d1f6      	bne.n	8007a0e <f_open+0x37e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007a20:	9b06      	ldr	r3, [sp, #24]
 8007a22:	42b3      	cmp	r3, r6
 8007a24:	d02e      	beq.n	8007a84 <f_open+0x3f4>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007a26:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007a28:	2201      	movs	r2, #1
 8007a2a:	7acc      	ldrb	r4, [r1, #11]
 8007a2c:	a80f      	add	r0, sp, #60	; 0x3c
 8007a2e:	0023      	movs	r3, r4
 8007a30:	4013      	ands	r3, r2
 8007a32:	4214      	tst	r4, r2
 8007a34:	d00c      	beq.n	8007a50 <f_open+0x3c0>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007a36:	2301      	movs	r3, #1
 8007a38:	425b      	negs	r3, r3
 8007a3a:	8403      	strh	r3, [r0, #32]
 8007a3c:	e75c      	b.n	80078f8 <f_open+0x268>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8007a3e:	2a0b      	cmp	r2, #11
 8007a40:	d100      	bne.n	8007a44 <f_open+0x3b4>
 8007a42:	e70a      	b.n	800785a <f_open+0x1ca>
 8007a44:	5cac      	ldrb	r4, [r5, r2]
 8007a46:	3201      	adds	r2, #1
 8007a48:	5c8e      	ldrb	r6, [r1, r2]
 8007a4a:	42a6      	cmp	r6, r4
 8007a4c:	d0f7      	beq.n	8007a3e <f_open+0x3ae>
 8007a4e:	e7f2      	b.n	8007a36 <f_open+0x3a6>
 8007a50:	001a      	movs	r2, r3
 8007a52:	3901      	subs	r1, #1
 8007a54:	e7f6      	b.n	8007a44 <f_open+0x3b4>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007a56:	78bb      	ldrb	r3, [r7, #2]
 8007a58:	0922      	lsrs	r2, r4, #4
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	421a      	tst	r2, r3
 8007a5e:	d1ba      	bne.n	80079d6 <f_open+0x346>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007a60:	0038      	movs	r0, r7
 8007a62:	f7ff fd49 	bl	80074f8 <get_fat>
 8007a66:	0001      	movs	r1, r0
				if (clst <= 1) return FR_INT_ERR;
 8007a68:	2801      	cmp	r0, #1
 8007a6a:	d90d      	bls.n	8007a88 <f_open+0x3f8>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d00d      	beq.n	8007a8c <f_open+0x3fc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4298      	cmp	r0, r3
 8007a74:	d300      	bcc.n	8007a78 <f_open+0x3e8>
 8007a76:	e6ef      	b.n	8007858 <f_open+0x1c8>
				dp->clust = clst;				/* Initialize data for new cluster */
 8007a78:	60e8      	str	r0, [r5, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007a7a:	0038      	movs	r0, r7
 8007a7c:	f7ff fd30 	bl	80074e0 <clust2sect>
 8007a80:	6128      	str	r0, [r5, #16]
 8007a82:	e7a8      	b.n	80079d6 <f_open+0x346>
		res = move_window(dp->fs, dp->sect);
 8007a84:	2300      	movs	r3, #0
 8007a86:	e6e8      	b.n	800785a <f_open+0x1ca>
				if (clst <= 1) return FR_INT_ERR;
 8007a88:	2302      	movs	r3, #2
 8007a8a:	e6e6      	b.n	800785a <f_open+0x1ca>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e6e4      	b.n	800785a <f_open+0x1ca>
			dir = dp->dir;						/* Follow the sub-directory */
 8007a90:	9b14      	ldr	r3, [sp, #80]	; 0x50
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a92:	0752      	lsls	r2, r2, #29
 8007a94:	d412      	bmi.n	8007abc <f_open+0x42c>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007a96:	7ada      	ldrb	r2, [r3, #11]
 8007a98:	06d2      	lsls	r2, r2, #27
 8007a9a:	d560      	bpl.n	8007b5e <f_open+0x4ce>
	cl = LD_WORD(dir + DIR_FstClusLO);
 8007a9c:	7eda      	ldrb	r2, [r3, #27]
 8007a9e:	7e99      	ldrb	r1, [r3, #26]
 8007aa0:	0212      	lsls	r2, r2, #8
 8007aa2:	430a      	orrs	r2, r1
	if (fs->fs_type == FS_FAT32)
 8007aa4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007aa6:	7809      	ldrb	r1, [r1, #0]
 8007aa8:	2903      	cmp	r1, #3
 8007aaa:	d105      	bne.n	8007ab8 <f_open+0x428>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007aac:	7d19      	ldrb	r1, [r3, #20]
 8007aae:	7d5b      	ldrb	r3, [r3, #21]
 8007ab0:	021b      	lsls	r3, r3, #8
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	431a      	orrs	r2, r3
			dp->sclust = ld_clust(dp->fs, dir);
 8007ab8:	9211      	str	r2, [sp, #68]	; 0x44
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007aba:	e61b      	b.n	80076f4 <f_open+0x64>
		dir = dj.dir;
 8007abc:	9b14      	ldr	r3, [sp, #80]	; 0x50
				res = FR_INVALID_NAME;
 8007abe:	2006      	movs	r0, #6
			if (!dir) {						/* Current directory itself */
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d100      	bne.n	8007ac6 <f_open+0x436>
 8007ac4:	e611      	b.n	80076ea <f_open+0x5a>
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
 8007ac6:	7ad9      	ldrb	r1, [r3, #11]
 8007ac8:	2210      	movs	r2, #16
 8007aca:	0008      	movs	r0, r1
 8007acc:	4010      	ands	r0, r2
 8007ace:	4211      	tst	r1, r2
 8007ad0:	d000      	beq.n	8007ad4 <f_open+0x444>
 8007ad2:	e6ce      	b.n	8007872 <f_open+0x1e2>
	mode &= FA_READ;
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007ad8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	mode &= FA_READ;
 8007ada:	4011      	ands	r1, r2
 8007adc:	000a      	movs	r2, r1
			fp->flag = mode;					/* File access mode */
 8007ade:	9902      	ldr	r1, [sp, #8]
 8007ae0:	718a      	strb	r2, [r1, #6]
			fp->err = 0;						/* Clear error flag */
 8007ae2:	71c8      	strb	r0, [r1, #7]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8007ae4:	7eda      	ldrb	r2, [r3, #27]
 8007ae6:	7e99      	ldrb	r1, [r3, #26]
 8007ae8:	0212      	lsls	r2, r2, #8
 8007aea:	430a      	orrs	r2, r1
	if (fs->fs_type == FS_FAT32)
 8007aec:	7821      	ldrb	r1, [r4, #0]
 8007aee:	2903      	cmp	r1, #3
 8007af0:	d105      	bne.n	8007afe <f_open+0x46e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007af2:	7d59      	ldrb	r1, [r3, #21]
 8007af4:	7d1d      	ldrb	r5, [r3, #20]
 8007af6:	0209      	lsls	r1, r1, #8
 8007af8:	4329      	orrs	r1, r5
 8007afa:	0409      	lsls	r1, r1, #16
 8007afc:	430a      	orrs	r2, r1
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007afe:	9902      	ldr	r1, [sp, #8]
 8007b00:	610a      	str	r2, [r1, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007b02:	7f59      	ldrb	r1, [r3, #29]
 8007b04:	7f1a      	ldrb	r2, [r3, #28]
 8007b06:	0209      	lsls	r1, r1, #8
 8007b08:	4311      	orrs	r1, r2
 8007b0a:	7f9a      	ldrb	r2, [r3, #30]
 8007b0c:	7fdb      	ldrb	r3, [r3, #31]
 8007b0e:	0412      	lsls	r2, r2, #16
 8007b10:	430a      	orrs	r2, r1
 8007b12:	061b      	lsls	r3, r3, #24
 8007b14:	4313      	orrs	r3, r2
 8007b16:	9a02      	ldr	r2, [sp, #8]
 8007b18:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8007b1a:	2300      	movs	r3, #0
			fp->fs = dj.fs;	 					/* Validate file object */
 8007b1c:	6014      	str	r4, [r2, #0]
			fp->fptr = 0;						/* File pointer */
 8007b1e:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8007b20:	6193      	str	r3, [r2, #24]
			fp->id = fp->fs->id;
 8007b22:	88e3      	ldrh	r3, [r4, #6]
 8007b24:	8093      	strh	r3, [r2, #4]
 8007b26:	e5e0      	b.n	80076ea <f_open+0x5a>
	lfn[di] = 0;						/* LFN is created */
 8007b28:	2400      	movs	r4, #0
 8007b2a:	9a05      	ldr	r2, [sp, #20]
		*d++ = (BYTE)val;
 8007b2c:	2120      	movs	r1, #32
	lfn[di] = 0;						/* LFN is created */
 8007b2e:	52d4      	strh	r4, [r2, r3]
	mem_set(dp->fn, ' ', 11);
 8007b30:	9b15      	ldr	r3, [sp, #84]	; 0x54
		*d++ = (BYTE)val;
 8007b32:	220b      	movs	r2, #11
 8007b34:	0018      	movs	r0, r3
	mem_set(dp->fn, ' ', 11);
 8007b36:	9306      	str	r3, [sp, #24]
		*d++ = (BYTE)val;
 8007b38:	f000 f9b9 	bl	8007eae <memset>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007b3c:	0023      	movs	r3, r4
 8007b3e:	e615      	b.n	800776c <f_open+0xdc>
				if (IsUpper(w)) {		/* ASCII large capital */
 8007b40:	0003      	movs	r3, r0
 8007b42:	3b41      	subs	r3, #65	; 0x41
 8007b44:	2b19      	cmp	r3, #25
 8007b46:	d800      	bhi.n	8007b4a <f_open+0x4ba>
 8007b48:	e6c6      	b.n	80078d8 <f_open+0x248>
					if (IsLower(w)) {	/* ASCII small capital */
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	3b61      	subs	r3, #97	; 0x61
 8007b4e:	2b19      	cmp	r3, #25
 8007b50:	d900      	bls.n	8007b54 <f_open+0x4c4>
 8007b52:	e6b9      	b.n	80078c8 <f_open+0x238>
						b |= 1; w -= 0x20;
 8007b54:	2301      	movs	r3, #1
 8007b56:	3820      	subs	r0, #32
 8007b58:	431e      	orrs	r6, r3
 8007b5a:	b280      	uxth	r0, r0
 8007b5c:	e6b4      	b.n	80078c8 <f_open+0x238>
				res = FR_NO_PATH; break;
 8007b5e:	2305      	movs	r3, #5
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007b60:	0018      	movs	r0, r3
 8007b62:	e5c2      	b.n	80076ea <f_open+0x5a>
 8007b64:	08008c1a 	.word	0x08008c1a
 8007b68:	0000ffff 	.word	0x0000ffff

08007b6c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	9304      	str	r3, [sp, #16]
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8007b72:	2300      	movs	r3, #0
{
 8007b74:	0015      	movs	r5, r2
	*br = 0;	/* Clear read byte counter */
 8007b76:	9a04      	ldr	r2, [sp, #16]
{
 8007b78:	0004      	movs	r4, r0
	*br = 0;	/* Clear read byte counter */
 8007b7a:	6013      	str	r3, [r2, #0]
{
 8007b7c:	9102      	str	r1, [sp, #8]

	res = validate(fp);							/* Check validity */
 8007b7e:	f7ff fb57 	bl	8007230 <validate>
 8007b82:	9001      	str	r0, [sp, #4]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d113      	bne.n	8007bb0 <f_read+0x44>
	if (fp->err)								/* Check error */
 8007b88:	79e3      	ldrb	r3, [r4, #7]
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10f      	bne.n	8007bb0 <f_read+0x44>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007b90:	79a2      	ldrb	r2, [r4, #6]
 8007b92:	3301      	adds	r3, #1
 8007b94:	0011      	movs	r1, r2
 8007b96:	4019      	ands	r1, r3
 8007b98:	9105      	str	r1, [sp, #20]
 8007b9a:	421a      	tst	r2, r3
 8007b9c:	d100      	bne.n	8007ba0 <f_read+0x34>
 8007b9e:	e070      	b.n	8007c82 <f_read+0x116>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8007ba0:	68e2      	ldr	r2, [r4, #12]
 8007ba2:	68a7      	ldr	r7, [r4, #8]
 8007ba4:	1bd7      	subs	r7, r2, r7
 8007ba6:	42af      	cmp	r7, r5
 8007ba8:	d900      	bls.n	8007bac <f_read+0x40>
 8007baa:	002f      	movs	r7, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8007bac:	2f00      	cmp	r7, #0
 8007bae:	d102      	bne.n	8007bb6 <f_read+0x4a>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8007bb0:	9801      	ldr	r0, [sp, #4]
 8007bb2:	b007      	add	sp, #28
 8007bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007bb6:	68a3      	ldr	r3, [r4, #8]
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007bb8:	6820      	ldr	r0, [r4, #0]
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007bba:	05da      	lsls	r2, r3, #23
 8007bbc:	d145      	bne.n	8007c4a <f_read+0xde>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007bbe:	7882      	ldrb	r2, [r0, #2]
 8007bc0:	0a5e      	lsrs	r6, r3, #9
 8007bc2:	3a01      	subs	r2, #1
 8007bc4:	4016      	ands	r6, r2
 8007bc6:	b2f6      	uxtb	r6, r6
			if (!csect) {						/* On the cluster boundary? */
 8007bc8:	2e00      	cmp	r6, #0
 8007bca:	d113      	bne.n	8007bf4 <f_read+0x88>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d106      	bne.n	8007bde <f_read+0x72>
					clst = fp->sclust;			/* Follow from the origin */
 8007bd0:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007bd2:	2801      	cmp	r0, #1
 8007bd4:	d807      	bhi.n	8007be6 <f_read+0x7a>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	71e3      	strb	r3, [r4, #7]
		LEAVE_FF(fp->fs, FR_DENIED);
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	e7e8      	b.n	8007bb0 <f_read+0x44>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007bde:	6961      	ldr	r1, [r4, #20]
 8007be0:	f7ff fc8a 	bl	80074f8 <get_fat>
 8007be4:	e7f5      	b.n	8007bd2 <f_read+0x66>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	d103      	bne.n	8007bf2 <f_read+0x86>
 8007bea:	2301      	movs	r3, #1
 8007bec:	71e3      	strb	r3, [r4, #7]
 8007bee:	9b05      	ldr	r3, [sp, #20]
 8007bf0:	e7f3      	b.n	8007bda <f_read+0x6e>
				fp->clust = clst;				/* Update current cluster */
 8007bf2:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	6961      	ldr	r1, [r4, #20]
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	9303      	str	r3, [sp, #12]
 8007bfc:	f7ff fc70 	bl	80074e0 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d0e8      	beq.n	8007bd6 <f_read+0x6a>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007c04:	2380      	movs	r3, #128	; 0x80
			sect += csect;
 8007c06:	1832      	adds	r2, r6, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	429f      	cmp	r7, r3
 8007c0c:	d31c      	bcc.n	8007c48 <f_read+0xdc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007c0e:	9b03      	ldr	r3, [sp, #12]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007c10:	0a7d      	lsrs	r5, r7, #9
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007c12:	789b      	ldrb	r3, [r3, #2]
 8007c14:	1971      	adds	r1, r6, r5
 8007c16:	4299      	cmp	r1, r3
 8007c18:	d900      	bls.n	8007c1c <f_read+0xb0>
					cc = fp->fs->csize - csect;
 8007c1a:	1b9d      	subs	r5, r3, r6
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	9902      	ldr	r1, [sp, #8]
 8007c20:	7858      	ldrb	r0, [r3, #1]
 8007c22:	002b      	movs	r3, r5
 8007c24:	f7fe ffa8 	bl	8006b78 <disk_read>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d1de      	bne.n	8007bea <f_read+0x7e>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007c2c:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007c2e:	9b02      	ldr	r3, [sp, #8]
 8007c30:	9a04      	ldr	r2, [sp, #16]
 8007c32:	195b      	adds	r3, r3, r5
 8007c34:	9302      	str	r3, [sp, #8]
 8007c36:	68a3      	ldr	r3, [r4, #8]
 8007c38:	1b7f      	subs	r7, r7, r5
 8007c3a:	195b      	adds	r3, r3, r5
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	9b04      	ldr	r3, [sp, #16]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	195b      	adds	r3, r3, r5
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	e7b1      	b.n	8007bac <f_read+0x40>
			fp->dsect = sect;
 8007c48:	61a2      	str	r2, [r4, #24]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007c4a:	2380      	movs	r3, #128	; 0x80
 8007c4c:	68a5      	ldr	r5, [r4, #8]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	05ed      	lsls	r5, r5, #23
 8007c52:	0ded      	lsrs	r5, r5, #23
 8007c54:	1b5d      	subs	r5, r3, r5
 8007c56:	42bd      	cmp	r5, r7
 8007c58:	d900      	bls.n	8007c5c <f_read+0xf0>
 8007c5a:	003d      	movs	r5, r7
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 8007c5c:	69a1      	ldr	r1, [r4, #24]
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	f7ff fafe 	bl	8007260 <move_window>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d1c0      	bne.n	8007bea <f_read+0x7e>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007c68:	68a3      	ldr	r3, [r4, #8]
 8007c6a:	6822      	ldr	r2, [r4, #0]
 8007c6c:	05db      	lsls	r3, r3, #23
 8007c6e:	0ddb      	lsrs	r3, r3, #23
 8007c70:	3328      	adds	r3, #40	; 0x28
 8007c72:	18d3      	adds	r3, r2, r3
		*d++ = *s++;
 8007c74:	5c1a      	ldrb	r2, [r3, r0]
 8007c76:	9902      	ldr	r1, [sp, #8]
 8007c78:	540a      	strb	r2, [r1, r0]
 8007c7a:	3001      	adds	r0, #1
	while (cnt--)
 8007c7c:	4285      	cmp	r5, r0
 8007c7e:	d1f9      	bne.n	8007c74 <f_read+0x108>
 8007c80:	e7d5      	b.n	8007c2e <f_read+0xc2>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007c82:	2307      	movs	r3, #7
 8007c84:	e7a9      	b.n	8007bda <f_read+0x6e>

08007c86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007c86:	b510      	push	{r4, lr}
 8007c88:	0004      	movs	r4, r0
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007c8a:	f7ff fad1 	bl	8007230 <validate>
		if (res == FR_OK) {
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d100      	bne.n	8007c94 <f_close+0xe>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007c92:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8007c94:	bd10      	pop	{r4, pc}

08007c96 <_ZdlPvj>:
 8007c96:	b510      	push	{r4, lr}
 8007c98:	f000 f81c 	bl	8007cd4 <_ZdlPv>
 8007c9c:	bd10      	pop	{r4, pc}

08007c9e <_Znwj>:
 8007c9e:	b510      	push	{r4, lr}
 8007ca0:	1e04      	subs	r4, r0, #0
 8007ca2:	d100      	bne.n	8007ca6 <_Znwj+0x8>
 8007ca4:	3401      	adds	r4, #1
 8007ca6:	0020      	movs	r0, r4
 8007ca8:	f000 f826 	bl	8007cf8 <malloc>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d000      	beq.n	8007cb2 <_Znwj+0x14>
 8007cb0:	bd10      	pop	{r4, pc}
 8007cb2:	f000 f813 	bl	8007cdc <_ZSt15get_new_handlerv>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d101      	bne.n	8007cbe <_Znwj+0x20>
 8007cba:	f000 f815 	bl	8007ce8 <abort>
 8007cbe:	4780      	blx	r0
 8007cc0:	e7f1      	b.n	8007ca6 <_Znwj+0x8>

08007cc2 <_ZSt17__throw_bad_allocv>:
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	f000 f810 	bl	8007ce8 <abort>

08007cc8 <_ZSt28__throw_bad_array_new_lengthv>:
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	f000 f80d 	bl	8007ce8 <abort>

08007cce <_ZSt20__throw_length_errorPKc>:
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	f000 f80a 	bl	8007ce8 <abort>

08007cd4 <_ZdlPv>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	f000 f819 	bl	8007d0c <free>
 8007cda:	bd10      	pop	{r4, pc}

08007cdc <_ZSt15get_new_handlerv>:
 8007cdc:	4b01      	ldr	r3, [pc, #4]	; (8007ce4 <_ZSt15get_new_handlerv+0x8>)
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	4770      	bx	lr
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	20000f7c 	.word	0x20000f7c

08007ce8 <abort>:
 8007ce8:	2006      	movs	r0, #6
 8007cea:	b510      	push	{r4, lr}
 8007cec:	f000 f912 	bl	8007f14 <raise>
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	f7fc fff3 	bl	8004cdc <_exit>
	...

08007cf8 <malloc>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <malloc+0x10>)
 8007cfc:	0001      	movs	r1, r0
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	f000 f830 	bl	8007d64 <_malloc_r>
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	2000015c 	.word	0x2000015c

08007d0c <free>:
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	4b03      	ldr	r3, [pc, #12]	; (8007d1c <free+0x10>)
 8007d10:	0001      	movs	r1, r0
 8007d12:	6818      	ldr	r0, [r3, #0]
 8007d14:	f000 f966 	bl	8007fe4 <_free_r>
 8007d18:	bd10      	pop	{r4, pc}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	2000015c 	.word	0x2000015c

08007d20 <sbrk_aligned>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	4e0f      	ldr	r6, [pc, #60]	; (8007d60 <sbrk_aligned+0x40>)
 8007d24:	000d      	movs	r5, r1
 8007d26:	6831      	ldr	r1, [r6, #0]
 8007d28:	0004      	movs	r4, r0
 8007d2a:	2900      	cmp	r1, #0
 8007d2c:	d102      	bne.n	8007d34 <sbrk_aligned+0x14>
 8007d2e:	f000 f911 	bl	8007f54 <_sbrk_r>
 8007d32:	6030      	str	r0, [r6, #0]
 8007d34:	0029      	movs	r1, r5
 8007d36:	0020      	movs	r0, r4
 8007d38:	f000 f90c 	bl	8007f54 <_sbrk_r>
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	d00a      	beq.n	8007d56 <sbrk_aligned+0x36>
 8007d40:	2303      	movs	r3, #3
 8007d42:	1cc5      	adds	r5, r0, #3
 8007d44:	439d      	bics	r5, r3
 8007d46:	42a8      	cmp	r0, r5
 8007d48:	d007      	beq.n	8007d5a <sbrk_aligned+0x3a>
 8007d4a:	1a29      	subs	r1, r5, r0
 8007d4c:	0020      	movs	r0, r4
 8007d4e:	f000 f901 	bl	8007f54 <_sbrk_r>
 8007d52:	3001      	adds	r0, #1
 8007d54:	d101      	bne.n	8007d5a <sbrk_aligned+0x3a>
 8007d56:	2501      	movs	r5, #1
 8007d58:	426d      	negs	r5, r5
 8007d5a:	0028      	movs	r0, r5
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
 8007d5e:	46c0      	nop			; (mov r8, r8)
 8007d60:	20000f84 	.word	0x20000f84

08007d64 <_malloc_r>:
 8007d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d66:	2203      	movs	r2, #3
 8007d68:	1ccb      	adds	r3, r1, #3
 8007d6a:	4393      	bics	r3, r2
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	0006      	movs	r6, r0
 8007d70:	001f      	movs	r7, r3
 8007d72:	2b0c      	cmp	r3, #12
 8007d74:	d238      	bcs.n	8007de8 <_malloc_r+0x84>
 8007d76:	270c      	movs	r7, #12
 8007d78:	42b9      	cmp	r1, r7
 8007d7a:	d837      	bhi.n	8007dec <_malloc_r+0x88>
 8007d7c:	0030      	movs	r0, r6
 8007d7e:	f000 f873 	bl	8007e68 <__malloc_lock>
 8007d82:	4b38      	ldr	r3, [pc, #224]	; (8007e64 <_malloc_r+0x100>)
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	001c      	movs	r4, r3
 8007d8a:	2c00      	cmp	r4, #0
 8007d8c:	d133      	bne.n	8007df6 <_malloc_r+0x92>
 8007d8e:	0039      	movs	r1, r7
 8007d90:	0030      	movs	r0, r6
 8007d92:	f7ff ffc5 	bl	8007d20 <sbrk_aligned>
 8007d96:	0004      	movs	r4, r0
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d15e      	bne.n	8007e5a <_malloc_r+0xf6>
 8007d9c:	9b00      	ldr	r3, [sp, #0]
 8007d9e:	681c      	ldr	r4, [r3, #0]
 8007da0:	0025      	movs	r5, r4
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	d14e      	bne.n	8007e44 <_malloc_r+0xe0>
 8007da6:	2c00      	cmp	r4, #0
 8007da8:	d051      	beq.n	8007e4e <_malloc_r+0xea>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	0029      	movs	r1, r5
 8007dae:	18e3      	adds	r3, r4, r3
 8007db0:	0030      	movs	r0, r6
 8007db2:	9301      	str	r3, [sp, #4]
 8007db4:	f000 f8ce 	bl	8007f54 <_sbrk_r>
 8007db8:	9b01      	ldr	r3, [sp, #4]
 8007dba:	4283      	cmp	r3, r0
 8007dbc:	d147      	bne.n	8007e4e <_malloc_r+0xea>
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	0030      	movs	r0, r6
 8007dc2:	1aff      	subs	r7, r7, r3
 8007dc4:	0039      	movs	r1, r7
 8007dc6:	f7ff ffab 	bl	8007d20 <sbrk_aligned>
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d03f      	beq.n	8007e4e <_malloc_r+0xea>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	19db      	adds	r3, r3, r7
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	9b00      	ldr	r3, [sp, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d040      	beq.n	8007e5e <_malloc_r+0xfa>
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	42a2      	cmp	r2, r4
 8007de0:	d133      	bne.n	8007e4a <_malloc_r+0xe6>
 8007de2:	2200      	movs	r2, #0
 8007de4:	605a      	str	r2, [r3, #4]
 8007de6:	e014      	b.n	8007e12 <_malloc_r+0xae>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	dac5      	bge.n	8007d78 <_malloc_r+0x14>
 8007dec:	230c      	movs	r3, #12
 8007dee:	2500      	movs	r5, #0
 8007df0:	6033      	str	r3, [r6, #0]
 8007df2:	0028      	movs	r0, r5
 8007df4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007df6:	6821      	ldr	r1, [r4, #0]
 8007df8:	1bc9      	subs	r1, r1, r7
 8007dfa:	d420      	bmi.n	8007e3e <_malloc_r+0xda>
 8007dfc:	290b      	cmp	r1, #11
 8007dfe:	d918      	bls.n	8007e32 <_malloc_r+0xce>
 8007e00:	19e2      	adds	r2, r4, r7
 8007e02:	6027      	str	r7, [r4, #0]
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	d112      	bne.n	8007e2e <_malloc_r+0xca>
 8007e08:	9b00      	ldr	r3, [sp, #0]
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	6863      	ldr	r3, [r4, #4]
 8007e0e:	6011      	str	r1, [r2, #0]
 8007e10:	6053      	str	r3, [r2, #4]
 8007e12:	0030      	movs	r0, r6
 8007e14:	0025      	movs	r5, r4
 8007e16:	f000 f82f 	bl	8007e78 <__malloc_unlock>
 8007e1a:	2207      	movs	r2, #7
 8007e1c:	350b      	adds	r5, #11
 8007e1e:	1d23      	adds	r3, r4, #4
 8007e20:	4395      	bics	r5, r2
 8007e22:	1aea      	subs	r2, r5, r3
 8007e24:	429d      	cmp	r5, r3
 8007e26:	d0e4      	beq.n	8007df2 <_malloc_r+0x8e>
 8007e28:	1b5b      	subs	r3, r3, r5
 8007e2a:	50a3      	str	r3, [r4, r2]
 8007e2c:	e7e1      	b.n	8007df2 <_malloc_r+0x8e>
 8007e2e:	605a      	str	r2, [r3, #4]
 8007e30:	e7ec      	b.n	8007e0c <_malloc_r+0xa8>
 8007e32:	6862      	ldr	r2, [r4, #4]
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	d1d5      	bne.n	8007de4 <_malloc_r+0x80>
 8007e38:	9b00      	ldr	r3, [sp, #0]
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	e7e9      	b.n	8007e12 <_malloc_r+0xae>
 8007e3e:	0023      	movs	r3, r4
 8007e40:	6864      	ldr	r4, [r4, #4]
 8007e42:	e7a2      	b.n	8007d8a <_malloc_r+0x26>
 8007e44:	002c      	movs	r4, r5
 8007e46:	686d      	ldr	r5, [r5, #4]
 8007e48:	e7ab      	b.n	8007da2 <_malloc_r+0x3e>
 8007e4a:	0013      	movs	r3, r2
 8007e4c:	e7c4      	b.n	8007dd8 <_malloc_r+0x74>
 8007e4e:	230c      	movs	r3, #12
 8007e50:	0030      	movs	r0, r6
 8007e52:	6033      	str	r3, [r6, #0]
 8007e54:	f000 f810 	bl	8007e78 <__malloc_unlock>
 8007e58:	e7cb      	b.n	8007df2 <_malloc_r+0x8e>
 8007e5a:	6027      	str	r7, [r4, #0]
 8007e5c:	e7d9      	b.n	8007e12 <_malloc_r+0xae>
 8007e5e:	605b      	str	r3, [r3, #4]
 8007e60:	deff      	udf	#255	; 0xff
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	20000f80 	.word	0x20000f80

08007e68 <__malloc_lock>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	4802      	ldr	r0, [pc, #8]	; (8007e74 <__malloc_lock+0xc>)
 8007e6c:	f000 f8ae 	bl	8007fcc <__retarget_lock_acquire_recursive>
 8007e70:	bd10      	pop	{r4, pc}
 8007e72:	46c0      	nop			; (mov r8, r8)
 8007e74:	200010c4 	.word	0x200010c4

08007e78 <__malloc_unlock>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	4802      	ldr	r0, [pc, #8]	; (8007e84 <__malloc_unlock+0xc>)
 8007e7c:	f000 f8a7 	bl	8007fce <__retarget_lock_release_recursive>
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	46c0      	nop			; (mov r8, r8)
 8007e84:	200010c4 	.word	0x200010c4

08007e88 <memmove>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	4288      	cmp	r0, r1
 8007e8c:	d902      	bls.n	8007e94 <memmove+0xc>
 8007e8e:	188b      	adds	r3, r1, r2
 8007e90:	4298      	cmp	r0, r3
 8007e92:	d303      	bcc.n	8007e9c <memmove+0x14>
 8007e94:	2300      	movs	r3, #0
 8007e96:	e007      	b.n	8007ea8 <memmove+0x20>
 8007e98:	5c8b      	ldrb	r3, [r1, r2]
 8007e9a:	5483      	strb	r3, [r0, r2]
 8007e9c:	3a01      	subs	r2, #1
 8007e9e:	d2fb      	bcs.n	8007e98 <memmove+0x10>
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	5ccc      	ldrb	r4, [r1, r3]
 8007ea4:	54c4      	strb	r4, [r0, r3]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d1fa      	bne.n	8007ea2 <memmove+0x1a>
 8007eac:	e7f8      	b.n	8007ea0 <memmove+0x18>

08007eae <memset>:
 8007eae:	0003      	movs	r3, r0
 8007eb0:	1882      	adds	r2, r0, r2
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d100      	bne.n	8007eb8 <memset+0xa>
 8007eb6:	4770      	bx	lr
 8007eb8:	7019      	strb	r1, [r3, #0]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	e7f9      	b.n	8007eb2 <memset+0x4>

08007ebe <_raise_r>:
 8007ebe:	b570      	push	{r4, r5, r6, lr}
 8007ec0:	0004      	movs	r4, r0
 8007ec2:	000d      	movs	r5, r1
 8007ec4:	291f      	cmp	r1, #31
 8007ec6:	d904      	bls.n	8007ed2 <_raise_r+0x14>
 8007ec8:	2316      	movs	r3, #22
 8007eca:	6003      	str	r3, [r0, #0]
 8007ecc:	2001      	movs	r0, #1
 8007ece:	4240      	negs	r0, r0
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
 8007ed2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <_raise_r+0x24>
 8007ed8:	008a      	lsls	r2, r1, #2
 8007eda:	189b      	adds	r3, r3, r2
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	2a00      	cmp	r2, #0
 8007ee0:	d108      	bne.n	8007ef4 <_raise_r+0x36>
 8007ee2:	0020      	movs	r0, r4
 8007ee4:	f000 f832 	bl	8007f4c <_getpid_r>
 8007ee8:	002a      	movs	r2, r5
 8007eea:	0001      	movs	r1, r0
 8007eec:	0020      	movs	r0, r4
 8007eee:	f000 f81b 	bl	8007f28 <_kill_r>
 8007ef2:	e7ed      	b.n	8007ed0 <_raise_r+0x12>
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	2a01      	cmp	r2, #1
 8007ef8:	d0ea      	beq.n	8007ed0 <_raise_r+0x12>
 8007efa:	1c51      	adds	r1, r2, #1
 8007efc:	d103      	bne.n	8007f06 <_raise_r+0x48>
 8007efe:	2316      	movs	r3, #22
 8007f00:	3001      	adds	r0, #1
 8007f02:	6023      	str	r3, [r4, #0]
 8007f04:	e7e4      	b.n	8007ed0 <_raise_r+0x12>
 8007f06:	2400      	movs	r4, #0
 8007f08:	0028      	movs	r0, r5
 8007f0a:	601c      	str	r4, [r3, #0]
 8007f0c:	4790      	blx	r2
 8007f0e:	0020      	movs	r0, r4
 8007f10:	e7de      	b.n	8007ed0 <_raise_r+0x12>
	...

08007f14 <raise>:
 8007f14:	b510      	push	{r4, lr}
 8007f16:	4b03      	ldr	r3, [pc, #12]	; (8007f24 <raise+0x10>)
 8007f18:	0001      	movs	r1, r0
 8007f1a:	6818      	ldr	r0, [r3, #0]
 8007f1c:	f7ff ffcf 	bl	8007ebe <_raise_r>
 8007f20:	bd10      	pop	{r4, pc}
 8007f22:	46c0      	nop			; (mov r8, r8)
 8007f24:	2000015c 	.word	0x2000015c

08007f28 <_kill_r>:
 8007f28:	2300      	movs	r3, #0
 8007f2a:	b570      	push	{r4, r5, r6, lr}
 8007f2c:	4d06      	ldr	r5, [pc, #24]	; (8007f48 <_kill_r+0x20>)
 8007f2e:	0004      	movs	r4, r0
 8007f30:	0008      	movs	r0, r1
 8007f32:	0011      	movs	r1, r2
 8007f34:	602b      	str	r3, [r5, #0]
 8007f36:	f7fc fec9 	bl	8004ccc <_kill>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	d103      	bne.n	8007f46 <_kill_r+0x1e>
 8007f3e:	682b      	ldr	r3, [r5, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d000      	beq.n	8007f46 <_kill_r+0x1e>
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	bd70      	pop	{r4, r5, r6, pc}
 8007f48:	200010c0 	.word	0x200010c0

08007f4c <_getpid_r>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	f7fc febb 	bl	8004cc8 <_getpid>
 8007f52:	bd10      	pop	{r4, pc}

08007f54 <_sbrk_r>:
 8007f54:	2300      	movs	r3, #0
 8007f56:	b570      	push	{r4, r5, r6, lr}
 8007f58:	4d06      	ldr	r5, [pc, #24]	; (8007f74 <_sbrk_r+0x20>)
 8007f5a:	0004      	movs	r4, r0
 8007f5c:	0008      	movs	r0, r1
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	f7fc fec2 	bl	8004ce8 <_sbrk>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d103      	bne.n	8007f70 <_sbrk_r+0x1c>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d000      	beq.n	8007f70 <_sbrk_r+0x1c>
 8007f6e:	6023      	str	r3, [r4, #0]
 8007f70:	bd70      	pop	{r4, r5, r6, pc}
 8007f72:	46c0      	nop			; (mov r8, r8)
 8007f74:	200010c0 	.word	0x200010c0

08007f78 <__errno>:
 8007f78:	4b01      	ldr	r3, [pc, #4]	; (8007f80 <__errno+0x8>)
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	4770      	bx	lr
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	2000015c 	.word	0x2000015c

08007f84 <__libc_init_array>:
 8007f84:	b570      	push	{r4, r5, r6, lr}
 8007f86:	2600      	movs	r6, #0
 8007f88:	4c0c      	ldr	r4, [pc, #48]	; (8007fbc <__libc_init_array+0x38>)
 8007f8a:	4d0d      	ldr	r5, [pc, #52]	; (8007fc0 <__libc_init_array+0x3c>)
 8007f8c:	1b64      	subs	r4, r4, r5
 8007f8e:	10a4      	asrs	r4, r4, #2
 8007f90:	42a6      	cmp	r6, r4
 8007f92:	d109      	bne.n	8007fa8 <__libc_init_array+0x24>
 8007f94:	2600      	movs	r6, #0
 8007f96:	f000 f86f 	bl	8008078 <_init>
 8007f9a:	4c0a      	ldr	r4, [pc, #40]	; (8007fc4 <__libc_init_array+0x40>)
 8007f9c:	4d0a      	ldr	r5, [pc, #40]	; (8007fc8 <__libc_init_array+0x44>)
 8007f9e:	1b64      	subs	r4, r4, r5
 8007fa0:	10a4      	asrs	r4, r4, #2
 8007fa2:	42a6      	cmp	r6, r4
 8007fa4:	d105      	bne.n	8007fb2 <__libc_init_array+0x2e>
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}
 8007fa8:	00b3      	lsls	r3, r6, #2
 8007faa:	58eb      	ldr	r3, [r5, r3]
 8007fac:	4798      	blx	r3
 8007fae:	3601      	adds	r6, #1
 8007fb0:	e7ee      	b.n	8007f90 <__libc_init_array+0xc>
 8007fb2:	00b3      	lsls	r3, r6, #2
 8007fb4:	58eb      	ldr	r3, [r5, r3]
 8007fb6:	4798      	blx	r3
 8007fb8:	3601      	adds	r6, #1
 8007fba:	e7f2      	b.n	8007fa2 <__libc_init_array+0x1e>
 8007fbc:	08008c30 	.word	0x08008c30
 8007fc0:	08008c30 	.word	0x08008c30
 8007fc4:	08008c38 	.word	0x08008c38
 8007fc8:	08008c30 	.word	0x08008c30

08007fcc <__retarget_lock_acquire_recursive>:
 8007fcc:	4770      	bx	lr

08007fce <__retarget_lock_release_recursive>:
 8007fce:	4770      	bx	lr

08007fd0 <memcpy>:
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d100      	bne.n	8007fda <memcpy+0xa>
 8007fd8:	bd10      	pop	{r4, pc}
 8007fda:	5ccc      	ldrb	r4, [r1, r3]
 8007fdc:	54c4      	strb	r4, [r0, r3]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	e7f8      	b.n	8007fd4 <memcpy+0x4>
	...

08007fe4 <_free_r>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	0005      	movs	r5, r0
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	d010      	beq.n	800800e <_free_r+0x2a>
 8007fec:	1f0c      	subs	r4, r1, #4
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	da00      	bge.n	8007ff6 <_free_r+0x12>
 8007ff4:	18e4      	adds	r4, r4, r3
 8007ff6:	0028      	movs	r0, r5
 8007ff8:	f7ff ff36 	bl	8007e68 <__malloc_lock>
 8007ffc:	4a1d      	ldr	r2, [pc, #116]	; (8008074 <_free_r+0x90>)
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d105      	bne.n	8008010 <_free_r+0x2c>
 8008004:	6063      	str	r3, [r4, #4]
 8008006:	6014      	str	r4, [r2, #0]
 8008008:	0028      	movs	r0, r5
 800800a:	f7ff ff35 	bl	8007e78 <__malloc_unlock>
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	42a3      	cmp	r3, r4
 8008012:	d908      	bls.n	8008026 <_free_r+0x42>
 8008014:	6820      	ldr	r0, [r4, #0]
 8008016:	1821      	adds	r1, r4, r0
 8008018:	428b      	cmp	r3, r1
 800801a:	d1f3      	bne.n	8008004 <_free_r+0x20>
 800801c:	6819      	ldr	r1, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	1809      	adds	r1, r1, r0
 8008022:	6021      	str	r1, [r4, #0]
 8008024:	e7ee      	b.n	8008004 <_free_r+0x20>
 8008026:	001a      	movs	r2, r3
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <_free_r+0x4e>
 800802e:	42a3      	cmp	r3, r4
 8008030:	d9f9      	bls.n	8008026 <_free_r+0x42>
 8008032:	6811      	ldr	r1, [r2, #0]
 8008034:	1850      	adds	r0, r2, r1
 8008036:	42a0      	cmp	r0, r4
 8008038:	d10b      	bne.n	8008052 <_free_r+0x6e>
 800803a:	6820      	ldr	r0, [r4, #0]
 800803c:	1809      	adds	r1, r1, r0
 800803e:	1850      	adds	r0, r2, r1
 8008040:	6011      	str	r1, [r2, #0]
 8008042:	4283      	cmp	r3, r0
 8008044:	d1e0      	bne.n	8008008 <_free_r+0x24>
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	1841      	adds	r1, r0, r1
 800804c:	6011      	str	r1, [r2, #0]
 800804e:	6053      	str	r3, [r2, #4]
 8008050:	e7da      	b.n	8008008 <_free_r+0x24>
 8008052:	42a0      	cmp	r0, r4
 8008054:	d902      	bls.n	800805c <_free_r+0x78>
 8008056:	230c      	movs	r3, #12
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	e7d5      	b.n	8008008 <_free_r+0x24>
 800805c:	6820      	ldr	r0, [r4, #0]
 800805e:	1821      	adds	r1, r4, r0
 8008060:	428b      	cmp	r3, r1
 8008062:	d103      	bne.n	800806c <_free_r+0x88>
 8008064:	6819      	ldr	r1, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	1809      	adds	r1, r1, r0
 800806a:	6021      	str	r1, [r4, #0]
 800806c:	6063      	str	r3, [r4, #4]
 800806e:	6054      	str	r4, [r2, #4]
 8008070:	e7ca      	b.n	8008008 <_free_r+0x24>
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	20000f80 	.word	0x20000f80

08008078 <_init>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	46c0      	nop			; (mov r8, r8)
 800807c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800807e:	bc08      	pop	{r3}
 8008080:	469e      	mov	lr, r3
 8008082:	4770      	bx	lr

08008084 <_fini>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808a:	bc08      	pop	{r3}
 800808c:	469e      	mov	lr, r3
 800808e:	4770      	bx	lr
