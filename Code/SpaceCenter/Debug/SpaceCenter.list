
SpaceCenter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004054  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e5c  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f70  08004f70  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004f70  08004f70  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f70  08004f70  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f70  08004f70  00014f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001000  20000024  08004f9c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001024  08004f9c  00021024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b73  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004021  00000000  00000000  00039bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0003dbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  0003e958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a33  00000000  00000000  0003fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018770  00000000  00000000  000577a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e9e  00000000  00000000  0006ff13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3db1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026fc  00000000  00000000  000f3e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000c8f9  00000000  00000000  000f6500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080040fc 	.word	0x080040fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	080040fc 	.word	0x080040fc

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	4c3c      	ldr	r4, [pc, #240]	; (8000328 <main+0xf4>)
 8000238:	44a5      	add	sp, r4
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 feb4 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f882 	bl	8000348 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 fa74 	bl	8000730 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000248:	f000 fa44 	bl	80006d4 <_ZL11MX_DMA_Initv>
  MX_I2S2_Init();
 800024c:	f000 f8e0 	bl	8000410 <_ZL12MX_I2S2_Initv>
  MX_SPI1_Init();
 8000250:	f000 f90c 	bl	800046c <_ZL12MX_SPI1_Initv>
  MX_TSC_Init();
 8000254:	f000 f9f4 	bl	8000640 <_ZL11MX_TSC_Initv>
  MX_TOUCHSENSING_Init();
 8000258:	f003 ff11 	bl	800407e <MX_TOUCHSENSING_Init>
  MX_TIM2_Init();
 800025c:	f000 f942 	bl	80004e4 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SD_SPI1_CS_N_GPIO_Port, SD_SPI1_CS_N_Pin, GPIO_PIN_SET);
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	0219      	lsls	r1, r3, #8
 8000264:	23a0      	movs	r3, #160	; 0xa0
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	2201      	movs	r2, #1
 800026a:	0018      	movs	r0, r3
 800026c:	f001 f8aa 	bl	80013c4 <HAL_GPIO_WritePin>
  FRESULT fr;
  fr = f_mount(&FatFs, "", 1);
 8000270:	4d2e      	ldr	r5, [pc, #184]	; (800032c <main+0xf8>)
 8000272:	197c      	adds	r4, r7, r5
 8000274:	492e      	ldr	r1, [pc, #184]	; (8000330 <main+0xfc>)
 8000276:	4b2f      	ldr	r3, [pc, #188]	; (8000334 <main+0x100>)
 8000278:	2201      	movs	r2, #1
 800027a:	0018      	movs	r0, r3
 800027c:	f003 fbda 	bl	8003a34 <f_mount>
 8000280:	0003      	movs	r3, r0
 8000282:	7023      	strb	r3, [r4, #0]

  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	00db      	lsls	r3, r3, #3
 8000288:	482b      	ldr	r0, [pc, #172]	; (8000338 <main+0x104>)
 800028a:	2200      	movs	r2, #0
 800028c:	0019      	movs	r1, r3
 800028e:	f001 f899 	bl	80013c4 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000292:	23fa      	movs	r3, #250	; 0xfa
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	0018      	movs	r0, r3
 8000298:	f000 fea8 	bl	8000fec <HAL_Delay>

  static FIL fil;
  uint8_t wav_buf[512];
  UINT bytes_read;
  fr = f_open(&fil, "blue.wav", FA_READ);
 800029c:	197c      	adds	r4, r7, r5
 800029e:	4927      	ldr	r1, [pc, #156]	; (800033c <main+0x108>)
 80002a0:	4b27      	ldr	r3, [pc, #156]	; (8000340 <main+0x10c>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	0018      	movs	r0, r3
 80002a6:	f003 fbeb 	bl	8003a80 <f_open>
 80002aa:	0003      	movs	r3, r0
 80002ac:	7023      	strb	r3, [r4, #0]
  f_read(&fil, &wav_buf[0], 512, &bytes_read);
 80002ae:	003b      	movs	r3, r7
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	0092      	lsls	r2, r2, #2
 80002b4:	1d39      	adds	r1, r7, #4
 80002b6:	4822      	ldr	r0, [pc, #136]	; (8000340 <main+0x10c>)
 80002b8:	f003 fe4a 	bl	8003f50 <f_read>
  if (wav_buf[0] > 2) {
 80002bc:	4b21      	ldr	r3, [pc, #132]	; (8000344 <main+0x110>)
 80002be:	2282      	movs	r2, #130	; 0x82
 80002c0:	0092      	lsls	r2, r2, #2
 80002c2:	4694      	mov	ip, r2
 80002c4:	44bc      	add	ip, r7
 80002c6:	4463      	add	r3, ip
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d907      	bls.n	80002de <main+0xaa>
    HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 80002ce:	2380      	movs	r3, #128	; 0x80
 80002d0:	00db      	lsls	r3, r3, #3
 80002d2:	4819      	ldr	r0, [pc, #100]	; (8000338 <main+0x104>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	0019      	movs	r1, r3
 80002d8:	f001 f874 	bl	80013c4 <HAL_GPIO_WritePin>
 80002dc:	e006      	b.n	80002ec <main+0xb8>
  } else {
    HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 80002de:	2380      	movs	r3, #128	; 0x80
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	4815      	ldr	r0, [pc, #84]	; (8000338 <main+0x104>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	0019      	movs	r1, r3
 80002e8:	f001 f86c 	bl	80013c4 <HAL_GPIO_WritePin>
  }

  play_wav("blue.wav");
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <main+0x108>)
 80002ee:	0018      	movs	r0, r3
 80002f0:	f000 fd9a 	bl	8000e28 <play_wav>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(500);
 80002f4:	23fa      	movs	r3, #250	; 0xfa
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 fe77 	bl	8000fec <HAL_Delay>
	HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 80002fe:	2380      	movs	r3, #128	; 0x80
 8000300:	00db      	lsls	r3, r3, #3
 8000302:	480d      	ldr	r0, [pc, #52]	; (8000338 <main+0x104>)
 8000304:	2201      	movs	r2, #1
 8000306:	0019      	movs	r1, r3
 8000308:	f001 f85c 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800030c:	23fa      	movs	r3, #250	; 0xfa
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fe6b 	bl	8000fec <HAL_Delay>
	HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8000316:	2380      	movs	r3, #128	; 0x80
 8000318:	00db      	lsls	r3, r3, #3
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <main+0x104>)
 800031c:	2200      	movs	r2, #0
 800031e:	0019      	movs	r1, r3
 8000320:	f001 f850 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000324:	e7e6      	b.n	80002f4 <main+0xc0>
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	fffffdf8 	.word	0xfffffdf8
 800032c:	00000207 	.word	0x00000207
 8000330:	08004114 	.word	0x08004114
 8000334:	2000050c 	.word	0x2000050c
 8000338:	50001c00 	.word	0x50001c00
 800033c:	08004118 	.word	0x08004118
 8000340:	20000734 	.word	0x20000734
 8000344:	fffffdfc 	.word	0xfffffdfc

08000348 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b095      	sub	sp, #84	; 0x54
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	2418      	movs	r4, #24
 8000350:	193b      	adds	r3, r7, r4
 8000352:	0018      	movs	r0, r3
 8000354:	2338      	movs	r3, #56	; 0x38
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f003 fec7 	bl	80040ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	0018      	movs	r0, r3
 8000362:	2314      	movs	r3, #20
 8000364:	001a      	movs	r2, r3
 8000366:	2100      	movs	r1, #0
 8000368:	f003 fec0 	bl	80040ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800036c:	4b26      	ldr	r3, [pc, #152]	; (8000408 <_Z18SystemClock_Configv+0xc0>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a26      	ldr	r2, [pc, #152]	; (800040c <_Z18SystemClock_Configv+0xc4>)
 8000372:	401a      	ands	r2, r3
 8000374:	4b24      	ldr	r3, [pc, #144]	; (8000408 <_Z18SystemClock_Configv+0xc0>)
 8000376:	2180      	movs	r1, #128	; 0x80
 8000378:	0109      	lsls	r1, r1, #4
 800037a:	430a      	orrs	r2, r1
 800037c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037e:	0021      	movs	r1, r4
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2202      	movs	r2, #2
 8000384:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2201      	movs	r2, #1
 800038a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2210      	movs	r2, #16
 8000390:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2202      	movs	r2, #2
 8000396:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2200      	movs	r2, #0
 800039c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2280      	movs	r2, #128	; 0x80
 80003a2:	02d2      	lsls	r2, r2, #11
 80003a4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	03d2      	lsls	r2, r2, #15
 80003ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 f947 	bl	8001644 <HAL_RCC_OscConfig>
 80003b6:	0003      	movs	r3, r0
 80003b8:	1e5a      	subs	r2, r3, #1
 80003ba:	4193      	sbcs	r3, r2
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 80003c2:	f000 fae1 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	220f      	movs	r2, #15
 80003ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2203      	movs	r2, #3
 80003d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2101      	movs	r1, #1
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fbb3 	bl	8001b54 <HAL_RCC_ClockConfig>
 80003ee:	0003      	movs	r3, r0
 80003f0:	1e5a      	subs	r2, r3, #1
 80003f2:	4193      	sbcs	r3, r2
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80003fa:	f000 fac5 	bl	8000988 <Error_Handler>
  }
}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b015      	add	sp, #84	; 0x54
 8000404:	bd90      	pop	{r4, r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	40007000 	.word	0x40007000
 800040c:	ffffe7ff 	.word	0xffffe7ff

08000410 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <_ZL12MX_I2S2_Initv+0x50>)
 8000416:	4a13      	ldr	r2, [pc, #76]	; (8000464 <_ZL12MX_I2S2_Initv+0x54>)
 8000418:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <_ZL12MX_I2S2_Initv+0x50>)
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	0092      	lsls	r2, r2, #2
 8000420:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <_ZL12MX_I2S2_Initv+0x50>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <_ZL12MX_I2S2_Initv+0x50>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <_ZL12MX_I2S2_Initv+0x50>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <_ZL12MX_I2S2_Initv+0x50>)
 8000436:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <_ZL12MX_I2S2_Initv+0x58>)
 8000438:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 800043a:	4b09      	ldr	r3, [pc, #36]	; (8000460 <_ZL12MX_I2S2_Initv+0x50>)
 800043c:	2208      	movs	r2, #8
 800043e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000440:	4b07      	ldr	r3, [pc, #28]	; (8000460 <_ZL12MX_I2S2_Initv+0x50>)
 8000442:	0018      	movs	r0, r3
 8000444:	f000 ffc4 	bl	80013d0 <HAL_I2S_Init>
 8000448:	0003      	movs	r3, r0
 800044a:	1e5a      	subs	r2, r3, #1
 800044c:	4193      	sbcs	r3, r2
 800044e:	b2db      	uxtb	r3, r3
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <_ZL12MX_I2S2_Initv+0x48>
  {
    Error_Handler();
 8000454:	f000 fa98 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	20000248 	.word	0x20000248
 8000464:	40003800 	.word	0x40003800
 8000468:	0000ac44 	.word	0x0000ac44

0800046c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000470:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 8000472:	4a1b      	ldr	r2, [pc, #108]	; (80004e0 <_ZL12MX_SPI1_Initv+0x74>)
 8000474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000476:	4b19      	ldr	r3, [pc, #100]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 8000478:	2282      	movs	r2, #130	; 0x82
 800047a:	0052      	lsls	r2, r2, #1
 800047c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 8000492:	2200      	movs	r2, #0
 8000494:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	0092      	lsls	r2, r2, #2
 800049c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 80004a0:	2210      	movs	r2, #16
 80004a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004a4:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 80004b8:	2207      	movs	r2, #7
 80004ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <_ZL12MX_SPI1_Initv+0x70>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fc8c 	bl	8001ddc <HAL_SPI_Init>
 80004c4:	0003      	movs	r3, r0
 80004c6:	1e5a      	subs	r2, r3, #1
 80004c8:	4193      	sbcs	r3, r2
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <_ZL12MX_SPI1_Initv+0x68>
  {
    Error_Handler();
 80004d0:	f000 fa5a 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	200002cc 	.word	0x200002cc
 80004e0:	40013000 	.word	0x40013000

080004e4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ea:	2318      	movs	r3, #24
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	0018      	movs	r0, r3
 80004f0:	2310      	movs	r3, #16
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f003 fdf9 	bl	80040ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fa:	2310      	movs	r3, #16
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	0018      	movs	r0, r3
 8000500:	2308      	movs	r3, #8
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f003 fdf1 	bl	80040ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800050a:	003b      	movs	r3, r7
 800050c:	0018      	movs	r0, r3
 800050e:	2310      	movs	r3, #16
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f003 fdea 	bl	80040ec <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000518:	4b48      	ldr	r3, [pc, #288]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	05d2      	lsls	r2, r2, #23
 800051e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000520:	4b46      	ldr	r3, [pc, #280]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000526:	4b45      	ldr	r3, [pc, #276]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 800052c:	4b43      	ldr	r3, [pc, #268]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 800052e:	2227      	movs	r2, #39	; 0x27
 8000530:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000532:	4b42      	ldr	r3, [pc, #264]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000538:	4b40      	ldr	r3, [pc, #256]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 800053a:	2200      	movs	r2, #0
 800053c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800053e:	4b3f      	ldr	r3, [pc, #252]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 8000540:	0018      	movs	r0, r3
 8000542:	f001 ff63 	bl	800240c <HAL_TIM_Base_Init>
 8000546:	0003      	movs	r3, r0
 8000548:	1e5a      	subs	r2, r3, #1
 800054a:	4193      	sbcs	r3, r2
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000552:	f000 fa19 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000556:	2118      	movs	r1, #24
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	0152      	lsls	r2, r2, #5
 800055e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000560:	187a      	adds	r2, r7, r1
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 8000564:	0011      	movs	r1, r2
 8000566:	0018      	movs	r0, r3
 8000568:	f002 f81e 	bl	80025a8 <HAL_TIM_ConfigClockSource>
 800056c:	0003      	movs	r3, r0
 800056e:	1e5a      	subs	r2, r3, #1
 8000570:	4193      	sbcs	r3, r2
 8000572:	b2db      	uxtb	r3, r3
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000578:	f000 fa06 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800057c:	4b2f      	ldr	r3, [pc, #188]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 800057e:	0018      	movs	r0, r3
 8000580:	f001 ff60 	bl	8002444 <HAL_TIM_PWM_Init>
 8000584:	0003      	movs	r3, r0
 8000586:	1e5a      	subs	r2, r3, #1
 8000588:	4193      	sbcs	r3, r2
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8000590:	f000 f9fa 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000594:	2110      	movs	r1, #16
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a2:	187a      	adds	r2, r7, r1
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 f89d 	bl	80026e8 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	0003      	movs	r3, r0
 80005b0:	1e5a      	subs	r2, r3, #1
 80005b2:	4193      	sbcs	r3, r2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 80005ba:	f000 f9e5 	bl	8000988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005be:	003b      	movs	r3, r7
 80005c0:	2260      	movs	r2, #96	; 0x60
 80005c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ca:	003b      	movs	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80005d0:	003b      	movs	r3, r7
 80005d2:	2204      	movs	r2, #4
 80005d4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d6:	0039      	movs	r1, r7
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 80005da:	2200      	movs	r2, #0
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 ff4d 	bl	800247c <HAL_TIM_PWM_ConfigChannel>
 80005e2:	0003      	movs	r3, r0
 80005e4:	1e5a      	subs	r2, r3, #1
 80005e6:	4193      	sbcs	r3, r2
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80005ee:	f000 f9cb 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005f2:	0039      	movs	r1, r7
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 80005f6:	2208      	movs	r2, #8
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 ff3f 	bl	800247c <HAL_TIM_PWM_ConfigChannel>
 80005fe:	0003      	movs	r3, r0
 8000600:	1e5a      	subs	r2, r3, #1
 8000602:	4193      	sbcs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 800060a:	f000 f9bd 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800060e:	0039      	movs	r1, r7
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 8000612:	220c      	movs	r2, #12
 8000614:	0018      	movs	r0, r3
 8000616:	f001 ff31 	bl	800247c <HAL_TIM_PWM_ConfigChannel>
 800061a:	0003      	movs	r3, r0
 800061c:	1e5a      	subs	r2, r3, #1
 800061e:	4193      	sbcs	r3, r2
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <_ZL12MX_TIM2_Initv+0x146>
  {
    Error_Handler();
 8000626:	f000 f9af 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <_ZL12MX_TIM2_Initv+0x158>)
 800062c:	0018      	movs	r0, r3
 800062e:	f000 faef 	bl	8000c10 <HAL_TIM_MspPostInit>

}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b00a      	add	sp, #40	; 0x28
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	200003b4 	.word	0x200003b4

08000640 <_ZL11MX_TSC_Initv>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 8000646:	4a20      	ldr	r2, [pc, #128]	; (80006c8 <_ZL11MX_TSC_Initv+0x88>)
 8000648:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0552      	lsls	r2, r2, #21
 8000650:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	0452      	lsls	r2, r2, #17
 8000658:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 8000662:	2201      	movs	r2, #1
 8000664:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	0192      	lsls	r2, r2, #6
 8000672:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 8000676:	22a0      	movs	r2, #160	; 0xa0
 8000678:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 8000688:	2200      	movs	r2, #0
 800068a:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 800068e:	2200      	movs	r2, #0
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO2|TSC_GROUP1_IO3|TSC_GROUP1_IO4|TSC_GROUP2_IO2
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <_ZL11MX_TSC_Initv+0x8c>)
 8000696:	631a      	str	r2, [r3, #48]	; 0x30
                    |TSC_GROUP2_IO3|TSC_GROUP2_IO4|TSC_GROUP3_IO2|TSC_GROUP3_IO3
                    |TSC_GROUP3_IO4|TSC_GROUP4_IO2|TSC_GROUP4_IO3|TSC_GROUP4_IO4
                    |TSC_GROUP5_IO2|TSC_GROUP5_IO3|TSC_GROUP5_IO4|TSC_GROUP6_IO2
                    |TSC_GROUP6_IO3|TSC_GROUP6_IO4|TSC_GROUP7_IO2|TSC_GROUP7_IO3
                    |TSC_GROUP7_IO4|TSC_GROUP8_IO2|TSC_GROUP8_IO3|TSC_GROUP8_IO4;
  htsc.Init.ShieldIOs = 0;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 800069a:	2200      	movs	r2, #0
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO1|TSC_GROUP2_IO1|TSC_GROUP3_IO1|TSC_GROUP4_IO1
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <_ZL11MX_TSC_Initv+0x90>)
 80006a2:	639a      	str	r2, [r3, #56]	; 0x38
                    |TSC_GROUP5_IO1|TSC_GROUP6_IO1|TSC_GROUP7_IO1|TSC_GROUP8_IO1;
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <_ZL11MX_TSC_Initv+0x84>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 f84e 	bl	8002748 <HAL_TSC_Init>
 80006ac:	0003      	movs	r3, r0
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	4193      	sbcs	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <_ZL11MX_TSC_Initv+0x7c>
  {
    Error_Handler();
 80006b8:	f000 f966 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	200004c8 	.word	0x200004c8
 80006c8:	40024000 	.word	0x40024000
 80006cc:	eeeeeeee 	.word	0xeeeeeeee
 80006d0:	11111111 	.word	0x11111111

080006d4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <_ZL11MX_DMA_Initv+0x58>)
 80006dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <_ZL11MX_DMA_Initv+0x58>)
 80006e0:	2101      	movs	r1, #1
 80006e2:	430a      	orrs	r2, r1
 80006e4:	631a      	str	r2, [r3, #48]	; 0x30
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <_ZL11MX_DMA_Initv+0x58>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	2201      	movs	r2, #1
 80006ec:	4013      	ands	r3, r2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2009      	movs	r0, #9
 80006f8:	f000 fc88 	bl	800100c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006fc:	2009      	movs	r0, #9
 80006fe:	f000 fcaf 	bl	8001060 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	200a      	movs	r0, #10
 8000708:	f000 fc80 	bl	800100c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800070c:	200a      	movs	r0, #10
 800070e:	f000 fca7 	bl	8001060 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200b      	movs	r0, #11
 8000718:	f000 fc78 	bl	800100c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800071c:	200b      	movs	r0, #11
 800071e:	f000 fc9f 	bl	8001060 <HAL_NVIC_EnableIRQ>

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40021000 	.word	0x40021000

08000730 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b08d      	sub	sp, #52	; 0x34
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	241c      	movs	r4, #28
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2314      	movs	r3, #20
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f003 fcd3 	bl	80040ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	4b8b      	ldr	r3, [pc, #556]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 8000748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074a:	4b8a      	ldr	r3, [pc, #552]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 800074c:	2110      	movs	r1, #16
 800074e:	430a      	orrs	r2, r1
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
 8000752:	4b88      	ldr	r3, [pc, #544]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 8000754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000756:	2210      	movs	r2, #16
 8000758:	4013      	ands	r3, r2
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b85      	ldr	r3, [pc, #532]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 8000760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000762:	4b84      	ldr	r3, [pc, #528]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 8000764:	2104      	movs	r1, #4
 8000766:	430a      	orrs	r2, r1
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
 800076a:	4b82      	ldr	r3, [pc, #520]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 800076c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076e:	2204      	movs	r2, #4
 8000770:	4013      	ands	r3, r2
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b7f      	ldr	r3, [pc, #508]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 8000778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077a:	4b7e      	ldr	r3, [pc, #504]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	430a      	orrs	r2, r1
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
 8000782:	4b7c      	ldr	r3, [pc, #496]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 8000784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	4013      	ands	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b79      	ldr	r3, [pc, #484]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 8000790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000792:	4b78      	ldr	r3, [pc, #480]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 8000794:	2101      	movs	r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
 800079a:	4b76      	ldr	r3, [pc, #472]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b73      	ldr	r3, [pc, #460]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 80007a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007aa:	4b72      	ldr	r3, [pc, #456]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 80007ac:	2102      	movs	r1, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b2:	4b70      	ldr	r3, [pc, #448]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b6:	2202      	movs	r2, #2
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	4b6d      	ldr	r3, [pc, #436]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 80007c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c2:	4b6c      	ldr	r3, [pc, #432]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 80007c4:	2108      	movs	r1, #8
 80007c6:	430a      	orrs	r2, r1
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ca:	4b6a      	ldr	r3, [pc, #424]	; (8000974 <_ZL12MX_GPIO_Initv+0x244>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ce:	2208      	movs	r2, #8
 80007d0:	4013      	ands	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin, GPIO_PIN_RESET);
 80007d6:	4b68      	ldr	r3, [pc, #416]	; (8000978 <_ZL12MX_GPIO_Initv+0x248>)
 80007d8:	2200      	movs	r2, #0
 80007da:	2120      	movs	r1, #32
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fdf1 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin, GPIO_PIN_RESET);
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	01db      	lsls	r3, r3, #7
 80007e6:	4865      	ldr	r0, [pc, #404]	; (800097c <_ZL12MX_GPIO_Initv+0x24c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	0019      	movs	r1, r3
 80007ec:	f000 fdea 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	4862      	ldr	r0, [pc, #392]	; (8000980 <_ZL12MX_GPIO_Initv+0x250>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	0019      	movs	r1, r3
 80007fa:	f000 fde3 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AUDIO_SD_N_L_Pin|AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
 80007fe:	23c0      	movs	r3, #192	; 0xc0
 8000800:	011b      	lsls	r3, r3, #4
 8000802:	4860      	ldr	r0, [pc, #384]	; (8000984 <_ZL12MX_GPIO_Initv+0x254>)
 8000804:	2200      	movs	r2, #0
 8000806:	0019      	movs	r1, r3
 8000808:	f000 fddc 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_L_Pin SD_DET_A_Pin SD_DET_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_L_Pin|SD_DET_A_Pin|SD_DET_B_Pin;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	22c8      	movs	r2, #200	; 0xc8
 8000810:	0052      	lsls	r2, r2, #1
 8000812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000820:	193b      	adds	r3, r7, r4
 8000822:	4a55      	ldr	r2, [pc, #340]	; (8000978 <_ZL12MX_GPIO_Initv+0x248>)
 8000824:	0019      	movs	r1, r3
 8000826:	0010      	movs	r0, r2
 8000828:	f000 fd0e 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_L_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_L_Pin;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	2220      	movs	r2, #32
 8000830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2201      	movs	r2, #1
 8000836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_L_GPIO_Port, &GPIO_InitStruct);
 8000844:	193b      	adds	r3, r7, r4
 8000846:	4a4c      	ldr	r2, [pc, #304]	; (8000978 <_ZL12MX_GPIO_Initv+0x248>)
 8000848:	0019      	movs	r1, r3
 800084a:	0010      	movs	r0, r2
 800084c:	f000 fcfc 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_R_Pin */
  GPIO_InitStruct.Pin = BUTTON_R_Pin;
 8000850:	0021      	movs	r1, r4
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	0192      	lsls	r2, r2, #6
 8000858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	000c      	movs	r4, r1
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_R_GPIO_Port, &GPIO_InitStruct);
 8000868:	193b      	adds	r3, r7, r4
 800086a:	4a44      	ldr	r2, [pc, #272]	; (800097c <_ZL12MX_GPIO_Initv+0x24c>)
 800086c:	0019      	movs	r1, r3
 800086e:	0010      	movs	r0, r2
 8000870:	f000 fcea 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_R_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_R_Pin;
 8000874:	0021      	movs	r1, r4
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	01d2      	lsls	r2, r2, #7
 800087c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	000c      	movs	r4, r1
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2201      	movs	r2, #1
 8000884:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_R_GPIO_Port, &GPIO_InitStruct);
 8000892:	193b      	adds	r3, r7, r4
 8000894:	4a39      	ldr	r2, [pc, #228]	; (800097c <_ZL12MX_GPIO_Initv+0x24c>)
 8000896:	0019      	movs	r1, r3
 8000898:	0010      	movs	r0, r2
 800089a:	f000 fcd5 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 800089e:	0021      	movs	r1, r4
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	00d2      	lsls	r2, r2, #3
 80008a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	000c      	movs	r4, r1
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2201      	movs	r2, #1
 80008ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	4a30      	ldr	r2, [pc, #192]	; (8000980 <_ZL12MX_GPIO_Initv+0x250>)
 80008c0:	0019      	movs	r1, r3
 80008c2:	0010      	movs	r0, r2
 80008c4:	f000 fcc0 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_L_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_L_Pin;
 80008c8:	0021      	movs	r1, r4
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	00d2      	lsls	r2, r2, #3
 80008d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	000c      	movs	r4, r1
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2201      	movs	r2, #1
 80008d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_L_GPIO_Port, &GPIO_InitStruct);
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	4a26      	ldr	r2, [pc, #152]	; (8000984 <_ZL12MX_GPIO_Initv+0x254>)
 80008ea:	0019      	movs	r1, r3
 80008ec:	0010      	movs	r0, r2
 80008ee:	f000 fcab 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI1_CS_N_Pin */
  GPIO_InitStruct.Pin = SD_SPI1_CS_N_Pin;
 80008f2:	0021      	movs	r1, r4
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	0212      	lsls	r2, r2, #8
 80008fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	000c      	movs	r4, r1
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2201      	movs	r2, #1
 8000902:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2203      	movs	r2, #3
 800090e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_SPI1_CS_N_GPIO_Port, &GPIO_InitStruct);
 8000910:	193a      	adds	r2, r7, r4
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fc95 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_R_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_R_Pin;
 800091e:	0021      	movs	r1, r4
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000928:	000c      	movs	r4, r1
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2211      	movs	r2, #17
 800092e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_R_GPIO_Port, &GPIO_InitStruct);
 800093c:	193b      	adds	r3, r7, r4
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <_ZL12MX_GPIO_Initv+0x254>)
 8000940:	0019      	movs	r1, r3
 8000942:	0010      	movs	r0, r2
 8000944:	f000 fc80 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 8000948:	0021      	movs	r1, r4
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0212      	lsls	r2, r2, #8
 8000950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 800095e:	187b      	adds	r3, r7, r1
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <_ZL12MX_GPIO_Initv+0x254>)
 8000962:	0019      	movs	r1, r3
 8000964:	0010      	movs	r0, r2
 8000966:	f000 fc6f 	bl	8001248 <HAL_GPIO_Init>

}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b00d      	add	sp, #52	; 0x34
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40021000 	.word	0x40021000
 8000978:	50001000 	.word	0x50001000
 800097c:	50000800 	.word	0x50000800
 8000980:	50001c00 	.word	0x50001c00
 8000984:	50000c00 	.word	0x50000c00

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000994:	2201      	movs	r2, #1
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_MspInit+0x18>)
 8000998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800099a:	430a      	orrs	r2, r1
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80009a2:	0552      	lsls	r2, r2, #21
 80009a4:	430a      	orrs	r2, r1
 80009a6:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	4770      	bx	lr
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	0006      	movs	r6, r0
 80009b4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	2214      	movs	r2, #20
 80009b8:	2100      	movs	r1, #0
 80009ba:	a803      	add	r0, sp, #12
 80009bc:	f003 fb96 	bl	80040ec <memset>
  if(hi2s->Instance==SPI2)
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <HAL_I2S_MspInit+0xa8>)
 80009c2:	6832      	ldr	r2, [r6, #0]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d145      	bne.n	8000a54 <HAL_I2S_MspInit+0xa4>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009c8:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <HAL_I2S_MspInit+0xac>)
 80009ce:	01d2      	lsls	r2, r2, #7
 80009d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PD0     ------> I2S2_WS
    PD1     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2700      	movs	r7, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009d4:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	2108      	movs	r1, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80009dc:	4820      	ldr	r0, [pc, #128]	; (8000a60 <HAL_I2S_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	432a      	orrs	r2, r5
 80009e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e4:	402a      	ands	r2, r5
 80009e6:	9201      	str	r2, [sp, #4]
 80009e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ec:	430a      	orrs	r2, r1
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f4:	400b      	ands	r3, r1
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 80009fa:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80009fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 80009fe:	021b      	lsls	r3, r3, #8
 8000a00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000a06:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f000 fc1e 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
 8000a0c:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0e:	4815      	ldr	r0, [pc, #84]	; (8000a64 <HAL_I2S_MspInit+0xb4>)
    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
 8000a10:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a12:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000a14:	3b02      	subs	r3, #2
 8000a16:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1c:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1e:	f000 fc13 	bl	8001248 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel7;
 8000a22:	4c11      	ldr	r4, [pc, #68]	; (8000a68 <HAL_I2S_MspInit+0xb8>)
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_I2S_MspInit+0xbc>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a26:	0020      	movs	r0, r4
    hdma_spi2_tx.Instance = DMA1_Channel7;
 8000a28:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	60a3      	str	r3, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a2e:	3370      	adds	r3, #112	; 0x70
 8000a30:	6123      	str	r3, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a32:	3380      	adds	r3, #128	; 0x80
 8000a34:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	00db      	lsls	r3, r3, #3
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 8000a3a:	6065      	str	r5, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3c:	60e7      	str	r7, [r4, #12]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a3e:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000a40:	61e7      	str	r7, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a42:	6227      	str	r7, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a44:	f000 fb30 	bl	80010a8 <HAL_DMA_Init>
 8000a48:	42b8      	cmp	r0, r7
 8000a4a:	d001      	beq.n	8000a50 <HAL_I2S_MspInit+0xa0>
    {
      Error_Handler();
 8000a4c:	f7ff ff9c 	bl	8000988 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000a50:	62f4      	str	r4, [r6, #44]	; 0x2c
 8000a52:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a54:	b009      	add	sp, #36	; 0x24
 8000a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a58:	40003800 	.word	0x40003800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	50000400 	.word	0x50000400
 8000a64:	50000c00 	.word	0x50000c00
 8000a68:	20000284 	.word	0x20000284
 8000a6c:	40020080 	.word	0x40020080

08000a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	0005      	movs	r5, r0
 8000a74:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	2214      	movs	r2, #20
 8000a78:	2100      	movs	r1, #0
 8000a7a:	a801      	add	r0, sp, #4
 8000a7c:	f003 fb36 	bl	80040ec <memset>
  if(hspi->Instance==SPI1)
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <HAL_SPI_MspInit+0xb0>)
 8000a82:	682a      	ldr	r2, [r5, #0]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d149      	bne.n	8000b1c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <HAL_SPI_MspInit+0xb4>)
 8000a8c:	0152      	lsls	r2, r2, #5
 8000a8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2600      	movs	r6, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a92:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a94:	2110      	movs	r1, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9a:	4823      	ldr	r0, [pc, #140]	; (8000b28 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2203      	movs	r2, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa4:	400b      	ands	r3, r1
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
 8000aaa:	23e0      	movs	r3, #224	; 0xe0
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
 8000ab6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abc:	f000 fbc4 	bl	8001248 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000ac0:	4c1a      	ldr	r4, [pc, #104]	; (8000b2c <HAL_SPI_MspInit+0xbc>)
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_SPI_MspInit+0xc0>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ac4:	0020      	movs	r0, r4
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000ac6:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000acc:	337f      	adds	r3, #127	; 0x7f
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ace:	60a6      	str	r6, [r4, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad0:	60e6      	str	r6, [r4, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad2:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad4:	6166      	str	r6, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad6:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000ad8:	61e6      	str	r6, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ada:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000adc:	f000 fae4 	bl	80010a8 <HAL_DMA_Init>
 8000ae0:	42b0      	cmp	r0, r6
 8000ae2:	d001      	beq.n	8000ae8 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8000ae4:	f7ff ff50 	bl	8000988 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_SPI_MspInit+0xc4>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000aea:	64ec      	str	r4, [r5, #76]	; 0x4c
 8000aec:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000aee:	4c12      	ldr	r4, [pc, #72]	; (8000b38 <HAL_SPI_MspInit+0xc8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000af0:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000af2:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	6063      	str	r3, [r4, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af8:	330f      	adds	r3, #15
 8000afa:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afc:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000afe:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b00:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b02:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b04:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b06:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000b08:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b0a:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000b0c:	f000 facc 	bl	80010a8 <HAL_DMA_Init>
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8000b14:	f7ff ff38 	bl	8000988 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000b18:	64ac      	str	r4, [r5, #72]	; 0x48
 8000b1a:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b1c:	b006      	add	sp, #24
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
 8000b20:	40013000 	.word	0x40013000
 8000b24:	40021000 	.word	0x40021000
 8000b28:	50001000 	.word	0x50001000
 8000b2c:	20000324 	.word	0x20000324
 8000b30:	4002001c 	.word	0x4002001c
 8000b34:	40020030 	.word	0x40020030
 8000b38:	2000036c 	.word	0x2000036c

08000b3c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	6802      	ldr	r2, [r0, #0]
{
 8000b40:	b570      	push	{r4, r5, r6, lr}
  if(htim_base->Instance==TIM2)
 8000b42:	05db      	lsls	r3, r3, #23
{
 8000b44:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM2)
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d152      	bne.n	8000bf0 <HAL_TIM_Base_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	4a29      	ldr	r2, [pc, #164]	; (8000bf4 <HAL_TIM_Base_MspInit+0xb8>)

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000b4e:	4c2a      	ldr	r4, [pc, #168]	; (8000bf8 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b50:	6b91      	ldr	r1, [r2, #56]	; 0x38
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000b52:	0020      	movs	r0, r4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b54:	430b      	orrs	r3, r1
 8000b56:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b58:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <HAL_TIM_Base_MspInit+0xc0>)
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b5c:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b5e:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000b60:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8000b62:	2308      	movs	r3, #8
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b64:	00d2      	lsls	r2, r2, #3
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8000b66:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b68:	61a2      	str	r2, [r4, #24]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6a:	2300      	movs	r3, #0
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000b6c:	2220      	movs	r2, #32
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6e:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b70:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b72:	6163      	str	r3, [r4, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000b74:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b76:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000b78:	f000 fa96 	bl	80010a8 <HAL_DMA_Init>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_TIM_Base_MspInit+0x48>
    {
      Error_Handler();
 8000b80:	f7ff ff02 	bl	8000988 <Error_Handler>
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000b84:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000b86:	622c      	str	r4, [r5, #32]
 8000b88:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000b8a:	4c1d      	ldr	r4, [pc, #116]	; (8000c00 <HAL_TIM_Base_MspInit+0xc4>)
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_TIM_Base_MspInit+0xc8>)
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000b8e:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b90:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000b92:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 8000b94:	2308      	movs	r3, #8
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b96:	00d2      	lsls	r2, r2, #3
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 8000b98:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b9a:	61a2      	str	r2, [r4, #24]
    hdma_tim2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9c:	2300      	movs	r3, #0
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8000b9e:	2220      	movs	r2, #32
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000ba0:	0020      	movs	r0, r4
    hdma_tim2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba2:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba4:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba6:	6163      	str	r3, [r4, #20]
    hdma_tim2_ch3.Init.Mode = DMA_CIRCULAR;
 8000ba8:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000baa:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000bac:	f000 fa7c 	bl	80010a8 <HAL_DMA_Init>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_TIM_Base_MspInit+0x7c>
    {
      Error_Handler();
 8000bb4:	f7ff fee8 	bl	8000988 <Error_Handler>
    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000bb8:	2280      	movs	r2, #128	; 0x80
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000bba:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bbc:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8000bbe:	4c12      	ldr	r4, [pc, #72]	; (8000c08 <HAL_TIM_Base_MspInit+0xcc>)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_TIM_Base_MspInit+0xd0>)
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000bc2:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bc4:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8000bc6:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 8000bc8:	2308      	movs	r3, #8
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bca:	00d2      	lsls	r2, r2, #3
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 8000bcc:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bce:	61a2      	str	r2, [r4, #24]
    hdma_tim2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd0:	2300      	movs	r3, #0
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
 8000bd2:	2220      	movs	r2, #32
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8000bd4:	0020      	movs	r0, r4
    hdma_tim2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd6:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd8:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bda:	6163      	str	r3, [r4, #20]
    hdma_tim2_ch4.Init.Mode = DMA_CIRCULAR;
 8000bdc:	61e2      	str	r2, [r4, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000bde:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8000be0:	f000 fa62 	bl	80010a8 <HAL_DMA_Init>
 8000be4:	2800      	cmp	r0, #0
 8000be6:	d001      	beq.n	8000bec <HAL_TIM_Base_MspInit+0xb0>
    {
      Error_Handler();
 8000be8:	f7ff fece 	bl	8000988 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8000bec:	62ec      	str	r4, [r5, #44]	; 0x2c
 8000bee:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bf0:	bd70      	pop	{r4, r5, r6, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	200003f0 	.word	0x200003f0
 8000bfc:	40020058 	.word	0x40020058
 8000c00:	20000438 	.word	0x20000438
 8000c04:	40020008 	.word	0x40020008
 8000c08:	20000480 	.word	0x20000480
 8000c0c:	40020044 	.word	0x40020044

08000c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c10:	b510      	push	{r4, lr}
 8000c12:	0004      	movs	r4, r0
 8000c14:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	2214      	movs	r2, #20
 8000c18:	2100      	movs	r1, #0
 8000c1a:	a801      	add	r0, sp, #4
 8000c1c:	f003 fa66 	bl	80040ec <memset>
  if(htim->Instance==TIM2)
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	6822      	ldr	r2, [r4, #0]
 8000c24:	05db      	lsls	r3, r3, #23
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d115      	bne.n	8000c56 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c2a:	2010      	movs	r0, #16
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <HAL_TIM_MspPostInit+0x4c>)
 8000c2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000c30:	4301      	orrs	r1, r0
 8000c32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000c34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM2;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c36:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c38:	4003      	ands	r3, r0
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
 8000c3e:	23d0      	movs	r3, #208	; 0xd0
 8000c40:	015b      	lsls	r3, r3, #5
 8000c42:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM2;
 8000c50:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c52:	f000 faf9 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c56:	b006      	add	sp, #24
 8000c58:	bd10      	pop	{r4, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	50001000 	.word	0x50001000

08000c64 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c66:	0004      	movs	r4, r0
 8000c68:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	2214      	movs	r2, #20
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	a805      	add	r0, sp, #20
 8000c70:	f003 fa3c 	bl	80040ec <memset>
  if(htsc->Instance==TSC)
 8000c74:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <HAL_TSC_MspInit+0xe4>)
 8000c76:	6822      	ldr	r2, [r4, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d162      	bne.n	8000d42 <HAL_TSC_MspInit+0xde>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000c7c:	2080      	movs	r0, #128	; 0x80
 8000c7e:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <HAL_TSC_MspInit+0xe8>)
 8000c80:	0240      	lsls	r0, r0, #9
 8000c82:	6b19      	ldr	r1, [r3, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	2602      	movs	r6, #2
    __HAL_RCC_TSC_CLK_ENABLE();
 8000c86:	4301      	orrs	r1, r0
 8000c88:	6319      	str	r1, [r3, #48]	; 0x30
 8000c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    PB6     ------> TSC_G5_IO3
    PB7     ------> TSC_G5_IO4
    */
    GPIO_InitStruct.Pin = TOUCH_G7_1_SAMP_Pin|TOUCH_G3_1_SAMP_Pin|TOUCH_G8_1_SAMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2400      	movs	r4, #0
    __HAL_RCC_TSC_CLK_ENABLE();
 8000c8e:	4002      	ands	r2, r0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c90:	2004      	movs	r0, #4
    __HAL_RCC_TSC_CLK_ENABLE();
 8000c92:	9201      	str	r2, [sp, #4]
 8000c94:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c98:	2503      	movs	r5, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4301      	orrs	r1, r0
 8000c9c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca0:	2712      	movs	r7, #18
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4002      	ands	r2, r0
 8000ca4:	9202      	str	r2, [sp, #8]
 8000ca6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000caa:	3803      	subs	r0, #3
 8000cac:	4301      	orrs	r1, r0
 8000cae:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4002      	ands	r2, r0
 8000cb6:	9203      	str	r2, [sp, #12]
 8000cb8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	4824      	ldr	r0, [pc, #144]	; (8000d50 <HAL_TSC_MspInit+0xec>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4332      	orrs	r2, r6
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc4:	9706      	str	r7, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	4033      	ands	r3, r6
 8000cc8:	9304      	str	r3, [sp, #16]
 8000cca:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = TOUCH_G7_1_SAMP_Pin|TOUCH_G3_1_SAMP_Pin|TOUCH_G8_1_SAMP_Pin;
 8000ccc:	2361      	movs	r3, #97	; 0x61
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = TOUCH_G7_1_SAMP_Pin|TOUCH_G3_1_SAMP_Pin|TOUCH_G8_1_SAMP_Pin;
 8000cd0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cd4:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f000 fab7 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TOUCH_G7_2_STAR_0_Pin|TOUCH_G7_3_STAR_1_Pin|TOUCH_G7_4_STAR_2_Pin|TOUCH_G8_2_STAR_15_Pin
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_TSC_MspInit+0xf0>)
                          |TOUCH_G8_3_STAR_16_Pin|TOUCH_G8_4_STAR_17_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cdc:	481c      	ldr	r0, [pc, #112]	; (8000d50 <HAL_TSC_MspInit+0xec>)
 8000cde:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = TOUCH_G7_2_STAR_0_Pin|TOUCH_G7_3_STAR_1_Pin|TOUCH_G7_4_STAR_2_Pin|TOUCH_G8_2_STAR_15_Pin
 8000ce0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000ce8:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f000 faad 	bl	8001248 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOUCH_G1_1_SAMP_Pin|TOUCH_G2_1_SAMP_Pin|TOUCH_G4_1_SAMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = TOUCH_G1_1_SAMP_Pin|TOUCH_G2_1_SAMP_Pin|TOUCH_G4_1_SAMP_Pin;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_TSC_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	a905      	add	r1, sp, #20
 8000cf4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = TOUCH_G1_1_SAMP_Pin|TOUCH_G2_1_SAMP_Pin|TOUCH_G4_1_SAMP_Pin;
 8000cf6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cfe:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f000 faa2 	bl	8001248 <HAL_GPIO_Init>
                          |TOUCH_G4_4_STAR_20_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = TOUCH_G1_2_STAR_3_Pin|TOUCH_G1_3_STAR_4_Pin|TOUCH_G1_4_STAR_5_Pin|TOUCH_G2_2_STAR_6_Pin
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_TSC_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	a905      	add	r1, sp, #20
 8000d0a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = TOUCH_G1_2_STAR_3_Pin|TOUCH_G1_3_STAR_4_Pin|TOUCH_G1_4_STAR_5_Pin|TOUCH_G2_2_STAR_6_Pin
 8000d0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d14:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f000 fa97 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TOUCH_G3_2_STAR_9_Pin|TOUCH_G3_3_STAR_10_Pin|TOUCH_G3_4_STAR_11_Pin|TOUCH_G6_2_STAR_12_Pin
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_TSC_MspInit+0xfc>)
                          |TOUCH_G5_4_STAR_23_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	4811      	ldr	r0, [pc, #68]	; (8000d64 <HAL_TSC_MspInit+0x100>)
 8000d1e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = TOUCH_G3_2_STAR_9_Pin|TOUCH_G3_3_STAR_10_Pin|TOUCH_G3_4_STAR_11_Pin|TOUCH_G6_2_STAR_12_Pin
 8000d20:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d28:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f000 fa8d 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TOUCH_G6_1_SAMP_Pin|TOUCH_G4_1_SAMPB3_Pin;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_TSC_MspInit+0x104>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <HAL_TSC_MspInit+0x100>)
 8000d32:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = TOUCH_G6_1_SAMP_Pin|TOUCH_G4_1_SAMPB3_Pin;
 8000d34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d36:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d3c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f000 fa83 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000d42:	b00b      	add	sp, #44	; 0x2c
 8000d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	40024000 	.word	0x40024000
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	50000800 	.word	0x50000800
 8000d54:	0000038e 	.word	0x0000038e
 8000d58:	00000211 	.word	0x00000211
 8000d5c:	00001cee 	.word	0x00001cee
 8000d60:	000070d7 	.word	0x000070d7
 8000d64:	50000400 	.word	0x50000400
 8000d68:	00000808 	.word	0x00000808

08000d6c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d6c:	4770      	bx	lr

08000d6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler>

08000d70 <SVC_Handler>:
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d76:	f000 f92b 	bl	8000fd0 <HAL_IncTick>
  /* TSL timing for ECS, DTO */
  TSL_tim_ProcessIT();
 8000d7a:	f001 fd7f 	bl	800287c <TSL_tim_ProcessIT>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7e:	bd10      	pop	{r4, pc}

08000d80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000d82:	4802      	ldr	r0, [pc, #8]	; (8000d8c <DMA1_Channel1_IRQHandler+0xc>)
 8000d84:	f000 fa14 	bl	80011b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d88:	bd10      	pop	{r4, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000438 	.word	0x20000438

08000d90 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000d90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <DMA1_Channel2_3_IRQHandler+0x10>)
 8000d94:	f000 fa0c 	bl	80011b0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000d9a:	f000 fa09 	bl	80011b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000d9e:	bd10      	pop	{r4, pc}
 8000da0:	20000324 	.word	0x20000324
 8000da4:	2000036c 	.word	0x2000036c

08000da8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000da8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <DMA1_Channel4_5_6_7_IRQHandler+0x18>)
 8000dac:	f000 fa00 	bl	80011b0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000db2:	f000 f9fd 	bl	80011b0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000db6:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000db8:	f000 f9fa 	bl	80011b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000dbc:	bd10      	pop	{r4, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20000480 	.word	0x20000480
 8000dc4:	200003f0 	.word	0x200003f0
 8000dc8:	20000284 	.word	0x20000284

08000dcc <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <SystemInit+0x44>)
 8000dd0:	0052      	lsls	r2, r2, #1
 8000dd2:	6819      	ldr	r1, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	490e      	ldr	r1, [pc, #56]	; (8000e14 <SystemInit+0x48>)
 8000ddc:	400a      	ands	r2, r1
 8000dde:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	490d      	ldr	r1, [pc, #52]	; (8000e18 <SystemInit+0x4c>)
 8000de4:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000de6:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000de8:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	438a      	bics	r2, r1
 8000dee:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	490a      	ldr	r1, [pc, #40]	; (8000e1c <SystemInit+0x50>)
 8000df4:	400a      	ands	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	4909      	ldr	r1, [pc, #36]	; (8000e20 <SystemInit+0x54>)
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <SystemInit+0x58>)
 8000e08:	0512      	lsls	r2, r2, #20
 8000e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e0c:	4770      	bx	lr
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40021000 	.word	0x40021000
 8000e14:	88ff400c 	.word	0x88ff400c
 8000e18:	fef6fff6 	.word	0xfef6fff6
 8000e1c:	fffbffff 	.word	0xfffbffff
 8000e20:	ff02ffff 	.word	0xff02ffff
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <play_wav>:
static uint16_t audio_buf_1[256];
static uint16_t *audio_buf_ptr;
static uint16_t *audio_buf_ptr_start;

void play_wav(char wav_file[32]) {
    HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_SET);
 8000e28:	2180      	movs	r1, #128	; 0x80
void play_wav(char wav_file[32]) {
 8000e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
void play_wav(char wav_file[32]) {
 8000e2e:	0004      	movs	r4, r0
    HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_SET);
 8000e30:	00c9      	lsls	r1, r1, #3
 8000e32:	4830      	ldr	r0, [pc, #192]	; (8000ef4 <play_wav+0xcc>)
 8000e34:	f000 fac6 	bl	80013c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AUDIO_SD_N_R_GPIO_Port, AUDIO_SD_N_R_Pin, GPIO_PIN_SET);
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	482d      	ldr	r0, [pc, #180]	; (8000ef4 <play_wav+0xcc>)
 8000e3e:	0109      	lsls	r1, r1, #4
 8000e40:	f000 fac0 	bl	80013c4 <HAL_GPIO_WritePin>
    fr = f_open(&fil, wav_file, FA_READ);  // open file
 8000e44:	4f2c      	ldr	r7, [pc, #176]	; (8000ef8 <play_wav+0xd0>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	0021      	movs	r1, r4
 8000e4a:	0038      	movs	r0, r7
 8000e4c:	f002 fe18 	bl	8003a80 <f_open>
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <play_wav+0xd4>)
    //f_lseek(&fil, 76);                      // move to data region of .wav
    audio_buf_ptr = audio_buf_0;        // point to buffer 0 first
 8000e52:	4a2b      	ldr	r2, [pc, #172]	; (8000f00 <play_wav+0xd8>)
    fr = f_open(&fil, wav_file, FA_READ);  // open file
 8000e54:	7018      	strb	r0, [r3, #0]
    audio_buf_ptr = audio_buf_0;        // point to buffer 0 first
 8000e56:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <play_wav+0xdc>)
    audio_buf_ptr_start = audio_buf_0;
 8000e58:	4d2b      	ldr	r5, [pc, #172]	; (8000f08 <play_wav+0xe0>)
    audio_buf_ptr = audio_buf_0;        // point to buffer 0 first
 8000e5a:	6013      	str	r3, [r2, #0]

    while(1) {
        f_read(&fil, &wav_buf[0], 512, &bytes_read);
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	4e2b      	ldr	r6, [pc, #172]	; (8000f0c <play_wav+0xe4>)
 8000e60:	4c2b      	ldr	r4, [pc, #172]	; (8000f10 <play_wav+0xe8>)
    audio_buf_ptr_start = audio_buf_0;
 8000e62:	602b      	str	r3, [r5, #0]
        f_read(&fil, &wav_buf[0], 512, &bytes_read);
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	0033      	movs	r3, r6
 8000e68:	0021      	movs	r1, r4
 8000e6a:	0038      	movs	r0, r7
 8000e6c:	f003 f870 	bl	8003f50 <f_read>

        //////////// End of File ////////////
        if (bytes_read < 512) {
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	6833      	ldr	r3, [r6, #0]
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d20f      	bcs.n	8000e9a <play_wav+0x72>
            f_close(&fil);
 8000e7a:	0038      	movs	r0, r7
 8000e7c:	f003 f8f7 	bl	800406e <f_close>
            HAL_GPIO_WritePin(AUDIO_SD_N_L_GPIO_Port, AUDIO_SD_N_L_Pin, GPIO_PIN_RESET);
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	2200      	movs	r2, #0
 8000e84:	481b      	ldr	r0, [pc, #108]	; (8000ef4 <play_wav+0xcc>)
 8000e86:	00c9      	lsls	r1, r1, #3
 8000e88:	f000 fa9c 	bl	80013c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(AUDIO_SD_N_R_GPIO_Port, AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <play_wav+0xcc>)
 8000e92:	0109      	lsls	r1, r1, #4
 8000e94:	f000 fa96 	bl	80013c4 <HAL_GPIO_WritePin>
            audio_buf_ptr = &audio_buf_0[0];
            audio_buf_ptr_start = &audio_buf_0[0];
        }
    }
    
}
 8000e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	4e18      	ldr	r6, [pc, #96]	; (8000f00 <play_wav+0xd8>)
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	6832      	ldr	r2, [r6, #0]
 8000ea2:	469c      	mov	ip, r3
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	4494      	add	ip, r2
            *audio_buf_ptr = ((uint16_t)wav_buf[ii+1] << 8) | (uint16_t)wav_buf[ii];
 8000ea8:	7863      	ldrb	r3, [r4, #1]
 8000eaa:	7820      	ldrb	r0, [r4, #0]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	4303      	orrs	r3, r0
 8000eb0:	b218      	sxth	r0, r3
            if (*audio_buf_ptr > 32767) {
 8000eb2:	085b      	lsrs	r3, r3, #1
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	da02      	bge.n	8000ebe <play_wav+0x96>
                *audio_buf_ptr = (*audio_buf_ptr >> 1) + 32768;
 8000eb8:	4816      	ldr	r0, [pc, #88]	; (8000f14 <play_wav+0xec>)
 8000eba:	181b      	adds	r3, r3, r0
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	800b      	strh	r3, [r1, #0]
        for (int ii=0; ii<511; ii+=2) {
 8000ec0:	3102      	adds	r1, #2
 8000ec2:	3402      	adds	r4, #2
 8000ec4:	458c      	cmp	ip, r1
 8000ec6:	d1ef      	bne.n	8000ea8 <play_wav+0x80>
 8000ec8:	2380      	movs	r3, #128	; 0x80
        while (hi2s2.State != HAL_I2S_STATE_READY);    // Wait for I2S to be ready
 8000eca:	4813      	ldr	r0, [pc, #76]	; (8000f18 <play_wav+0xf0>)
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	18d2      	adds	r2, r2, r3
 8000ed0:	6032      	str	r2, [r6, #0]
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	3235      	adds	r2, #53	; 0x35
 8000ed6:	7813      	ldrb	r3, [r2, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d1fc      	bne.n	8000ed6 <play_wav+0xae>
        HAL_I2S_Transmit_DMA(&hi2s2, audio_buf_ptr_start, 256);    // play buffer
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	6829      	ldr	r1, [r5, #0]
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	f000 faef 	bl	80014c4 <HAL_I2S_Transmit_DMA>
        if (audio_buf_ptr_start == &audio_buf_0[0]) {
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <play_wav+0xdc>)
 8000ee8:	682a      	ldr	r2, [r5, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d100      	bne.n	8000ef0 <play_wav+0xc8>
            audio_buf_ptr = &audio_buf_1[0];
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <play_wav+0xf4>)
            audio_buf_ptr = &audio_buf_0[0];
 8000ef0:	6033      	str	r3, [r6, #0]
            audio_buf_ptr_start = &audio_buf_0[0];
 8000ef2:	e7b3      	b.n	8000e5c <play_wav+0x34>
 8000ef4:	50000c00 	.word	0x50000c00
 8000ef8:	20000b58 	.word	0x20000b58
 8000efc:	20000244 	.word	0x20000244
 8000f00:	20000b50 	.word	0x20000b50
 8000f04:	20000750 	.word	0x20000750
 8000f08:	20000b54 	.word	0x20000b54
 8000f0c:	20000240 	.word	0x20000240
 8000f10:	20000040 	.word	0x20000040
 8000f14:	ffff8000 	.word	0xffff8000
 8000f18:	20000248 	.word	0x20000248
 8000f1c:	20000950 	.word	0x20000950

08000f20 <HAL_I2S_TxCpltCallback>:
  HAL_GPIO_WritePin(AUDIO_SD_N_R_GPIO_Port, AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef* hi2s) {
    return;
}
 8000f20:	4770      	bx	lr
	...

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000f28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f2a:	e003      	b.n	8000f34 <LoopCopyDataInit>

08000f2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000f2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f32:	3104      	adds	r1, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000f38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f3c:	d3f6      	bcc.n	8000f2c <CopyDataInit>
  ldr  r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopForever+0x12>)
  b  LoopFillZerobss
 8000f40:	e002      	b.n	8000f48 <LoopFillZerobss>

08000f42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000f42:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f44:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f46:	3204      	adds	r2, #4

08000f48 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <LoopForever+0x16>)
  cmp  r2, r3
 8000f4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f4c:	d3f9      	bcc.n	8000f42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f4e:	f7ff ff3d 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f003 f8a7 	bl	80040a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff f96d 	bl	8000234 <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
   ldr   r0, =_estack
 8000f5c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8000f60:	08004f78 	.word	0x08004f78
  ldr  r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f68:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8000f6c:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8000f70:	20001024 	.word	0x20001024

08000f74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_COMP_IRQHandler>
	...

08000f78 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000f78:	21fa      	movs	r1, #250	; 0xfa
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_InitTick+0x2c>)
{
 8000f7c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000f7e:	0089      	lsls	r1, r1, #2
{
 8000f80:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	f7ff f8ca 	bl	800011c <__udivsi3>
 8000f88:	f000 f874 	bl	8001074 <HAL_SYSTICK_Config>
 8000f8c:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000f90:	2c00      	cmp	r4, #0
 8000f92:	d105      	bne.n	8000fa0 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000f94:	3802      	subs	r0, #2
 8000f96:	0022      	movs	r2, r4
 8000f98:	0029      	movs	r1, r5
 8000f9a:	f000 f837 	bl	800100c <HAL_NVIC_SetPriority>
 8000f9e:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	20000000 	.word	0x20000000

08000fa8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fa8:	2340      	movs	r3, #64	; 0x40
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <HAL_Init+0x24>)
{
 8000fac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fae:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb0:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb6:	f7ff ffdf 	bl	8000f78 <HAL_InitTick>
 8000fba:	1e04      	subs	r4, r0, #0
 8000fbc:	d103      	bne.n	8000fc6 <HAL_Init+0x1e>
    HAL_MspInit();
 8000fbe:	f7ff fce9 	bl	8000994 <HAL_MspInit>
}
 8000fc2:	0020      	movs	r0, r4
 8000fc4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000fc6:	2401      	movs	r4, #1
 8000fc8:	e7fb      	b.n	8000fc2 <HAL_Init+0x1a>
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	40022000 	.word	0x40022000

08000fd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000fd0:	4a02      	ldr	r2, [pc, #8]	; (8000fdc <HAL_IncTick+0xc>)
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	4770      	bx	lr
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	20000d84 	.word	0x20000d84

08000fe0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fe0:	4b01      	ldr	r3, [pc, #4]	; (8000fe8 <HAL_GetTick+0x8>)
 8000fe2:	6818      	ldr	r0, [r3, #0]
}
 8000fe4:	4770      	bx	lr
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	20000d84 	.word	0x20000d84

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b570      	push	{r4, r5, r6, lr}
 8000fee:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff fff6 	bl	8000fe0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8000ff4:	1c63      	adds	r3, r4, #1
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8000ffa:	0005      	movs	r5, r0
    wait++;
 8000ffc:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	f7ff ffef 	bl	8000fe0 <HAL_GetTick>
 8001002:	1b40      	subs	r0, r0, r5
 8001004:	42a0      	cmp	r0, r4
 8001006:	d3fa      	bcc.n	8000ffe <HAL_Delay+0x12>
  {
  }
}
 8001008:	bd70      	pop	{r4, r5, r6, pc}
	...

0800100c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100c:	b530      	push	{r4, r5, lr}
 800100e:	25ff      	movs	r5, #255	; 0xff
 8001010:	2403      	movs	r4, #3
 8001012:	002a      	movs	r2, r5
 8001014:	4004      	ands	r4, r0
 8001016:	00e4      	lsls	r4, r4, #3
 8001018:	40a2      	lsls	r2, r4
 800101a:	0189      	lsls	r1, r1, #6
 800101c:	4029      	ands	r1, r5
 800101e:	43d2      	mvns	r2, r2
 8001020:	40a1      	lsls	r1, r4
 8001022:	b2c3      	uxtb	r3, r0
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001024:	2800      	cmp	r0, #0
 8001026:	da0b      	bge.n	8001040 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001028:	200f      	movs	r0, #15
 800102a:	4003      	ands	r3, r0
 800102c:	3b08      	subs	r3, #8
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <HAL_NVIC_SetPriority+0x4c>)
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	181b      	adds	r3, r3, r0
 8001036:	69d8      	ldr	r0, [r3, #28]
 8001038:	4002      	ands	r2, r0
 800103a:	4311      	orrs	r1, r2
 800103c:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800103e:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_NVIC_SetPriority+0x50>)
 8001042:	0880      	lsrs	r0, r0, #2
 8001044:	0080      	lsls	r0, r0, #2
 8001046:	18c0      	adds	r0, r0, r3
 8001048:	23c0      	movs	r3, #192	; 0xc0
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	58c4      	ldr	r4, [r0, r3]
 800104e:	4022      	ands	r2, r4
 8001050:	4311      	orrs	r1, r2
 8001052:	50c1      	str	r1, [r0, r3]
 8001054:	e7f3      	b.n	800103e <HAL_NVIC_SetPriority+0x32>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	e000ed00 	.word	0xe000ed00
 800105c:	e000e100 	.word	0xe000e100

08001060 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001060:	231f      	movs	r3, #31
 8001062:	4018      	ands	r0, r3
 8001064:	3b1e      	subs	r3, #30
 8001066:	4083      	lsls	r3, r0
 8001068:	4a01      	ldr	r2, [pc, #4]	; (8001070 <HAL_NVIC_EnableIRQ+0x10>)
 800106a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800106c:	4770      	bx	lr
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	e000e100 	.word	0xe000e100

08001074 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	1e43      	subs	r3, r0, #1
 8001078:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	4293      	cmp	r3, r2
 800107e:	d20d      	bcs.n	800109c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001080:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001088:	6a03      	ldr	r3, [r0, #32]
 800108a:	0609      	lsls	r1, r1, #24
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	430b      	orrs	r3, r1
 8001092:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800109c:	4770      	bx	lr
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	e000e010 	.word	0xe000e010
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010aa:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80010ac:	2001      	movs	r0, #1
  if(hdma == NULL)
 80010ae:	2c00      	cmp	r4, #0
 80010b0:	d035      	beq.n	800111e <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010b2:	6825      	ldr	r5, [r4, #0]
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <HAL_DMA_Init+0x78>)
 80010b6:	2114      	movs	r1, #20
 80010b8:	18e8      	adds	r0, r5, r3
 80010ba:	f7ff f82f 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010c0:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80010c2:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010c4:	2302      	movs	r3, #2
 80010c6:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010c8:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80010ca:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010cc:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010d0:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010d2:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80010d4:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d6:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80010d8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010da:	433b      	orrs	r3, r7
 80010dc:	6967      	ldr	r7, [r4, #20]
 80010de:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e0:	69a7      	ldr	r7, [r4, #24]
 80010e2:	433b      	orrs	r3, r7
 80010e4:	69e7      	ldr	r7, [r4, #28]
 80010e6:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e8:	6a27      	ldr	r7, [r4, #32]
 80010ea:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80010ec:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010ee:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	01db      	lsls	r3, r3, #7
 80010f4:	4299      	cmp	r1, r3
 80010f6:	d00c      	beq.n	8001112 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010f8:	251c      	movs	r5, #28
 80010fa:	4028      	ands	r0, r5
 80010fc:	3d0d      	subs	r5, #13
 80010fe:	4085      	lsls	r5, r0
 8001100:	490a      	ldr	r1, [pc, #40]	; (800112c <HAL_DMA_Init+0x84>)
 8001102:	680b      	ldr	r3, [r1, #0]
 8001104:	43ab      	bics	r3, r5
 8001106:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001108:	6863      	ldr	r3, [r4, #4]
 800110a:	680d      	ldr	r5, [r1, #0]
 800110c:	4083      	lsls	r3, r0
 800110e:	432b      	orrs	r3, r5
 8001110:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001112:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001114:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001116:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001118:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800111a:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 800111c:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800111e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001120:	bffdfff8 	.word	0xbffdfff8
 8001124:	40020000 	.word	0x40020000
 8001128:	ffff800f 	.word	0xffff800f
 800112c:	400200a8 	.word	0x400200a8

08001130 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001132:	1d45      	adds	r5, r0, #5
{
 8001134:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8001136:	7feb      	ldrb	r3, [r5, #31]
{
 8001138:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800113a:	2002      	movs	r0, #2
 800113c:	2b01      	cmp	r3, #1
 800113e:	d029      	beq.n	8001194 <HAL_DMA_Start_IT+0x64>
 8001140:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8001142:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8001144:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	2600      	movs	r6, #0
 800114a:	469c      	mov	ip, r3
 800114c:	4660      	mov	r0, ip
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2801      	cmp	r0, #1
 8001152:	d12a      	bne.n	80011aa <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001154:	3001      	adds	r0, #1
 8001156:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001158:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800115a:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800115c:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 800115e:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001160:	361c      	adds	r6, #28
 8001162:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8001164:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001166:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8001168:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800116a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800116c:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800116e:	9b01      	ldr	r3, [sp, #4]
 8001170:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001172:	68a3      	ldr	r3, [r4, #8]
 8001174:	2b10      	cmp	r3, #16
 8001176:	d10e      	bne.n	8001196 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001178:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800117a:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800117c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00c      	beq.n	800119c <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001182:	230e      	movs	r3, #14
 8001184:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001186:	4313      	orrs	r3, r2
 8001188:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 800118a:	2301      	movs	r3, #1
 800118c:	6802      	ldr	r2, [r0, #0]
 800118e:	4313      	orrs	r3, r2
 8001190:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001192:	2000      	movs	r0, #0
}
 8001194:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001196:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001198:	60c2      	str	r2, [r0, #12]
 800119a:	e7ef      	b.n	800117c <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800119c:	2204      	movs	r2, #4
 800119e:	6803      	ldr	r3, [r0, #0]
 80011a0:	4393      	bics	r3, r2
 80011a2:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011a4:	6802      	ldr	r2, [r0, #0]
 80011a6:	230a      	movs	r3, #10
 80011a8:	e7ed      	b.n	8001186 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 80011aa:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 80011ac:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 80011ae:	e7f1      	b.n	8001194 <HAL_DMA_Start_IT+0x64>

080011b0 <HAL_DMA_IRQHandler>:
{
 80011b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80011b2:	221c      	movs	r2, #28
 80011b4:	2704      	movs	r7, #4
 80011b6:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80011ba:	4032      	ands	r2, r6
 80011bc:	003e      	movs	r6, r7
 80011be:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011c0:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80011c2:	6803      	ldr	r3, [r0, #0]
 80011c4:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80011c6:	4235      	tst	r5, r6
 80011c8:	d00d      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x36>
 80011ca:	423c      	tst	r4, r7
 80011cc:	d00b      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	0692      	lsls	r2, r2, #26
 80011d2:	d402      	bmi.n	80011da <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	43ba      	bics	r2, r7
 80011d8:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80011da:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80011dc:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d019      	beq.n	8001216 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80011e2:	4798      	blx	r3
  return;
 80011e4:	e017      	b.n	8001216 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80011e6:	2702      	movs	r7, #2
 80011e8:	003e      	movs	r6, r7
 80011ea:	4096      	lsls	r6, r2
 80011ec:	4235      	tst	r5, r6
 80011ee:	d013      	beq.n	8001218 <HAL_DMA_IRQHandler+0x68>
 80011f0:	423c      	tst	r4, r7
 80011f2:	d011      	beq.n	8001218 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	0692      	lsls	r2, r2, #26
 80011f8:	d406      	bmi.n	8001208 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011fa:	240a      	movs	r4, #10
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	43a2      	bics	r2, r4
 8001200:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001202:	2201      	movs	r2, #1
 8001204:	1d83      	adds	r3, r0, #6
 8001206:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8001208:	2200      	movs	r2, #0
 800120a:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800120c:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 800120e:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8001210:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001212:	4293      	cmp	r3, r2
 8001214:	d1e5      	bne.n	80011e2 <HAL_DMA_IRQHandler+0x32>
}
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001218:	2608      	movs	r6, #8
 800121a:	0037      	movs	r7, r6
 800121c:	4097      	lsls	r7, r2
 800121e:	423d      	tst	r5, r7
 8001220:	d0f9      	beq.n	8001216 <HAL_DMA_IRQHandler+0x66>
 8001222:	4234      	tst	r4, r6
 8001224:	d0f7      	beq.n	8001216 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001226:	250e      	movs	r5, #14
 8001228:	681c      	ldr	r4, [r3, #0]
 800122a:	43ac      	bics	r4, r5
 800122c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800122e:	2301      	movs	r3, #1
 8001230:	001c      	movs	r4, r3
 8001232:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8001234:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001236:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001238:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800123a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800123c:	2200      	movs	r2, #0
 800123e:	1d43      	adds	r3, r0, #5
 8001240:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001242:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001244:	e7e5      	b.n	8001212 <HAL_DMA_IRQHandler+0x62>
	...

08001248 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001248:	4a56      	ldr	r2, [pc, #344]	; (80013a4 <HAL_GPIO_Init+0x15c>)
{
 800124a:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800124c:	1882      	adds	r2, r0, r2
 800124e:	1e54      	subs	r4, r2, #1
 8001250:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8001252:	2300      	movs	r3, #0
{
 8001254:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001256:	3205      	adds	r2, #5
 8001258:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800125a:	680a      	ldr	r2, [r1, #0]
 800125c:	0014      	movs	r4, r2
 800125e:	40dc      	lsrs	r4, r3
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8001262:	b005      	add	sp, #20
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001266:	2501      	movs	r5, #1
 8001268:	0014      	movs	r4, r2
 800126a:	409d      	lsls	r5, r3
 800126c:	402c      	ands	r4, r5
 800126e:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8001270:	422a      	tst	r2, r5
 8001272:	d100      	bne.n	8001276 <HAL_GPIO_Init+0x2e>
 8001274:	e093      	b.n	800139e <HAL_GPIO_Init+0x156>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001276:	684a      	ldr	r2, [r1, #4]
 8001278:	9200      	str	r2, [sp, #0]
 800127a:	2210      	movs	r2, #16
 800127c:	9e00      	ldr	r6, [sp, #0]
 800127e:	4396      	bics	r6, r2
 8001280:	2e02      	cmp	r6, #2
 8001282:	d10f      	bne.n	80012a4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8001284:	08da      	lsrs	r2, r3, #3
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001286:	2407      	movs	r4, #7
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 800128c:	6a17      	ldr	r7, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800128e:	9202      	str	r2, [sp, #8]
 8001290:	220f      	movs	r2, #15
 8001292:	401c      	ands	r4, r3
 8001294:	00a4      	lsls	r4, r4, #2
 8001296:	40a2      	lsls	r2, r4
 8001298:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800129a:	690a      	ldr	r2, [r1, #16]
 800129c:	40a2      	lsls	r2, r4
 800129e:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 80012a0:	9a02      	ldr	r2, [sp, #8]
 80012a2:	6217      	str	r7, [r2, #32]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a4:	2203      	movs	r2, #3
 80012a6:	005c      	lsls	r4, r3, #1
 80012a8:	40a2      	lsls	r2, r4
 80012aa:	3e01      	subs	r6, #1
 80012ac:	43d2      	mvns	r2, r2
 80012ae:	2e01      	cmp	r6, #1
 80012b0:	d80d      	bhi.n	80012ce <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 80012b4:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b6:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012b8:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ba:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80012bc:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 80012be:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c0:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012c2:	9d00      	ldr	r5, [sp, #0]
 80012c4:	06ed      	lsls	r5, r5, #27
 80012c6:	0fed      	lsrs	r5, r5, #31
 80012c8:	409d      	lsls	r5, r3
 80012ca:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80012cc:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ce:	2503      	movs	r5, #3
 80012d0:	9e00      	ldr	r6, [sp, #0]
      temp = GPIOx->MODER;
 80012d2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d4:	402e      	ands	r6, r5
 80012d6:	40a6      	lsls	r6, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012d8:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012da:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80012dc:	6006      	str	r6, [r0, #0]
      temp = GPIOx->PUPDR;
 80012de:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e0:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80012e2:	688e      	ldr	r6, [r1, #8]
 80012e4:	40a6      	lsls	r6, r4
 80012e6:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80012e8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80012ea:	9a00      	ldr	r2, [sp, #0]
 80012ec:	00d2      	lsls	r2, r2, #3
 80012ee:	d556      	bpl.n	800139e <HAL_GPIO_Init+0x156>
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80012f0:	001e      	movs	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2701      	movs	r7, #1
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80012f4:	402e      	ands	r6, r5
 80012f6:	00b6      	lsls	r6, r6, #2
 80012f8:	46b4      	mov	ip, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4c2b      	ldr	r4, [pc, #172]	; (80013a8 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80012fc:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001300:	433a      	orrs	r2, r7
 8001302:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001304:	4a29      	ldr	r2, [pc, #164]	; (80013ac <HAL_GPIO_Init+0x164>)
 8001306:	089c      	lsrs	r4, r3, #2
 8001308:	00a4      	lsls	r4, r4, #2
 800130a:	18a4      	adds	r4, r4, r2
 800130c:	68a2      	ldr	r2, [r4, #8]
 800130e:	9202      	str	r2, [sp, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001310:	4662      	mov	r2, ip
 8001312:	4096      	lsls	r6, r2
 8001314:	9a02      	ldr	r2, [sp, #8]
 8001316:	43b2      	bics	r2, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001318:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800131a:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800131c:	05f6      	lsls	r6, r6, #23
 800131e:	2200      	movs	r2, #0
 8001320:	42b0      	cmp	r0, r6
 8001322:	d010      	beq.n	8001346 <HAL_GPIO_Init+0xfe>
 8001324:	4e22      	ldr	r6, [pc, #136]	; (80013b0 <HAL_GPIO_Init+0x168>)
 8001326:	003a      	movs	r2, r7
 8001328:	42b0      	cmp	r0, r6
 800132a:	d00c      	beq.n	8001346 <HAL_GPIO_Init+0xfe>
 800132c:	4e21      	ldr	r6, [pc, #132]	; (80013b4 <HAL_GPIO_Init+0x16c>)
 800132e:	19fa      	adds	r2, r7, r7
 8001330:	42b0      	cmp	r0, r6
 8001332:	d008      	beq.n	8001346 <HAL_GPIO_Init+0xfe>
 8001334:	4e20      	ldr	r6, [pc, #128]	; (80013b8 <HAL_GPIO_Init+0x170>)
 8001336:	002a      	movs	r2, r5
 8001338:	42b0      	cmp	r0, r6
 800133a:	d004      	beq.n	8001346 <HAL_GPIO_Init+0xfe>
 800133c:	4d1f      	ldr	r5, [pc, #124]	; (80013bc <HAL_GPIO_Init+0x174>)
 800133e:	19d2      	adds	r2, r2, r7
 8001340:	42a8      	cmp	r0, r5
 8001342:	d000      	beq.n	8001346 <HAL_GPIO_Init+0xfe>
 8001344:	9a03      	ldr	r2, [sp, #12]
 8001346:	4665      	mov	r5, ip
 8001348:	40aa      	lsls	r2, r5
 800134a:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800134c:	9f00      	ldr	r7, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800134e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8001352:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <HAL_GPIO_Init+0x178>)
        temp &= ~((uint32_t)iocurrent);
 8001354:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8001356:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001358:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 800135a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800135c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135e:	03ff      	lsls	r7, r7, #15
 8001360:	d401      	bmi.n	8001366 <HAL_GPIO_Init+0x11e>
        temp &= ~((uint32_t)iocurrent);
 8001362:	0035      	movs	r5, r6
 8001364:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8001366:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001368:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800136a:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800136c:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800136e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001370:	03bf      	lsls	r7, r7, #14
 8001372:	d401      	bmi.n	8001378 <HAL_GPIO_Init+0x130>
        temp &= ~((uint32_t)iocurrent);
 8001374:	0035      	movs	r5, r6
 8001376:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8001378:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800137a:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800137c:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137e:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8001380:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001382:	02ff      	lsls	r7, r7, #11
 8001384:	d401      	bmi.n	800138a <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 8001386:	0035      	movs	r5, r6
 8001388:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 800138a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800138c:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800138e:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001390:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8001392:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001394:	02bf      	lsls	r7, r7, #10
 8001396:	d401      	bmi.n	800139c <HAL_GPIO_Init+0x154>
        temp &= ~((uint32_t)iocurrent);
 8001398:	4025      	ands	r5, r4
 800139a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800139c:	60d6      	str	r6, [r2, #12]
    position++;
 800139e:	3301      	adds	r3, #1
 80013a0:	e75b      	b.n	800125a <HAL_GPIO_Init+0x12>
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	afffe400 	.word	0xafffe400
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010000 	.word	0x40010000
 80013b0:	50000400 	.word	0x50000400
 80013b4:	50000800 	.word	0x50000800
 80013b8:	50000c00 	.word	0x50000c00
 80013bc:	50001000 	.word	0x50001000
 80013c0:	40010400 	.word	0x40010400

080013c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80013c4:	2a00      	cmp	r2, #0
 80013c6:	d001      	beq.n	80013cc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013ca:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80013cc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80013ce:	e7fc      	b.n	80013ca <HAL_GPIO_WritePin+0x6>

080013d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80013d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013d2:	0004      	movs	r4, r0
  uint32_t tmp = 0U, i2sclk = 0U;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
  {
    return HAL_ERROR;
 80013d4:	2001      	movs	r0, #1
  if (hi2s == NULL)
 80013d6:	2c00      	cmp	r4, #0
 80013d8:	d046      	beq.n	8001468 <HAL_I2S_Init+0x98>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80013da:	0026      	movs	r6, r4
 80013dc:	3635      	adds	r6, #53	; 0x35
 80013de:	7833      	ldrb	r3, [r6, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d105      	bne.n	80013f2 <HAL_I2S_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80013e6:	0023      	movs	r3, r4
 80013e8:	3334      	adds	r3, #52	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80013ea:	0020      	movs	r0, r4
    hi2s->Lock = HAL_UNLOCKED;
 80013ec:	701a      	strb	r2, [r3, #0]
    HAL_I2S_MspInit(hi2s);
 80013ee:	f7ff fadf 	bl	80009b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80013f2:	2002      	movs	r0, #2
 80013f4:	7030      	strb	r0, [r6, #0]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	4931      	ldr	r1, [pc, #196]	; (80014c0 <HAL_I2S_Init+0xf0>)
 80013fa:	69da      	ldr	r2, [r3, #28]
 80013fc:	9101      	str	r1, [sp, #4]
 80013fe:	400a      	ands	r2, r1
 8001400:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001402:	6218      	str	r0, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001404:	6963      	ldr	r3, [r4, #20]
 8001406:	4283      	cmp	r3, r0
 8001408:	d036      	beq.n	8001478 <HAL_I2S_Init+0xa8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800140a:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800140c:	2510      	movs	r5, #16
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800140e:	2b00      	cmp	r3, #0
 8001410:	d000      	beq.n	8001414 <HAL_I2S_Init+0x44>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001412:	196d      	adds	r5, r5, r5
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001414:	68a3      	ldr	r3, [r4, #8]
 8001416:	2b20      	cmp	r3, #32
 8001418:	d800      	bhi.n	800141c <HAL_I2S_Init+0x4c>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800141a:	006d      	lsls	r5, r5, #1
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800141c:	f000 f8d2 	bl	80015c4 <HAL_RCC_GetSysClockFreq>

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	6922      	ldr	r2, [r4, #16]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	429a      	cmp	r2, r3
 8001428:	d11f      	bne.n	800146a <HAL_I2S_Init+0x9a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800142a:	68e3      	ldr	r3, [r4, #12]
 800142c:	6967      	ldr	r7, [r4, #20]
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 800142e:	00a9      	lsls	r1, r5, #2
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001430:	2b00      	cmp	r3, #0
 8001432:	d100      	bne.n	8001436 <HAL_I2S_Init+0x66>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001434:	00e9      	lsls	r1, r5, #3
 8001436:	f7fe fe71 	bl	800011c <__udivsi3>
 800143a:	230a      	movs	r3, #10
 800143c:	0039      	movs	r1, r7
 800143e:	4358      	muls	r0, r3
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001440:	f7fe fe6c 	bl	800011c <__udivsi3>
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001444:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001446:	3005      	adds	r0, #5
    tmp = tmp / 10U;
 8001448:	f7fe fe68 	bl	800011c <__udivsi3>
 800144c:	0002      	movs	r2, r0

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800144e:	2001      	movs	r0, #1
 8001450:	0011      	movs	r1, r2

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001452:	4382      	bics	r2, r0
 8001454:	0853      	lsrs	r3, r2, #1
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001456:	4001      	ands	r1, r0
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001458:	1e9a      	subs	r2, r3, #2
    i2sodd = (uint32_t)(i2sodd << 8U);
 800145a:	0209      	lsls	r1, r1, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800145c:	2afd      	cmp	r2, #253	; 0xfd
 800145e:	d90c      	bls.n	800147a <HAL_I2S_Init+0xaa>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001460:	2310      	movs	r3, #16
 8001462:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001464:	4313      	orrs	r3, r2
 8001466:	63a3      	str	r3, [r4, #56]	; 0x38

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8001468:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10) / hi2s->Init.AudioFreq)) + 5);
 800146a:	0029      	movs	r1, r5
 800146c:	f7fe fe56 	bl	800011c <__udivsi3>
 8001470:	230a      	movs	r3, #10
 8001472:	6961      	ldr	r1, [r4, #20]
 8001474:	4358      	muls	r0, r3
 8001476:	e7e3      	b.n	8001440 <HAL_I2S_Init+0x70>
    i2sodd = 0U;
 8001478:	2100      	movs	r1, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800147a:	430b      	orrs	r3, r1
 800147c:	6921      	ldr	r1, [r4, #16]
 800147e:	6822      	ldr	r2, [r4, #0]
 8001480:	430b      	orrs	r3, r1
 8001482:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001484:	68a1      	ldr	r1, [r4, #8]
 8001486:	69d0      	ldr	r0, [r2, #28]
 8001488:	6863      	ldr	r3, [r4, #4]
 800148a:	9d01      	ldr	r5, [sp, #4]
 800148c:	430b      	orrs	r3, r1
 800148e:	4028      	ands	r0, r5
 8001490:	4303      	orrs	r3, r0
 8001492:	68e0      	ldr	r0, [r4, #12]
 8001494:	4303      	orrs	r3, r0
 8001496:	69a0      	ldr	r0, [r4, #24]
 8001498:	4303      	orrs	r3, r0
 800149a:	2080      	movs	r0, #128	; 0x80
 800149c:	0100      	lsls	r0, r0, #4
 800149e:	4303      	orrs	r3, r0
 80014a0:	61d3      	str	r3, [r2, #28]
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	4399      	bics	r1, r3
 80014a6:	2930      	cmp	r1, #48	; 0x30
 80014a8:	d104      	bne.n	80014b4 <HAL_I2S_Init+0xe4>
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	69d1      	ldr	r1, [r2, #28]
 80014ae:	015b      	lsls	r3, r3, #5
 80014b0:	430b      	orrs	r3, r1
 80014b2:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80014b4:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80014b6:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80014b8:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80014ba:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 80014bc:	e7d4      	b.n	8001468 <HAL_I2S_Init+0x98>
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	fffff040 	.word	0xfffff040

080014c4 <HAL_I2S_Transmit_DMA>:
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;

  if (hi2s->State != HAL_I2S_STATE_READY)
 80014c4:	0003      	movs	r3, r0
{
 80014c6:	b570      	push	{r4, r5, r6, lr}
  if (hi2s->State != HAL_I2S_STATE_READY)
 80014c8:	3335      	adds	r3, #53	; 0x35
 80014ca:	781d      	ldrb	r5, [r3, #0]
{
 80014cc:	0004      	movs	r4, r0
  if (hi2s->State != HAL_I2S_STATE_READY)
 80014ce:	b2e8      	uxtb	r0, r5
 80014d0:	2d01      	cmp	r5, #1
 80014d2:	d13c      	bne.n	800154e <HAL_I2S_Transmit_DMA+0x8a>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pData == NULL) || (Size == 0U))
 80014d4:	2900      	cmp	r1, #0
 80014d6:	d039      	beq.n	800154c <HAL_I2S_Transmit_DMA+0x88>
 80014d8:	2a00      	cmp	r2, #0
 80014da:	d037      	beq.n	800154c <HAL_I2S_Transmit_DMA+0x88>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80014dc:	0025      	movs	r5, r4
 80014de:	3534      	adds	r5, #52	; 0x34
 80014e0:	782e      	ldrb	r6, [r5, #0]
 80014e2:	2e01      	cmp	r6, #1
 80014e4:	d035      	beq.n	8001552 <HAL_I2S_Transmit_DMA+0x8e>
 80014e6:	7028      	strb	r0, [r5, #0]

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80014e8:	2003      	movs	r0, #3
 80014ea:	7018      	strb	r0, [r3, #0]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80014ec:	2300      	movs	r3, #0
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80014ee:	6825      	ldr	r5, [r4, #0]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80014f0:	63a3      	str	r3, [r4, #56]	; 0x38
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80014f2:	69eb      	ldr	r3, [r5, #28]
 80014f4:	3004      	adds	r0, #4
 80014f6:	4003      	ands	r3, r0

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80014f8:	3b03      	subs	r3, #3
 80014fa:	3805      	subs	r0, #5
  hi2s->pTxBuffPtr = pData;
 80014fc:	61e1      	str	r1, [r4, #28]
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80014fe:	4383      	bics	r3, r0
 8001500:	d101      	bne.n	8001506 <HAL_I2S_Transmit_DMA+0x42>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001502:	0052      	lsls	r2, r2, #1
 8001504:	b292      	uxth	r2, r2
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001506:	8422      	strh	r2, [r4, #32]
    hi2s->TxXferCount = Size;
 8001508:	8462      	strh	r2, [r4, #34]	; 0x22

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;

  /* Enable the Tx DMA Stream/Channel */
  HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800150a:	002a      	movs	r2, r5
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800150c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_I2S_Transmit_DMA+0x94>)
  HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8001510:	320c      	adds	r2, #12
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8001512:	6303      	str	r3, [r0, #48]	; 0x30
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_I2S_Transmit_DMA+0x98>)
 8001516:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_I2S_Transmit_DMA+0x9c>)
 800151a:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800151c:	8c23      	ldrh	r3, [r4, #32]
 800151e:	b29b      	uxth	r3, r3
 8001520:	f7ff fe06 	bl	8001130 <HAL_DMA_Start_IT>

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	00d2      	lsls	r2, r2, #3
 800152a:	69d9      	ldr	r1, [r3, #28]
 800152c:	4211      	tst	r1, r2
 800152e:	d102      	bne.n	8001536 <HAL_I2S_Transmit_DMA+0x72>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001530:	69d9      	ldr	r1, [r3, #28]
 8001532:	430a      	orrs	r2, r1
 8001534:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8001536:	2202      	movs	r2, #2
 8001538:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800153a:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800153c:	4211      	tst	r1, r2
 800153e:	d102      	bne.n	8001546 <HAL_I2S_Transmit_DMA+0x82>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001540:	6859      	ldr	r1, [r3, #4]
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
  }

error :
  __HAL_UNLOCK(hi2s);
 8001546:	2300      	movs	r3, #0
 8001548:	3434      	adds	r4, #52	; 0x34
 800154a:	7023      	strb	r3, [r4, #0]
  return errorcode;
}
 800154c:	bd70      	pop	{r4, r5, r6, pc}
    errorcode = HAL_BUSY;
 800154e:	2002      	movs	r0, #2
 8001550:	e7f9      	b.n	8001546 <HAL_I2S_Transmit_DMA+0x82>
  __HAL_LOCK(hi2s);
 8001552:	2002      	movs	r0, #2
 8001554:	e7fa      	b.n	800154c <HAL_I2S_Transmit_DMA+0x88>
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	08001567 	.word	0x08001567
 800155c:	08001571 	.word	0x08001571
 8001560:	08001599 	.word	0x08001599

08001564 <HAL_I2S_TxHalfCpltCallback>:
 8001564:	4770      	bx	lr

08001566 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001566:	b510      	push	{r4, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8001568:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800156a:	f7ff fffb 	bl	8001564 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800156e:	bd10      	pop	{r4, pc}

08001570 <I2S_DMATxCplt>:
{
 8001570:	0003      	movs	r3, r0
  if (hdma->Init.Mode == DMA_NORMAL)
 8001572:	69da      	ldr	r2, [r3, #28]
{
 8001574:	b510      	push	{r4, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001576:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hdma->Init.Mode == DMA_NORMAL)
 8001578:	2a00      	cmp	r2, #0
 800157a:	d109      	bne.n	8001590 <I2S_DMATxCplt+0x20>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800157c:	2402      	movs	r4, #2
 800157e:	6801      	ldr	r1, [r0, #0]
 8001580:	684b      	ldr	r3, [r1, #4]
 8001582:	43a3      	bics	r3, r4
 8001584:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001586:	0003      	movs	r3, r0
    hi2s->TxXferCount = 0U;
 8001588:	8442      	strh	r2, [r0, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 800158a:	3335      	adds	r3, #53	; 0x35
 800158c:	3201      	adds	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
  HAL_I2S_TxCpltCallback(hi2s);
 8001590:	f7ff fcc6 	bl	8000f20 <HAL_I2S_TxCpltCallback>
}
 8001594:	bd10      	pop	{r4, pc}

08001596 <HAL_I2S_ErrorCallback>:
 8001596:	4770      	bx	lr

08001598 <I2S_DMAError>:
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001598:	2103      	movs	r1, #3
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800159a:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800159c:	b510      	push	{r4, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800159e:	6802      	ldr	r2, [r0, #0]
 80015a0:	6853      	ldr	r3, [r2, #4]
 80015a2:	438b      	bics	r3, r1
 80015a4:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	8443      	strh	r3, [r0, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 80015aa:	8543      	strh	r3, [r0, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80015ac:	0003      	movs	r3, r0
 80015ae:	2201      	movs	r2, #1
 80015b0:	3335      	adds	r3, #53	; 0x35
 80015b2:	701a      	strb	r2, [r3, #0]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80015b4:	2308      	movs	r3, #8
 80015b6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80015b8:	4313      	orrs	r3, r2
 80015ba:	6383      	str	r3, [r0, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80015bc:	f7ff ffeb 	bl	8001596 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80015c0:	bd10      	pop	{r4, pc}
	...

080015c4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015c4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80015c8:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80015ca:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80015cc:	400a      	ands	r2, r1
 80015ce:	2a08      	cmp	r2, #8
 80015d0:	d029      	beq.n	8001626 <HAL_RCC_GetSysClockFreq+0x62>
 80015d2:	2a0c      	cmp	r2, #12
 80015d4:	d009      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0x26>
 80015d6:	2a04      	cmp	r2, #4
 80015d8:	d11d      	bne.n	8001616 <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80015da:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80015de:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80015e0:	17c0      	asrs	r0, r0, #31
 80015e2:	4018      	ands	r0, r3
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_RCC_GetSysClockFreq+0x70>)
 80015e6:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80015e8:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80015ea:	4813      	ldr	r0, [pc, #76]	; (8001638 <HAL_RCC_GetSysClockFreq+0x74>)
 80015ec:	028a      	lsls	r2, r1, #10
 80015ee:	0f12      	lsrs	r2, r2, #28
 80015f0:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80015f2:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f4:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80015f6:	0f89      	lsrs	r1, r1, #30
 80015f8:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015fa:	03c0      	lsls	r0, r0, #15
 80015fc:	d504      	bpl.n	8001608 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 80015fe:	480f      	ldr	r0, [pc, #60]	; (800163c <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8001600:	4350      	muls	r0, r2
 8001602:	f7fe fd8b 	bl	800011c <__udivsi3>
 8001606:	e7ef      	b.n	80015e8 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	06db      	lsls	r3, r3, #27
 800160c:	d501      	bpl.n	8001612 <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001610:	e7f6      	b.n	8001600 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 8001612:	4808      	ldr	r0, [pc, #32]	; (8001634 <HAL_RCC_GetSysClockFreq+0x70>)
 8001614:	e7f4      	b.n	8001600 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001616:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001618:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800161a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001620:	3301      	adds	r3, #1
 8001622:	4098      	lsls	r0, r3
  return sysclockfreq;
 8001624:	e7e0      	b.n	80015e8 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <HAL_RCC_GetSysClockFreq+0x78>)
 8001628:	e7de      	b.n	80015e8 <HAL_RCC_GetSysClockFreq+0x24>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40021000 	.word	0x40021000
 8001630:	ff48e500 	.word	0xff48e500
 8001634:	00f42400 	.word	0x00f42400
 8001638:	08004131 	.word	0x08004131
 800163c:	007a1200 	.word	0x007a1200
 8001640:	003d0900 	.word	0x003d0900

08001644 <HAL_RCC_OscConfig>:
{
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	0005      	movs	r5, r0
 8001648:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 800164a:	2800      	cmp	r0, #0
 800164c:	d058      	beq.n	8001700 <HAL_RCC_OscConfig+0xbc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164e:	230c      	movs	r3, #12
 8001650:	4cb7      	ldr	r4, [pc, #732]	; (8001930 <HAL_RCC_OscConfig+0x2ec>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001654:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001656:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001658:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	025b      	lsls	r3, r3, #9
 800165e:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001660:	07d2      	lsls	r2, r2, #31
 8001662:	d441      	bmi.n	80016e8 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001664:	682b      	ldr	r3, [r5, #0]
 8001666:	079b      	lsls	r3, r3, #30
 8001668:	d500      	bpl.n	800166c <HAL_RCC_OscConfig+0x28>
 800166a:	e08a      	b.n	8001782 <HAL_RCC_OscConfig+0x13e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800166c:	682b      	ldr	r3, [r5, #0]
 800166e:	06db      	lsls	r3, r3, #27
 8001670:	d528      	bpl.n	80016c4 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001672:	2e00      	cmp	r6, #0
 8001674:	d000      	beq.n	8001678 <HAL_RCC_OscConfig+0x34>
 8001676:	e0e2      	b.n	800183e <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	059b      	lsls	r3, r3, #22
 800167c:	d502      	bpl.n	8001684 <HAL_RCC_OscConfig+0x40>
 800167e:	69eb      	ldr	r3, [r5, #28]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03d      	beq.n	8001700 <HAL_RCC_OscConfig+0xbc>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001684:	6862      	ldr	r2, [r4, #4]
 8001686:	49ab      	ldr	r1, [pc, #684]	; (8001934 <HAL_RCC_OscConfig+0x2f0>)
 8001688:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800168a:	400a      	ands	r2, r1
 800168c:	431a      	orrs	r2, r3
 800168e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001690:	6861      	ldr	r1, [r4, #4]
 8001692:	6a2a      	ldr	r2, [r5, #32]
 8001694:	0209      	lsls	r1, r1, #8
 8001696:	0a09      	lsrs	r1, r1, #8
 8001698:	0612      	lsls	r2, r2, #24
 800169a:	430a      	orrs	r2, r1
 800169c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	0b5b      	lsrs	r3, r3, #13
 80016a2:	3301      	adds	r3, #1
 80016a4:	0212      	lsls	r2, r2, #8
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016aa:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80016ac:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016ae:	060a      	lsls	r2, r1, #24
 80016b0:	49a1      	ldr	r1, [pc, #644]	; (8001938 <HAL_RCC_OscConfig+0x2f4>)
 80016b2:	0f12      	lsrs	r2, r2, #28
 80016b4:	5c8a      	ldrb	r2, [r1, r2]
 80016b6:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016b8:	4aa0      	ldr	r2, [pc, #640]	; (800193c <HAL_RCC_OscConfig+0x2f8>)
 80016ba:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80016bc:	f7ff fc5c 	bl	8000f78 <HAL_InitTick>
        if(status != HAL_OK)
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d134      	bne.n	800172e <HAL_RCC_OscConfig+0xea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	071b      	lsls	r3, r3, #28
 80016c8:	d500      	bpl.n	80016cc <HAL_RCC_OscConfig+0x88>
 80016ca:	e0ef      	b.n	80018ac <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	075b      	lsls	r3, r3, #29
 80016d0:	d500      	bpl.n	80016d4 <HAL_RCC_OscConfig+0x90>
 80016d2:	e111      	b.n	80018f8 <HAL_RCC_OscConfig+0x2b4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	069b      	lsls	r3, r3, #26
 80016d8:	d500      	bpl.n	80016dc <HAL_RCC_OscConfig+0x98>
 80016da:	e196      	b.n	8001a0a <HAL_RCC_OscConfig+0x3c6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d000      	beq.n	80016e4 <HAL_RCC_OscConfig+0xa0>
 80016e2:	e1c5      	b.n	8001a70 <HAL_RCC_OscConfig+0x42c>
  return HAL_OK;
 80016e4:	2000      	movs	r0, #0
 80016e6:	e022      	b.n	800172e <HAL_RCC_OscConfig+0xea>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e8:	2e08      	cmp	r6, #8
 80016ea:	d003      	beq.n	80016f4 <HAL_RCC_OscConfig+0xb0>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016ec:	2e0c      	cmp	r6, #12
 80016ee:	d109      	bne.n	8001704 <HAL_RCC_OscConfig+0xc0>
 80016f0:	2f00      	cmp	r7, #0
 80016f2:	d007      	beq.n	8001704 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	039b      	lsls	r3, r3, #14
 80016f8:	d5b4      	bpl.n	8001664 <HAL_RCC_OscConfig+0x20>
 80016fa:	686b      	ldr	r3, [r5, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1b1      	bne.n	8001664 <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 8001700:	2001      	movs	r0, #1
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001704:	686a      	ldr	r2, [r5, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d113      	bne.n	8001732 <HAL_RCC_OscConfig+0xee>
 800170a:	6822      	ldr	r2, [r4, #0]
 800170c:	4313      	orrs	r3, r2
 800170e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001710:	f7ff fc66 	bl	8000fe0 <HAL_GetTick>
 8001714:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	0292      	lsls	r2, r2, #10
 800171c:	4213      	tst	r3, r2
 800171e:	d1a1      	bne.n	8001664 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fc5e 	bl	8000fe0 <HAL_GetTick>
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	1ac0      	subs	r0, r0, r3
 8001728:	2864      	cmp	r0, #100	; 0x64
 800172a:	d9f4      	bls.n	8001716 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 800172c:	2003      	movs	r0, #3
}
 800172e:	b007      	add	sp, #28
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001732:	21a0      	movs	r1, #160	; 0xa0
 8001734:	02c9      	lsls	r1, r1, #11
 8001736:	428a      	cmp	r2, r1
 8001738:	d105      	bne.n	8001746 <HAL_RCC_OscConfig+0x102>
 800173a:	2280      	movs	r2, #128	; 0x80
 800173c:	6821      	ldr	r1, [r4, #0]
 800173e:	02d2      	lsls	r2, r2, #11
 8001740:	430a      	orrs	r2, r1
 8001742:	6022      	str	r2, [r4, #0]
 8001744:	e7e1      	b.n	800170a <HAL_RCC_OscConfig+0xc6>
 8001746:	6821      	ldr	r1, [r4, #0]
 8001748:	487d      	ldr	r0, [pc, #500]	; (8001940 <HAL_RCC_OscConfig+0x2fc>)
 800174a:	4001      	ands	r1, r0
 800174c:	6021      	str	r1, [r4, #0]
 800174e:	6821      	ldr	r1, [r4, #0]
 8001750:	400b      	ands	r3, r1
 8001752:	9305      	str	r3, [sp, #20]
 8001754:	9b05      	ldr	r3, [sp, #20]
 8001756:	497b      	ldr	r1, [pc, #492]	; (8001944 <HAL_RCC_OscConfig+0x300>)
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	400b      	ands	r3, r1
 800175c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175e:	2a00      	cmp	r2, #0
 8001760:	d1d6      	bne.n	8001710 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 8001762:	f7ff fc3d 	bl	8000fe0 <HAL_GetTick>
 8001766:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	0292      	lsls	r2, r2, #10
 800176e:	4213      	tst	r3, r2
 8001770:	d100      	bne.n	8001774 <HAL_RCC_OscConfig+0x130>
 8001772:	e777      	b.n	8001664 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fc34 	bl	8000fe0 <HAL_GetTick>
 8001778:	9b01      	ldr	r3, [sp, #4]
 800177a:	1ac0      	subs	r0, r0, r3
 800177c:	2864      	cmp	r0, #100	; 0x64
 800177e:	d9f3      	bls.n	8001768 <HAL_RCC_OscConfig+0x124>
 8001780:	e7d4      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001782:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8001784:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001786:	4213      	tst	r3, r2
 8001788:	d003      	beq.n	8001792 <HAL_RCC_OscConfig+0x14e>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800178a:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800178c:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800178e:	4311      	orrs	r1, r2
 8001790:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001792:	2e04      	cmp	r6, #4
 8001794:	d003      	beq.n	800179e <HAL_RCC_OscConfig+0x15a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001796:	2e0c      	cmp	r6, #12
 8001798:	d123      	bne.n	80017e2 <HAL_RCC_OscConfig+0x19e>
 800179a:	2f00      	cmp	r7, #0
 800179c:	d121      	bne.n	80017e2 <HAL_RCC_OscConfig+0x19e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800179e:	6822      	ldr	r2, [r4, #0]
 80017a0:	0752      	lsls	r2, r2, #29
 80017a2:	d501      	bpl.n	80017a8 <HAL_RCC_OscConfig+0x164>
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0ab      	beq.n	8001700 <HAL_RCC_OscConfig+0xbc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	6861      	ldr	r1, [r4, #4]
 80017aa:	692a      	ldr	r2, [r5, #16]
 80017ac:	4866      	ldr	r0, [pc, #408]	; (8001948 <HAL_RCC_OscConfig+0x304>)
 80017ae:	0212      	lsls	r2, r2, #8
 80017b0:	4001      	ands	r1, r0
 80017b2:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017b4:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017b8:	6822      	ldr	r2, [r4, #0]
 80017ba:	438a      	bics	r2, r1
 80017bc:	4313      	orrs	r3, r2
 80017be:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c0:	f7ff ff00 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 80017c4:	68e3      	ldr	r3, [r4, #12]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x2f4>)
 80017c8:	061b      	lsls	r3, r3, #24
 80017ca:	0f1b      	lsrs	r3, r3, #28
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	40d8      	lsrs	r0, r3
 80017d0:	4b5a      	ldr	r3, [pc, #360]	; (800193c <HAL_RCC_OscConfig+0x2f8>)
 80017d2:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff fbcf 	bl	8000f78 <HAL_InitTick>
      if(status != HAL_OK)
 80017da:	2800      	cmp	r0, #0
 80017dc:	d100      	bne.n	80017e0 <HAL_RCC_OscConfig+0x19c>
 80017de:	e745      	b.n	800166c <HAL_RCC_OscConfig+0x28>
 80017e0:	e7a5      	b.n	800172e <HAL_RCC_OscConfig+0xea>
      if(hsi_state != RCC_HSI_OFF)
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d019      	beq.n	800181a <HAL_RCC_OscConfig+0x1d6>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017e6:	2109      	movs	r1, #9
 80017e8:	6822      	ldr	r2, [r4, #0]
 80017ea:	438a      	bics	r2, r1
 80017ec:	4313      	orrs	r3, r2
 80017ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017f0:	f7ff fbf6 	bl	8000fe0 <HAL_GetTick>
 80017f4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017f6:	2204      	movs	r2, #4
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	4213      	tst	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fe:	6862      	ldr	r2, [r4, #4]
 8001800:	692b      	ldr	r3, [r5, #16]
 8001802:	4951      	ldr	r1, [pc, #324]	; (8001948 <HAL_RCC_OscConfig+0x304>)
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	400a      	ands	r2, r1
 8001808:	4313      	orrs	r3, r2
 800180a:	6063      	str	r3, [r4, #4]
 800180c:	e72e      	b.n	800166c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fbe7 	bl	8000fe0 <HAL_GetTick>
 8001812:	1bc0      	subs	r0, r0, r7
 8001814:	2802      	cmp	r0, #2
 8001816:	d9ee      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1b2>
 8001818:	e788      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_HSI_DISABLE();
 800181a:	2201      	movs	r2, #1
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	4393      	bics	r3, r2
 8001820:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001822:	f7ff fbdd 	bl	8000fe0 <HAL_GetTick>
 8001826:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001828:	2204      	movs	r2, #4
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	4213      	tst	r3, r2
 800182e:	d100      	bne.n	8001832 <HAL_RCC_OscConfig+0x1ee>
 8001830:	e71c      	b.n	800166c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff fbd5 	bl	8000fe0 <HAL_GetTick>
 8001836:	1bc0      	subs	r0, r0, r7
 8001838:	2802      	cmp	r0, #2
 800183a:	d9f5      	bls.n	8001828 <HAL_RCC_OscConfig+0x1e4>
 800183c:	e776      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183e:	69eb      	ldr	r3, [r5, #28]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d020      	beq.n	8001886 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	6822      	ldr	r2, [r4, #0]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4313      	orrs	r3, r2
 800184c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800184e:	f7ff fbc7 	bl	8000fe0 <HAL_GetTick>
 8001852:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4213      	tst	r3, r2
 800185c:	d00d      	beq.n	800187a <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185e:	6863      	ldr	r3, [r4, #4]
 8001860:	4a34      	ldr	r2, [pc, #208]	; (8001934 <HAL_RCC_OscConfig+0x2f0>)
 8001862:	4013      	ands	r3, r2
 8001864:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001866:	4313      	orrs	r3, r2
 8001868:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186a:	6862      	ldr	r2, [r4, #4]
 800186c:	6a2b      	ldr	r3, [r5, #32]
 800186e:	0212      	lsls	r2, r2, #8
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	0a12      	lsrs	r2, r2, #8
 8001874:	4313      	orrs	r3, r2
 8001876:	6063      	str	r3, [r4, #4]
 8001878:	e724      	b.n	80016c4 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800187a:	f7ff fbb1 	bl	8000fe0 <HAL_GetTick>
 800187e:	1bc0      	subs	r0, r0, r7
 8001880:	2802      	cmp	r0, #2
 8001882:	d9e7      	bls.n	8001854 <HAL_RCC_OscConfig+0x210>
 8001884:	e752      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_MSI_DISABLE();
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	4a30      	ldr	r2, [pc, #192]	; (800194c <HAL_RCC_OscConfig+0x308>)
 800188a:	4013      	ands	r3, r2
 800188c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800188e:	f7ff fba7 	bl	8000fe0 <HAL_GetTick>
 8001892:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	4213      	tst	r3, r2
 800189c:	d100      	bne.n	80018a0 <HAL_RCC_OscConfig+0x25c>
 800189e:	e711      	b.n	80016c4 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a0:	f7ff fb9e 	bl	8000fe0 <HAL_GetTick>
 80018a4:	1bc0      	subs	r0, r0, r7
 80018a6:	2802      	cmp	r0, #2
 80018a8:	d9f4      	bls.n	8001894 <HAL_RCC_OscConfig+0x250>
 80018aa:	e73f      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ac:	696a      	ldr	r2, [r5, #20]
 80018ae:	2301      	movs	r3, #1
 80018b0:	2a00      	cmp	r2, #0
 80018b2:	d010      	beq.n	80018d6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 80018b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80018b6:	4313      	orrs	r3, r2
 80018b8:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb91 	bl	8000fe0 <HAL_GetTick>
 80018be:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018c0:	2202      	movs	r2, #2
 80018c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80018c4:	4213      	tst	r3, r2
 80018c6:	d000      	beq.n	80018ca <HAL_RCC_OscConfig+0x286>
 80018c8:	e700      	b.n	80016cc <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ca:	f7ff fb89 	bl	8000fe0 <HAL_GetTick>
 80018ce:	1bc0      	subs	r0, r0, r7
 80018d0:	2802      	cmp	r0, #2
 80018d2:	d9f5      	bls.n	80018c0 <HAL_RCC_OscConfig+0x27c>
 80018d4:	e72a      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
      __HAL_RCC_LSI_DISABLE();
 80018d6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80018d8:	439a      	bics	r2, r3
 80018da:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80018dc:	f7ff fb80 	bl	8000fe0 <HAL_GetTick>
 80018e0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018e2:	2202      	movs	r2, #2
 80018e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80018e6:	4213      	tst	r3, r2
 80018e8:	d100      	bne.n	80018ec <HAL_RCC_OscConfig+0x2a8>
 80018ea:	e6ef      	b.n	80016cc <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff fb78 	bl	8000fe0 <HAL_GetTick>
 80018f0:	1bc0      	subs	r0, r0, r7
 80018f2:	2802      	cmp	r0, #2
 80018f4:	d9f5      	bls.n	80018e2 <HAL_RCC_OscConfig+0x29e>
 80018f6:	e719      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f8:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80018fa:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80018fe:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001900:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001902:	421a      	tst	r2, r3
 8001904:	d104      	bne.n	8001910 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001908:	4313      	orrs	r3, r2
 800190a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800190c:	2301      	movs	r3, #1
 800190e:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	4f0f      	ldr	r7, [pc, #60]	; (8001950 <HAL_RCC_OscConfig+0x30c>)
 8001914:	0052      	lsls	r2, r2, #1
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	4213      	tst	r3, r2
 800191a:	d01b      	beq.n	8001954 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	68ab      	ldr	r3, [r5, #8]
 8001920:	0052      	lsls	r2, r2, #1
 8001922:	4293      	cmp	r3, r2
 8001924:	d12c      	bne.n	8001980 <HAL_RCC_OscConfig+0x33c>
 8001926:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001928:	4313      	orrs	r3, r2
 800192a:	6523      	str	r3, [r4, #80]	; 0x50
 800192c:	e04d      	b.n	80019ca <HAL_RCC_OscConfig+0x386>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	40021000 	.word	0x40021000
 8001934:	ffff1fff 	.word	0xffff1fff
 8001938:	08004121 	.word	0x08004121
 800193c:	20000000 	.word	0x20000000
 8001940:	fffeffff 	.word	0xfffeffff
 8001944:	fffbffff 	.word	0xfffbffff
 8001948:	ffffe0ff 	.word	0xffffe0ff
 800194c:	fffffeff 	.word	0xfffffeff
 8001950:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	0052      	lsls	r2, r2, #1
 800195a:	4313      	orrs	r3, r2
 800195c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800195e:	f7ff fb3f 	bl	8000fe0 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8001966:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	9303      	str	r3, [sp, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	9a03      	ldr	r2, [sp, #12]
 800196e:	4213      	tst	r3, r2
 8001970:	d1d4      	bne.n	800191c <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff fb35 	bl	8000fe0 <HAL_GetTick>
 8001976:	9b02      	ldr	r3, [sp, #8]
 8001978:	1ac0      	subs	r0, r0, r3
 800197a:	2864      	cmp	r0, #100	; 0x64
 800197c:	d9f5      	bls.n	800196a <HAL_RCC_OscConfig+0x326>
 800197e:	e6d5      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	2b00      	cmp	r3, #0
 8001982:	d116      	bne.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 8001984:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001986:	4a6b      	ldr	r2, [pc, #428]	; (8001b34 <HAL_RCC_OscConfig+0x4f0>)
 8001988:	4013      	ands	r3, r2
 800198a:	6523      	str	r3, [r4, #80]	; 0x50
 800198c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800198e:	4a6a      	ldr	r2, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	4013      	ands	r3, r2
 8001992:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001994:	f7ff fb24 	bl	8000fe0 <HAL_GetTick>
 8001998:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4213      	tst	r3, r2
 80019a2:	d01a      	beq.n	80019da <HAL_RCC_OscConfig+0x396>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff fb1c 	bl	8000fe0 <HAL_GetTick>
 80019a8:	4b64      	ldr	r3, [pc, #400]	; (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	1bc0      	subs	r0, r0, r7
 80019ac:	4298      	cmp	r0, r3
 80019ae:	d9f4      	bls.n	800199a <HAL_RCC_OscConfig+0x356>
 80019b0:	e6bc      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b2:	21a0      	movs	r1, #160	; 0xa0
 80019b4:	00c9      	lsls	r1, r1, #3
 80019b6:	428b      	cmp	r3, r1
 80019b8:	d118      	bne.n	80019ec <HAL_RCC_OscConfig+0x3a8>
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	430b      	orrs	r3, r1
 80019c2:	6523      	str	r3, [r4, #80]	; 0x50
 80019c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019c6:	431a      	orrs	r2, r3
 80019c8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80019ca:	f7ff fb09 	bl	8000fe0 <HAL_GetTick>
 80019ce:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4213      	tst	r3, r2
 80019d8:	d010      	beq.n	80019fc <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 80019da:	9b01      	ldr	r3, [sp, #4]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d000      	beq.n	80019e2 <HAL_RCC_OscConfig+0x39e>
 80019e0:	e678      	b.n	80016d4 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019e4:	4a56      	ldr	r2, [pc, #344]	; (8001b40 <HAL_RCC_OscConfig+0x4fc>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80019ea:	e673      	b.n	80016d4 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019ee:	4a51      	ldr	r2, [pc, #324]	; (8001b34 <HAL_RCC_OscConfig+0x4f0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	6523      	str	r3, [r4, #80]	; 0x50
 80019f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019f6:	4a50      	ldr	r2, [pc, #320]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	e796      	b.n	800192a <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fc:	f7ff faf0 	bl	8000fe0 <HAL_GetTick>
 8001a00:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	1bc0      	subs	r0, r0, r7
 8001a04:	4298      	cmp	r0, r3
 8001a06:	d9e3      	bls.n	80019d0 <HAL_RCC_OscConfig+0x38c>
 8001a08:	e690      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a0a:	69a9      	ldr	r1, [r5, #24]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	4a4d      	ldr	r2, [pc, #308]	; (8001b44 <HAL_RCC_OscConfig+0x500>)
 8001a10:	2900      	cmp	r1, #0
 8001a12:	d018      	beq.n	8001a46 <HAL_RCC_OscConfig+0x402>
        __HAL_RCC_HSI48_ENABLE();
 8001a14:	68a1      	ldr	r1, [r4, #8]
 8001a16:	4319      	orrs	r1, r3
 8001a18:	60a1      	str	r1, [r4, #8]
 8001a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6363      	str	r3, [r4, #52]	; 0x34
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	6a11      	ldr	r1, [r2, #32]
 8001a24:	019b      	lsls	r3, r3, #6
 8001a26:	430b      	orrs	r3, r1
 8001a28:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fad9 	bl	8000fe0 <HAL_GetTick>
 8001a2e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a30:	2202      	movs	r2, #2
 8001a32:	68a3      	ldr	r3, [r4, #8]
 8001a34:	4213      	tst	r3, r2
 8001a36:	d000      	beq.n	8001a3a <HAL_RCC_OscConfig+0x3f6>
 8001a38:	e650      	b.n	80016dc <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a3a:	f7ff fad1 	bl	8000fe0 <HAL_GetTick>
 8001a3e:	1bc0      	subs	r0, r0, r7
 8001a40:	2802      	cmp	r0, #2
 8001a42:	d9f5      	bls.n	8001a30 <HAL_RCC_OscConfig+0x3ec>
 8001a44:	e672      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_HSI48_DISABLE();
 8001a46:	68a1      	ldr	r1, [r4, #8]
 8001a48:	4399      	bics	r1, r3
 8001a4a:	60a1      	str	r1, [r4, #8]
 8001a4c:	6a13      	ldr	r3, [r2, #32]
 8001a4e:	493e      	ldr	r1, [pc, #248]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001a50:	400b      	ands	r3, r1
 8001a52:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001a54:	f7ff fac4 	bl	8000fe0 <HAL_GetTick>
 8001a58:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	68a3      	ldr	r3, [r4, #8]
 8001a5e:	4213      	tst	r3, r2
 8001a60:	d100      	bne.n	8001a64 <HAL_RCC_OscConfig+0x420>
 8001a62:	e63b      	b.n	80016dc <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a64:	f7ff fabc 	bl	8000fe0 <HAL_GetTick>
 8001a68:	1bc0      	subs	r0, r0, r7
 8001a6a:	2802      	cmp	r0, #2
 8001a6c:	d9f5      	bls.n	8001a5a <HAL_RCC_OscConfig+0x416>
 8001a6e:	e65d      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a70:	2e0c      	cmp	r6, #12
 8001a72:	d043      	beq.n	8001afc <HAL_RCC_OscConfig+0x4b8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a74:	4a35      	ldr	r2, [pc, #212]	; (8001b4c <HAL_RCC_OscConfig+0x508>)
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d12e      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a7c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4013      	ands	r3, r2
 8001a80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a82:	f7ff faad 	bl	8000fe0 <HAL_GetTick>
 8001a86:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a88:	04bf      	lsls	r7, r7, #18
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	423b      	tst	r3, r7
 8001a8e:	d11d      	bne.n	8001acc <HAL_RCC_OscConfig+0x488>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a90:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001a92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001a94:	68e2      	ldr	r2, [r4, #12]
 8001a96:	430b      	orrs	r3, r1
 8001a98:	492d      	ldr	r1, [pc, #180]	; (8001b50 <HAL_RCC_OscConfig+0x50c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a9a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001aa2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	6822      	ldr	r2, [r4, #0]
 8001aac:	045b      	lsls	r3, r3, #17
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fa95 	bl	8000fe0 <HAL_GetTick>
 8001ab6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	4233      	tst	r3, r6
 8001abc:	d000      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
 8001abe:	e611      	b.n	80016e4 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff fa8e 	bl	8000fe0 <HAL_GetTick>
 8001ac4:	1b40      	subs	r0, r0, r5
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d9f6      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x474>
 8001aca:	e62f      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff fa88 	bl	8000fe0 <HAL_GetTick>
 8001ad0:	1b80      	subs	r0, r0, r6
 8001ad2:	2802      	cmp	r0, #2
 8001ad4:	d9d9      	bls.n	8001a8a <HAL_RCC_OscConfig+0x446>
 8001ad6:	e629      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_PLL_DISABLE();
 8001ad8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ada:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001adc:	4013      	ands	r3, r2
 8001ade:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fa7e 	bl	8000fe0 <HAL_GetTick>
 8001ae4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ae6:	04b6      	lsls	r6, r6, #18
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	4233      	tst	r3, r6
 8001aec:	d100      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4ac>
 8001aee:	e5f9      	b.n	80016e4 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff fa76 	bl	8000fe0 <HAL_GetTick>
 8001af4:	1b40      	subs	r0, r0, r5
 8001af6:	2802      	cmp	r0, #2
 8001af8:	d9f6      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x4a4>
 8001afa:	e617      	b.n	800172c <HAL_RCC_OscConfig+0xe8>
        return HAL_ERROR;
 8001afc:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d100      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4c0>
 8001b02:	e614      	b.n	800172e <HAL_RCC_OscConfig+0xea>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b04:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001b06:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b08:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001b0a:	0252      	lsls	r2, r2, #9
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	428a      	cmp	r2, r1
 8001b10:	d000      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4d0>
 8001b12:	e5f5      	b.n	8001700 <HAL_RCC_OscConfig+0xbc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b14:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b18:	0392      	lsls	r2, r2, #14
 8001b1a:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1c:	428a      	cmp	r2, r1
 8001b1e:	d000      	beq.n	8001b22 <HAL_RCC_OscConfig+0x4de>
 8001b20:	e5ee      	b.n	8001700 <HAL_RCC_OscConfig+0xbc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b22:	22c0      	movs	r2, #192	; 0xc0
 8001b24:	0412      	lsls	r2, r2, #16
 8001b26:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b28:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d100      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
 8001b2e:	e5d9      	b.n	80016e4 <HAL_RCC_OscConfig+0xa0>
 8001b30:	e5e6      	b.n	8001700 <HAL_RCC_OscConfig+0xbc>
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	fffffeff 	.word	0xfffffeff
 8001b38:	fffffbff 	.word	0xfffffbff
 8001b3c:	00001388 	.word	0x00001388
 8001b40:	efffffff 	.word	0xefffffff
 8001b44:	40010000 	.word	0x40010000
 8001b48:	ffffdfff 	.word	0xffffdfff
 8001b4c:	feffffff 	.word	0xfeffffff
 8001b50:	ff02ffff 	.word	0xff02ffff

08001b54 <HAL_RCC_ClockConfig>:
{
 8001b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b56:	1e04      	subs	r4, r0, #0
 8001b58:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001b5c:	2001      	movs	r0, #1
}
 8001b5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	2201      	movs	r2, #1
 8001b62:	4d51      	ldr	r5, [pc, #324]	; (8001ca8 <HAL_RCC_ClockConfig+0x154>)
 8001b64:	9901      	ldr	r1, [sp, #4]
 8001b66:	682b      	ldr	r3, [r5, #0]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	428b      	cmp	r3, r1
 8001b6c:	d327      	bcc.n	8001bbe <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	0793      	lsls	r3, r2, #30
 8001b72:	d42f      	bmi.n	8001bd4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b74:	07d3      	lsls	r3, r2, #31
 8001b76:	d435      	bmi.n	8001be4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	2301      	movs	r3, #1
 8001b7a:	682a      	ldr	r2, [r5, #0]
 8001b7c:	9901      	ldr	r1, [sp, #4]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	428a      	cmp	r2, r1
 8001b82:	d900      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x32>
 8001b84:	e081      	b.n	8001c8a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b86:	6822      	ldr	r2, [r4, #0]
 8001b88:	4d48      	ldr	r5, [pc, #288]	; (8001cac <HAL_RCC_ClockConfig+0x158>)
 8001b8a:	0753      	lsls	r3, r2, #29
 8001b8c:	d500      	bpl.n	8001b90 <HAL_RCC_ClockConfig+0x3c>
 8001b8e:	e084      	b.n	8001c9a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	0713      	lsls	r3, r2, #28
 8001b92:	d506      	bpl.n	8001ba2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b94:	68ea      	ldr	r2, [r5, #12]
 8001b96:	6923      	ldr	r3, [r4, #16]
 8001b98:	4945      	ldr	r1, [pc, #276]	; (8001cb0 <HAL_RCC_ClockConfig+0x15c>)
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ba2:	f7ff fd0f 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 8001ba6:	68eb      	ldr	r3, [r5, #12]
 8001ba8:	4a42      	ldr	r2, [pc, #264]	; (8001cb4 <HAL_RCC_ClockConfig+0x160>)
 8001baa:	061b      	lsls	r3, r3, #24
 8001bac:	0f1b      	lsrs	r3, r3, #28
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	40d8      	lsrs	r0, r3
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_ClockConfig+0x164>)
 8001bb4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff f9de 	bl	8000f78 <HAL_InitTick>
  if(status != HAL_OK)
 8001bbc:	e7cf      	b.n	8001b5e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	682b      	ldr	r3, [r5, #0]
 8001bc0:	9901      	ldr	r1, [sp, #4]
 8001bc2:	4393      	bics	r3, r2
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc8:	682b      	ldr	r3, [r5, #0]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	9a01      	ldr	r2, [sp, #4]
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d1c4      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x8>
 8001bd2:	e7cc      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	20f0      	movs	r0, #240	; 0xf0
 8001bd6:	4935      	ldr	r1, [pc, #212]	; (8001cac <HAL_RCC_ClockConfig+0x158>)
 8001bd8:	68cb      	ldr	r3, [r1, #12]
 8001bda:	4383      	bics	r3, r0
 8001bdc:	68a0      	ldr	r0, [r4, #8]
 8001bde:	4303      	orrs	r3, r0
 8001be0:	60cb      	str	r3, [r1, #12]
 8001be2:	e7c7      	b.n	8001b74 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be4:	4e31      	ldr	r6, [pc, #196]	; (8001cac <HAL_RCC_ClockConfig+0x158>)
 8001be6:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001be8:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	2a02      	cmp	r2, #2
 8001bec:	d119      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bee:	039b      	lsls	r3, r3, #14
 8001bf0:	d5b4      	bpl.n	8001b5c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	2103      	movs	r1, #3
 8001bf4:	68f3      	ldr	r3, [r6, #12]
 8001bf6:	438b      	bics	r3, r1
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f9f0 	bl	8000fe0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c00:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001c02:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d119      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c08:	220c      	movs	r2, #12
 8001c0a:	68f3      	ldr	r3, [r6, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d0b2      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c12:	f7ff f9e5 	bl	8000fe0 <HAL_GetTick>
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_RCC_ClockConfig+0x168>)
 8001c18:	1bc0      	subs	r0, r0, r7
 8001c1a:	4298      	cmp	r0, r3
 8001c1c:	d9f4      	bls.n	8001c08 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001c1e:	2003      	movs	r0, #3
 8001c20:	e79d      	b.n	8001b5e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c22:	2a03      	cmp	r2, #3
 8001c24:	d102      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c26:	019b      	lsls	r3, r3, #6
 8001c28:	d4e3      	bmi.n	8001bf2 <HAL_RCC_ClockConfig+0x9e>
 8001c2a:	e797      	b.n	8001b5c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c2c:	2a01      	cmp	r2, #1
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c30:	075b      	lsls	r3, r3, #29
 8001c32:	d4de      	bmi.n	8001bf2 <HAL_RCC_ClockConfig+0x9e>
 8001c34:	e792      	b.n	8001b5c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c36:	059b      	lsls	r3, r3, #22
 8001c38:	d4db      	bmi.n	8001bf2 <HAL_RCC_ClockConfig+0x9e>
 8001c3a:	e78f      	b.n	8001b5c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d10b      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c40:	220c      	movs	r2, #12
 8001c42:	68f3      	ldr	r3, [r6, #12]
 8001c44:	4013      	ands	r3, r2
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d096      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4a:	f7ff f9c9 	bl	8000fe0 <HAL_GetTick>
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_ClockConfig+0x168>)
 8001c50:	1bc0      	subs	r0, r0, r7
 8001c52:	4298      	cmp	r0, r3
 8001c54:	d9f4      	bls.n	8001c40 <HAL_RCC_ClockConfig+0xec>
 8001c56:	e7e2      	b.n	8001c1e <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d010      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	68f3      	ldr	r3, [r6, #12]
 8001c60:	4213      	tst	r3, r2
 8001c62:	d089      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c64:	f7ff f9bc 	bl	8000fe0 <HAL_GetTick>
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_RCC_ClockConfig+0x168>)
 8001c6a:	1bc0      	subs	r0, r0, r7
 8001c6c:	4298      	cmp	r0, r3
 8001c6e:	d9f5      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x108>
 8001c70:	e7d5      	b.n	8001c1e <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c72:	f7ff f9b5 	bl	8000fe0 <HAL_GetTick>
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_RCC_ClockConfig+0x168>)
 8001c78:	1bc0      	subs	r0, r0, r7
 8001c7a:	4298      	cmp	r0, r3
 8001c7c:	d8cf      	bhi.n	8001c1e <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	68f3      	ldr	r3, [r6, #12]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d1f4      	bne.n	8001c72 <HAL_RCC_ClockConfig+0x11e>
 8001c88:	e776      	b.n	8001b78 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	682a      	ldr	r2, [r5, #0]
 8001c8c:	439a      	bics	r2, r3
 8001c8e:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c90:	682a      	ldr	r2, [r5, #0]
 8001c92:	421a      	tst	r2, r3
 8001c94:	d100      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x144>
 8001c96:	e776      	b.n	8001b86 <HAL_RCC_ClockConfig+0x32>
 8001c98:	e760      	b.n	8001b5c <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9a:	68eb      	ldr	r3, [r5, #12]
 8001c9c:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <HAL_RCC_ClockConfig+0x16c>)
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	68e1      	ldr	r1, [r4, #12]
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	60eb      	str	r3, [r5, #12]
 8001ca6:	e773      	b.n	8001b90 <HAL_RCC_ClockConfig+0x3c>
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	ffffc7ff 	.word	0xffffc7ff
 8001cb4:	08004121 	.word	0x08004121
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	00001388 	.word	0x00001388
 8001cc0:	fffff8ff 	.word	0xfffff8ff

08001cc4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	0004      	movs	r4, r0
 8001cc8:	000d      	movs	r5, r1
 8001cca:	0016      	movs	r6, r2
 8001ccc:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	6893      	ldr	r3, [r2, #8]
 8001cd2:	402b      	ands	r3, r5
 8001cd4:	429d      	cmp	r5, r3
 8001cd6:	d001      	beq.n	8001cdc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e031      	b.n	8001d40 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8001cdc:	1c73      	adds	r3, r6, #1
 8001cde:	d0f7      	beq.n	8001cd0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ce0:	f7ff f97e 	bl	8000fe0 <HAL_GetTick>
 8001ce4:	1bc0      	subs	r0, r0, r7
 8001ce6:	4286      	cmp	r6, r0
 8001ce8:	d8f1      	bhi.n	8001cce <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cea:	21e0      	movs	r1, #224	; 0xe0
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cf4:	2282      	movs	r2, #130	; 0x82
 8001cf6:	6861      	ldr	r1, [r4, #4]
 8001cf8:	0052      	lsls	r2, r2, #1
 8001cfa:	4291      	cmp	r1, r2
 8001cfc:	d10c      	bne.n	8001d18 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x54>
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	68a2      	ldr	r2, [r4, #8]
 8001d02:	0209      	lsls	r1, r1, #8
 8001d04:	428a      	cmp	r2, r1
 8001d06:	d003      	beq.n	8001d10 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	00c9      	lsls	r1, r1, #3
 8001d0c:	428a      	cmp	r2, r1
 8001d0e:	d103      	bne.n	8001d18 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001d10:	2140      	movs	r1, #64	; 0x40
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	438a      	bics	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d1c:	0189      	lsls	r1, r1, #6
 8001d1e:	428a      	cmp	r2, r1
 8001d20:	d106      	bne.n	8001d30 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          SPI_RESET_CRC(hspi);
 8001d22:	6819      	ldr	r1, [r3, #0]
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>)
 8001d26:	4001      	ands	r1, r0
 8001d28:	6019      	str	r1, [r3, #0]
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001d30:	0023      	movs	r3, r4
 8001d32:	2201      	movs	r2, #1
 8001d34:	3351      	adds	r3, #81	; 0x51
 8001d36:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	3450      	adds	r4, #80	; 0x50
 8001d3e:	7023      	strb	r3, [r4, #0]
}
 8001d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	ffffdfff 	.word	0xffffdfff

08001d48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d4c:	2282      	movs	r2, #130	; 0x82
{
 8001d4e:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d50:	6840      	ldr	r0, [r0, #4]
 8001d52:	0052      	lsls	r2, r2, #1
 8001d54:	4290      	cmp	r0, r2
 8001d56:	d11e      	bne.n	8001d96 <SPI_EndRxTransaction+0x4e>
 8001d58:	2080      	movs	r0, #128	; 0x80
 8001d5a:	2580      	movs	r5, #128	; 0x80
 8001d5c:	68a2      	ldr	r2, [r4, #8]
 8001d5e:	0200      	lsls	r0, r0, #8
 8001d60:	00ed      	lsls	r5, r5, #3
 8001d62:	4282      	cmp	r2, r0
 8001d64:	d001      	beq.n	8001d6a <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d66:	42aa      	cmp	r2, r5
 8001d68:	d106      	bne.n	8001d78 <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001d6a:	2740      	movs	r7, #64	; 0x40
 8001d6c:	6826      	ldr	r6, [r4, #0]
 8001d6e:	6830      	ldr	r0, [r6, #0]
 8001d70:	43b8      	bics	r0, r7
 8001d72:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001d74:	42aa      	cmp	r2, r5
 8001d76:	d00e      	beq.n	8001d96 <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d78:	000a      	movs	r2, r1
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	0020      	movs	r0, r4
 8001d7e:	f7ff ffa1 	bl	8001cc4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d101      	bne.n	8001d8a <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001d86:	2000      	movs	r0, #0
}
 8001d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001d8e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d90:	4313      	orrs	r3, r2
 8001d92:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001d94:	e7f8      	b.n	8001d88 <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001d96:	000a      	movs	r2, r1
 8001d98:	2101      	movs	r1, #1
 8001d9a:	e7ef      	b.n	8001d7c <SPI_EndRxTransaction+0x34>

08001d9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9c:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d9e:	2282      	movs	r2, #130	; 0x82
{
 8001da0:	b510      	push	{r4, lr}
 8001da2:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001da4:	6840      	ldr	r0, [r0, #4]
 8001da6:	0052      	lsls	r2, r2, #1
 8001da8:	4290      	cmp	r0, r2
 8001daa:	d108      	bne.n	8001dbe <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dac:	000a      	movs	r2, r1
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	0020      	movs	r0, r4
 8001db2:	f7ff ff87 	bl	8001cc4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d109      	bne.n	8001dce <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001dba:	2000      	movs	r0, #0
}
 8001dbc:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8001dbe:	0022      	movs	r2, r4
 8001dc0:	3251      	adds	r2, #81	; 0x51
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	2a05      	cmp	r2, #5
 8001dc6:	d1f8      	bne.n	8001dba <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc8:	000a      	movs	r2, r1
 8001dca:	2101      	movs	r1, #1
 8001dcc:	e7f0      	b.n	8001db0 <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dce:	2320      	movs	r3, #32
 8001dd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001dd2:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001dd8:	e7f0      	b.n	8001dbc <SPI_EndRxTxTransaction+0x20>
	...

08001ddc <HAL_SPI_Init>:
{
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001de0:	2001      	movs	r0, #1
  if (hspi == NULL)
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d037      	beq.n	8001e56 <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de6:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001de8:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dea:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dec:	3551      	adds	r5, #81	; 0x51
 8001dee:	782b      	ldrb	r3, [r5, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8001df6:	0023      	movs	r3, r4
 8001df8:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8001dfa:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001dfc:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8001dfe:	f7fe fe37 	bl	8000a70 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e02:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001e04:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e06:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001e08:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e0a:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001e0c:	680b      	ldr	r3, [r1, #0]
 8001e0e:	4393      	bics	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e12:	6863      	ldr	r3, [r4, #4]
 8001e14:	69a2      	ldr	r2, [r4, #24]
 8001e16:	4303      	orrs	r3, r0
 8001e18:	68e0      	ldr	r0, [r4, #12]
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	6920      	ldr	r0, [r4, #16]
 8001e1e:	4303      	orrs	r3, r0
 8001e20:	6960      	ldr	r0, [r4, #20]
 8001e22:	4303      	orrs	r3, r0
 8001e24:	69e0      	ldr	r0, [r4, #28]
 8001e26:	4303      	orrs	r3, r0
 8001e28:	6a20      	ldr	r0, [r4, #32]
 8001e2a:	4303      	orrs	r3, r0
 8001e2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e2e:	4303      	orrs	r3, r0
 8001e30:	2080      	movs	r0, #128	; 0x80
 8001e32:	0080      	lsls	r0, r0, #2
 8001e34:	4010      	ands	r0, r2
 8001e36:	4303      	orrs	r3, r0
 8001e38:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	0c12      	lsrs	r2, r2, #16
 8001e3e:	401a      	ands	r2, r3
 8001e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e42:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e44:	431a      	orrs	r2, r3
 8001e46:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e48:	69cb      	ldr	r3, [r1, #28]
 8001e4a:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <HAL_SPI_Init+0x7c>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001e50:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e52:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e54:	702b      	strb	r3, [r5, #0]
}
 8001e56:	bd70      	pop	{r4, r5, r6, pc}
 8001e58:	fffff7ff 	.word	0xfffff7ff

08001e5c <HAL_SPI_TransmitReceive>:
{
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5e:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8001e60:	0003      	movs	r3, r0
 8001e62:	3350      	adds	r3, #80	; 0x50
{
 8001e64:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8001e66:	781a      	ldrb	r2, [r3, #0]
{
 8001e68:	0004      	movs	r4, r0
 8001e6a:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8001e6c:	2002      	movs	r0, #2
{
 8001e6e:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001e70:	2a01      	cmp	r2, #1
 8001e72:	d100      	bne.n	8001e76 <HAL_SPI_TransmitReceive+0x1a>
 8001e74:	e092      	b.n	8001f9c <HAL_SPI_TransmitReceive+0x140>
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001e7a:	f7ff f8b1 	bl	8000fe0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001e7e:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8001e80:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8001e82:	3351      	adds	r3, #81	; 0x51
 8001e84:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001e86:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001e88:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_SPI_TransmitReceive+0x48>
 8001e8e:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8001e90:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4299      	cmp	r1, r3
 8001e96:	d000      	beq.n	8001e9a <HAL_SPI_TransmitReceive+0x3e>
 8001e98:	e079      	b.n	8001f8e <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e9a:	68a3      	ldr	r3, [r4, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d176      	bne.n	8001f8e <HAL_SPI_TransmitReceive+0x132>
 8001ea0:	2a04      	cmp	r2, #4
 8001ea2:	d174      	bne.n	8001f8e <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8001ea4:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ea6:	2d00      	cmp	r5, #0
 8001ea8:	d071      	beq.n	8001f8e <HAL_SPI_TransmitReceive+0x132>
 8001eaa:	2f00      	cmp	r7, #0
 8001eac:	d06f      	beq.n	8001f8e <HAL_SPI_TransmitReceive+0x132>
 8001eae:	2e00      	cmp	r6, #0
 8001eb0:	d06d      	beq.n	8001f8e <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001eb2:	0023      	movs	r3, r4
 8001eb4:	3351      	adds	r3, #81	; 0x51
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	2a04      	cmp	r2, #4
 8001eba:	d001      	beq.n	8001ec0 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ebc:	2205      	movs	r2, #5
 8001ebe:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ec0:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ec2:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ec4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001ec6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ec8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eca:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001ecc:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001ece:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed0:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ed2:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ed4:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ed6:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ed8:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eda:	4210      	tst	r0, r2
 8001edc:	d102      	bne.n	8001ee4 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	4302      	orrs	r2, r0
 8001ee2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	68e0      	ldr	r0, [r4, #12]
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	4290      	cmp	r0, r2
 8001eec:	d158      	bne.n	8001fa0 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eee:	2900      	cmp	r1, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_SPI_TransmitReceive+0x9a>
 8001ef2:	2e01      	cmp	r6, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef6:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ef8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001efa:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001efc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001efe:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001f06:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f08:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f0a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <HAL_SPI_TransmitReceive+0xd4>
 8001f12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10b      	bne.n	8001f30 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f18:	0020      	movs	r0, r4
 8001f1a:	9a01      	ldr	r2, [sp, #4]
 8001f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001f1e:	f7ff ff3d 	bl	8001d9c <SPI_EndRxTxTransaction>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d100      	bne.n	8001f28 <HAL_SPI_TransmitReceive+0xcc>
 8001f26:	e083      	b.n	8002030 <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f28:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8001f2a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f2c:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8001f2e:	e02e      	b.n	8001f8e <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f30:	6821      	ldr	r1, [r4, #0]
 8001f32:	688b      	ldr	r3, [r1, #8]
 8001f34:	423b      	tst	r3, r7
 8001f36:	d00e      	beq.n	8001f56 <HAL_SPI_TransmitReceive+0xfa>
 8001f38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_SPI_TransmitReceive+0xfa>
 8001f3e:	2d01      	cmp	r5, #1
 8001f40:	d109      	bne.n	8001f56 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8001f42:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f46:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f48:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f4a:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f4c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001f4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f56:	688b      	ldr	r3, [r1, #8]
 8001f58:	001a      	movs	r2, r3
 8001f5a:	4032      	ands	r2, r6
 8001f5c:	4233      	tst	r3, r6
 8001f5e:	d00c      	beq.n	8001f7a <HAL_SPI_TransmitReceive+0x11e>
 8001f60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8001f66:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f68:	68c9      	ldr	r1, [r1, #12]
 8001f6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f6c:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f6e:	3302      	adds	r3, #2
 8001f70:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001f72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f7a:	f7ff f831 	bl	8000fe0 <HAL_GetTick>
 8001f7e:	9b01      	ldr	r3, [sp, #4]
 8001f80:	1ac0      	subs	r0, r0, r3
 8001f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f84:	4298      	cmp	r0, r3
 8001f86:	d3c1      	bcc.n	8001f0c <HAL_SPI_TransmitReceive+0xb0>
 8001f88:	3301      	adds	r3, #1
 8001f8a:	d0bf      	beq.n	8001f0c <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8001f8c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001f8e:	0023      	movs	r3, r4
 8001f90:	2201      	movs	r2, #1
 8001f92:	3351      	adds	r3, #81	; 0x51
 8001f94:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001f96:	2300      	movs	r3, #0
 8001f98:	3450      	adds	r4, #80	; 0x50
 8001f9a:	7023      	strb	r3, [r4, #0]
}
 8001f9c:	b005      	add	sp, #20
 8001f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fa0:	2900      	cmp	r1, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_SPI_TransmitReceive+0x14c>
 8001fa4:	2e01      	cmp	r6, #1
 8001fa6:	d108      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fa8:	782a      	ldrb	r2, [r5, #0]
 8001faa:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fae:	3301      	adds	r3, #1
 8001fb0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001fb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001fba:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fbc:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fbe:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <HAL_SPI_TransmitReceive+0x170>
 8001fc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0a5      	beq.n	8001f18 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	423a      	tst	r2, r7
 8001fd2:	d00f      	beq.n	8001ff4 <HAL_SPI_TransmitReceive+0x198>
 8001fd4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_SPI_TransmitReceive+0x198>
 8001fda:	2d01      	cmp	r5, #1
 8001fdc:	d10a      	bne.n	8001ff4 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 8001fde:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fe0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001fe2:	7812      	ldrb	r2, [r2, #0]
 8001fe4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001fe6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fe8:	3301      	adds	r3, #1
 8001fea:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001fec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	000a      	movs	r2, r1
 8001ffa:	4032      	ands	r2, r6
 8001ffc:	4231      	tst	r1, r6
 8001ffe:	d00d      	beq.n	800201c <HAL_SPI_TransmitReceive+0x1c0>
 8002000:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002002:	2900      	cmp	r1, #0
 8002004:	d00a      	beq.n	800201c <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8002006:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800200c:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 800200e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002010:	3301      	adds	r3, #1
 8002012:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002014:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002016:	3b01      	subs	r3, #1
 8002018:	b29b      	uxth	r3, r3
 800201a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800201c:	f7fe ffe0 	bl	8000fe0 <HAL_GetTick>
 8002020:	9b01      	ldr	r3, [sp, #4]
 8002022:	1ac0      	subs	r0, r0, r3
 8002024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002026:	4298      	cmp	r0, r3
 8002028:	d3ca      	bcc.n	8001fc0 <HAL_SPI_TransmitReceive+0x164>
 800202a:	3301      	adds	r3, #1
 800202c:	d0c8      	beq.n	8001fc0 <HAL_SPI_TransmitReceive+0x164>
 800202e:	e7ad      	b.n	8001f8c <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002030:	68a3      	ldr	r3, [r4, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1ab      	bne.n	8001f8e <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	9003      	str	r0, [sp, #12]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	9203      	str	r2, [sp, #12]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	9303      	str	r3, [sp, #12]
 8002042:	9b03      	ldr	r3, [sp, #12]
 8002044:	e7a3      	b.n	8001f8e <HAL_SPI_TransmitReceive+0x132>
	...

08002048 <HAL_SPI_TransmitReceive_DMA>:
{
 8002048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800204a:	0006      	movs	r6, r0
 800204c:	3650      	adds	r6, #80	; 0x50
 800204e:	7835      	ldrb	r5, [r6, #0]
{
 8002050:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8002052:	2002      	movs	r0, #2
 8002054:	2d01      	cmp	r5, #1
 8002056:	d048      	beq.n	80020ea <HAL_SPI_TransmitReceive_DMA+0xa2>
  tmp_state           = hspi->State;
 8002058:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 800205a:	3801      	subs	r0, #1
 800205c:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 800205e:	3551      	adds	r5, #81	; 0x51
 8002060:	7828      	ldrb	r0, [r5, #0]
 8002062:	b2c7      	uxtb	r7, r0
 8002064:	9701      	str	r7, [sp, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002066:	2801      	cmp	r0, #1
 8002068:	d00d      	beq.n	8002086 <HAL_SPI_TransmitReceive_DMA+0x3e>
 800206a:	2082      	movs	r0, #130	; 0x82
 800206c:	0040      	lsls	r0, r0, #1
 800206e:	4684      	mov	ip, r0
 8002070:	6867      	ldr	r7, [r4, #4]
    errorcode = HAL_BUSY;
 8002072:	3803      	subs	r0, #3
 8002074:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002076:	4567      	cmp	r7, ip
 8002078:	d135      	bne.n	80020e6 <HAL_SPI_TransmitReceive_DMA+0x9e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800207a:	68a7      	ldr	r7, [r4, #8]
 800207c:	2f00      	cmp	r7, #0
 800207e:	d132      	bne.n	80020e6 <HAL_SPI_TransmitReceive_DMA+0x9e>
 8002080:	9f01      	ldr	r7, [sp, #4]
 8002082:	2f04      	cmp	r7, #4
 8002084:	d12f      	bne.n	80020e6 <HAL_SPI_TransmitReceive_DMA+0x9e>
    errorcode = HAL_ERROR;
 8002086:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002088:	2900      	cmp	r1, #0
 800208a:	d02c      	beq.n	80020e6 <HAL_SPI_TransmitReceive_DMA+0x9e>
 800208c:	2a00      	cmp	r2, #0
 800208e:	d02a      	beq.n	80020e6 <HAL_SPI_TransmitReceive_DMA+0x9e>
 8002090:	2b00      	cmp	r3, #0
 8002092:	d028      	beq.n	80020e6 <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002094:	7828      	ldrb	r0, [r5, #0]
 8002096:	2804      	cmp	r0, #4
 8002098:	d001      	beq.n	800209e <HAL_SPI_TransmitReceive_DMA+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800209a:	2005      	movs	r0, #5
 800209c:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800209e:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020a0:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80020a4:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 80020a6:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 80020a8:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->TxXferSize  = Size;
 80020aa:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020ac:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80020ae:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80020b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80020b2:	782b      	ldrb	r3, [r5, #0]
 80020b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d118      	bne.n	80020ec <HAL_SPI_TransmitReceive_DMA+0xa4>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80020ba:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_SPI_TransmitReceive_DMA+0x100>)
 80020bc:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_SPI_TransmitReceive_DMA+0x104>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80020c0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_SPI_TransmitReceive_DMA+0x108>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80020c4:	6821      	ldr	r1, [r4, #0]
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80020c6:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80020cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020ce:	310c      	adds	r1, #12
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	f7ff f82d 	bl	8001130 <HAL_DMA_Start_IT>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d00c      	beq.n	80020f4 <HAL_SPI_TransmitReceive_DMA+0xac>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80020da:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 80020dc:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80020de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80020e0:	4313      	orrs	r3, r2
 80020e2:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80020e4:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 80020e6:	2300      	movs	r3, #0
 80020e8:	7033      	strb	r3, [r6, #0]
}
 80020ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_SPI_TransmitReceive_DMA+0x10c>)
 80020ee:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_SPI_TransmitReceive_DMA+0x110>)
 80020f2:	e7e5      	b.n	80020c0 <HAL_SPI_TransmitReceive_DMA+0x78>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80020f4:	2701      	movs	r7, #1
 80020f6:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80020f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80020fa:	6851      	ldr	r1, [r2, #4]
 80020fc:	4339      	orrs	r1, r7
 80020fe:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002100:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002102:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002104:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002106:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8002108:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800210a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800210c:	b29b      	uxth	r3, r3
 800210e:	320c      	adds	r2, #12
 8002110:	f7ff f80e 	bl	8001130 <HAL_DMA_Start_IT>
 8002114:	2800      	cmp	r0, #0
 8002116:	d006      	beq.n	8002126 <HAL_SPI_TransmitReceive_DMA+0xde>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002118:	2310      	movs	r3, #16
 800211a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800211c:	0038      	movs	r0, r7
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800211e:	4313      	orrs	r3, r2
 8002120:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002122:	702f      	strb	r7, [r5, #0]
    goto error;
 8002124:	e7df      	b.n	80020e6 <HAL_SPI_TransmitReceive_DMA+0x9e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	4211      	tst	r1, r2
 800212e:	d102      	bne.n	8002136 <HAL_SPI_TransmitReceive_DMA+0xee>
    __HAL_SPI_ENABLE(hspi);
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002136:	2220      	movs	r2, #32
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800213e:	2202      	movs	r2, #2
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	e7ce      	b.n	80020e6 <HAL_SPI_TransmitReceive_DMA+0x9e>
 8002148:	08002249 	.word	0x08002249
 800214c:	08002285 	.word	0x08002285
 8002150:	08002261 	.word	0x08002261
 8002154:	08002255 	.word	0x08002255
 8002158:	080022db 	.word	0x080022db

0800215c <HAL_SPI_Receive_DMA>:
{
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002160:	6880      	ldr	r0, [r0, #8]
{
 8002162:	0013      	movs	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002164:	2800      	cmp	r0, #0
 8002166:	d10f      	bne.n	8002188 <HAL_SPI_Receive_DMA+0x2c>
 8002168:	2282      	movs	r2, #130	; 0x82
 800216a:	6865      	ldr	r5, [r4, #4]
 800216c:	0052      	lsls	r2, r2, #1
 800216e:	4295      	cmp	r5, r2
 8002170:	d10a      	bne.n	8002188 <HAL_SPI_Receive_DMA+0x2c>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002172:	0022      	movs	r2, r4
 8002174:	3004      	adds	r0, #4
 8002176:	3251      	adds	r2, #81	; 0x51
 8002178:	7010      	strb	r0, [r2, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800217a:	000a      	movs	r2, r1
 800217c:	0020      	movs	r0, r4
 800217e:	f7ff ff63 	bl	8002048 <HAL_SPI_TransmitReceive_DMA>
 8002182:	0005      	movs	r5, r0
}
 8002184:	0028      	movs	r0, r5
 8002186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8002188:	0026      	movs	r6, r4
 800218a:	3650      	adds	r6, #80	; 0x50
 800218c:	7832      	ldrb	r2, [r6, #0]
 800218e:	2502      	movs	r5, #2
 8002190:	2a01      	cmp	r2, #1
 8002192:	d0f7      	beq.n	8002184 <HAL_SPI_Receive_DMA+0x28>
 8002194:	2201      	movs	r2, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8002196:	0027      	movs	r7, r4
  __HAL_LOCK(hspi);
 8002198:	7032      	strb	r2, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 800219a:	3751      	adds	r7, #81	; 0x51
 800219c:	783a      	ldrb	r2, [r7, #0]
 800219e:	b2d5      	uxtb	r5, r2
 80021a0:	2a01      	cmp	r2, #1
 80021a2:	d145      	bne.n	8002230 <HAL_SPI_Receive_DMA+0xd4>
  if ((pData == NULL) || (Size == 0U))
 80021a4:	2900      	cmp	r1, #0
 80021a6:	d02e      	beq.n	8002206 <HAL_SPI_Receive_DMA+0xaa>
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d02c      	beq.n	8002206 <HAL_SPI_Receive_DMA+0xaa>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021ac:	3203      	adds	r2, #3
 80021ae:	703a      	strb	r2, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b0:	2200      	movs	r2, #0
  hspi->RxXferSize  = Size;
 80021b2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b4:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80021b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021b8:	2380      	movs	r3, #128	; 0x80
  hspi->RxISR       = NULL;
 80021ba:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021bc:	6462      	str	r2, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80021be:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80021c0:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021c2:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c4:	6822      	ldr	r2, [r4, #0]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	4298      	cmp	r0, r3
 80021ca:	d103      	bne.n	80021d4 <HAL_SPI_Receive_DMA+0x78>
    SPI_1LINE_RX(hspi);
 80021cc:	6813      	ldr	r3, [r2, #0]
 80021ce:	4819      	ldr	r0, [pc, #100]	; (8002234 <HAL_SPI_Receive_DMA+0xd8>)
 80021d0:	4003      	ands	r3, r0
 80021d2:	6013      	str	r3, [r2, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80021d4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_SPI_Receive_DMA+0xdc>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80021d8:	320c      	adds	r2, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80021da:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_SPI_Receive_DMA+0xe0>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80021de:	4694      	mov	ip, r2
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80021e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_SPI_Receive_DMA+0xe4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80021e4:	000a      	movs	r2, r1
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80021e6:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80021ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021ee:	4661      	mov	r1, ip
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f7fe ff9d 	bl	8001130 <HAL_DMA_Start_IT>
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d008      	beq.n	800220c <HAL_SPI_Receive_DMA+0xb0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80021fa:	2310      	movs	r3, #16
 80021fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80021fe:	4313      	orrs	r3, r2
 8002200:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002202:	2301      	movs	r3, #1
 8002204:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 8002206:	2300      	movs	r3, #0
 8002208:	7033      	strb	r3, [r6, #0]
  return errorcode;
 800220a:	e7bb      	b.n	8002184 <HAL_SPI_Receive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800220c:	2240      	movs	r2, #64	; 0x40
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	6819      	ldr	r1, [r3, #0]
 8002212:	4211      	tst	r1, r2
 8002214:	d102      	bne.n	800221c <HAL_SPI_Receive_DMA+0xc0>
    __HAL_SPI_ENABLE(hspi);
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800221c:	2220      	movs	r2, #32
 800221e:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002220:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002226:	2201      	movs	r2, #1
 8002228:	6859      	ldr	r1, [r3, #4]
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	e7ea      	b.n	8002206 <HAL_SPI_Receive_DMA+0xaa>
    errorcode = HAL_BUSY;
 8002230:	2502      	movs	r5, #2
 8002232:	e7e8      	b.n	8002206 <HAL_SPI_Receive_DMA+0xaa>
 8002234:	ffffbfff 	.word	0xffffbfff
 8002238:	08002249 	.word	0x08002249
 800223c:	08002285 	.word	0x08002285
 8002240:	08002261 	.word	0x08002261

08002244 <HAL_SPI_TxRxCpltCallback>:
 8002244:	4770      	bx	lr

08002246 <HAL_SPI_RxHalfCpltCallback>:
 8002246:	4770      	bx	lr

08002248 <SPI_DMAHalfReceiveCplt>:
{
 8002248:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800224a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800224c:	f7ff fffb 	bl	8002246 <HAL_SPI_RxHalfCpltCallback>
}
 8002250:	bd10      	pop	{r4, pc}

08002252 <HAL_SPI_TxRxHalfCpltCallback>:
 8002252:	4770      	bx	lr

08002254 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8002254:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002256:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002258:	f7ff fffb 	bl	8002252 <HAL_SPI_TxRxHalfCpltCallback>
}
 800225c:	bd10      	pop	{r4, pc}

0800225e <HAL_SPI_ErrorCallback>:
 800225e:	4770      	bx	lr

08002260 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002260:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002262:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002264:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002266:	6802      	ldr	r2, [r0, #0]
 8002268:	6853      	ldr	r3, [r2, #4]
 800226a:	438b      	bics	r3, r1
 800226c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800226e:	2310      	movs	r3, #16
 8002270:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002272:	4313      	orrs	r3, r2
 8002274:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002276:	0003      	movs	r3, r0
 8002278:	2201      	movs	r2, #1
 800227a:	3351      	adds	r3, #81	; 0x51
 800227c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 800227e:	f7ff ffee 	bl	800225e <HAL_SPI_ErrorCallback>
}
 8002282:	bd10      	pop	{r4, pc}

08002284 <SPI_DMAReceiveCplt>:
{
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002288:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800228a:	f7fe fea9 	bl	8000fe0 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800228e:	682b      	ldr	r3, [r5, #0]
 8002290:	2520      	movs	r5, #32
 8002292:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8002294:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002296:	422b      	tst	r3, r5
 8002298:	d11b      	bne.n	80022d2 <SPI_DMAReceiveCplt+0x4e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800229a:	2003      	movs	r0, #3
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	43a9      	bics	r1, r5
 80022a2:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	4381      	bics	r1, r0
 80022a8:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80022aa:	0020      	movs	r0, r4
 80022ac:	2164      	movs	r1, #100	; 0x64
 80022ae:	f7ff fd4b 	bl	8001d48 <SPI_EndRxTransaction>
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d000      	beq.n	80022b8 <SPI_DMAReceiveCplt+0x34>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022b6:	6565      	str	r5, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80022bc:	0023      	movs	r3, r4
 80022be:	2201      	movs	r2, #1
 80022c0:	3351      	adds	r3, #81	; 0x51
 80022c2:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <SPI_DMAReceiveCplt+0x4e>
      HAL_SPI_ErrorCallback(hspi);
 80022ca:	0020      	movs	r0, r4
 80022cc:	f7ff ffc7 	bl	800225e <HAL_SPI_ErrorCallback>
}
 80022d0:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_RxCpltCallback(hspi);
 80022d2:	0020      	movs	r0, r4
 80022d4:	f001 f972 	bl	80035bc <HAL_SPI_RxCpltCallback>
 80022d8:	e7fa      	b.n	80022d0 <SPI_DMAReceiveCplt+0x4c>

080022da <SPI_DMATransmitReceiveCplt>:
{
 80022da:	b570      	push	{r4, r5, r6, lr}
 80022dc:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022de:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80022e0:	f7fe fe7e 	bl	8000fe0 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	2520      	movs	r5, #32
 80022e8:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 80022ea:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80022ec:	422b      	tst	r3, r5
 80022ee:	d11f      	bne.n	8002330 <SPI_DMATransmitReceiveCplt+0x56>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80022f0:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80022f2:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80022f4:	684b      	ldr	r3, [r1, #4]
 80022f6:	43ab      	bics	r3, r5
 80022f8:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80022fa:	2164      	movs	r1, #100	; 0x64
 80022fc:	f7ff fd4e 	bl	8001d9c <SPI_EndRxTxTransaction>
 8002300:	2800      	cmp	r0, #0
 8002302:	d002      	beq.n	800230a <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002304:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002306:	431d      	orrs	r5, r3
 8002308:	6565      	str	r5, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800230a:	2103      	movs	r1, #3
 800230c:	6822      	ldr	r2, [r4, #0]
 800230e:	6853      	ldr	r3, [r2, #4]
 8002310:	438b      	bics	r3, r1
 8002312:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002318:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800231a:	0023      	movs	r3, r4
 800231c:	2201      	movs	r2, #1
 800231e:	3351      	adds	r3, #81	; 0x51
 8002320:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002322:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <SPI_DMATransmitReceiveCplt+0x56>
      HAL_SPI_ErrorCallback(hspi);
 8002328:	0020      	movs	r0, r4
 800232a:	f7ff ff98 	bl	800225e <HAL_SPI_ErrorCallback>
}
 800232e:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8002330:	0020      	movs	r0, r4
 8002332:	f7ff ff87 	bl	8002244 <HAL_SPI_TxRxCpltCallback>
 8002336:	e7fa      	b.n	800232e <SPI_DMATransmitReceiveCplt+0x54>

08002338 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002338:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 800233a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800233c:	05d2      	lsls	r2, r2, #23
 800233e:	4290      	cmp	r0, r2
 8002340:	d008      	beq.n	8002354 <TIM_Base_SetConfig+0x1c>
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <TIM_Base_SetConfig+0x60>)
 8002344:	4290      	cmp	r0, r2
 8002346:	d005      	beq.n	8002354 <TIM_Base_SetConfig+0x1c>
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <TIM_Base_SetConfig+0x64>)
 800234a:	4290      	cmp	r0, r2
 800234c:	d002      	beq.n	8002354 <TIM_Base_SetConfig+0x1c>
 800234e:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <TIM_Base_SetConfig+0x68>)
 8002350:	4290      	cmp	r0, r2
 8002352:	d114      	bne.n	800237e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002354:	2270      	movs	r2, #112	; 0x70
 8002356:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002358:	684a      	ldr	r2, [r1, #4]
 800235a:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800235c:	2280      	movs	r2, #128	; 0x80
 800235e:	05d2      	lsls	r2, r2, #23
 8002360:	4290      	cmp	r0, r2
 8002362:	d008      	beq.n	8002376 <TIM_Base_SetConfig+0x3e>
 8002364:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <TIM_Base_SetConfig+0x60>)
 8002366:	4290      	cmp	r0, r2
 8002368:	d005      	beq.n	8002376 <TIM_Base_SetConfig+0x3e>
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <TIM_Base_SetConfig+0x64>)
 800236c:	4290      	cmp	r0, r2
 800236e:	d002      	beq.n	8002376 <TIM_Base_SetConfig+0x3e>
 8002370:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <TIM_Base_SetConfig+0x68>)
 8002372:	4290      	cmp	r0, r2
 8002374:	d103      	bne.n	800237e <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <TIM_Base_SetConfig+0x6c>)
 8002378:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800237a:	68ca      	ldr	r2, [r1, #12]
 800237c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	4393      	bics	r3, r2
 8002382:	690a      	ldr	r2, [r1, #16]
 8002384:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002386:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002388:	688b      	ldr	r3, [r1, #8]
 800238a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800238c:	680b      	ldr	r3, [r1, #0]
 800238e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002390:	2301      	movs	r3, #1
 8002392:	6143      	str	r3, [r0, #20]
}
 8002394:	4770      	bx	lr
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	40000400 	.word	0x40000400
 800239c:	40010800 	.word	0x40010800
 80023a0:	40011400 	.word	0x40011400
 80023a4:	fffffcff 	.word	0xfffffcff

080023a8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a8:	2201      	movs	r2, #1
{
 80023aa:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023ac:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ae:	6a03      	ldr	r3, [r0, #32]
 80023b0:	4393      	bics	r3, r2
 80023b2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80023b4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80023b6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80023b8:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023ba:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023bc:	680d      	ldr	r5, [r1, #0]
 80023be:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023c0:	2502      	movs	r5, #2
 80023c2:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023c4:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023c8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023ca:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 80023cc:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 80023ce:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d0:	6203      	str	r3, [r0, #32]
}
 80023d2:	bd30      	pop	{r4, r5, pc}

080023d4 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023d4:	2210      	movs	r2, #16
 80023d6:	6a03      	ldr	r3, [r0, #32]
{
 80023d8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023da:	4393      	bics	r3, r2
 80023dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023e0:	4c09      	ldr	r4, [pc, #36]	; (8002408 <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 80023e2:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80023e4:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023e6:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e8:	680a      	ldr	r2, [r1, #0]
 80023ea:	0212      	lsls	r2, r2, #8
 80023ec:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023ee:	2420      	movs	r4, #32
 80023f0:	43a3      	bics	r3, r4
 80023f2:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023f4:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023f6:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023f8:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023fa:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023fc:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023fe:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8002400:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002402:	6203      	str	r3, [r0, #32]
}
 8002404:	bd30      	pop	{r4, r5, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	ffff8cff 	.word	0xffff8cff

0800240c <HAL_TIM_Base_Init>:
{
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002410:	2001      	movs	r0, #1
  if (htim == NULL)
 8002412:	2c00      	cmp	r4, #0
 8002414:	d014      	beq.n	8002440 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002416:	0025      	movs	r5, r4
 8002418:	3539      	adds	r5, #57	; 0x39
 800241a:	782b      	ldrb	r3, [r5, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002422:	0023      	movs	r3, r4
 8002424:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002426:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002428:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 800242a:	f7fe fb87 	bl	8000b3c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800242e:	2302      	movs	r3, #2
 8002430:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002432:	6820      	ldr	r0, [r4, #0]
 8002434:	1d21      	adds	r1, r4, #4
 8002436:	f7ff ff7f 	bl	8002338 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800243a:	2301      	movs	r3, #1
  return HAL_OK;
 800243c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800243e:	702b      	strb	r3, [r5, #0]
}
 8002440:	bd70      	pop	{r4, r5, r6, pc}

08002442 <HAL_TIM_PWM_MspInit>:
 8002442:	4770      	bx	lr

08002444 <HAL_TIM_PWM_Init>:
{
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002448:	2001      	movs	r0, #1
  if (htim == NULL)
 800244a:	2c00      	cmp	r4, #0
 800244c:	d014      	beq.n	8002478 <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 800244e:	0025      	movs	r5, r4
 8002450:	3539      	adds	r5, #57	; 0x39
 8002452:	782b      	ldrb	r3, [r5, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800245a:	0023      	movs	r3, r4
 800245c:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 800245e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002460:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8002462:	f7ff ffee 	bl	8002442 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002466:	2302      	movs	r3, #2
 8002468:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246a:	6820      	ldr	r0, [r4, #0]
 800246c:	1d21      	adds	r1, r4, #4
 800246e:	f7ff ff63 	bl	8002338 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002472:	2301      	movs	r3, #1
  return HAL_OK;
 8002474:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002476:	702b      	strb	r3, [r5, #0]
}
 8002478:	bd70      	pop	{r4, r5, r6, pc}
	...

0800247c <HAL_TIM_PWM_ConfigChannel>:
{
 800247c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800247e:	0006      	movs	r6, r0
 8002480:	2302      	movs	r3, #2
 8002482:	3638      	adds	r6, #56	; 0x38
{
 8002484:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8002486:	7831      	ldrb	r1, [r6, #0]
{
 8002488:	0005      	movs	r5, r0
  __HAL_LOCK(htim);
 800248a:	0018      	movs	r0, r3
 800248c:	2901      	cmp	r1, #1
 800248e:	d010      	beq.n	80024b2 <HAL_TIM_PWM_ConfigChannel+0x36>
 8002490:	2101      	movs	r1, #1
 8002492:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002494:	0029      	movs	r1, r5
 8002496:	3139      	adds	r1, #57	; 0x39
 8002498:	700b      	strb	r3, [r1, #0]
  switch (Channel)
 800249a:	2a08      	cmp	r2, #8
 800249c:	d054      	beq.n	8002548 <HAL_TIM_PWM_ConfigChannel+0xcc>
 800249e:	d809      	bhi.n	80024b4 <HAL_TIM_PWM_ConfigChannel+0x38>
 80024a0:	2a00      	cmp	r2, #0
 80024a2:	d02d      	beq.n	8002500 <HAL_TIM_PWM_ConfigChannel+0x84>
 80024a4:	2a04      	cmp	r2, #4
 80024a6:	d03d      	beq.n	8002524 <HAL_TIM_PWM_ConfigChannel+0xa8>
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80024aa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	3539      	adds	r5, #57	; 0x39
 80024ae:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80024b0:	7030      	strb	r0, [r6, #0]
}
 80024b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80024b4:	2a0c      	cmp	r2, #12
 80024b6:	d1f7      	bne.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024b8:	682b      	ldr	r3, [r5, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024ba:	4935      	ldr	r1, [pc, #212]	; (8002590 <HAL_TIM_PWM_ConfigChannel+0x114>)
 80024bc:	6a1a      	ldr	r2, [r3, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024be:	4835      	ldr	r0, [pc, #212]	; (8002594 <HAL_TIM_PWM_ConfigChannel+0x118>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024c0:	400a      	ands	r2, r1
 80024c2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80024c4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80024c6:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80024c8:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024ca:	4001      	ands	r1, r0

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024cc:	6820      	ldr	r0, [r4, #0]
 80024ce:	0200      	lsls	r0, r0, #8
 80024d0:	4301      	orrs	r1, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024d2:	4831      	ldr	r0, [pc, #196]	; (8002598 <HAL_TIM_PWM_ConfigChannel+0x11c>)
 80024d4:	4010      	ands	r0, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024d6:	68a2      	ldr	r2, [r4, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d8:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024da:	0312      	lsls	r2, r2, #12

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024dc:	61d9      	str	r1, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024de:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024e0:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 80024e2:	6419      	str	r1, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	69d9      	ldr	r1, [r3, #28]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	430a      	orrs	r2, r1
 80024ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024f0:	69da      	ldr	r2, [r3, #28]
 80024f2:	492a      	ldr	r1, [pc, #168]	; (800259c <HAL_TIM_PWM_ConfigChannel+0x120>)
 80024f4:	400a      	ands	r2, r1
 80024f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024f8:	68e2      	ldr	r2, [r4, #12]
 80024fa:	69d9      	ldr	r1, [r3, #28]
 80024fc:	0212      	lsls	r2, r2, #8
 80024fe:	e044      	b.n	800258a <HAL_TIM_PWM_ConfigChannel+0x10e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002500:	0021      	movs	r1, r4
 8002502:	6828      	ldr	r0, [r5, #0]
 8002504:	f7ff ff50 	bl	80023a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002508:	2208      	movs	r2, #8
 800250a:	682b      	ldr	r3, [r5, #0]
 800250c:	6999      	ldr	r1, [r3, #24]
 800250e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002510:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	438a      	bics	r2, r1
 8002518:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800251e:	430a      	orrs	r2, r1
 8002520:	619a      	str	r2, [r3, #24]
      break;
 8002522:	e7c1      	b.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002524:	0021      	movs	r1, r4
 8002526:	6828      	ldr	r0, [r5, #0]
 8002528:	f7ff ff54 	bl	80023d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	682b      	ldr	r3, [r5, #0]
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	6999      	ldr	r1, [r3, #24]
 8002534:	430a      	orrs	r2, r1
 8002536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	4918      	ldr	r1, [pc, #96]	; (800259c <HAL_TIM_PWM_ConfigChannel+0x120>)
 800253c:	400a      	ands	r2, r1
 800253e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002540:	68e2      	ldr	r2, [r4, #12]
 8002542:	6999      	ldr	r1, [r3, #24]
 8002544:	0212      	lsls	r2, r2, #8
 8002546:	e7ea      	b.n	800251e <HAL_TIM_PWM_ConfigChannel+0xa2>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002548:	2773      	movs	r7, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800254a:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800254c:	4814      	ldr	r0, [pc, #80]	; (80025a0 <HAL_TIM_PWM_ConfigChannel+0x124>)
 800254e:	6a19      	ldr	r1, [r3, #32]
 8002550:	4001      	ands	r1, r0
 8002552:	6219      	str	r1, [r3, #32]
  tmpccer = TIMx->CCER;
 8002554:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002556:	6858      	ldr	r0, [r3, #4]
 8002558:	9001      	str	r0, [sp, #4]
  tmpccmrx = TIMx->CCMR2;
 800255a:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800255c:	43b8      	bics	r0, r7
  tmpccmrx |= OC_Config->OCMode;
 800255e:	6827      	ldr	r7, [r4, #0]
 8002560:	4338      	orrs	r0, r7
  tmpccer &= ~TIM_CCER_CC3P;
 8002562:	4f10      	ldr	r7, [pc, #64]	; (80025a4 <HAL_TIM_PWM_ConfigChannel+0x128>)
 8002564:	400f      	ands	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002566:	68a1      	ldr	r1, [r4, #8]
 8002568:	0209      	lsls	r1, r1, #8
 800256a:	4339      	orrs	r1, r7
  TIMx->CR2 = tmpcr2;
 800256c:	9f01      	ldr	r7, [sp, #4]
 800256e:	605f      	str	r7, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002570:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002572:	6860      	ldr	r0, [r4, #4]
 8002574:	63d8      	str	r0, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002576:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002578:	69d9      	ldr	r1, [r3, #28]
 800257a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800257c:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800257e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	438a      	bics	r2, r1
 8002584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002586:	69da      	ldr	r2, [r3, #28]
 8002588:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800258a:	430a      	orrs	r2, r1
 800258c:	61da      	str	r2, [r3, #28]
      break;
 800258e:	e78b      	b.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8002590:	ffffefff 	.word	0xffffefff
 8002594:	ffff8cff 	.word	0xffff8cff
 8002598:	ffffdfff 	.word	0xffffdfff
 800259c:	fffffbff 	.word	0xfffffbff
 80025a0:	fffffeff 	.word	0xfffffeff
 80025a4:	fffffdff 	.word	0xfffffdff

080025a8 <HAL_TIM_ConfigClockSource>:
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80025aa:	0004      	movs	r4, r0
 80025ac:	2202      	movs	r2, #2
 80025ae:	3438      	adds	r4, #56	; 0x38
 80025b0:	7825      	ldrb	r5, [r4, #0]
{
 80025b2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80025b4:	0010      	movs	r0, r2
 80025b6:	2d01      	cmp	r5, #1
 80025b8:	d024      	beq.n	8002604 <HAL_TIM_ConfigClockSource+0x5c>
  htim->State = HAL_TIM_STATE_BUSY;
 80025ba:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 80025bc:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80025be:	3539      	adds	r5, #57	; 0x39
  __HAL_LOCK(htim);
 80025c0:	7026      	strb	r6, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025c2:	702a      	strb	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 80025c4:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c6:	4845      	ldr	r0, [pc, #276]	; (80026dc <HAL_TIM_ConfigClockSource+0x134>)
  tmpsmcr = htim->Instance->SMCR;
 80025c8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ca:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 80025cc:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80025ce:	680a      	ldr	r2, [r1, #0]
 80025d0:	2a60      	cmp	r2, #96	; 0x60
 80025d2:	d055      	beq.n	8002680 <HAL_TIM_ConfigClockSource+0xd8>
 80025d4:	d82f      	bhi.n	8002636 <HAL_TIM_ConfigClockSource+0x8e>
 80025d6:	2a40      	cmp	r2, #64	; 0x40
 80025d8:	d100      	bne.n	80025dc <HAL_TIM_ConfigClockSource+0x34>
 80025da:	e069      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x108>
 80025dc:	d813      	bhi.n	8002606 <HAL_TIM_ConfigClockSource+0x5e>
 80025de:	2a20      	cmp	r2, #32
 80025e0:	d004      	beq.n	80025ec <HAL_TIM_ConfigClockSource+0x44>
 80025e2:	d809      	bhi.n	80025f8 <HAL_TIM_ConfigClockSource+0x50>
 80025e4:	2110      	movs	r1, #16
 80025e6:	0010      	movs	r0, r2
 80025e8:	4388      	bics	r0, r1
 80025ea:	d107      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x54>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025ec:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80025ee:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025f0:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025f2:	430a      	orrs	r2, r1
 80025f4:	2107      	movs	r1, #7
 80025f6:	e040      	b.n	800267a <HAL_TIM_ConfigClockSource+0xd2>
  switch (sClockSourceConfig->ClockSource)
 80025f8:	2a30      	cmp	r2, #48	; 0x30
 80025fa:	d0f7      	beq.n	80025ec <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80025fe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002600:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002602:	7020      	strb	r0, [r4, #0]
}
 8002604:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8002606:	2a50      	cmp	r2, #80	; 0x50
 8002608:	d1f8      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800260a:	6848      	ldr	r0, [r1, #4]
 800260c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800260e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002610:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002612:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002614:	43b7      	bics	r7, r6
 8002616:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002618:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800261a:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800261c:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800261e:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002620:	260a      	movs	r6, #10
 8002622:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 8002624:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002628:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800262a:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800262c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800262e:	438a      	bics	r2, r1
 8002630:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002632:	2257      	movs	r2, #87	; 0x57
 8002634:	e021      	b.n	800267a <HAL_TIM_ConfigClockSource+0xd2>
  switch (sClockSourceConfig->ClockSource)
 8002636:	2a70      	cmp	r2, #112	; 0x70
 8002638:	d012      	beq.n	8002660 <HAL_TIM_ConfigClockSource+0xb8>
 800263a:	2080      	movs	r0, #128	; 0x80
 800263c:	0180      	lsls	r0, r0, #6
 800263e:	4282      	cmp	r2, r0
 8002640:	d1dc      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x54>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002642:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002644:	4826      	ldr	r0, [pc, #152]	; (80026e0 <HAL_TIM_ConfigClockSource+0x138>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002646:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002648:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800264a:	688a      	ldr	r2, [r1, #8]
 800264c:	68c9      	ldr	r1, [r1, #12]
 800264e:	4332      	orrs	r2, r6
 8002650:	0209      	lsls	r1, r1, #8
 8002652:	430a      	orrs	r2, r1
 8002654:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002656:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	01d2      	lsls	r2, r2, #7
 800265e:	e00c      	b.n	800267a <HAL_TIM_ConfigClockSource+0xd2>
  tmpsmcr = TIMx->SMCR;
 8002660:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002662:	481f      	ldr	r0, [pc, #124]	; (80026e0 <HAL_TIM_ConfigClockSource+0x138>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002664:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002666:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002668:	688a      	ldr	r2, [r1, #8]
 800266a:	68c9      	ldr	r1, [r1, #12]
 800266c:	4332      	orrs	r2, r6
 800266e:	0209      	lsls	r1, r1, #8
 8002670:	430a      	orrs	r2, r1
 8002672:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8002674:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002676:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8002678:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800267a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800267c:	609a      	str	r2, [r3, #8]
}
 800267e:	e7bd      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x54>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002680:	2610      	movs	r6, #16
 8002682:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002684:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002686:	43b0      	bics	r0, r6
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002688:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800268a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800268c:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800268e:	4f15      	ldr	r7, [pc, #84]	; (80026e4 <HAL_TIM_ConfigClockSource+0x13c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002690:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002692:	403e      	ands	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002694:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002696:	26a0      	movs	r6, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002698:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800269a:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800269c:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800269e:	43b0      	bics	r0, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 80026a0:	0112      	lsls	r2, r2, #4
 80026a2:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 80026a4:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80026a6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026a8:	438a      	bics	r2, r1
 80026aa:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026ac:	2267      	movs	r2, #103	; 0x67
 80026ae:	e7e4      	b.n	800267a <HAL_TIM_ConfigClockSource+0xd2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b0:	6848      	ldr	r0, [r1, #4]
 80026b2:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80026b4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b6:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026b8:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ba:	43b7      	bics	r7, r6
 80026bc:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026be:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80026c0:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026c2:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026c4:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026c6:	260a      	movs	r6, #10
 80026c8:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 80026ca:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80026cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ce:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026d0:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80026d2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026d4:	438a      	bics	r2, r1
 80026d6:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d8:	2247      	movs	r2, #71	; 0x47
 80026da:	e7ce      	b.n	800267a <HAL_TIM_ConfigClockSource+0xd2>
 80026dc:	ffff0088 	.word	0xffff0088
 80026e0:	ffff00ff 	.word	0xffff00ff
 80026e4:	ffff0fff 	.word	0xffff0fff

080026e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026e8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ea:	0004      	movs	r4, r0
 80026ec:	2202      	movs	r2, #2
 80026ee:	3438      	adds	r4, #56	; 0x38
 80026f0:	7825      	ldrb	r5, [r4, #0]
{
 80026f2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80026f4:	0010      	movs	r0, r2
 80026f6:	2d01      	cmp	r5, #1
 80026f8:	d013      	beq.n	8002722 <HAL_TIMEx_MasterConfigSynchronization+0x3a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fa:	0018      	movs	r0, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026fc:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80026fe:	3039      	adds	r0, #57	; 0x39
 8002700:	7002      	strb	r2, [r0, #0]
  tmpcr2 = htim->Instance->CR2;
 8002702:	681d      	ldr	r5, [r3, #0]
 8002704:	686a      	ldr	r2, [r5, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002706:	68ab      	ldr	r3, [r5, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002708:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800270a:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800270c:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800270e:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002710:	2680      	movs	r6, #128	; 0x80
 8002712:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002714:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002716:	606a      	str	r2, [r5, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002718:	60ab      	str	r3, [r5, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800271a:	2301      	movs	r3, #1
 800271c:	7003      	strb	r3, [r0, #0]

  __HAL_UNLOCK(htim);
 800271e:	2000      	movs	r0, #0
 8002720:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002722:	bd70      	pop	{r4, r5, r6, pc}

08002724 <TSC_extract_groups>:
static uint32_t TSC_extract_groups(uint32_t iomask)
{
  uint32_t groups = 0UL;
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002724:	2300      	movs	r3, #0
{
 8002726:	0002      	movs	r2, r0
 8002728:	b570      	push	{r4, r5, r6, lr}
  uint32_t groups = 0UL;
 800272a:	0018      	movs	r0, r3
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 800272c:	210f      	movs	r1, #15
    {
      groups |= (1UL << idx);
 800272e:	2401      	movs	r4, #1
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8002730:	000e      	movs	r6, r1
 8002732:	009d      	lsls	r5, r3, #2
 8002734:	40ae      	lsls	r6, r5
 8002736:	4232      	tst	r2, r6
 8002738:	d002      	beq.n	8002740 <TSC_extract_groups+0x1c>
      groups |= (1UL << idx);
 800273a:	0025      	movs	r5, r4
 800273c:	409d      	lsls	r5, r3
 800273e:	4328      	orrs	r0, r5
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002740:	3301      	adds	r3, #1
 8002742:	2b08      	cmp	r3, #8
 8002744:	d1f4      	bne.n	8002730 <TSC_extract_groups+0xc>
    }
  }

  return groups;
}
 8002746:	bd70      	pop	{r4, r5, r6, pc}

08002748 <HAL_TSC_Init>:
{
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
  if (htsc == NULL)
 800274e:	2c00      	cmp	r4, #0
 8002750:	d041      	beq.n	80027d6 <HAL_TSC_Init+0x8e>
  if (htsc->State == HAL_TSC_STATE_RESET)
 8002752:	0026      	movs	r6, r4
 8002754:	363c      	adds	r6, #60	; 0x3c
 8002756:	7833      	ldrb	r3, [r6, #0]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_TSC_Init+0x22>
    htsc->Lock = HAL_UNLOCKED;
 800275e:	0023      	movs	r3, r4
 8002760:	333d      	adds	r3, #61	; 0x3d
    HAL_TSC_MspInit(htsc);
 8002762:	0020      	movs	r0, r4
    htsc->Lock = HAL_UNLOCKED;
 8002764:	701a      	strb	r2, [r3, #0]
    HAL_TSC_MspInit(htsc);
 8002766:	f7fe fa7d 	bl	8000c64 <HAL_TSC_MspInit>
  htsc->State = HAL_TSC_STATE_BUSY;
 800276a:	2302      	movs	r3, #2
 800276c:	7033      	strb	r3, [r6, #0]
  htsc->Instance->CR = TSC_CR_TSCE;
 800276e:	6825      	ldr	r5, [r4, #0]
 8002770:	3b01      	subs	r3, #1
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002772:	68a1      	ldr	r1, [r4, #8]
  htsc->Instance->CR = TSC_CR_TSCE;
 8002774:	602b      	str	r3, [r5, #0]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	682a      	ldr	r2, [r5, #0]
 800277a:	430b      	orrs	r3, r1
 800277c:	6961      	ldr	r1, [r4, #20]
 800277e:	430b      	orrs	r3, r1
 8002780:	69a1      	ldr	r1, [r4, #24]
 8002782:	430b      	orrs	r3, r1
 8002784:	69e1      	ldr	r1, [r4, #28]
 8002786:	430b      	orrs	r3, r1
 8002788:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800278a:	430b      	orrs	r3, r1
 800278c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800278e:	430b      	orrs	r3, r1
 8002790:	4313      	orrs	r3, r2
                         (uint32_t)(htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002792:	6922      	ldr	r2, [r4, #16]
 8002794:	0452      	lsls	r2, r2, #17
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002796:	4313      	orrs	r3, r2
 8002798:	602b      	str	r3, [r5, #0]
  if ((FunctionalState)htsc->Init.SpreadSpectrum == ENABLE)
 800279a:	68e3      	ldr	r3, [r4, #12]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d104      	bne.n	80027ac <HAL_TSC_Init+0x64>
    htsc->Instance->CR |= TSC_CR_SSE;
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	682a      	ldr	r2, [r5, #0]
 80027a6:	025b      	lsls	r3, r3, #9
 80027a8:	4313      	orrs	r3, r2
 80027aa:	602b      	str	r3, [r5, #0]
  htsc->Instance->IOHCR = (uint32_t)(~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80027ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80027ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80027b2:	4303      	orrs	r3, r0
 80027b4:	001a      	movs	r2, r3
 80027b6:	430a      	orrs	r2, r1
 80027b8:	43d2      	mvns	r2, r2
 80027ba:	612a      	str	r2, [r5, #16]
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 80027bc:	62ab      	str	r3, [r5, #40]	; 0x28
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80027be:	6229      	str	r1, [r5, #32]
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80027c0:	f7ff ffb0 	bl	8002724 <TSC_extract_groups>
  htsc->Instance->IER &= (uint32_t)(~(TSC_IT_EOA | TSC_IT_MCE));
 80027c4:	2203      	movs	r2, #3
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80027c6:	6328      	str	r0, [r5, #48]	; 0x30
  htsc->Instance->IER &= (uint32_t)(~(TSC_IT_EOA | TSC_IT_MCE));
 80027c8:	686b      	ldr	r3, [r5, #4]
  return HAL_OK;
 80027ca:	2000      	movs	r0, #0
  htsc->Instance->IER &= (uint32_t)(~(TSC_IT_EOA | TSC_IT_MCE));
 80027cc:	4393      	bics	r3, r2
 80027ce:	606b      	str	r3, [r5, #4]
  htsc->State = HAL_TSC_STATE_READY;
 80027d0:	2301      	movs	r3, #1
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80027d2:	60aa      	str	r2, [r5, #8]
  htsc->State = HAL_TSC_STATE_READY;
 80027d4:	7033      	strb	r3, [r6, #0]
}
 80027d6:	bd70      	pop	{r4, r5, r6, pc}

080027d8 <TSL_Init>:
  * @brief  Initializes the TS interface.
  * @param  bank  Array holding all the banks
  * @retval Status
  */
TSL_Status_enum_T TSL_Init(CONST TSL_Bank_T *bank)
{
 80027d8:	b510      	push	{r4, lr}

  // Get banks array
  TSL_Globals.Bank_Array = bank;

  // Initialize the delay that will be used to discharge the capacitors
  TSL_Globals.DelayDischarge = (uint32_t)((TSLPRM_DELAY_DISCHARGE_ALL * (uint32_t)(SystemCoreClock/1000000)) / 72);
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <TSL_Init+0x24>)
  TSL_Globals.Bank_Array = bank;
 80027dc:	4c08      	ldr	r4, [pc, #32]	; (8002800 <TSL_Init+0x28>)
  TSL_Globals.DelayDischarge = (uint32_t)((TSLPRM_DELAY_DISCHARGE_ALL * (uint32_t)(SystemCoreClock/1000000)) / 72);
 80027de:	4909      	ldr	r1, [pc, #36]	; (8002804 <TSL_Init+0x2c>)
  TSL_Globals.Bank_Array = bank;
 80027e0:	6060      	str	r0, [r4, #4]
  TSL_Globals.DelayDischarge = (uint32_t)((TSLPRM_DELAY_DISCHARGE_ALL * (uint32_t)(SystemCoreClock/1000000)) / 72);
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	f7fd fc9a 	bl	800011c <__udivsi3>
 80027e8:	23fa      	movs	r3, #250	; 0xfa
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	2148      	movs	r1, #72	; 0x48
 80027ee:	4358      	muls	r0, r3
 80027f0:	f7fd fc94 	bl	800011c <__udivsi3>
 80027f4:	6120      	str	r0, [r4, #16]
#else
  retval = TSL_acq_Init();
#endif

  return retval;
}
 80027f6:	2000      	movs	r0, #0
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	20000000 	.word	0x20000000
 8002800:	20000d88 	.word	0x20000d88
 8002804:	000f4240 	.word	0x000f4240

08002808 <TSL_acq_TestFirstReferenceIsValid>:
  * @retval Result TRUE if the Reference is valid
  */
TSL_Bool_enum_T TSL_acq_TestFirstReferenceIsValid(TSL_ChannelData_T *pCh, TSL_tMeas_T new_meas)
{
  return TSL_TRUE;
}
 8002808:	2001      	movs	r0, #1
 800280a:	4770      	bx	lr

0800280c <TSL_obj_SetGlobalObj>:
void TSL_obj_SetGlobalObj(CONST TSL_Object_T *pobj)
{

  TSL_Globals.This_Obj = pobj;

  switch (pobj->Type)
 800280c:	7803      	ldrb	r3, [r0, #0]
  TSL_Globals.This_Obj = pobj;
 800280e:	4a04      	ldr	r2, [pc, #16]	; (8002820 <TSL_obj_SetGlobalObj+0x14>)
  switch (pobj->Type)
 8002810:	3b10      	subs	r3, #16
  TSL_Globals.This_Obj = pobj;
 8002812:	60d0      	str	r0, [r2, #12]
  switch (pobj->Type)
 8002814:	2b01      	cmp	r3, #1
 8002816:	d801      	bhi.n	800281c <TSL_obj_SetGlobalObj+0x10>
  {
#if TSLPRM_TOTAL_TKEYS > 0
    case TSL_OBJ_TOUCHKEY:
    case TSL_OBJ_TOUCHKEYB:
      TSL_Globals.This_TKey = (TSL_TouchKey_T *)pobj->Elmt;
 8002818:	6843      	ldr	r3, [r0, #4]
 800281a:	6153      	str	r3, [r2, #20]
      break;
#endif
    default:
      break;
  }
}
 800281c:	4770      	bx	lr
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	20000d88 	.word	0x20000d88

08002824 <TSL_obj_GroupInit>:
{
 8002824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  objgrp->Change = TSL_STATE_NOT_CHANGED;
 8002826:	2500      	movs	r5, #0
{
 8002828:	0004      	movs	r4, r0
  pobj = objgrp->p_Obj; // First object in the group
 800282a:	6806      	ldr	r6, [r0, #0]
  objgrp->Change = TSL_STATE_NOT_CHANGED;
 800282c:	7205      	strb	r5, [r0, #8]
  for (idx_obj = 0; idx_obj < objgrp->NbObjects; idx_obj++)
 800282e:	9501      	str	r5, [sp, #4]
 8002830:	88a3      	ldrh	r3, [r4, #4]
 8002832:	9a01      	ldr	r2, [sp, #4]
 8002834:	4293      	cmp	r3, r2
 8002836:	d801      	bhi.n	800283c <TSL_obj_GroupInit+0x18>
  objgrp->StateMask = objgrp_state_mask;
 8002838:	80e5      	strh	r5, [r4, #6]
}
 800283a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    TSL_obj_SetGlobalObj(pobj);
 800283c:	0030      	movs	r0, r6
 800283e:	f7ff ffe5 	bl	800280c <TSL_obj_SetGlobalObj>
    switch (pobj->Type)
 8002842:	7833      	ldrb	r3, [r6, #0]
 8002844:	2b10      	cmp	r3, #16
 8002846:	d111      	bne.n	800286c <TSL_obj_GroupInit+0x48>
        TSL_Globals.This_TKey->p_Methods->Init();
 8002848:	4f0b      	ldr	r7, [pc, #44]	; (8002878 <TSL_obj_GroupInit+0x54>)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4798      	blx	r3
        if (TSL_Globals.This_TKey->p_Data->Change)
 8002852:	2040      	movs	r0, #64	; 0x40
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	6813      	ldr	r3, [r2, #0]
 8002858:	7899      	ldrb	r1, [r3, #2]
 800285a:	4201      	tst	r1, r0
 800285c:	d001      	beq.n	8002862 <TSL_obj_GroupInit+0x3e>
          objgrp->Change = TSL_STATE_CHANGED;
 800285e:	2101      	movs	r1, #1
 8002860:	7221      	strb	r1, [r4, #8]
        objgrp_state_mask |= TSL_Globals.This_TKey->p_SM[TSL_Globals.This_TKey->p_Data->StateId].StateMask;
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	5c9b      	ldrb	r3, [r3, r2]
 800286a:	431d      	orrs	r5, r3
  for (idx_obj = 0; idx_obj < objgrp->NbObjects; idx_obj++)
 800286c:	9b01      	ldr	r3, [sp, #4]
    pobj++; // Next object
 800286e:	3608      	adds	r6, #8
  for (idx_obj = 0; idx_obj < objgrp->NbObjects; idx_obj++)
 8002870:	3301      	adds	r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	e7db      	b.n	8002830 <TSL_obj_GroupInit+0xc>
 8002878:	20000d88 	.word	0x20000d88

0800287c <TSL_tim_ProcessIT>:
  // Count 1 global tick every xxx ms (defined by TSLPRM_TICK_FREQ parameter)
  TSL_Globals.Tick_ms++;

  // Check if 1 second has elapsed
  count_1s++;
  if (count_1s > (TSLPRM_TICK_FREQ - 1))
 800287c:	20fa      	movs	r0, #250	; 0xfa
  TSL_Globals.Tick_ms++;
 800287e:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <TSL_tim_ProcessIT+0x30>)
  count_1s++;
 8002880:	490b      	ldr	r1, [pc, #44]	; (80028b0 <TSL_tim_ProcessIT+0x34>)
  TSL_Globals.Tick_ms++;
 8002882:	8813      	ldrh	r3, [r2, #0]
  if (count_1s > (TSLPRM_TICK_FREQ - 1))
 8002884:	0080      	lsls	r0, r0, #2
  TSL_Globals.Tick_ms++;
 8002886:	3301      	adds	r3, #1
 8002888:	8013      	strh	r3, [r2, #0]
  count_1s++;
 800288a:	880b      	ldrh	r3, [r1, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	b29b      	uxth	r3, r3
 8002890:	800b      	strh	r3, [r1, #0]
  if (count_1s > (TSLPRM_TICK_FREQ - 1))
 8002892:	4283      	cmp	r3, r0
 8002894:	d307      	bcc.n	80028a6 <TSL_tim_ProcessIT+0x2a>
  {
    TSL_Globals.Tick_sec++; // 1 global tick every second
 8002896:	7893      	ldrb	r3, [r2, #2]
 8002898:	2000      	movs	r0, #0
 800289a:	3301      	adds	r3, #1
 800289c:	b2db      	uxtb	r3, r3
    if (TSL_Globals.Tick_sec > 63)  // Due to DTO counter on 6 bits...
 800289e:	2b3f      	cmp	r3, #63	; 0x3f
 80028a0:	d802      	bhi.n	80028a8 <TSL_tim_ProcessIT+0x2c>
    TSL_Globals.Tick_sec++; // 1 global tick every second
 80028a2:	7093      	strb	r3, [r2, #2]
    {
      TSL_Globals.Tick_sec = 0;
    }
    count_1s = 0;
 80028a4:	8008      	strh	r0, [r1, #0]
  }
}
 80028a6:	4770      	bx	lr
      TSL_Globals.Tick_sec = 0;
 80028a8:	7090      	strb	r0, [r2, #2]
 80028aa:	e7fb      	b.n	80028a4 <TSL_tim_ProcessIT+0x28>
 80028ac:	20000d88 	.word	0x20000d88
 80028b0:	20000b74 	.word	0x20000b74

080028b4 <TSL_tkey_Process>:
  */
void TSL_tkey_Process(void)
{
  TSL_StateId_enum_T prev_state_id;

  if ((THIS_DATA_READY != 0) || (THIS_STATEID == TSL_STATEID_OFF))
 80028b4:	2001      	movs	r0, #1
{
 80028b6:	b570      	push	{r4, r5, r6, lr}
  if ((THIS_DATA_READY != 0) || (THIS_STATEID == TSL_STATEID_OFF))
 80028b8:	4d11      	ldr	r5, [pc, #68]	; (8002900 <TSL_tkey_Process+0x4c>)
 80028ba:	696b      	ldr	r3, [r5, #20]
 80028bc:	6819      	ldr	r1, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	780c      	ldrb	r4, [r1, #0]
 80028c2:	7811      	ldrb	r1, [r2, #0]
 80028c4:	4201      	tst	r1, r0
 80028c6:	d101      	bne.n	80028cc <TSL_tkey_Process+0x18>
 80028c8:	2c13      	cmp	r4, #19
 80028ca:	d114      	bne.n	80028f6 <TSL_tkey_Process+0x42>
  {

    THIS_DATA_READY = TSL_DATA_NOT_READY; // The new data is processed
 80028cc:	7811      	ldrb	r1, [r2, #0]
 80028ce:	4381      	bics	r1, r0
 80028d0:	7011      	strb	r1, [r2, #0]

    prev_state_id = THIS_STATEID;

#if TSLPRM_TOTAL_TOUCHKEYS > 0
    if (TSL_Globals.This_Obj->Type == TSL_OBJ_TOUCHKEY)
 80028d2:	68ea      	ldr	r2, [r5, #12]
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	2a10      	cmp	r2, #16
 80028d8:	d104      	bne.n	80028e4 <TSL_tkey_Process+0x30>
    {
      // Launch the TKey state function
      TSL_Globals.This_TKey->p_SM[THIS_STATEID].StateFunc();
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	00e2      	lsls	r2, r4, #3
 80028de:	189b      	adds	r3, r3, r2
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4798      	blx	r3
      TSL_Params.p_TKeySM[THIS_STATEID].StateFunc();
    }
#endif

    // Check if the new state has changed
    if (THIS_STATEID == prev_state_id)
 80028e4:	696b      	ldr	r3, [r5, #20]
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	7818      	ldrb	r0, [r3, #0]
 80028ec:	7899      	ldrb	r1, [r3, #2]
 80028ee:	42a0      	cmp	r0, r4
 80028f0:	d102      	bne.n	80028f8 <TSL_tkey_Process+0x44>
    {
      THIS_CHANGE = TSL_STATE_NOT_CHANGED;
 80028f2:	4391      	bics	r1, r2
 80028f4:	7099      	strb	r1, [r3, #2]
      THIS_STATEID = TSL_STATEID_DETECT;
    }
#endif

  }
}
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
      THIS_CHANGE = TSL_STATE_CHANGED;
 80028f8:	430a      	orrs	r2, r1
 80028fa:	709a      	strb	r2, [r3, #2]
}
 80028fc:	e7fb      	b.n	80028f6 <TSL_tkey_Process+0x42>
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	20000d88 	.word	0x20000d88

08002904 <TSL_tkey_SetStateCalibration>:
  * @param[in] delay Delay before calibration starts (stabilization of noise filter)
  * @retval None
  */
void TSL_tkey_SetStateCalibration(TSL_tCounter_T delay)
{
  THIS_STATEID = TSL_STATEID_CALIB;
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <TSL_tkey_SetStateCalibration+0x48>)
{
 8002906:	b530      	push	{r4, r5, lr}
  THIS_STATEID = TSL_STATEID_CALIB;
 8002908:	6959      	ldr	r1, [r3, #20]
 800290a:	2300      	movs	r3, #0
 800290c:	680a      	ldr	r2, [r1, #0]
  THIS_CHANGE = TSL_STATE_CHANGED;
 800290e:	7894      	ldrb	r4, [r2, #2]
  THIS_STATEID = TSL_STATEID_CALIB;
 8002910:	7013      	strb	r3, [r2, #0]
  THIS_CHANGE = TSL_STATE_CHANGED;
 8002912:	3340      	adds	r3, #64	; 0x40
 8002914:	4323      	orrs	r3, r4
 8002916:	7093      	strb	r3, [r2, #2]
  THIS_OBJ_STATUS = TSL_OBJ_STATUS_ON;
 8002918:	688b      	ldr	r3, [r1, #8]
 800291a:	2118      	movs	r1, #24
 800291c:	781c      	ldrb	r4, [r3, #0]
 800291e:	4321      	orrs	r1, r4
 8002920:	7019      	strb	r1, [r3, #0]

  switch (TSL_Params.NbCalibSamples)
 8002922:	490b      	ldr	r1, [pc, #44]	; (8002950 <TSL_tkey_SetStateCalibration+0x4c>)
 8002924:	4c0b      	ldr	r4, [pc, #44]	; (8002954 <TSL_tkey_SetStateCalibration+0x50>)
 8002926:	888d      	ldrh	r5, [r1, #4]
 8002928:	2d04      	cmp	r5, #4
 800292a:	d005      	beq.n	8002938 <TSL_tkey_SetStateCalibration+0x34>
 800292c:	2d10      	cmp	r5, #16
 800292e:	d00b      	beq.n	8002948 <TSL_tkey_SetStateCalibration+0x44>
      break;
    case 16:
      CalibDiv = 4;
      break;
    default:
      TSL_Params.NbCalibSamples =  8;
 8002930:	2508      	movs	r5, #8
 8002932:	808d      	strh	r5, [r1, #4]
      CalibDiv = 3;
 8002934:	3d05      	subs	r5, #5
 8002936:	e000      	b.n	800293a <TSL_tkey_SetStateCalibration+0x36>
      CalibDiv = 2;
 8002938:	2502      	movs	r5, #2
      CalibDiv = 3;
 800293a:	8025      	strh	r5, [r4, #0]
      break;
  }

  // If a noise filter is used, the counter must be initialized to a value
  // different from 0 in order to stabilize the filter.
  THIS_COUNTER_DEB = (TSL_tCounter_T)(delay + (TSL_tCounter_T)TSL_Params.NbCalibSamples);
 800293c:	8889      	ldrh	r1, [r1, #4]
 800293e:	1840      	adds	r0, r0, r1
 8002940:	7050      	strb	r0, [r2, #1]
  THIS_REF = 0;
 8002942:	2200      	movs	r2, #0
 8002944:	809a      	strh	r2, [r3, #4]
}
 8002946:	bd30      	pop	{r4, r5, pc}
      CalibDiv = 4;
 8002948:	2504      	movs	r5, #4
 800294a:	e7f6      	b.n	800293a <TSL_tkey_SetStateCalibration+0x36>
 800294c:	20000d88 	.word	0x20000d88
 8002950:	20000014 	.word	0x20000014
 8002954:	20000b76 	.word	0x20000b76

08002958 <TSL_tkey_Init>:
  THIS_PROXIN_TH    = TSLPRM_TKEY_PROX_IN_TH;
 8002958:	220a      	movs	r2, #10
  THIS_DETECTOUT_TH = TSLPRM_TKEY_DETECT_OUT_TH;
 800295a:	216e      	movs	r1, #110	; 0x6e
  THIS_PROXIN_TH    = TSLPRM_TKEY_PROX_IN_TH;
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <TSL_tkey_Init+0x30>)
{
 800295e:	b510      	push	{r4, lr}
  THIS_PROXIN_TH    = TSLPRM_TKEY_PROX_IN_TH;
 8002960:	695b      	ldr	r3, [r3, #20]
  TSL_tkey_SetStateCalibration(TSLPRM_CALIB_DELAY);
 8002962:	2000      	movs	r0, #0
  THIS_PROXIN_TH    = TSLPRM_TKEY_PROX_IN_TH;
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	701a      	strb	r2, [r3, #0]
  THIS_PROXOUT_TH   = TSLPRM_TKEY_PROX_OUT_TH;
 8002968:	3a05      	subs	r2, #5
 800296a:	705a      	strb	r2, [r3, #1]
  THIS_DETECTIN_TH  = TSLPRM_TKEY_DETECT_IN_TH;
 800296c:	3273      	adds	r2, #115	; 0x73
 800296e:	709a      	strb	r2, [r3, #2]
  THIS_DETECTOUT_TH = TSLPRM_TKEY_DETECT_OUT_TH;
 8002970:	70d9      	strb	r1, [r3, #3]
  THIS_CALIB_TH     = TSLPRM_TKEY_CALIB_TH;
 8002972:	711a      	strb	r2, [r3, #4]
  THIS_COUNTER_DEB_CALIB   = TSLPRM_DEBOUNCE_CALIB;
 8002974:	396b      	subs	r1, #107	; 0x6b
  THIS_COUNTER_DEB_PROX    = TSLPRM_DEBOUNCE_PROX;
 8002976:	3a76      	subs	r2, #118	; 0x76
  THIS_COUNTER_DEB_CALIB   = TSLPRM_DEBOUNCE_CALIB;
 8002978:	7159      	strb	r1, [r3, #5]
  THIS_COUNTER_DEB_PROX    = TSLPRM_DEBOUNCE_PROX;
 800297a:	719a      	strb	r2, [r3, #6]
  THIS_COUNTER_DEB_DETECT  = TSLPRM_DEBOUNCE_DETECT;
 800297c:	71da      	strb	r2, [r3, #7]
  THIS_COUNTER_DEB_RELEASE = TSLPRM_DEBOUNCE_RELEASE;
 800297e:	721a      	strb	r2, [r3, #8]
  THIS_COUNTER_DEB_ERROR   = TSLPRM_DEBOUNCE_ERROR;
 8002980:	7259      	strb	r1, [r3, #9]
  TSL_tkey_SetStateCalibration(TSLPRM_CALIB_DELAY);
 8002982:	f7ff ffbf 	bl	8002904 <TSL_tkey_SetStateCalibration>
}
 8002986:	bd10      	pop	{r4, pc}
 8002988:	20000d88 	.word	0x20000d88

0800298c <TSL_tkey_GetStateMask>:
TSL_StateMask_enum_T TSL_tkey_GetStateMask(void)
{
  TSL_StateMask_enum_T state_mask = TSL_STATEMASK_UNKNOWN;

#if TSLPRM_TOTAL_TOUCHKEYS > 0
  if (TSL_Globals.This_Obj->Type == TSL_OBJ_TOUCHKEY)
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <TSL_tkey_GetStateMask+0x1c>)
  TSL_StateMask_enum_T state_mask = TSL_STATEMASK_UNKNOWN;
 800298e:	2000      	movs	r0, #0
  if (TSL_Globals.This_Obj->Type == TSL_OBJ_TOUCHKEY)
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	7812      	ldrb	r2, [r2, #0]
 8002994:	2a10      	cmp	r2, #16
 8002996:	d105      	bne.n	80029a4 <TSL_tkey_GetStateMask+0x18>
  {
    state_mask = TSL_Globals.This_TKey->p_SM[THIS_STATEID].StateMask;
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	6813      	ldr	r3, [r2, #0]
 800299c:	68d2      	ldr	r2, [r2, #12]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	5c98      	ldrb	r0, [r3, r2]
    state_mask = TSL_Params.p_TKeySM[THIS_STATEID].StateMask;
  }
#endif

  return state_mask;
}
 80029a4:	4770      	bx	lr
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	20000d88 	.word	0x20000d88

080029ac <TSL_tkey_DebReleaseProxStateProcess>:
  * @param  None
  * @retval None
  */
void TSL_tkey_DebReleaseProxStateProcess(void)
{
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <TSL_tkey_DebReleaseProxStateProcess+0x38>)
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	7808      	ldrb	r0, [r1, #0]
 80029b6:	0740      	lsls	r0, r0, #29
 80029b8:	d502      	bpl.n	80029c0 <TSL_tkey_DebReleaseProxStateProcess+0x14>
  }
  else // Acquisition is OK or has NOISE
  {
    if (THIS_DELTA > THIS_PROXOUT_TH)
    {
      THIS_STATEID = TSL_STATEID_PROX; // Go back to the previous state
 80029ba:	2306      	movs	r3, #6
    else
    {
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
      if (THIS_COUNTER_DEB == 0)
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 80029bc:	7013      	strb	r3, [r2, #0]
      }
      // else stay in Debounce Release
    }
  }
}
 80029be:	4770      	bx	lr
    if (THIS_DELTA > THIS_PROXOUT_TH)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2008      	movs	r0, #8
 80029c4:	5e09      	ldrsh	r1, [r1, r0]
 80029c6:	785b      	ldrb	r3, [r3, #1]
 80029c8:	4299      	cmp	r1, r3
 80029ca:	dcf6      	bgt.n	80029ba <TSL_tkey_DebReleaseProxStateProcess+0xe>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 80029cc:	7853      	ldrb	r3, [r2, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <TSL_tkey_DebReleaseProxStateProcess+0x2a>
        THIS_STATEID = TSL_STATEID_RELEASE;
 80029d2:	2302      	movs	r3, #2
 80029d4:	e7f2      	b.n	80029bc <TSL_tkey_DebReleaseProxStateProcess+0x10>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	7053      	strb	r3, [r2, #1]
      if (THIS_COUNTER_DEB == 0)
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ee      	bne.n	80029be <TSL_tkey_DebReleaseProxStateProcess+0x12>
 80029e0:	e7f7      	b.n	80029d2 <TSL_tkey_DebReleaseProxStateProcess+0x26>
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	20000d88 	.word	0x20000d88

080029e8 <TSL_tkey_DebReleaseDetectStateProcess>:
  * @param  None
  * @retval None
  */
void TSL_tkey_DebReleaseDetectStateProcess(void)
{
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <TSL_tkey_DebReleaseDetectStateProcess+0x40>)
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	6899      	ldr	r1, [r3, #8]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	7808      	ldrb	r0, [r1, #0]
 80029f2:	0740      	lsls	r0, r0, #29
 80029f4:	d502      	bpl.n	80029fc <TSL_tkey_DebReleaseDetectStateProcess+0x14>
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
    {
      TEST_DELTA_NEGATIVE;
      THIS_STATEID = TSL_STATEID_DETECT;
 80029f6:	230a      	movs	r3, #10
      }
#endif
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
      if (THIS_COUNTER_DEB == 0)
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 80029f8:	7013      	strb	r3, [r2, #0]
      }
      // else stay in Debounce Release
    }
  }
}
 80029fa:	4770      	bx	lr
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2008      	movs	r0, #8
 8002a00:	5e09      	ldrsh	r1, [r1, r0]
 8002a02:	78d8      	ldrb	r0, [r3, #3]
 8002a04:	4281      	cmp	r1, r0
 8002a06:	dcf6      	bgt.n	80029f6 <TSL_tkey_DebReleaseDetectStateProcess+0xe>
      if (THIS_DELTA > THIS_PROXOUT_TH)
 8002a08:	785b      	ldrb	r3, [r3, #1]
 8002a0a:	4299      	cmp	r1, r3
 8002a0c:	dd01      	ble.n	8002a12 <TSL_tkey_DebReleaseDetectStateProcess+0x2a>
        THIS_STATEID = TSL_STATEID_PROX;
 8002a0e:	2306      	movs	r3, #6
 8002a10:	e7f2      	b.n	80029f8 <TSL_tkey_DebReleaseDetectStateProcess+0x10>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002a12:	7853      	ldrb	r3, [r2, #1]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <TSL_tkey_DebReleaseDetectStateProcess+0x34>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e7ed      	b.n	80029f8 <TSL_tkey_DebReleaseDetectStateProcess+0x10>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	7053      	strb	r3, [r2, #1]
      if (THIS_COUNTER_DEB == 0)
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e9      	bne.n	80029fa <TSL_tkey_DebReleaseDetectStateProcess+0x12>
 8002a26:	e7f7      	b.n	8002a18 <TSL_tkey_DebReleaseDetectStateProcess+0x30>
 8002a28:	20000d88 	.word	0x20000d88

08002a2c <TSL_tkey_DebReleaseTouchStateProcess>:
  * @param  None
  * @retval None
  */
void TSL_tkey_DebReleaseTouchStateProcess(void)
{
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <TSL_tkey_DebReleaseTouchStateProcess+0x40>)
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	7808      	ldrb	r0, [r1, #0]
 8002a36:	0740      	lsls	r0, r0, #29
 8002a38:	d502      	bpl.n	8002a40 <TSL_tkey_DebReleaseTouchStateProcess+0x14>
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
    {
      TEST_DELTA_NEGATIVE;
      THIS_STATEID = TSL_STATEID_TOUCH;
 8002a3a:	230c      	movs	r3, #12
      }
#endif
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
      if (THIS_COUNTER_DEB == 0)
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002a3c:	7013      	strb	r3, [r2, #0]
      }
      // else stay in Debounce Release
    }
  }
}
 8002a3e:	4770      	bx	lr
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2008      	movs	r0, #8
 8002a44:	5e09      	ldrsh	r1, [r1, r0]
 8002a46:	78d8      	ldrb	r0, [r3, #3]
 8002a48:	4281      	cmp	r1, r0
 8002a4a:	dcf6      	bgt.n	8002a3a <TSL_tkey_DebReleaseTouchStateProcess+0xe>
      if (THIS_DELTA > THIS_PROXOUT_TH)
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	4299      	cmp	r1, r3
 8002a50:	dd01      	ble.n	8002a56 <TSL_tkey_DebReleaseTouchStateProcess+0x2a>
        THIS_STATEID = TSL_STATEID_PROX;
 8002a52:	2306      	movs	r3, #6
 8002a54:	e7f2      	b.n	8002a3c <TSL_tkey_DebReleaseTouchStateProcess+0x10>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002a56:	7853      	ldrb	r3, [r2, #1]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <TSL_tkey_DebReleaseTouchStateProcess+0x34>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e7ed      	b.n	8002a3c <TSL_tkey_DebReleaseTouchStateProcess+0x10>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	7053      	strb	r3, [r2, #1]
      if (THIS_COUNTER_DEB == 0)
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e9      	bne.n	8002a3e <TSL_tkey_DebReleaseTouchStateProcess+0x12>
 8002a6a:	e7f7      	b.n	8002a5c <TSL_tkey_DebReleaseTouchStateProcess+0x30>
 8002a6c:	20000d88 	.word	0x20000d88

08002a70 <TSL_tkey_ReleaseStateProcess>:
  * @param  None
  * @retval None
  */
void TSL_tkey_ReleaseStateProcess(void)
{
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <TSL_tkey_ReleaseStateProcess+0x74>)
{
 8002a72:	b510      	push	{r4, lr}
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	6891      	ldr	r1, [r2, #8]
 8002a78:	6853      	ldr	r3, [r2, #4]
 8002a7a:	7808      	ldrb	r0, [r1, #0]
 8002a7c:	0740      	lsls	r0, r0, #29
 8002a7e:	d509      	bpl.n	8002a94 <TSL_tkey_ReleaseStateProcess+0x24>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	7a5b      	ldrb	r3, [r3, #9]
 8002a84:	7053      	strb	r3, [r2, #1]
    if (THIS_COUNTER_DEB == 0)
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <TSL_tkey_ReleaseStateProcess+0x20>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8002a8a:	330d      	adds	r3, #13
      {
        TSL_tkey_SetStateCalibration(0);
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_CALIB;
 8002a8c:	7013      	strb	r3, [r2, #0]
 8002a8e:	e027      	b.n	8002ae0 <TSL_tkey_ReleaseStateProcess+0x70>
      THIS_STATEID = TSL_STATEID_DEB_ERROR_RELEASE;
 8002a90:	230f      	movs	r3, #15
 8002a92:	e7fb      	b.n	8002a8c <TSL_tkey_ReleaseStateProcess+0x1c>
    if TEST_DELTA(>=, THIS_DETECTIN_TH)
 8002a94:	2008      	movs	r0, #8
 8002a96:	5e08      	ldrsh	r0, [r1, r0]
 8002a98:	7899      	ldrb	r1, [r3, #2]
 8002a9a:	4288      	cmp	r0, r1
 8002a9c:	db08      	blt.n	8002ab0 <TSL_tkey_ReleaseStateProcess+0x40>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	79db      	ldrb	r3, [r3, #7]
 8002aa2:	7053      	strb	r3, [r2, #1]
      if (THIS_COUNTER_DEB == 0)
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <TSL_tkey_ReleaseStateProcess+0x3c>
        THIS_STATEID = TSL_STATEID_DETECT;
 8002aa8:	330a      	adds	r3, #10
 8002aaa:	e7ef      	b.n	8002a8c <TSL_tkey_ReleaseStateProcess+0x1c>
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 8002aac:	230b      	movs	r3, #11
 8002aae:	e7ed      	b.n	8002a8c <TSL_tkey_ReleaseStateProcess+0x1c>
    if (THIS_DELTA >= THIS_PROXIN_TH)
 8002ab0:	7819      	ldrb	r1, [r3, #0]
 8002ab2:	4288      	cmp	r0, r1
 8002ab4:	db08      	blt.n	8002ac8 <TSL_tkey_ReleaseStateProcess+0x58>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	799b      	ldrb	r3, [r3, #6]
 8002aba:	7053      	strb	r3, [r2, #1]
      if (THIS_COUNTER_DEB == 0)
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <TSL_tkey_ReleaseStateProcess+0x54>
        THIS_STATEID = TSL_STATEID_PROX;
 8002ac0:	3306      	adds	r3, #6
 8002ac2:	e7e3      	b.n	8002a8c <TSL_tkey_ReleaseStateProcess+0x1c>
        THIS_STATEID = TSL_STATEID_DEB_PROX;
 8002ac4:	2307      	movs	r3, #7
 8002ac6:	e7e1      	b.n	8002a8c <TSL_tkey_ReleaseStateProcess+0x1c>
    if TEST_DELTA_N(<=, THIS_CALIB_TH)
 8002ac8:	7919      	ldrb	r1, [r3, #4]
 8002aca:	4249      	negs	r1, r1
 8002acc:	4288      	cmp	r0, r1
 8002ace:	dc07      	bgt.n	8002ae0 <TSL_tkey_ReleaseStateProcess+0x70>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_CALIB;
 8002ad0:	7958      	ldrb	r0, [r3, #5]
 8002ad2:	6812      	ldr	r2, [r2, #0]
        THIS_STATEID = TSL_STATEID_DEB_CALIB;
 8002ad4:	2301      	movs	r3, #1
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_CALIB;
 8002ad6:	7050      	strb	r0, [r2, #1]
      if (THIS_COUNTER_DEB == 0)
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d1d7      	bne.n	8002a8c <TSL_tkey_ReleaseStateProcess+0x1c>
        TSL_tkey_SetStateCalibration(0);
 8002adc:	f7ff ff12 	bl	8002904 <TSL_tkey_SetStateCalibration>
      }
    }
  }
}
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	20000d88 	.word	0x20000d88

08002ae8 <TSL_tkey_DebCalibrationStateProcess>:
  * @param  None
  * @retval None
  */
void TSL_tkey_DebCalibrationStateProcess(void)
{
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <TSL_tkey_DebCalibrationStateProcess+0x40>)
{
 8002aea:	b510      	push	{r4, lr}
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	2102      	movs	r1, #2
 8002af0:	6898      	ldr	r0, [r3, #8]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	7804      	ldrb	r4, [r0, #0]
 8002af6:	0764      	lsls	r4, r4, #29
 8002af8:	d501      	bpl.n	8002afe <TSL_tkey_DebCalibrationStateProcess+0x16>
      }
      // else stay in Debounce Calibration
    }
    else // Go back to previous state
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
 8002afa:	7011      	strb	r1, [r2, #0]
    }
  }
}
 8002afc:	e00c      	b.n	8002b18 <TSL_tkey_DebCalibrationStateProcess+0x30>
    if TEST_DELTA_N(<=, THIS_CALIB_TH)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2408      	movs	r4, #8
 8002b02:	5f00      	ldrsh	r0, [r0, r4]
 8002b04:	791b      	ldrb	r3, [r3, #4]
 8002b06:	425b      	negs	r3, r3
 8002b08:	4298      	cmp	r0, r3
 8002b0a:	dcf6      	bgt.n	8002afa <TSL_tkey_DebCalibrationStateProcess+0x12>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002b0c:	7853      	ldrb	r3, [r2, #1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <TSL_tkey_DebCalibrationStateProcess+0x32>
        TSL_tkey_SetStateCalibration(0);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7ff fef6 	bl	8002904 <TSL_tkey_SetStateCalibration>
}
 8002b18:	bd10      	pop	{r4, pc}
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	7053      	strb	r3, [r2, #1]
      if (THIS_COUNTER_DEB == 0)
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f9      	bne.n	8002b18 <TSL_tkey_DebCalibrationStateProcess+0x30>
 8002b24:	e7f5      	b.n	8002b12 <TSL_tkey_DebCalibrationStateProcess+0x2a>
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	20000d88 	.word	0x20000d88

08002b2c <TSL_tkey_CalibrationStateProcess>:
  * @brief  Calibration state processing
  * @param  None
  * @retval None
  */
void TSL_tkey_CalibrationStateProcess(void)
{
 8002b2c:	b570      	push	{r4, r5, r6, lr}
    THIS_COUNTER_DEB--;
    return; // Skip the sample
  }
#endif

  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002b2e:	4c22      	ldr	r4, [pc, #136]	; (8002bb8 <TSL_tkey_CalibrationStateProcess+0x8c>)
 8002b30:	2602      	movs	r6, #2
 8002b32:	6965      	ldr	r5, [r4, #20]
 8002b34:	68a8      	ldr	r0, [r5, #8]
 8002b36:	682a      	ldr	r2, [r5, #0]
 8002b38:	7803      	ldrb	r3, [r0, #0]
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	4031      	ands	r1, r6
 8002b40:	4233      	tst	r3, r6
 8002b42:	d009      	beq.n	8002b58 <TSL_tkey_CalibrationStateProcess+0x2c>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8002b44:	686b      	ldr	r3, [r5, #4]
 8002b46:	7a5b      	ldrb	r3, [r3, #9]
 8002b48:	7053      	strb	r3, [r2, #1]
    if (THIS_COUNTER_DEB == 0)
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <TSL_tkey_CalibrationStateProcess+0x26>

      // Check reference overflow
      if (THIS_REF < new_meas)
      {
        THIS_REF = 0; // Suppress the bad reference
        THIS_STATEID = TSL_STATEID_ERROR;
 8002b4e:	230d      	movs	r3, #13
 8002b50:	e000      	b.n	8002b54 <TSL_tkey_CalibrationStateProcess+0x28>
      THIS_STATEID = TSL_STATEID_DEB_ERROR_CALIB;
 8002b52:	230e      	movs	r3, #14
    {
      // Divide temporary Reference by the number of samples
      THIS_REF >>= CalibDiv;
      THIS_REFREST = 0;
      THIS_DELTA = 0;
      THIS_STATEID = TSL_STATEID_RELEASE;
 8002b54:	7013      	strb	r3, [r2, #0]
 8002b56:	e01e      	b.n	8002b96 <TSL_tkey_CalibrationStateProcess+0x6a>
    if (THIS_COUNTER_DEB == (TSL_tCounter_T)TSL_Params.NbCalibSamples)
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <TSL_tkey_CalibrationStateProcess+0x90>)
 8002b5a:	7856      	ldrb	r6, [r2, #1]
 8002b5c:	791b      	ldrb	r3, [r3, #4]
    new_meas = THIS_MEAS;
 8002b5e:	8945      	ldrh	r5, [r0, #10]
    if (THIS_COUNTER_DEB == (TSL_tCounter_T)TSL_Params.NbCalibSamples)
 8002b60:	429e      	cmp	r6, r3
 8002b62:	d119      	bne.n	8002b98 <TSL_tkey_CalibrationStateProcess+0x6c>
      if (TSL_acq_TestFirstReferenceIsValid(THIS_CHANNEL_DATA, new_meas))
 8002b64:	0029      	movs	r1, r5
 8002b66:	f7ff fe4f 	bl	8002808 <TSL_acq_TestFirstReferenceIsValid>
        THIS_REF = new_meas;
 8002b6a:	6963      	ldr	r3, [r4, #20]
 8002b6c:	689b      	ldr	r3, [r3, #8]
      if (TSL_acq_TestFirstReferenceIsValid(THIS_CHANNEL_DATA, new_meas))
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	d010      	beq.n	8002b94 <TSL_tkey_CalibrationStateProcess+0x68>
        THIS_REF = new_meas;
 8002b72:	809d      	strh	r5, [r3, #4]
    if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002b74:	6961      	ldr	r1, [r4, #20]
 8002b76:	680a      	ldr	r2, [r1, #0]
 8002b78:	7853      	ldrb	r3, [r2, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d115      	bne.n	8002baa <TSL_tkey_CalibrationStateProcess+0x7e>
      THIS_REF >>= CalibDiv;
 8002b7e:	688b      	ldr	r3, [r1, #8]
 8002b80:	480f      	ldr	r0, [pc, #60]	; (8002bc0 <TSL_tkey_CalibrationStateProcess+0x94>)
 8002b82:	8899      	ldrh	r1, [r3, #4]
 8002b84:	8800      	ldrh	r0, [r0, #0]
 8002b86:	4101      	asrs	r1, r0
 8002b88:	8099      	strh	r1, [r3, #4]
      THIS_REFREST = 0;
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	7199      	strb	r1, [r3, #6]
      THIS_DELTA = 0;
 8002b8e:	8119      	strh	r1, [r3, #8]
      THIS_STATEID = TSL_STATEID_RELEASE;
 8002b90:	2302      	movs	r3, #2
 8002b92:	e7df      	b.n	8002b54 <TSL_tkey_CalibrationStateProcess+0x28>
        THIS_REF = 0;
 8002b94:	8098      	strh	r0, [r3, #4]
    }
  }
}
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
      THIS_REF += new_meas;
 8002b98:	8883      	ldrh	r3, [r0, #4]
 8002b9a:	18eb      	adds	r3, r5, r3
 8002b9c:	b29b      	uxth	r3, r3
      if (THIS_REF < new_meas)
 8002b9e:	42ab      	cmp	r3, r5
 8002ba0:	d201      	bcs.n	8002ba6 <TSL_tkey_CalibrationStateProcess+0x7a>
        THIS_REF = 0; // Suppress the bad reference
 8002ba2:	8081      	strh	r1, [r0, #4]
 8002ba4:	e7d3      	b.n	8002b4e <TSL_tkey_CalibrationStateProcess+0x22>
      THIS_REF += new_meas;
 8002ba6:	8083      	strh	r3, [r0, #4]
 8002ba8:	e7e4      	b.n	8002b74 <TSL_tkey_CalibrationStateProcess+0x48>
    if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	7053      	strb	r3, [r2, #1]
    if (THIS_COUNTER_DEB == 0)
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <TSL_tkey_CalibrationStateProcess+0x6a>
 8002bb4:	e7e3      	b.n	8002b7e <TSL_tkey_CalibrationStateProcess+0x52>
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	20000d88 	.word	0x20000d88
 8002bbc:	20000014 	.word	0x20000014
 8002bc0:	20000b76 	.word	0x20000b76

08002bc4 <TSL_tkey_DebProxStateProcess>:
  * @param  None
  * @retval None
  */
void TSL_tkey_DebProxStateProcess(void)
{
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <TSL_tkey_DebProxStateProcess+0x50>)
{
 8002bc6:	b510      	push	{r4, lr}
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	2102      	movs	r1, #2
 8002bcc:	6890      	ldr	r0, [r2, #8]
 8002bce:	6813      	ldr	r3, [r2, #0]
 8002bd0:	7804      	ldrb	r4, [r0, #0]
 8002bd2:	0764      	lsls	r4, r4, #29
 8002bd4:	d501      	bpl.n	8002bda <TSL_tkey_DebProxStateProcess+0x16>
      }
      // else stay in Debounce Proximity
    }
    else
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
 8002bd6:	7019      	strb	r1, [r3, #0]
 8002bd8:	e00b      	b.n	8002bf2 <TSL_tkey_DebProxStateProcess+0x2e>
    if TEST_DELTA(>=, THIS_DETECTIN_TH)
 8002bda:	6852      	ldr	r2, [r2, #4]
 8002bdc:	2408      	movs	r4, #8
 8002bde:	5f00      	ldrsh	r0, [r0, r4]
 8002be0:	7894      	ldrb	r4, [r2, #2]
 8002be2:	42a0      	cmp	r0, r4
 8002be4:	db08      	blt.n	8002bf8 <TSL_tkey_DebProxStateProcess+0x34>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 8002be6:	79d2      	ldrb	r2, [r2, #7]
 8002be8:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8002bea:	2a00      	cmp	r2, #0
 8002bec:	d102      	bne.n	8002bf4 <TSL_tkey_DebProxStateProcess+0x30>
        THIS_STATEID = TSL_STATEID_DETECT;
 8002bee:	320a      	adds	r2, #10
        THIS_STATEID = TSL_STATEID_PROX;
 8002bf0:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8002bf2:	bd10      	pop	{r4, pc}
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 8002bf4:	220b      	movs	r2, #11
 8002bf6:	e7fb      	b.n	8002bf0 <TSL_tkey_DebProxStateProcess+0x2c>
    if (THIS_DELTA >= THIS_PROXIN_TH)
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	4290      	cmp	r0, r2
 8002bfc:	dbeb      	blt.n	8002bd6 <TSL_tkey_DebProxStateProcess+0x12>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002bfe:	785a      	ldrb	r2, [r3, #1]
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	d101      	bne.n	8002c08 <TSL_tkey_DebProxStateProcess+0x44>
        THIS_STATEID = TSL_STATEID_PROX;
 8002c04:	2206      	movs	r2, #6
 8002c06:	e7f3      	b.n	8002bf0 <TSL_tkey_DebProxStateProcess+0x2c>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	d1ef      	bne.n	8002bf2 <TSL_tkey_DebProxStateProcess+0x2e>
 8002c12:	e7f7      	b.n	8002c04 <TSL_tkey_DebProxStateProcess+0x40>
 8002c14:	20000d88 	.word	0x20000d88

08002c18 <TSL_tkey_DebProxDetectStateProcess>:
  * @param  None
  * @retval None
  */
void TSL_tkey_DebProxDetectStateProcess(void)
{
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <TSL_tkey_DebProxDetectStateProcess+0x4c>)
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	6891      	ldr	r1, [r2, #8]
 8002c1e:	6813      	ldr	r3, [r2, #0]
 8002c20:	7808      	ldrb	r0, [r1, #0]
 8002c22:	0740      	lsls	r0, r0, #29
 8002c24:	d502      	bpl.n	8002c2c <TSL_tkey_DebProxDetectStateProcess+0x14>
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
    {
      TEST_DELTA_NEGATIVE;
      THIS_STATEID = TSL_STATEID_DETECT;
 8002c26:	220a      	movs	r2, #10
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e012      	b.n	8002c52 <TSL_tkey_DebProxDetectStateProcess+0x3a>
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 8002c2c:	6852      	ldr	r2, [r2, #4]
 8002c2e:	2008      	movs	r0, #8
 8002c30:	5e09      	ldrsh	r1, [r1, r0]
 8002c32:	78d0      	ldrb	r0, [r2, #3]
 8002c34:	4281      	cmp	r1, r0
 8002c36:	dcf6      	bgt.n	8002c26 <TSL_tkey_DebProxDetectStateProcess+0xe>
    if (THIS_DELTA > THIS_PROXOUT_TH)
 8002c38:	7850      	ldrb	r0, [r2, #1]
 8002c3a:	4281      	cmp	r1, r0
 8002c3c:	dd0a      	ble.n	8002c54 <TSL_tkey_DebProxDetectStateProcess+0x3c>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002c3e:	785a      	ldrb	r2, [r3, #1]
 8002c40:	2a00      	cmp	r2, #0
 8002c42:	d101      	bne.n	8002c48 <TSL_tkey_DebProxDetectStateProcess+0x30>
        THIS_STATEID = TSL_STATEID_PROX;
 8002c44:	2206      	movs	r2, #6
 8002c46:	e7ef      	b.n	8002c28 <TSL_tkey_DebProxDetectStateProcess+0x10>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002c48:	3a01      	subs	r2, #1
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	d0f8      	beq.n	8002c44 <TSL_tkey_DebProxDetectStateProcess+0x2c>
      }
    }
  }
}
 8002c52:	4770      	bx	lr
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8002c54:	7a12      	ldrb	r2, [r2, #8]
 8002c56:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8002c58:	2a00      	cmp	r2, #0
 8002c5a:	d101      	bne.n	8002c60 <TSL_tkey_DebProxDetectStateProcess+0x48>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002c5c:	3202      	adds	r2, #2
 8002c5e:	e7e3      	b.n	8002c28 <TSL_tkey_DebProxDetectStateProcess+0x10>
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 8002c60:	2204      	movs	r2, #4
 8002c62:	e7e1      	b.n	8002c28 <TSL_tkey_DebProxDetectStateProcess+0x10>
 8002c64:	20000d88 	.word	0x20000d88

08002c68 <TSL_tkey_DebProxTouchStateProcess>:
  * @param  None
  * @retval None
  */
void TSL_tkey_DebProxTouchStateProcess(void)
{
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <TSL_tkey_DebProxTouchStateProcess+0x4c>)
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	6891      	ldr	r1, [r2, #8]
 8002c6e:	6813      	ldr	r3, [r2, #0]
 8002c70:	7808      	ldrb	r0, [r1, #0]
 8002c72:	0740      	lsls	r0, r0, #29
 8002c74:	d502      	bpl.n	8002c7c <TSL_tkey_DebProxTouchStateProcess+0x14>
  else // Acquisition is OK or has NOISE
  {
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
    {
      TEST_DELTA_NEGATIVE;
      THIS_STATEID = TSL_STATEID_TOUCH;
 8002c76:	220c      	movs	r2, #12
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	e012      	b.n	8002ca2 <TSL_tkey_DebProxTouchStateProcess+0x3a>
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 8002c7c:	6852      	ldr	r2, [r2, #4]
 8002c7e:	2008      	movs	r0, #8
 8002c80:	5e09      	ldrsh	r1, [r1, r0]
 8002c82:	78d0      	ldrb	r0, [r2, #3]
 8002c84:	4281      	cmp	r1, r0
 8002c86:	dcf6      	bgt.n	8002c76 <TSL_tkey_DebProxTouchStateProcess+0xe>
    if (THIS_DELTA > THIS_PROXOUT_TH)
 8002c88:	7850      	ldrb	r0, [r2, #1]
 8002c8a:	4281      	cmp	r1, r0
 8002c8c:	dd0a      	ble.n	8002ca4 <TSL_tkey_DebProxTouchStateProcess+0x3c>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002c8e:	785a      	ldrb	r2, [r3, #1]
 8002c90:	2a00      	cmp	r2, #0
 8002c92:	d101      	bne.n	8002c98 <TSL_tkey_DebProxTouchStateProcess+0x30>
        THIS_STATEID = TSL_STATEID_PROX;
 8002c94:	2206      	movs	r2, #6
 8002c96:	e7ef      	b.n	8002c78 <TSL_tkey_DebProxTouchStateProcess+0x10>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d0f8      	beq.n	8002c94 <TSL_tkey_DebProxTouchStateProcess+0x2c>
      }
    }
  }
}
 8002ca2:	4770      	bx	lr
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8002ca4:	7a12      	ldrb	r2, [r2, #8]
 8002ca6:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8002ca8:	2a00      	cmp	r2, #0
 8002caa:	d101      	bne.n	8002cb0 <TSL_tkey_DebProxTouchStateProcess+0x48>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002cac:	3202      	adds	r2, #2
 8002cae:	e7e3      	b.n	8002c78 <TSL_tkey_DebProxTouchStateProcess+0x10>
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 8002cb0:	2205      	movs	r2, #5
 8002cb2:	e7e1      	b.n	8002c78 <TSL_tkey_DebProxTouchStateProcess+0x10>
 8002cb4:	20000d88 	.word	0x20000d88

08002cb8 <TSL_tkey_ProxStateProcess>:
{
#if TSLPRM_DTO > 0
  TSL_tTick_sec_T tick_detected;
#endif

  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <TSL_tkey_ProxStateProcess+0x58>)
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	6891      	ldr	r1, [r2, #8]
 8002cbe:	6853      	ldr	r3, [r2, #4]
 8002cc0:	7808      	ldrb	r0, [r1, #0]
 8002cc2:	0740      	lsls	r0, r0, #29
 8002cc4:	d509      	bpl.n	8002cda <TSL_tkey_ProxStateProcess+0x22>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	7a5b      	ldrb	r3, [r3, #9]
 8002cca:	7053      	strb	r3, [r2, #1]
    if (THIS_COUNTER_DEB == 0)
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <TSL_tkey_ProxStateProcess+0x1e>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8002cd0:	330d      	adds	r3, #13
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
      }
      else
      {
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_PROX;
 8002cd2:	7013      	strb	r3, [r2, #0]
      }
    }
#endif

  }
}
 8002cd4:	4770      	bx	lr
      THIS_STATEID = TSL_STATEID_DEB_ERROR_PROX;
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	e7fb      	b.n	8002cd2 <TSL_tkey_ProxStateProcess+0x1a>
    if TEST_DELTA(>=, THIS_DETECTIN_TH)
 8002cda:	2008      	movs	r0, #8
 8002cdc:	5e09      	ldrsh	r1, [r1, r0]
 8002cde:	7898      	ldrb	r0, [r3, #2]
 8002ce0:	4281      	cmp	r1, r0
 8002ce2:	db08      	blt.n	8002cf6 <TSL_tkey_ProxStateProcess+0x3e>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_DETECT;
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	79db      	ldrb	r3, [r3, #7]
 8002ce8:	7053      	strb	r3, [r2, #1]
      if (THIS_COUNTER_DEB == 0)
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <TSL_tkey_ProxStateProcess+0x3a>
        THIS_STATEID = TSL_STATEID_DETECT;
 8002cee:	330a      	adds	r3, #10
 8002cf0:	e7ef      	b.n	8002cd2 <TSL_tkey_ProxStateProcess+0x1a>
        THIS_STATEID = TSL_STATEID_DEB_DETECT;
 8002cf2:	230b      	movs	r3, #11
 8002cf4:	e7ed      	b.n	8002cd2 <TSL_tkey_ProxStateProcess+0x1a>
    if (THIS_DELTA <= THIS_PROXOUT_TH)
 8002cf6:	7858      	ldrb	r0, [r3, #1]
 8002cf8:	4281      	cmp	r1, r0
 8002cfa:	dceb      	bgt.n	8002cd4 <TSL_tkey_ProxStateProcess+0x1c>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	7a1b      	ldrb	r3, [r3, #8]
 8002d00:	7053      	strb	r3, [r2, #1]
      if (THIS_COUNTER_DEB == 0)
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <TSL_tkey_ProxStateProcess+0x52>
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002d06:	3302      	adds	r3, #2
 8002d08:	e7e3      	b.n	8002cd2 <TSL_tkey_ProxStateProcess+0x1a>
        THIS_STATEID = TSL_STATEID_DEB_RELEASE_PROX;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e7e1      	b.n	8002cd2 <TSL_tkey_ProxStateProcess+0x1a>
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	20000d88 	.word	0x20000d88

08002d14 <TSL_tkey_DebDetectStateProcess>:
  * @param  None
  * @retval None
  */
void TSL_tkey_DebDetectStateProcess(void)
{
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <TSL_tkey_DebDetectStateProcess+0x50>)
{
 8002d16:	b510      	push	{r4, lr}
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	6890      	ldr	r0, [r2, #8]
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	7804      	ldrb	r4, [r0, #0]
 8002d22:	0764      	lsls	r4, r4, #29
 8002d24:	d501      	bpl.n	8002d2a <TSL_tkey_DebDetectStateProcess+0x16>
          THIS_STATEID = TSL_STATEID_DEB_PROX;
        }
      }
      else
      {
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002d26:	7019      	strb	r1, [r3, #0]
#else
      THIS_STATEID = TSL_STATEID_RELEASE;
#endif
    }
  }
}
 8002d28:	e010      	b.n	8002d4c <TSL_tkey_DebDetectStateProcess+0x38>
    if TEST_DELTA(>=, THIS_DETECTIN_TH)
 8002d2a:	6852      	ldr	r2, [r2, #4]
 8002d2c:	2408      	movs	r4, #8
 8002d2e:	5f00      	ldrsh	r0, [r0, r4]
 8002d30:	7894      	ldrb	r4, [r2, #2]
 8002d32:	42a0      	cmp	r0, r4
 8002d34:	db0b      	blt.n	8002d4e <TSL_tkey_DebDetectStateProcess+0x3a>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002d36:	785a      	ldrb	r2, [r3, #1]
 8002d38:	2a00      	cmp	r2, #0
 8002d3a:	d102      	bne.n	8002d42 <TSL_tkey_DebDetectStateProcess+0x2e>
        THIS_STATEID = TSL_STATEID_DETECT;
 8002d3c:	220a      	movs	r2, #10
          THIS_STATEID = TSL_STATEID_DEB_PROX;
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e004      	b.n	8002d4c <TSL_tkey_DebDetectStateProcess+0x38>
      if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002d42:	3a01      	subs	r2, #1
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8002d48:	2a00      	cmp	r2, #0
 8002d4a:	d0f7      	beq.n	8002d3c <TSL_tkey_DebDetectStateProcess+0x28>
}
 8002d4c:	bd10      	pop	{r4, pc}
      if (THIS_DELTA >= THIS_PROXIN_TH)
 8002d4e:	7814      	ldrb	r4, [r2, #0]
 8002d50:	42a0      	cmp	r0, r4
 8002d52:	dbe8      	blt.n	8002d26 <TSL_tkey_DebDetectStateProcess+0x12>
        THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8002d54:	7992      	ldrb	r2, [r2, #6]
 8002d56:	705a      	strb	r2, [r3, #1]
        if (THIS_COUNTER_DEB == 0)
 8002d58:	2a00      	cmp	r2, #0
 8002d5a:	d101      	bne.n	8002d60 <TSL_tkey_DebDetectStateProcess+0x4c>
          THIS_STATEID = TSL_STATEID_PROX;
 8002d5c:	3206      	adds	r2, #6
 8002d5e:	e7ee      	b.n	8002d3e <TSL_tkey_DebDetectStateProcess+0x2a>
          THIS_STATEID = TSL_STATEID_DEB_PROX;
 8002d60:	2207      	movs	r2, #7
 8002d62:	e7ec      	b.n	8002d3e <TSL_tkey_DebDetectStateProcess+0x2a>
 8002d64:	20000d88 	.word	0x20000d88

08002d68 <TSL_tkey_DetectStateProcess>:
{
#if TSLPRM_DTO > 0
  TSL_tTick_sec_T tick_detected;
#endif

  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <TSL_tkey_DetectStateProcess+0x54>)
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	7808      	ldrb	r0, [r1, #0]
 8002d72:	0740      	lsls	r0, r0, #29
 8002d74:	d509      	bpl.n	8002d8a <TSL_tkey_DetectStateProcess+0x22>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	7a52      	ldrb	r2, [r2, #9]
 8002d7a:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d102      	bne.n	8002d86 <TSL_tkey_DetectStateProcess+0x1e>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8002d80:	320d      	adds	r2, #13
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 8002d82:	701a      	strb	r2, [r3, #0]
    }

  }
}
 8002d84:	4770      	bx	lr
      THIS_STATEID = TSL_STATEID_DEB_ERROR_DETECT;
 8002d86:	2211      	movs	r2, #17
 8002d88:	e7fb      	b.n	8002d82 <TSL_tkey_DetectStateProcess+0x1a>
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 8002d8a:	2008      	movs	r0, #8
 8002d8c:	5e09      	ldrsh	r1, [r1, r0]
 8002d8e:	78d0      	ldrb	r0, [r2, #3]
 8002d90:	4281      	cmp	r1, r0
 8002d92:	dcf7      	bgt.n	8002d84 <TSL_tkey_DetectStateProcess+0x1c>
    if (THIS_DELTA > THIS_PROXOUT_TH)
 8002d94:	7850      	ldrb	r0, [r2, #1]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4281      	cmp	r1, r0
 8002d9a:	dd07      	ble.n	8002dac <TSL_tkey_DetectStateProcess+0x44>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8002d9c:	7992      	ldrb	r2, [r2, #6]
 8002d9e:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8002da0:	2a00      	cmp	r2, #0
 8002da2:	d101      	bne.n	8002da8 <TSL_tkey_DetectStateProcess+0x40>
        THIS_STATEID = TSL_STATEID_PROX;
 8002da4:	3206      	adds	r2, #6
 8002da6:	e7ec      	b.n	8002d82 <TSL_tkey_DetectStateProcess+0x1a>
        THIS_STATEID = TSL_STATEID_DEB_PROX_DETECT;
 8002da8:	2208      	movs	r2, #8
 8002daa:	e7ea      	b.n	8002d82 <TSL_tkey_DetectStateProcess+0x1a>
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8002dac:	7a12      	ldrb	r2, [r2, #8]
 8002dae:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 8002db0:	2a00      	cmp	r2, #0
 8002db2:	d101      	bne.n	8002db8 <TSL_tkey_DetectStateProcess+0x50>
      THIS_STATEID = TSL_STATEID_RELEASE;
 8002db4:	3202      	adds	r2, #2
 8002db6:	e7e4      	b.n	8002d82 <TSL_tkey_DetectStateProcess+0x1a>
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_DETECT;
 8002db8:	2204      	movs	r2, #4
 8002dba:	e7e2      	b.n	8002d82 <TSL_tkey_DetectStateProcess+0x1a>
 8002dbc:	20000d88 	.word	0x20000d88

08002dc0 <TSL_tkey_TouchStateProcess>:
{
#if TSLPRM_DTO > 0
  TSL_tTick_sec_T tick_detected;
#endif

  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002dc0:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <TSL_tkey_TouchStateProcess+0x54>)
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	6899      	ldr	r1, [r3, #8]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	7808      	ldrb	r0, [r1, #0]
 8002dca:	0740      	lsls	r0, r0, #29
 8002dcc:	d509      	bpl.n	8002de2 <TSL_tkey_TouchStateProcess+0x22>
  {
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_ERROR;
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	7a52      	ldrb	r2, [r2, #9]
 8002dd2:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	d102      	bne.n	8002dde <TSL_tkey_TouchStateProcess+0x1e>
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8002dd8:	320d      	adds	r2, #13
    {
      THIS_STATEID = TSL_STATEID_RELEASE;
    }
    else
    {
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 8002dda:	701a      	strb	r2, [r3, #0]
    }

  }
}
 8002ddc:	4770      	bx	lr
      THIS_STATEID = TSL_STATEID_DEB_ERROR_TOUCH;
 8002dde:	2212      	movs	r2, #18
 8002de0:	e7fb      	b.n	8002dda <TSL_tkey_TouchStateProcess+0x1a>
    if TEST_DELTA(>, THIS_DETECTOUT_TH)
 8002de2:	2008      	movs	r0, #8
 8002de4:	5e09      	ldrsh	r1, [r1, r0]
 8002de6:	78d0      	ldrb	r0, [r2, #3]
 8002de8:	4281      	cmp	r1, r0
 8002dea:	dcf7      	bgt.n	8002ddc <TSL_tkey_TouchStateProcess+0x1c>
    if (THIS_DELTA > THIS_PROXOUT_TH)
 8002dec:	7850      	ldrb	r0, [r2, #1]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4281      	cmp	r1, r0
 8002df2:	dd07      	ble.n	8002e04 <TSL_tkey_TouchStateProcess+0x44>
      THIS_COUNTER_DEB = THIS_COUNTER_DEB_PROX;
 8002df4:	7992      	ldrb	r2, [r2, #6]
 8002df6:	705a      	strb	r2, [r3, #1]
      if (THIS_COUNTER_DEB == 0)
 8002df8:	2a00      	cmp	r2, #0
 8002dfa:	d101      	bne.n	8002e00 <TSL_tkey_TouchStateProcess+0x40>
        THIS_STATEID = TSL_STATEID_PROX;
 8002dfc:	3206      	adds	r2, #6
 8002dfe:	e7ec      	b.n	8002dda <TSL_tkey_TouchStateProcess+0x1a>
        THIS_STATEID = TSL_STATEID_DEB_PROX_TOUCH;
 8002e00:	2209      	movs	r2, #9
 8002e02:	e7ea      	b.n	8002dda <TSL_tkey_TouchStateProcess+0x1a>
    THIS_COUNTER_DEB = THIS_COUNTER_DEB_RELEASE;
 8002e04:	7a12      	ldrb	r2, [r2, #8]
 8002e06:	705a      	strb	r2, [r3, #1]
    if (THIS_COUNTER_DEB == 0)
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	d101      	bne.n	8002e10 <TSL_tkey_TouchStateProcess+0x50>
      THIS_STATEID = TSL_STATEID_RELEASE;
 8002e0c:	3202      	adds	r2, #2
 8002e0e:	e7e4      	b.n	8002dda <TSL_tkey_TouchStateProcess+0x1a>
      THIS_STATEID = TSL_STATEID_DEB_RELEASE_TOUCH;
 8002e10:	2205      	movs	r2, #5
 8002e12:	e7e2      	b.n	8002dda <TSL_tkey_TouchStateProcess+0x1a>
 8002e14:	20000d88 	.word	0x20000d88

08002e18 <TSL_tkey_DebErrorStateProcess>:
  */
void TSL_tkey_DebErrorStateProcess(void)
{
  volatile TSL_StateMask_enum_T mask;

  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002e18:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <TSL_tkey_DebErrorStateProcess+0x70>)
{
 8002e1a:	b513      	push	{r0, r1, r4, lr}
  if (THIS_ACQ_STATUS & TSL_ACQ_STATUS_ERROR_MASK) // Acquisition error (min or max)
 8002e1c:	695c      	ldr	r4, [r3, #20]
 8002e1e:	68a3      	ldr	r3, [r4, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	075b      	lsls	r3, r3, #29
 8002e24:	d50c      	bpl.n	8002e40 <TSL_tkey_DebErrorStateProcess+0x28>
  {
    if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	7853      	ldrb	r3, [r2, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <TSL_tkey_DebErrorStateProcess+0x1c>
    if (THIS_COUNTER_DEB == 0)
    {
      THIS_STATEID = TSL_STATEID_ERROR;
 8002e2e:	230d      	movs	r3, #13
 8002e30:	7013      	strb	r3, [r2, #0]
      default:
        TSL_tkey_SetStateCalibration(0);
        break;
    }
  }
}
 8002e32:	bd13      	pop	{r0, r1, r4, pc}
    if (THIS_COUNTER_DEB > 0) {THIS_COUNTER_DEB--;}
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	7053      	strb	r3, [r2, #1]
    if (THIS_COUNTER_DEB == 0)
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f9      	bne.n	8002e32 <TSL_tkey_DebErrorStateProcess+0x1a>
 8002e3e:	e7f6      	b.n	8002e2e <TSL_tkey_DebErrorStateProcess+0x16>
    mask = TSL_tkey_GetStateMask();
 8002e40:	f7ff fda4 	bl	800298c <TSL_tkey_GetStateMask>
 8002e44:	466b      	mov	r3, sp
    mask &= (TSL_StateMask_enum_T)(~(TSL_STATE_DEBOUNCE_BIT_MASK | TSL_STATE_ERROR_BIT_MASK));
 8002e46:	215f      	movs	r1, #95	; 0x5f
    mask = TSL_tkey_GetStateMask();
 8002e48:	71d8      	strb	r0, [r3, #7]
    mask &= (TSL_StateMask_enum_T)(~(TSL_STATE_DEBOUNCE_BIT_MASK | TSL_STATE_ERROR_BIT_MASK));
 8002e4a:	79da      	ldrb	r2, [r3, #7]
    mask = TSL_tkey_GetStateMask();
 8002e4c:	3307      	adds	r3, #7
    mask &= (TSL_StateMask_enum_T)(~(TSL_STATE_DEBOUNCE_BIT_MASK | TSL_STATE_ERROR_BIT_MASK));
 8002e4e:	400a      	ands	r2, r1
 8002e50:	701a      	strb	r2, [r3, #0]
    switch (mask)
 8002e52:	7818      	ldrb	r0, [r3, #0]
 8002e54:	3801      	subs	r0, #1
 8002e56:	2807      	cmp	r0, #7
 8002e58:	d812      	bhi.n	8002e80 <TSL_tkey_DebErrorStateProcess+0x68>
 8002e5a:	f7fd f955 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002e5e:	0804      	.short	0x0804
 8002e60:	11110b11 	.word	0x11110b11
 8002e64:	0e11      	.short	0x0e11
        THIS_STATEID = TSL_STATEID_RELEASE;
 8002e66:	2202      	movs	r2, #2
 8002e68:	6823      	ldr	r3, [r4, #0]
        THIS_STATEID = TSL_STATEID_TOUCH;
 8002e6a:	701a      	strb	r2, [r3, #0]
        break;
 8002e6c:	e7e1      	b.n	8002e32 <TSL_tkey_DebErrorStateProcess+0x1a>
        THIS_STATEID = TSL_STATEID_PROX;
 8002e6e:	2206      	movs	r2, #6
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	e7fa      	b.n	8002e6a <TSL_tkey_DebErrorStateProcess+0x52>
        THIS_STATEID = TSL_STATEID_DETECT;
 8002e74:	220a      	movs	r2, #10
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	e7f7      	b.n	8002e6a <TSL_tkey_DebErrorStateProcess+0x52>
        THIS_STATEID = TSL_STATEID_TOUCH;
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	e7f4      	b.n	8002e6a <TSL_tkey_DebErrorStateProcess+0x52>
        TSL_tkey_SetStateCalibration(0);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7ff fd3f 	bl	8002904 <TSL_tkey_SetStateCalibration>
}
 8002e86:	e7d4      	b.n	8002e32 <TSL_tkey_DebErrorStateProcess+0x1a>
 8002e88:	20000d88 	.word	0x20000d88

08002e8c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8002e8c:	287f      	cmp	r0, #127	; 0x7f
 8002e8e:	d907      	bls.n	8002ea0 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8002e90:	2900      	cmp	r1, #0
 8002e92:	d006      	beq.n	8002ea2 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8002e94:	28ff      	cmp	r0, #255	; 0xff
 8002e96:	d810      	bhi.n	8002eba <ff_convert+0x2e>
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <ff_convert+0x34>)
 8002e9a:	3880      	subs	r0, #128	; 0x80
 8002e9c:	0040      	lsls	r0, r0, #1
 8002e9e:	5ac0      	ldrh	r0, [r0, r3]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8002ea0:	4770      	bx	lr
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <ff_convert+0x34>)
				if (chr == Tbl[c]) break;
 8002ea4:	881a      	ldrh	r2, [r3, #0]
 8002ea6:	4282      	cmp	r2, r0
 8002ea8:	d004      	beq.n	8002eb4 <ff_convert+0x28>
			for (c = 0; c < 0x80; c++) {
 8002eaa:	3101      	adds	r1, #1
 8002eac:	b289      	uxth	r1, r1
 8002eae:	3302      	adds	r3, #2
 8002eb0:	2980      	cmp	r1, #128	; 0x80
 8002eb2:	d1f7      	bne.n	8002ea4 <ff_convert+0x18>
			c = (c + 0x80) & 0xFF;
 8002eb4:	3180      	adds	r1, #128	; 0x80
 8002eb6:	b2c8      	uxtb	r0, r1
 8002eb8:	e7f2      	b.n	8002ea0 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e7f0      	b.n	8002ea0 <ff_convert+0x14>
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	0800413a 	.word	0x0800413a

08002ec4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted */
)
{
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
									0xFF21,0xFF22,0xFF23,0xFF24,0xFF25,0xFF26,0xFF27,0xFF28,0xFF29,0xFF2A,0xFF2B,0xFF2C,0xFF2D,0xFF2E,0xFF2F,0xFF30,0xFF31,0xFF32,0xFF33,0xFF34,0xFF35,0xFF36,0xFF37,0xFF38,0xFF39,0xFF3A
	};
	UINT i, n, hi, li;


	if (chr < 0x80) {	/* ASCII characters (acceleration) */
 8002ec6:	287f      	cmp	r0, #127	; 0x7f
 8002ec8:	d806      	bhi.n	8002ed8 <ff_wtoupper+0x14>
		if (chr >= 0x61 && chr <= 0x7A) chr -= 0x20;
 8002eca:	0003      	movs	r3, r0
 8002ecc:	3b61      	subs	r3, #97	; 0x61
 8002ece:	2b19      	cmp	r3, #25
 8002ed0:	d801      	bhi.n	8002ed6 <ff_wtoupper+0x12>
 8002ed2:	3820      	subs	r0, #32
 8002ed4:	b280      	uxth	r0, r0
		} while (--n);
		if (n) chr = upper[i];
	}

	return chr;
}
 8002ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n = 12; li = 0; hi = sizeof lower / sizeof lower[0];
 8002ed8:	25f7      	movs	r5, #247	; 0xf7
 8002eda:	220c      	movs	r2, #12
 8002edc:	2100      	movs	r1, #0
			if (chr == lower[i]) break;
 8002ede:	4e0a      	ldr	r6, [pc, #40]	; (8002f08 <ff_wtoupper+0x44>)
		n = 12; li = 0; hi = sizeof lower / sizeof lower[0];
 8002ee0:	006d      	lsls	r5, r5, #1
			i = li + (hi - li) / 2;
 8002ee2:	1a6b      	subs	r3, r5, r1
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	185b      	adds	r3, r3, r1
			if (chr == lower[i]) break;
 8002ee8:	005c      	lsls	r4, r3, #1
 8002eea:	5ba7      	ldrh	r7, [r4, r6]
 8002eec:	4287      	cmp	r7, r0
 8002eee:	d007      	beq.n	8002f00 <ff_wtoupper+0x3c>
			if (chr > lower[i]) li = i; else hi = i;
 8002ef0:	d304      	bcc.n	8002efc <ff_wtoupper+0x38>
			i = li + (hi - li) / 2;
 8002ef2:	001d      	movs	r5, r3
		} while (--n);
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	2a00      	cmp	r2, #0
 8002ef8:	d1f3      	bne.n	8002ee2 <ff_wtoupper+0x1e>
 8002efa:	e7ec      	b.n	8002ed6 <ff_wtoupper+0x12>
			i = li + (hi - li) / 2;
 8002efc:	0019      	movs	r1, r3
 8002efe:	e7f9      	b.n	8002ef4 <ff_wtoupper+0x30>
		if (n) chr = upper[i];
 8002f00:	4b02      	ldr	r3, [pc, #8]	; (8002f0c <ff_wtoupper+0x48>)
 8002f02:	5ae0      	ldrh	r0, [r4, r3]
	return chr;
 8002f04:	e7e7      	b.n	8002ed6 <ff_wtoupper+0x12>
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	0800423a 	.word	0x0800423a
 8002f0c:	08004616 	.word	0x08004616

08002f10 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	if (SD_ff_hw.initialized)
 8002f10:	4b02      	ldr	r3, [pc, #8]	; (8002f1c <disk_status+0xc>)
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	4243      	negs	r3, r0
 8002f16:	4158      	adcs	r0, r3
 8002f18:	b2c0      	uxtb	r0, r0
		return 0;

	return STA_NOINIT;
}
 8002f1a:	4770      	bx	lr
 8002f1c:	20000da0 	.word	0x20000da0

08002f20 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002f20:	b510      	push	{r4, lr}
	if (hwif_init(&SD_ff_hw) == 0)
 8002f22:	4803      	ldr	r0, [pc, #12]	; (8002f30 <disk_initialize+0x10>)
 8002f24:	f000 fa7e 	bl	8003424 <hwif_init>
 8002f28:	1e43      	subs	r3, r0, #1
 8002f2a:	4198      	sbcs	r0, r3
		return 0;

	return STA_NOINIT;
}
 8002f2c:	b2c0      	uxtb	r0, r0
 8002f2e:	bd10      	pop	{r4, pc}
 8002f30:	20000da0 	.word	0x20000da0

08002f34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	0014      	movs	r4, r2
 8002f38:	000d      	movs	r5, r1
 8002f3a:	189e      	adds	r6, r3, r2
	int i;

	for (i=0; i<count; i++)
 8002f3c:	42b4      	cmp	r4, r6
 8002f3e:	d101      	bne.n	8002f44 <disk_read+0x10>
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
			return RES_ERROR;

	return RES_OK;
 8002f40:	2000      	movs	r0, #0
}
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
 8002f44:	002a      	movs	r2, r5
 8002f46:	0021      	movs	r1, r4
 8002f48:	4805      	ldr	r0, [pc, #20]	; (8002f60 <disk_read+0x2c>)
 8002f4a:	f000 fb15 	bl	8003578 <sd_read>
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	3401      	adds	r4, #1
 8002f54:	18ed      	adds	r5, r5, r3
 8002f56:	2800      	cmp	r0, #0
 8002f58:	d0f0      	beq.n	8002f3c <disk_read+0x8>
			return RES_ERROR;
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	e7f1      	b.n	8002f42 <disk_read+0xe>
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	20000da0 	.word	0x20000da0

08002f64 <crc7_one>:
	int i;
	const uint8_t g = 0x89;
	t ^= data;
	for (i=0; i<8; i++) {
		if (t & 0x80)
			t ^= g;
 8002f64:	2277      	movs	r2, #119	; 0x77
	t ^= data;
 8002f66:	2308      	movs	r3, #8
 8002f68:	4048      	eors	r0, r1
			t ^= g;
 8002f6a:	4252      	negs	r2, r2
		if (t & 0x80)
 8002f6c:	b241      	sxtb	r1, r0
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	da01      	bge.n	8002f76 <crc7_one+0x12>
			t ^= g;
 8002f72:	4050      	eors	r0, r2
 8002f74:	b2c0      	uxtb	r0, r0
		t <<= 1;
 8002f76:	0040      	lsls	r0, r0, #1
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b2c0      	uxtb	r0, r0
	for (i=0; i<8; i++) {
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f5      	bne.n	8002f6c <crc7_one+0x8>
	}
	return t;
}
 8002f80:	4770      	bx	lr
	...

08002f84 <spi_txrx>:
{
 8002f84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t out = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	466a      	mov	r2, sp
{
 8002f8a:	210f      	movs	r1, #15
	uint8_t out = 0;
 8002f8c:	75d3      	strb	r3, [r2, #23]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8002f8e:	2217      	movs	r2, #23
{
 8002f90:	4469      	add	r1, sp
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8002f92:	3b01      	subs	r3, #1
{
 8002f94:	7008      	strb	r0, [r1, #0]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8002f96:	446a      	add	r2, sp
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4804      	ldr	r0, [pc, #16]	; (8002fac <spi_txrx+0x28>)
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	f7fe ff5d 	bl	8001e5c <HAL_SPI_TransmitReceive>
	return out;
 8002fa2:	466b      	mov	r3, sp
 8002fa4:	7dd8      	ldrb	r0, [r3, #23]
}
 8002fa6:	b007      	add	sp, #28
 8002fa8:	bd00      	pop	{pc}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	200002cc 	.word	0x200002cc

08002fb0 <sd_cmd>:


/*** sd functions - on top of spi code ***/

static void sd_cmd(uint8_t cmd, uint32_t arg)
{
 8002fb0:	b570      	push	{r4, r5, r6, lr}
	uint8_t crc = 0;
	spi_txrx(0x40 | cmd);
 8002fb2:	2540      	movs	r5, #64	; 0x40
 8002fb4:	4305      	orrs	r5, r0
 8002fb6:	0028      	movs	r0, r5
{
 8002fb8:	000c      	movs	r4, r1
	spi_txrx(0x40 | cmd);
 8002fba:	f7ff ffe3 	bl	8002f84 <spi_txrx>
	crc = crc7_one(crc, 0x40 | cmd);
 8002fbe:	0029      	movs	r1, r5
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7ff ffcf 	bl	8002f64 <crc7_one>
 8002fc6:	0005      	movs	r5, r0
	spi_txrx(arg >> 24);
 8002fc8:	0e26      	lsrs	r6, r4, #24
 8002fca:	0030      	movs	r0, r6
 8002fcc:	f7ff ffda 	bl	8002f84 <spi_txrx>
	crc = crc7_one(crc, arg >> 24);
 8002fd0:	0031      	movs	r1, r6
 8002fd2:	0028      	movs	r0, r5
 8002fd4:	f7ff ffc6 	bl	8002f64 <crc7_one>
 8002fd8:	0006      	movs	r6, r0
	spi_txrx(arg >> 16);
 8002fda:	0c25      	lsrs	r5, r4, #16
 8002fdc:	b2ed      	uxtb	r5, r5
 8002fde:	0028      	movs	r0, r5
 8002fe0:	f7ff ffd0 	bl	8002f84 <spi_txrx>
	crc = crc7_one(crc, arg >> 16);
 8002fe4:	0029      	movs	r1, r5
 8002fe6:	0030      	movs	r0, r6
 8002fe8:	f7ff ffbc 	bl	8002f64 <crc7_one>
 8002fec:	0006      	movs	r6, r0
	spi_txrx(arg >> 8);
 8002fee:	0a25      	lsrs	r5, r4, #8
 8002ff0:	b2ed      	uxtb	r5, r5
 8002ff2:	0028      	movs	r0, r5
 8002ff4:	f7ff ffc6 	bl	8002f84 <spi_txrx>
	crc = crc7_one(crc, arg >> 8);
 8002ff8:	0029      	movs	r1, r5
 8002ffa:	0030      	movs	r0, r6
 8002ffc:	f7ff ffb2 	bl	8002f64 <crc7_one>
 8003000:	0005      	movs	r5, r0
	spi_txrx(arg);
 8003002:	b2e4      	uxtb	r4, r4
 8003004:	0020      	movs	r0, r4
 8003006:	f7ff ffbd 	bl	8002f84 <spi_txrx>
	crc = crc7_one(crc, arg);
 800300a:	0021      	movs	r1, r4
 800300c:	0028      	movs	r0, r5
 800300e:	f7ff ffa9 	bl	8002f64 <crc7_one>
	//spi_txrx(0x95);
	spi_txrx(crc | 0x1);	/* crc7, for cmd0 */
 8003012:	2301      	movs	r3, #1
 8003014:	4318      	orrs	r0, r3
 8003016:	b2c0      	uxtb	r0, r0
 8003018:	f7ff ffb4 	bl	8002f84 <spi_txrx>
}
 800301c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003020 <sd_get_r1>:

static uint8_t sd_get_r1()
{
 8003020:	b510      	push	{r4, lr}
	int tries = 1000;
	uint8_t r;

	while (tries--) {
 8003022:	4c05      	ldr	r4, [pc, #20]	; (8003038 <sd_get_r1+0x18>)
 8003024:	3c01      	subs	r4, #1
		r = spi_txrx(0xff);
 8003026:	20ff      	movs	r0, #255	; 0xff
	while (tries--) {
 8003028:	2c00      	cmp	r4, #0
 800302a:	d003      	beq.n	8003034 <sd_get_r1+0x14>
		r = spi_txrx(0xff);
 800302c:	f7ff ffaa 	bl	8002f84 <spi_txrx>
		if ((r & 0x80) == 0)
 8003030:	0603      	lsls	r3, r0, #24
 8003032:	d4f7      	bmi.n	8003024 <sd_get_r1+0x4>
			return r;
	}
	return 0xff;
}
 8003034:	bd10      	pop	{r4, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	000003e9 	.word	0x000003e9

0800303c <sd_nec>:


/* Nec (=Ncr? which is limited to [0,8]) dummy bytes before lowering CS,
 * as described in sandisk doc, 5.4. */
static void sd_nec()
{
 800303c:	b510      	push	{r4, lr}
 800303e:	2408      	movs	r4, #8
	int i;
	for (i=0; i<8; i++)
		spi_txrx(0xff);
 8003040:	20ff      	movs	r0, #255	; 0xff
 8003042:	3c01      	subs	r4, #1
 8003044:	f7ff ff9e 	bl	8002f84 <spi_txrx>
	for (i=0; i<8; i++)
 8003048:	2c00      	cmp	r4, #0
 800304a:	d1f9      	bne.n	8003040 <sd_nec+0x4>
}
 800304c:	bd10      	pop	{r4, pc}

0800304e <sd_get_r7>:
{
 800304e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003050:	0006      	movs	r6, r0
	r = sd_get_r1();
 8003052:	f7ff ffe5 	bl	8003020 <sd_get_r1>
 8003056:	0005      	movs	r5, r0
	if (r != 0x01)
 8003058:	2801      	cmp	r0, #1
 800305a:	d113      	bne.n	8003084 <sd_get_r7+0x36>
	r = spi_txrx(0xff) << 24;
 800305c:	20ff      	movs	r0, #255	; 0xff
 800305e:	f7ff ff91 	bl	8002f84 <spi_txrx>
 8003062:	0604      	lsls	r4, r0, #24
	r |= spi_txrx(0xff) << 16;
 8003064:	20ff      	movs	r0, #255	; 0xff
 8003066:	f7ff ff8d 	bl	8002f84 <spi_txrx>
 800306a:	0407      	lsls	r7, r0, #16
	r |= spi_txrx(0xff) << 8;
 800306c:	20ff      	movs	r0, #255	; 0xff
 800306e:	f7ff ff89 	bl	8002f84 <spi_txrx>
	r |= spi_txrx(0xff) << 16;
 8003072:	4327      	orrs	r7, r4
	r |= spi_txrx(0xff) << 8;
 8003074:	0004      	movs	r4, r0
	r |= spi_txrx(0xff);
 8003076:	20ff      	movs	r0, #255	; 0xff
 8003078:	f7ff ff84 	bl	8002f84 <spi_txrx>
	r |= spi_txrx(0xff) << 8;
 800307c:	0224      	lsls	r4, r4, #8
 800307e:	4307      	orrs	r7, r0
	r |= spi_txrx(0xff);
 8003080:	433c      	orrs	r4, r7
	*r7 = r;
 8003082:	6034      	str	r4, [r6, #0]
}
 8003084:	0028      	movs	r0, r5
 8003086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003088 <sd_read_status.isra.0>:

static int sd_read_status(hwif *hw)
{
	uint16_t r2;

	spi_cs_low();
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	20a0      	movs	r0, #160	; 0xa0
static int sd_read_status(hwif *hw)
 800308c:	b570      	push	{r4, r5, r6, lr}
	spi_cs_low();
 800308e:	2200      	movs	r2, #0
 8003090:	0209      	lsls	r1, r1, #8
 8003092:	05c0      	lsls	r0, r0, #23
 8003094:	f7fe f996 	bl	80013c4 <HAL_GPIO_WritePin>
	sd_cmd(13, 0);
 8003098:	2100      	movs	r1, #0
 800309a:	200d      	movs	r0, #13
 800309c:	f7ff ff88 	bl	8002fb0 <sd_cmd>
	while (tries--) {
 80030a0:	4d0b      	ldr	r5, [pc, #44]	; (80030d0 <sd_read_status.isra.0+0x48>)
 80030a2:	3d01      	subs	r5, #1
 80030a4:	2d00      	cmp	r5, #0
 80030a6:	d10a      	bne.n	80030be <sd_read_status.isra.0+0x36>
	r2 = sd_get_r2();
	sd_nec();
 80030a8:	f7ff ffc8 	bl	800303c <sd_nec>
	spi_cs_high();
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	20a0      	movs	r0, #160	; 0xa0
 80030b0:	2201      	movs	r2, #1
 80030b2:	0209      	lsls	r1, r1, #8
 80030b4:	05c0      	lsls	r0, r0, #23
 80030b6:	f7fe f985 	bl	80013c4 <HAL_GPIO_WritePin>
	if (r2 & 0x8000)
		return -1;
	if (r2)

	return 0;
}
 80030ba:	2000      	movs	r0, #0
 80030bc:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 80030be:	20ff      	movs	r0, #255	; 0xff
 80030c0:	f7ff ff60 	bl	8002f84 <spi_txrx>
		if ((r & 0x80) == 0)
 80030c4:	0603      	lsls	r3, r0, #24
 80030c6:	d4ec      	bmi.n	80030a2 <sd_read_status.isra.0+0x1a>
	r = r<<8 | spi_txrx(0xff);
 80030c8:	20ff      	movs	r0, #255	; 0xff
 80030ca:	f7ff ff5b 	bl	8002f84 <spi_txrx>
	return r;
 80030ce:	e7eb      	b.n	80030a8 <sd_read_status.isra.0+0x20>
 80030d0:	000003e9 	.word	0x000003e9

080030d4 <sd_get_data.isra.0>:

/* 0xfe marks data start, then len bytes of data and crc16 */
static int sd_get_data(hwif *hw, uint8_t *buf, int len)
 80030d4:	b570      	push	{r4, r5, r6, lr}
 80030d6:	0005      	movs	r5, r0
 80030d8:	000c      	movs	r4, r1
 80030da:	4e0c      	ldr	r6, [pc, #48]	; (800310c <sd_get_data.isra.0+0x38>)
	uint8_t r;
	uint16_t _crc16;
	uint16_t calc_crc;
	int i;

	while (tries--) {
 80030dc:	3e01      	subs	r6, #1
 80030de:	2e00      	cmp	r6, #0
 80030e0:	d102      	bne.n	80030e8 <sd_get_data.isra.0+0x14>
		r = spi_txrx(0xff);
		if (r == 0xfe)
			break;
	}
	if (tries < 0)
		return -1;
 80030e2:	2001      	movs	r0, #1
 80030e4:	4240      	negs	r0, r0
	//if (_crc16 != calc_crc) {
	//	return -1;
	//}

	return 0;
}
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 80030e8:	20ff      	movs	r0, #255	; 0xff
 80030ea:	f7ff ff4b 	bl	8002f84 <spi_txrx>
		if (r == 0xfe)
 80030ee:	28fe      	cmp	r0, #254	; 0xfe
 80030f0:	d1f4      	bne.n	80030dc <sd_get_data.isra.0+0x8>
	dma_complete = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	4e06      	ldr	r6, [pc, #24]	; (8003110 <sd_get_data.isra.0+0x3c>)
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 80030f6:	0029      	movs	r1, r5
 80030f8:	4806      	ldr	r0, [pc, #24]	; (8003114 <sd_get_data.isra.0+0x40>)
 80030fa:	b2a2      	uxth	r2, r4
	dma_complete = 0;
 80030fc:	7033      	strb	r3, [r6, #0]
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 80030fe:	f7ff f82d 	bl	800215c <HAL_SPI_Receive_DMA>
	while (dma_complete == 0);
 8003102:	7833      	ldrb	r3, [r6, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0fc      	beq.n	8003102 <sd_get_data.isra.0+0x2e>
 8003108:	2000      	movs	r0, #0
 800310a:	e7ec      	b.n	80030e6 <sd_get_data.isra.0+0x12>
 800310c:	00004e21 	.word	0x00004e21
 8003110:	20000b78 	.word	0x20000b78
 8003114:	200002cc 	.word	0x200002cc

08003118 <sd_readsector.isra.0>:

	return 0;
}


static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	0005      	movs	r5, r0
 800311c:	000c      	movs	r4, r1
{
	int r;

	spi_cs_low();
 800311e:	20a0      	movs	r0, #160	; 0xa0
 8003120:	2180      	movs	r1, #128	; 0x80
static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
 8003122:	0016      	movs	r6, r2
	spi_cs_low();
 8003124:	0209      	lsls	r1, r1, #8
 8003126:	2200      	movs	r2, #0
 8003128:	05c0      	lsls	r0, r0, #23
 800312a:	f7fe f94b 	bl	80013c4 <HAL_GPIO_WritePin>
	if (hw->capabilities & CAP_SDHC)
 800312e:	682b      	ldr	r3, [r5, #0]
		sd_cmd(17, address); /* read single block */
 8003130:	0021      	movs	r1, r4
	if (hw->capabilities & CAP_SDHC)
 8003132:	079b      	lsls	r3, r3, #30
 8003134:	d400      	bmi.n	8003138 <sd_readsector.isra.0+0x20>
	else
		sd_cmd(17, address*512); /* read single block */
 8003136:	0261      	lsls	r1, r4, #9
 8003138:	2011      	movs	r0, #17
 800313a:	f7ff ff39 	bl	8002fb0 <sd_cmd>

	r = sd_get_r1();
 800313e:	f7ff ff6f 	bl	8003020 <sd_get_r1>
	if (r == 0xff) {
 8003142:	28ff      	cmp	r0, #255	; 0xff
 8003144:	d109      	bne.n	800315a <sd_readsector.isra.0+0x42>
		spi_cs_high();
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	20a0      	movs	r0, #160	; 0xa0
 800314a:	2201      	movs	r2, #1
 800314c:	05c0      	lsls	r0, r0, #23
 800314e:	0209      	lsls	r1, r1, #8
 8003150:	f7fe f938 	bl	80013c4 <HAL_GPIO_WritePin>
		r = -1;
 8003154:	2001      	movs	r0, #1

	r = sd_get_data(hw, buf, 512);
	sd_nec();
	spi_cs_high();
	if (r == -1) {
		r = -3;
 8003156:	4240      	negs	r0, r0
	}

	return 0;
 fail:
	return r;
}
 8003158:	bd70      	pop	{r4, r5, r6, pc}
	if (r & 0xfe) {
 800315a:	2501      	movs	r5, #1
 800315c:	43a8      	bics	r0, r5
 800315e:	b2c4      	uxtb	r4, r0
 8003160:	2c00      	cmp	r4, #0
 8003162:	d008      	beq.n	8003176 <sd_readsector.isra.0+0x5e>
		spi_cs_high();
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	20a0      	movs	r0, #160	; 0xa0
 8003168:	002a      	movs	r2, r5
 800316a:	05c0      	lsls	r0, r0, #23
 800316c:	0209      	lsls	r1, r1, #8
 800316e:	f7fe f929 	bl	80013c4 <HAL_GPIO_WritePin>
		r = -2;
 8003172:	2002      	movs	r0, #2
 8003174:	e7ef      	b.n	8003156 <sd_readsector.isra.0+0x3e>
	r = sd_get_data(hw, buf, 512);
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	0030      	movs	r0, r6
 800317a:	0089      	lsls	r1, r1, #2
 800317c:	f7ff ffaa 	bl	80030d4 <sd_get_data.isra.0>
 8003180:	0006      	movs	r6, r0
	sd_nec();
 8003182:	f7ff ff5b 	bl	800303c <sd_nec>
	spi_cs_high();
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	20a0      	movs	r0, #160	; 0xa0
 800318a:	002a      	movs	r2, r5
 800318c:	05c0      	lsls	r0, r0, #23
 800318e:	0209      	lsls	r1, r1, #8
 8003190:	f7fe f918 	bl	80013c4 <HAL_GPIO_WritePin>
	return 0;
 8003194:	0020      	movs	r0, r4
	if (r == -1) {
 8003196:	1c73      	adds	r3, r6, #1
 8003198:	d1de      	bne.n	8003158 <sd_readsector.isra.0+0x40>
		r = -3;
 800319a:	2003      	movs	r0, #3
 800319c:	e7db      	b.n	8003156 <sd_readsector.isra.0+0x3e>
	...

080031a0 <sd_init.isra.0>:
	hw->capabilities = 0;
 80031a0:	2300      	movs	r3, #0
static int sd_init(hwif *hw)
 80031a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	hw->capabilities = 0;
 80031a4:	6003      	str	r3, [r0, #0]
static int sd_init(hwif *hw)
 80031a6:	0004      	movs	r4, r0
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80031a8:	489c      	ldr	r0, [pc, #624]	; (800341c <sd_init.isra.0+0x27c>)
 80031aa:	3328      	adds	r3, #40	; 0x28
static int sd_init(hwif *hw)
 80031ac:	b085      	sub	sp, #20
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80031ae:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 80031b0:	f7fe fe14 	bl	8001ddc <HAL_SPI_Init>
	spi_cs_high();
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	20a0      	movs	r0, #160	; 0xa0
 80031b8:	2201      	movs	r2, #1
 80031ba:	0209      	lsls	r1, r1, #8
 80031bc:	05c0      	lsls	r0, r0, #23
 80031be:	f7fe f901 	bl	80013c4 <HAL_GPIO_WritePin>
 80031c2:	260a      	movs	r6, #10
		spi_txrx(0xff);
 80031c4:	20ff      	movs	r0, #255	; 0xff
 80031c6:	3e01      	subs	r6, #1
 80031c8:	f7ff fedc 	bl	8002f84 <spi_txrx>
	for (i=0; i<10; i++)
 80031cc:	2e00      	cmp	r6, #0
 80031ce:	d1f9      	bne.n	80031c4 <sd_init.isra.0+0x24>
	spi_cs_low();
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	20a0      	movs	r0, #160	; 0xa0
 80031d4:	0032      	movs	r2, r6
 80031d6:	0209      	lsls	r1, r1, #8
 80031d8:	05c0      	lsls	r0, r0, #23
 80031da:	f7fe f8f3 	bl	80013c4 <HAL_GPIO_WritePin>
	sd_cmd(0, 0);
 80031de:	0031      	movs	r1, r6
 80031e0:	0030      	movs	r0, r6
 80031e2:	f7ff fee5 	bl	8002fb0 <sd_cmd>
	r = sd_get_r1();
 80031e6:	f7ff ff1b 	bl	8003020 <sd_get_r1>
 80031ea:	0005      	movs	r5, r0
	sd_nec();
 80031ec:	f7ff ff26 	bl	800303c <sd_nec>
	spi_cs_high();
 80031f0:	2180      	movs	r1, #128	; 0x80
 80031f2:	20a0      	movs	r0, #160	; 0xa0
 80031f4:	2201      	movs	r2, #1
 80031f6:	0209      	lsls	r1, r1, #8
 80031f8:	05c0      	lsls	r0, r0, #23
 80031fa:	f7fe f8e3 	bl	80013c4 <HAL_GPIO_WritePin>
	if (r == 0xff)
 80031fe:	2dff      	cmp	r5, #255	; 0xff
 8003200:	d104      	bne.n	800320c <sd_init.isra.0+0x6c>
	return -1;
 8003202:	2501      	movs	r5, #1
	return -2;
 8003204:	426d      	negs	r5, r5
}
 8003206:	0028      	movs	r0, r5
 8003208:	b005      	add	sp, #20
 800320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (r != 0x01) {
 800320c:	2d01      	cmp	r5, #1
 800320e:	d001      	beq.n	8003214 <sd_init.isra.0+0x74>
	return -2;
 8003210:	2502      	movs	r5, #2
 8003212:	e7f7      	b.n	8003204 <sd_init.isra.0+0x64>
	spi_cs_low();
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	20a0      	movs	r0, #160	; 0xa0
 8003218:	0032      	movs	r2, r6
 800321a:	0209      	lsls	r1, r1, #8
 800321c:	05c0      	lsls	r0, r0, #23
 800321e:	f7fe f8d1 	bl	80013c4 <HAL_GPIO_WritePin>
	sd_cmd(8, 0x1aa /* VHS = 1 */);
 8003222:	21d5      	movs	r1, #213	; 0xd5
 8003224:	2008      	movs	r0, #8
 8003226:	0049      	lsls	r1, r1, #1
 8003228:	f7ff fec2 	bl	8002fb0 <sd_cmd>
	r = sd_get_r7(&r7);
 800322c:	a802      	add	r0, sp, #8
 800322e:	f7ff ff0e 	bl	800304e <sd_get_r7>
 8003232:	0007      	movs	r7, r0
	sd_nec();
 8003234:	f7ff ff02 	bl	800303c <sd_nec>
	spi_cs_high();
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	20a0      	movs	r0, #160	; 0xa0
 800323c:	002a      	movs	r2, r5
 800323e:	0209      	lsls	r1, r1, #8
 8003240:	05c0      	lsls	r0, r0, #23
 8003242:	f7fe f8bf 	bl	80013c4 <HAL_GPIO_WritePin>
	hw->capabilities |= CAP_VER2_00;
 8003246:	002a      	movs	r2, r5
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	431a      	orrs	r2, r3
 800324c:	6022      	str	r2, [r4, #0]
	if (r == 0xff)
 800324e:	2fff      	cmp	r7, #255	; 0xff
 8003250:	d0d7      	beq.n	8003202 <sd_init.isra.0+0x62>
	if (r == 0x01)
 8003252:	2f01      	cmp	r7, #1
 8003254:	d003      	beq.n	800325e <sd_init.isra.0+0xbe>
	else if (r & 0x4) {
 8003256:	077a      	lsls	r2, r7, #29
 8003258:	d5da      	bpl.n	8003210 <sd_init.isra.0+0x70>
		hw->capabilities &= ~CAP_VER2_00;
 800325a:	43ab      	bics	r3, r5
 800325c:	6023      	str	r3, [r4, #0]
	spi_cs_low();
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	20a0      	movs	r0, #160	; 0xa0
 8003262:	2200      	movs	r2, #0
 8003264:	0209      	lsls	r1, r1, #8
 8003266:	05c0      	lsls	r0, r0, #23
 8003268:	f7fe f8ac 	bl	80013c4 <HAL_GPIO_WritePin>
	sd_cmd(58, 0);
 800326c:	2100      	movs	r1, #0
 800326e:	203a      	movs	r0, #58	; 0x3a
 8003270:	f7ff fe9e 	bl	8002fb0 <sd_cmd>
	r = sd_get_r3(&r3);
 8003274:	a803      	add	r0, sp, #12
 8003276:	f7ff feea 	bl	800304e <sd_get_r7>
 800327a:	0005      	movs	r5, r0
	sd_nec();
 800327c:	f7ff fede 	bl	800303c <sd_nec>
	spi_cs_high();
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	20a0      	movs	r0, #160	; 0xa0
 8003284:	2201      	movs	r2, #1
 8003286:	0209      	lsls	r1, r1, #8
 8003288:	05c0      	lsls	r0, r0, #23
 800328a:	f7fe f89b 	bl	80013c4 <HAL_GPIO_WritePin>
	if (r == 0xff)
 800328e:	2dff      	cmp	r5, #255	; 0xff
 8003290:	d0b7      	beq.n	8003202 <sd_init.isra.0+0x62>
	if (r != 0x01 && !(r & 0x4)) { /* allow it to not be implemented - old cards */
 8003292:	2d01      	cmp	r5, #1
 8003294:	d001      	beq.n	800329a <sd_init.isra.0+0xfa>
 8003296:	076b      	lsls	r3, r5, #29
 8003298:	d5ba      	bpl.n	8003210 <sd_init.isra.0+0x70>
	if (hw->capabilities & CAP_VER2_00)
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	07db      	lsls	r3, r3, #31
 800329e:	d501      	bpl.n	80032a4 <sd_init.isra.0+0x104>
		hcs = 1<<30;
 80032a0:	2680      	movs	r6, #128	; 0x80
 80032a2:	05f6      	lsls	r6, r6, #23
 80032a4:	4b5e      	ldr	r3, [pc, #376]	; (8003420 <sd_init.isra.0+0x280>)
 80032a6:	9301      	str	r3, [sp, #4]
		spi_cs_low();
 80032a8:	2180      	movs	r1, #128	; 0x80
 80032aa:	20a0      	movs	r0, #160	; 0xa0
 80032ac:	2200      	movs	r2, #0
 80032ae:	0209      	lsls	r1, r1, #8
 80032b0:	05c0      	lsls	r0, r0, #23
 80032b2:	f7fe f887 	bl	80013c4 <HAL_GPIO_WritePin>
		sd_cmd(55, 0);
 80032b6:	2100      	movs	r1, #0
 80032b8:	2037      	movs	r0, #55	; 0x37
 80032ba:	f7ff fe79 	bl	8002fb0 <sd_cmd>
		r = sd_get_r1();
 80032be:	f7ff feaf 	bl	8003020 <sd_get_r1>
 80032c2:	0005      	movs	r5, r0
		sd_nec();
 80032c4:	f7ff feba 	bl	800303c <sd_nec>
		spi_cs_high();
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	20a0      	movs	r0, #160	; 0xa0
 80032cc:	2201      	movs	r2, #1
 80032ce:	0209      	lsls	r1, r1, #8
 80032d0:	05c0      	lsls	r0, r0, #23
 80032d2:	f7fe f877 	bl	80013c4 <HAL_GPIO_WritePin>
		if (r == 0xff)
 80032d6:	2dff      	cmp	r5, #255	; 0xff
 80032d8:	d100      	bne.n	80032dc <sd_init.isra.0+0x13c>
 80032da:	e792      	b.n	8003202 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 80032dc:	2701      	movs	r7, #1
 80032de:	43bd      	bics	r5, r7
 80032e0:	b2ea      	uxtb	r2, r5
 80032e2:	2a00      	cmp	r2, #0
 80032e4:	d194      	bne.n	8003210 <sd_init.isra.0+0x70>
		spi_cs_low();
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	20a0      	movs	r0, #160	; 0xa0
 80032ea:	0209      	lsls	r1, r1, #8
 80032ec:	05c0      	lsls	r0, r0, #23
 80032ee:	f7fe f869 	bl	80013c4 <HAL_GPIO_WritePin>
		sd_cmd(41, hcs);
 80032f2:	0031      	movs	r1, r6
 80032f4:	2029      	movs	r0, #41	; 0x29
 80032f6:	f7ff fe5b 	bl	8002fb0 <sd_cmd>
		r = sd_get_r1();
 80032fa:	f7ff fe91 	bl	8003020 <sd_get_r1>
 80032fe:	0005      	movs	r5, r0
		sd_nec();
 8003300:	f7ff fe9c 	bl	800303c <sd_nec>
		spi_cs_high();
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	20a0      	movs	r0, #160	; 0xa0
 8003308:	003a      	movs	r2, r7
 800330a:	0209      	lsls	r1, r1, #8
 800330c:	05c0      	lsls	r0, r0, #23
 800330e:	f7fe f859 	bl	80013c4 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8003312:	2dff      	cmp	r5, #255	; 0xff
 8003314:	d100      	bne.n	8003318 <sd_init.isra.0+0x178>
 8003316:	e774      	b.n	8003202 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 8003318:	002b      	movs	r3, r5
 800331a:	43bb      	bics	r3, r7
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d000      	beq.n	8003324 <sd_init.isra.0+0x184>
 8003322:	e775      	b.n	8003210 <sd_init.isra.0+0x70>
	} while (r != 0 && tries--);
 8003324:	2d00      	cmp	r5, #0
 8003326:	d023      	beq.n	8003370 <sd_init.isra.0+0x1d0>
 8003328:	9b01      	ldr	r3, [sp, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ba      	bne.n	80032a8 <sd_init.isra.0+0x108>
 8003332:	e76d      	b.n	8003210 <sd_init.isra.0+0x70>
		spi_cs_low();
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	20a0      	movs	r0, #160	; 0xa0
 8003338:	0209      	lsls	r1, r1, #8
 800333a:	05c0      	lsls	r0, r0, #23
 800333c:	f7fe f842 	bl	80013c4 <HAL_GPIO_WritePin>
		sd_cmd(16, 512);
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	2010      	movs	r0, #16
 8003344:	0089      	lsls	r1, r1, #2
 8003346:	f7ff fe33 	bl	8002fb0 <sd_cmd>
		r = sd_get_r1();
 800334a:	f7ff fe69 	bl	8003020 <sd_get_r1>
 800334e:	0004      	movs	r4, r0
		sd_nec();
 8003350:	f7ff fe74 	bl	800303c <sd_nec>
		spi_cs_high();
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	20a0      	movs	r0, #160	; 0xa0
 8003358:	2201      	movs	r2, #1
 800335a:	0209      	lsls	r1, r1, #8
 800335c:	05c0      	lsls	r0, r0, #23
 800335e:	f7fe f831 	bl	80013c4 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8003362:	2cff      	cmp	r4, #255	; 0xff
 8003364:	d100      	bne.n	8003368 <sd_init.isra.0+0x1c8>
 8003366:	e74c      	b.n	8003202 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 8003368:	23fe      	movs	r3, #254	; 0xfe
 800336a:	421c      	tst	r4, r3
 800336c:	d031      	beq.n	80033d2 <sd_init.isra.0+0x232>
 800336e:	e74f      	b.n	8003210 <sd_init.isra.0+0x70>
	if (hw->capabilities & CAP_VER2_00) {
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	423b      	tst	r3, r7
 8003374:	d027      	beq.n	80033c6 <sd_init.isra.0+0x226>
		spi_cs_low();
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	20a0      	movs	r0, #160	; 0xa0
 800337a:	002a      	movs	r2, r5
 800337c:	0209      	lsls	r1, r1, #8
 800337e:	05c0      	lsls	r0, r0, #23
 8003380:	f7fe f820 	bl	80013c4 <HAL_GPIO_WritePin>
		sd_cmd(58, 0);
 8003384:	0029      	movs	r1, r5
 8003386:	203a      	movs	r0, #58	; 0x3a
 8003388:	f7ff fe12 	bl	8002fb0 <sd_cmd>
		r = sd_get_r3(&r3);
 800338c:	a803      	add	r0, sp, #12
 800338e:	f7ff fe5e 	bl	800304e <sd_get_r7>
 8003392:	0006      	movs	r6, r0
		sd_nec();
 8003394:	f7ff fe52 	bl	800303c <sd_nec>
		spi_cs_high();
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	20a0      	movs	r0, #160	; 0xa0
 800339c:	003a      	movs	r2, r7
 800339e:	0209      	lsls	r1, r1, #8
 80033a0:	05c0      	lsls	r0, r0, #23
 80033a2:	f7fe f80f 	bl	80013c4 <HAL_GPIO_WritePin>
		if (r == 0xff)
 80033a6:	2eff      	cmp	r6, #255	; 0xff
 80033a8:	d100      	bne.n	80033ac <sd_init.isra.0+0x20c>
 80033aa:	e72a      	b.n	8003202 <sd_init.isra.0+0x62>
		if (r & 0xfe) {
 80033ac:	43be      	bics	r6, r7
 80033ae:	b2f6      	uxtb	r6, r6
 80033b0:	2e00      	cmp	r6, #0
 80033b2:	d000      	beq.n	80033b6 <sd_init.isra.0+0x216>
 80033b4:	e72c      	b.n	8003210 <sd_init.isra.0+0x70>
			if (r3>>30 & 1) {
 80033b6:	9b03      	ldr	r3, [sp, #12]
 80033b8:	0f9b      	lsrs	r3, r3, #30
 80033ba:	423b      	tst	r3, r7
 80033bc:	d003      	beq.n	80033c6 <sd_init.isra.0+0x226>
				hw->capabilities |= CAP_SDHC;
 80033be:	2302      	movs	r3, #2
 80033c0:	6822      	ldr	r2, [r4, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	6023      	str	r3, [r4, #0]
	if ((hw->capabilities & CAP_SDHC) == 0) {
 80033c6:	6821      	ldr	r1, [r4, #0]
 80033c8:	2302      	movs	r3, #2
 80033ca:	000a      	movs	r2, r1
 80033cc:	401a      	ands	r2, r3
 80033ce:	4219      	tst	r1, r3
 80033d0:	d0b0      	beq.n	8003334 <sd_init.isra.0+0x194>
	spi_cs_low();
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	20a0      	movs	r0, #160	; 0xa0
 80033d6:	2200      	movs	r2, #0
 80033d8:	0209      	lsls	r1, r1, #8
 80033da:	05c0      	lsls	r0, r0, #23
 80033dc:	f7fd fff2 	bl	80013c4 <HAL_GPIO_WritePin>
	sd_cmd(59, 0);
 80033e0:	2100      	movs	r1, #0
 80033e2:	203b      	movs	r0, #59	; 0x3b
 80033e4:	f7ff fde4 	bl	8002fb0 <sd_cmd>
	r = sd_get_r1();
 80033e8:	f7ff fe1a 	bl	8003020 <sd_get_r1>
 80033ec:	0004      	movs	r4, r0
	sd_nec();
 80033ee:	f7ff fe25 	bl	800303c <sd_nec>
	spi_cs_high();
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	20a0      	movs	r0, #160	; 0xa0
 80033f6:	2201      	movs	r2, #1
 80033f8:	0209      	lsls	r1, r1, #8
 80033fa:	05c0      	lsls	r0, r0, #23
 80033fc:	f7fd ffe2 	bl	80013c4 <HAL_GPIO_WritePin>
	if (r == 0xff)
 8003400:	2cff      	cmp	r4, #255	; 0xff
 8003402:	d100      	bne.n	8003406 <sd_init.isra.0+0x266>
 8003404:	e6fd      	b.n	8003202 <sd_init.isra.0+0x62>
	if (r & 0xfe) {
 8003406:	23fe      	movs	r3, #254	; 0xfe
 8003408:	421c      	tst	r4, r3
 800340a:	d000      	beq.n	800340e <sd_init.isra.0+0x26e>
 800340c:	e700      	b.n	8003210 <sd_init.isra.0+0x70>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 800340e:	4803      	ldr	r0, [pc, #12]	; (800341c <sd_init.isra.0+0x27c>)
 8003410:	3bee      	subs	r3, #238	; 0xee
 8003412:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8003414:	f7fe fce2 	bl	8001ddc <HAL_SPI_Init>
}
 8003418:	e6f5      	b.n	8003206 <sd_init.isra.0+0x66>
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	200002cc 	.word	0x200002cc
 8003420:	000003e9 	.word	0x000003e9

08003424 <hwif_init>:


/*** public API - on top of sd/spi code ***/

int hwif_init(hwif* hw)
{
 8003424:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int tries = 10;

	if (hw->initialized)
		return 0;
 8003426:	2500      	movs	r5, #0
	if (hw->initialized)
 8003428:	6803      	ldr	r3, [r0, #0]
{
 800342a:	0004      	movs	r4, r0
	if (hw->initialized)
 800342c:	42ab      	cmp	r3, r5
 800342e:	d10a      	bne.n	8003446 <hwif_init+0x22>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8003430:	2328      	movs	r3, #40	; 0x28
 8003432:	4850      	ldr	r0, [pc, #320]	; (8003574 <hwif_init+0x150>)
}
 8003434:	260b      	movs	r6, #11
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8003436:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8003438:	f7fe fcd0 	bl	8001ddc <HAL_SPI_Init>

	spi_init();

	while (tries--) {
 800343c:	3e01      	subs	r6, #1
 800343e:	2e00      	cmp	r6, #0
 8003440:	d104      	bne.n	800344c <hwif_init+0x28>
	/* read status register */
	sd_read_status(hw);

	sd_read_cid(hw);
	if (sd_read_csd(hw) != 0)
		return -1;
 8003442:	2501      	movs	r5, #1
 8003444:	426d      	negs	r5, r5

	hw->initialized = 1;
	return 0;
}
 8003446:	0028      	movs	r0, r5
 8003448:	b004      	add	sp, #16
 800344a:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_init(hw) == 0)
 800344c:	0020      	movs	r0, r4
 800344e:	300c      	adds	r0, #12
 8003450:	f7ff fea6 	bl	80031a0 <sd_init.isra.0>
 8003454:	1e05      	subs	r5, r0, #0
 8003456:	d1f1      	bne.n	800343c <hwif_init+0x18>
	sd_read_status(hw);
 8003458:	f7ff fe16 	bl	8003088 <sd_read_status.isra.0>
	spi_cs_low();
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	20a0      	movs	r0, #160	; 0xa0
 8003460:	002a      	movs	r2, r5
 8003462:	0209      	lsls	r1, r1, #8
 8003464:	05c0      	lsls	r0, r0, #23
 8003466:	f7fd ffad 	bl	80013c4 <HAL_GPIO_WritePin>
	sd_cmd(10, 0);
 800346a:	0029      	movs	r1, r5
 800346c:	200a      	movs	r0, #10
 800346e:	f7ff fd9f 	bl	8002fb0 <sd_cmd>
	r = sd_get_r1();
 8003472:	f7ff fdd5 	bl	8003020 <sd_get_r1>
	if (r == 0xff) {
 8003476:	28ff      	cmp	r0, #255	; 0xff
 8003478:	d11d      	bne.n	80034b6 <hwif_init+0x92>
		spi_cs_high();
 800347a:	2201      	movs	r2, #1
	spi_cs_high();
 800347c:	2180      	movs	r1, #128	; 0x80
 800347e:	20a0      	movs	r0, #160	; 0xa0
 8003480:	0209      	lsls	r1, r1, #8
 8003482:	05c0      	lsls	r0, r0, #23
 8003484:	f7fd ff9e 	bl	80013c4 <HAL_GPIO_WritePin>
	spi_cs_low();
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	20a0      	movs	r0, #160	; 0xa0
 800348c:	2200      	movs	r2, #0
 800348e:	0209      	lsls	r1, r1, #8
 8003490:	05c0      	lsls	r0, r0, #23
 8003492:	f7fd ff97 	bl	80013c4 <HAL_GPIO_WritePin>
	sd_cmd(9, 0);
 8003496:	2100      	movs	r1, #0
 8003498:	2009      	movs	r0, #9
 800349a:	f7ff fd89 	bl	8002fb0 <sd_cmd>
	r = sd_get_r1();
 800349e:	f7ff fdbf 	bl	8003020 <sd_get_r1>
	if (r == 0xff) {
 80034a2:	28ff      	cmp	r0, #255	; 0xff
 80034a4:	d114      	bne.n	80034d0 <hwif_init+0xac>
		spi_cs_high();
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	20a0      	movs	r0, #160	; 0xa0
 80034aa:	2201      	movs	r2, #1
 80034ac:	0209      	lsls	r1, r1, #8
 80034ae:	05c0      	lsls	r0, r0, #23
 80034b0:	f7fd ff88 	bl	80013c4 <HAL_GPIO_WritePin>
 80034b4:	e7c5      	b.n	8003442 <hwif_init+0x1e>
	if (r & 0xfe) {
 80034b6:	2501      	movs	r5, #1
 80034b8:	43a8      	bics	r0, r5
 80034ba:	b2c0      	uxtb	r0, r0
 80034bc:	2800      	cmp	r0, #0
 80034be:	d1dc      	bne.n	800347a <hwif_init+0x56>
	r = sd_get_data(hw, buf, 16);
 80034c0:	2110      	movs	r1, #16
 80034c2:	4668      	mov	r0, sp
 80034c4:	f7ff fe06 	bl	80030d4 <sd_get_data.isra.0>
	sd_nec();
 80034c8:	f7ff fdb8 	bl	800303c <sd_nec>
	spi_cs_high();
 80034cc:	002a      	movs	r2, r5
 80034ce:	e7d5      	b.n	800347c <hwif_init+0x58>
	if (r & 0xfe) {
 80034d0:	2601      	movs	r6, #1
 80034d2:	43b0      	bics	r0, r6
 80034d4:	b2c0      	uxtb	r0, r0
 80034d6:	2800      	cmp	r0, #0
 80034d8:	d1e5      	bne.n	80034a6 <hwif_init+0x82>
	r = sd_get_data(hw, buf, 16);
 80034da:	2110      	movs	r1, #16
 80034dc:	4668      	mov	r0, sp
 80034de:	f7ff fdf9 	bl	80030d4 <sd_get_data.isra.0>
 80034e2:	0005      	movs	r5, r0
	sd_nec();
 80034e4:	f7ff fdaa 	bl	800303c <sd_nec>
	spi_cs_high();
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	20a0      	movs	r0, #160	; 0xa0
 80034ec:	0032      	movs	r2, r6
 80034ee:	0209      	lsls	r1, r1, #8
 80034f0:	05c0      	lsls	r0, r0, #23
 80034f2:	f7fd ff67 	bl	80013c4 <HAL_GPIO_WritePin>
	if (r == -1) {
 80034f6:	1c6b      	adds	r3, r5, #1
 80034f8:	d0a5      	beq.n	8003446 <hwif_init+0x22>
	if ((buf[0] >> 6) + 1 == 1) {
 80034fa:	466b      	mov	r3, sp
 80034fc:	7a99      	ldrb	r1, [r3, #10]
 80034fe:	79da      	ldrb	r2, [r3, #7]
 8003500:	7a1d      	ldrb	r5, [r3, #8]
 8003502:	7a58      	ldrb	r0, [r3, #9]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	d12a      	bne.n	8003560 <hwif_init+0x13c>
	capacity = (((buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6)+1) << (2+(((buf[9]&3) << 1) | buf[10]>>7)) << ((buf[5] & 0xf) - 9);
 800350a:	466b      	mov	r3, sp
 800350c:	26c0      	movs	r6, #192	; 0xc0
 800350e:	799b      	ldrb	r3, [r3, #6]
 8003510:	0136      	lsls	r6, r6, #4
 8003512:	029b      	lsls	r3, r3, #10
 8003514:	0092      	lsls	r2, r2, #2
 8003516:	09ad      	lsrs	r5, r5, #6
 8003518:	432a      	orrs	r2, r5
 800351a:	4033      	ands	r3, r6
 800351c:	4313      	orrs	r3, r2
 800351e:	2206      	movs	r2, #6
 8003520:	0040      	lsls	r0, r0, #1
 8003522:	4010      	ands	r0, r2
 8003524:	09ca      	lsrs	r2, r1, #7
 8003526:	4310      	orrs	r0, r2
 8003528:	466a      	mov	r2, sp
 800352a:	3002      	adds	r0, #2
 800352c:	3301      	adds	r3, #1
 800352e:	4083      	lsls	r3, r0
 8003530:	200f      	movs	r0, #15
 8003532:	7952      	ldrb	r2, [r2, #5]
 8003534:	4002      	ands	r2, r0
 8003536:	3a09      	subs	r2, #9
 8003538:	4093      	lsls	r3, r2
	hw->sectors = capacity;
 800353a:	6063      	str	r3, [r4, #4]
	hw->erase_sectors = 1;
 800353c:	2301      	movs	r3, #1
	if (((buf[10]>>6)&1) == 0)
 800353e:	098a      	lsrs	r2, r1, #6
	hw->erase_sectors = 1;
 8003540:	60a3      	str	r3, [r4, #8]
	if (((buf[10]>>6)&1) == 0)
 8003542:	421a      	tst	r2, r3
 8003544:	d108      	bne.n	8003558 <hwif_init+0x134>
		hw->erase_sectors = ((buf[10]&0x3f)<<1 | buf[11]>>7) + 1;
 8003546:	4099      	lsls	r1, r3
 8003548:	337d      	adds	r3, #125	; 0x7d
 800354a:	4019      	ands	r1, r3
 800354c:	466b      	mov	r3, sp
 800354e:	7adb      	ldrb	r3, [r3, #11]
 8003550:	09db      	lsrs	r3, r3, #7
 8003552:	4319      	orrs	r1, r3
 8003554:	3101      	adds	r1, #1
 8003556:	60a1      	str	r1, [r4, #8]
	hw->initialized = 1;
 8003558:	2301      	movs	r3, #1
	return 0;
 800355a:	2500      	movs	r5, #0
	hw->initialized = 1;
 800355c:	6023      	str	r3, [r4, #0]
	return 0;
 800355e:	e772      	b.n	8003446 <hwif_init+0x22>
		hw->capabilities |= CAP_SDHC;
 8003560:	2302      	movs	r3, #2
 8003562:	68e6      	ldr	r6, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 8003564:	0412      	lsls	r2, r2, #16
		hw->capabilities |= CAP_SDHC;
 8003566:	4333      	orrs	r3, r6
 8003568:	60e3      	str	r3, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 800356a:	022b      	lsls	r3, r5, #8
 800356c:	4313      	orrs	r3, r2
 800356e:	4303      	orrs	r3, r0
	capacity *= 1024; /* in 512 B sectors */
 8003570:	029b      	lsls	r3, r3, #10
 8003572:	e7e2      	b.n	800353a <hwif_init+0x116>
 8003574:	200002cc 	.word	0x200002cc

08003578 <sd_read>:

int sd_read(hwif* hw, uint32_t address, uint8_t *buf)
{
 8003578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800357a:	300c      	adds	r0, #12
 800357c:	000e      	movs	r6, r1
 800357e:	0017      	movs	r7, r2
 8003580:	0005      	movs	r5, r0
	int r;
	int tries = 10;

	r = sd_readsector(hw, address, buf);
 8003582:	f7ff fdc9 	bl	8003118 <sd_readsector.isra.0>

	while (r < 0 && tries--) {
 8003586:	230b      	movs	r3, #11
	r = sd_readsector(hw, address, buf);
 8003588:	0004      	movs	r4, r0
	while (r < 0 && tries--) {
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	2c00      	cmp	r4, #0
 800358e:	da04      	bge.n	800359a <sd_read+0x22>
 8003590:	9b01      	ldr	r3, [sp, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <sd_read+0x26>
		r = sd_readsector(hw, address, buf);
	}
	if (tries == -1)

	return r;
}
 800359a:	0020      	movs	r0, r4
 800359c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (sd_init(hw) != 0)
 800359e:	0028      	movs	r0, r5
 80035a0:	f7ff fdfe 	bl	80031a0 <sd_init.isra.0>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d1f1      	bne.n	800358c <sd_read+0x14>
		sd_read_status(hw);
 80035a8:	f7ff fd6e 	bl	8003088 <sd_read_status.isra.0>
		r = sd_readsector(hw, address, buf);
 80035ac:	003a      	movs	r2, r7
 80035ae:	0031      	movs	r1, r6
 80035b0:	0028      	movs	r0, r5
 80035b2:	f7ff fdb1 	bl	8003118 <sd_readsector.isra.0>
 80035b6:	0004      	movs	r4, r0
 80035b8:	e7e8      	b.n	800358c <sd_read+0x14>
	...

080035bc <HAL_SPI_RxCpltCallback>:

	return r;
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
    dma_complete = 1;
 80035bc:	2201      	movs	r2, #1
 80035be:	4b01      	ldr	r3, [pc, #4]	; (80035c4 <HAL_SPI_RxCpltCallback+0x8>)
 80035c0:	701a      	strb	r2, [r3, #0]
	return;
}
 80035c2:	4770      	bx	lr
 80035c4:	20000b78 	.word	0x20000b78

080035c8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80035c8:	6802      	ldr	r2, [r0, #0]
 80035ca:	1e13      	subs	r3, r2, #0
 80035cc:	d103      	bne.n	80035d6 <get_ldnumber+0xe>
	int vol = -1;
 80035ce:	2001      	movs	r0, #1
 80035d0:	4240      	negs	r0, r0
 80035d2:	e00e      	b.n	80035f2 <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80035d4:	3301      	adds	r3, #1
 80035d6:	7819      	ldrb	r1, [r3, #0]
 80035d8:	291f      	cmp	r1, #31
 80035da:	d909      	bls.n	80035f0 <get_ldnumber+0x28>
 80035dc:	293a      	cmp	r1, #58	; 0x3a
 80035de:	d1f9      	bne.n	80035d4 <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80035e0:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80035e2:	428b      	cmp	r3, r1
 80035e4:	d1f3      	bne.n	80035ce <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80035e6:	7812      	ldrb	r2, [r2, #0]
 80035e8:	2a30      	cmp	r2, #48	; 0x30
 80035ea:	d1f0      	bne.n	80035ce <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 80035ec:	3301      	adds	r3, #1
 80035ee:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80035f0:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 80035f2:	4770      	bx	lr

080035f4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80035f4:	b510      	push	{r4, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d011      	beq.n	800361e <validate+0x2a>
 80035fa:	6803      	ldr	r3, [r0, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <validate+0x2a>
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	2a00      	cmp	r2, #0
 8003604:	d00b      	beq.n	800361e <validate+0x2a>
 8003606:	88d9      	ldrh	r1, [r3, #6]
 8003608:	8882      	ldrh	r2, [r0, #4]
 800360a:	4291      	cmp	r1, r2
 800360c:	d107      	bne.n	800361e <validate+0x2a>
 800360e:	7858      	ldrb	r0, [r3, #1]
 8003610:	f7ff fc7e 	bl	8002f10 <disk_status>
 8003614:	2201      	movs	r2, #1
 8003616:	0003      	movs	r3, r0
 8003618:	4013      	ands	r3, r2
 800361a:	4210      	tst	r0, r2
 800361c:	d000      	beq.n	8003620 <validate+0x2c>
		return FR_INVALID_OBJECT;
 800361e:	2309      	movs	r3, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8003620:	0018      	movs	r0, r3
 8003622:	bd10      	pop	{r4, pc}

08003624 <move_window>:
{
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	0004      	movs	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003628:	6a63      	ldr	r3, [r4, #36]	; 0x24
{
 800362a:	000d      	movs	r5, r1
	FRESULT res = FR_OK;
 800362c:	2000      	movs	r0, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800362e:	428b      	cmp	r3, r1
 8003630:	d00c      	beq.n	800364c <move_window+0x28>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003632:	000a      	movs	r2, r1
 8003634:	0021      	movs	r1, r4
 8003636:	2301      	movs	r3, #1
 8003638:	7860      	ldrb	r0, [r4, #1]
 800363a:	3128      	adds	r1, #40	; 0x28
 800363c:	f7ff fc7a 	bl	8002f34 <disk_read>
 8003640:	2800      	cmp	r0, #0
 8003642:	d002      	beq.n	800364a <move_window+0x26>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003644:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 8003646:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003648:	426d      	negs	r5, r5
			fs->winsect = sector;
 800364a:	6265      	str	r5, [r4, #36]	; 0x24
}
 800364c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003650 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003650:	2300      	movs	r3, #0
{
 8003652:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003654:	7103      	strb	r3, [r0, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	6243      	str	r3, [r0, #36]	; 0x24
{
 800365a:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800365c:	f7ff ffe2 	bl	8003624 <move_window>
 8003660:	2800      	cmp	r0, #0
 8003662:	d121      	bne.n	80036a8 <check_fs+0x58>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <check_fs+0x60>)
 8003666:	5ce2      	ldrb	r2, [r4, r3]
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <check_fs+0x64>)
 800366a:	0212      	lsls	r2, r2, #8
 800366c:	5ce3      	ldrb	r3, [r4, r3]
 800366e:	4313      	orrs	r3, r2
 8003670:	4a11      	ldr	r2, [pc, #68]	; (80036b8 <check_fs+0x68>)
 8003672:	b21b      	sxth	r3, r3
 8003674:	4293      	cmp	r3, r2
 8003676:	d119      	bne.n	80036ac <check_fs+0x5c>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8003678:	0022      	movs	r2, r4
 800367a:	325e      	adds	r2, #94	; 0x5e
 800367c:	8853      	ldrh	r3, [r2, #2]
 800367e:	8811      	ldrh	r1, [r2, #0]
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	430b      	orrs	r3, r1
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <check_fs+0x6c>)
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <check_fs+0x56>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800368e:	347a      	adds	r4, #122	; 0x7a
 8003690:	8860      	ldrh	r0, [r4, #2]
 8003692:	8823      	ldrh	r3, [r4, #0]
 8003694:	0400      	lsls	r0, r0, #16
 8003696:	4318      	orrs	r0, r3
 8003698:	0200      	lsls	r0, r0, #8
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <check_fs+0x70>)
 800369c:	0a00      	lsrs	r0, r0, #8
 800369e:	18c0      	adds	r0, r0, r3
 80036a0:	1e43      	subs	r3, r0, #1
 80036a2:	4198      	sbcs	r0, r3
		return 3;
 80036a4:	b2c0      	uxtb	r0, r0
}
 80036a6:	bd10      	pop	{r4, pc}
		return 3;
 80036a8:	2003      	movs	r0, #3
 80036aa:	e7fc      	b.n	80036a6 <check_fs+0x56>
		return 2;
 80036ac:	2002      	movs	r0, #2
 80036ae:	e7fa      	b.n	80036a6 <check_fs+0x56>
 80036b0:	00000227 	.word	0x00000227
 80036b4:	00000226 	.word	0x00000226
 80036b8:	ffffaa55 	.word	0xffffaa55
 80036bc:	00544146 	.word	0x00544146
 80036c0:	ffabbeba 	.word	0xffabbeba

080036c4 <find_volume.isra.0>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 80036c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 80036c6:	2300      	movs	r3, #0
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 80036c8:	0007      	movs	r7, r0
 80036ca:	b08b      	sub	sp, #44	; 0x2c
 80036cc:	0008      	movs	r0, r1
	*rfs = 0;
 80036ce:	603b      	str	r3, [r7, #0]
	vol = get_ldnumber(path);
 80036d0:	f7ff ff7a 	bl	80035c8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80036d4:	250b      	movs	r5, #11
	vol = get_ldnumber(path);
 80036d6:	1e06      	subs	r6, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 80036d8:	db15      	blt.n	8003706 <find_volume.isra.0+0x42>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80036da:	4b78      	ldr	r3, [pc, #480]	; (80038bc <find_volume.isra.0+0x1f8>)
 80036dc:	0082      	lsls	r2, r0, #2
 80036de:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80036e0:	3501      	adds	r5, #1
 80036e2:	2c00      	cmp	r4, #0
 80036e4:	d00f      	beq.n	8003706 <find_volume.isra.0+0x42>
	if (fs->fs_type) {					/* If the volume has been mounted */
 80036e6:	7823      	ldrb	r3, [r4, #0]
	*rfs = fs;							/* Return pointer to the file system object */
 80036e8:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10e      	bne.n	800370c <find_volume.isra.0+0x48>
	fs->fs_type = 0;					/* Clear the file system object */
 80036ee:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80036f0:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80036f2:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80036f4:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80036f6:	f7ff fc13 	bl	8002f20 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80036fa:	2601      	movs	r6, #1
 80036fc:	0007      	movs	r7, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80036fe:	2503      	movs	r5, #3
 8003700:	4037      	ands	r7, r6
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8003702:	4230      	tst	r0, r6
 8003704:	d00b      	beq.n	800371e <find_volume.isra.0+0x5a>
}
 8003706:	0028      	movs	r0, r5
 8003708:	b00b      	add	sp, #44	; 0x2c
 800370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = disk_status(fs->drv);
 800370c:	7860      	ldrb	r0, [r4, #1]
 800370e:	f7ff fbff 	bl	8002f10 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003712:	2301      	movs	r3, #1
 8003714:	0005      	movs	r5, r0
 8003716:	401d      	ands	r5, r3
 8003718:	4218      	tst	r0, r3
 800371a:	d1e8      	bne.n	80036ee <find_volume.isra.0+0x2a>
 800371c:	e7f3      	b.n	8003706 <find_volume.isra.0+0x42>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800371e:	0039      	movs	r1, r7
 8003720:	0020      	movs	r0, r4
 8003722:	f7ff ff95 	bl	8003650 <check_fs>
 8003726:	0005      	movs	r5, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8003728:	2801      	cmp	r0, #1
 800372a:	d12c      	bne.n	8003786 <find_volume.isra.0+0xc2>
 800372c:	0023      	movs	r3, r4
 800372e:	4a64      	ldr	r2, [pc, #400]	; (80038c0 <find_volume.isra.0+0x1fc>)
 8003730:	33e7      	adds	r3, #231	; 0xe7
 8003732:	a906      	add	r1, sp, #24
 8003734:	33ff      	adds	r3, #255	; 0xff
 8003736:	18a0      	adds	r0, r4, r2
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8003738:	2200      	movs	r2, #0
 800373a:	791e      	ldrb	r6, [r3, #4]
 800373c:	4296      	cmp	r6, r2
 800373e:	d009      	beq.n	8003754 <find_volume.isra.0+0x90>
 8003740:	7a5e      	ldrb	r6, [r3, #9]
 8003742:	7a1a      	ldrb	r2, [r3, #8]
 8003744:	0236      	lsls	r6, r6, #8
 8003746:	4316      	orrs	r6, r2
 8003748:	7a9a      	ldrb	r2, [r3, #10]
 800374a:	0412      	lsls	r2, r2, #16
 800374c:	4316      	orrs	r6, r2
 800374e:	7ada      	ldrb	r2, [r3, #11]
 8003750:	0612      	lsls	r2, r2, #24
 8003752:	4332      	orrs	r2, r6
 8003754:	3310      	adds	r3, #16
 8003756:	c104      	stmia	r1!, {r2}
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003758:	4298      	cmp	r0, r3
 800375a:	d1ed      	bne.n	8003738 <find_volume.isra.0+0x74>
 800375c:	2600      	movs	r6, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800375e:	2702      	movs	r7, #2
			bsect = br[i];
 8003760:	00b3      	lsls	r3, r6, #2
 8003762:	aa06      	add	r2, sp, #24
 8003764:	58d3      	ldr	r3, [r2, r3]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8003766:	0038      	movs	r0, r7
			bsect = br[i];
 8003768:	9301      	str	r3, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <find_volume.isra.0+0xb6>
 800376e:	0019      	movs	r1, r3
 8003770:	0020      	movs	r0, r4
 8003772:	f7ff ff6d 	bl	8003650 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8003776:	2800      	cmp	r0, #0
 8003778:	d00d      	beq.n	8003796 <find_volume.isra.0+0xd2>
 800377a:	3601      	adds	r6, #1
 800377c:	2e04      	cmp	r6, #4
 800377e:	d1ef      	bne.n	8003760 <find_volume.isra.0+0x9c>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003780:	2803      	cmp	r0, #3
 8003782:	d106      	bne.n	8003792 <find_volume.isra.0+0xce>
 8003784:	e7bf      	b.n	8003706 <find_volume.isra.0+0x42>
 8003786:	2803      	cmp	r0, #3
 8003788:	d100      	bne.n	800378c <find_volume.isra.0+0xc8>
 800378a:	e095      	b.n	80038b8 <find_volume.isra.0+0x1f4>
	bsect = 0;
 800378c:	9701      	str	r7, [sp, #4]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800378e:	2800      	cmp	r0, #0
 8003790:	d001      	beq.n	8003796 <find_volume.isra.0+0xd2>
 8003792:	250d      	movs	r5, #13
 8003794:	e7b7      	b.n	8003706 <find_volume.isra.0+0x42>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003796:	0023      	movs	r3, r4
 8003798:	3334      	adds	r3, #52	; 0x34
 800379a:	781a      	ldrb	r2, [r3, #0]
 800379c:	3b01      	subs	r3, #1
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	0212      	lsls	r2, r2, #8
 80037a2:	4313      	orrs	r3, r2
 80037a4:	2280      	movs	r2, #128	; 0x80
 80037a6:	b21b      	sxth	r3, r3
 80037a8:	0092      	lsls	r2, r2, #2
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d1f1      	bne.n	8003792 <find_volume.isra.0+0xce>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 80037ae:	0023      	movs	r3, r4
 80037b0:	0022      	movs	r2, r4
 80037b2:	333f      	adds	r3, #63	; 0x3f
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	323e      	adds	r2, #62	; 0x3e
 80037b8:	7817      	ldrb	r7, [r2, #0]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	431f      	orrs	r7, r3
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 80037be:	d100      	bne.n	80037c2 <find_volume.isra.0+0xfe>
 80037c0:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80037c2:	0023      	movs	r3, r4
	fs->fsize = fasize;
 80037c4:	6127      	str	r7, [r4, #16]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80037c6:	3338      	adds	r3, #56	; 0x38
 80037c8:	781a      	ldrb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80037ca:	1e53      	subs	r3, r2, #1
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80037cc:	70e2      	strb	r2, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d8df      	bhi.n	8003792 <find_volume.isra.0+0xce>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 80037d2:	0023      	movs	r3, r4
 80037d4:	3335      	adds	r3, #53	; 0x35
 80037d6:	781e      	ldrb	r6, [r3, #0]
 80037d8:	70a6      	strb	r6, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80037da:	2e00      	cmp	r6, #0
 80037dc:	d0d9      	beq.n	8003792 <find_volume.isra.0+0xce>
 80037de:	1e73      	subs	r3, r6, #1
 80037e0:	421e      	tst	r6, r3
 80037e2:	d1d6      	bne.n	8003792 <find_volume.isra.0+0xce>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80037e4:	0023      	movs	r3, r4
 80037e6:	333a      	adds	r3, #58	; 0x3a
 80037e8:	781d      	ldrb	r5, [r3, #0]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	022d      	lsls	r5, r5, #8
 80037f0:	431d      	orrs	r5, r3
 80037f2:	8125      	strh	r5, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80037f4:	072b      	lsls	r3, r5, #28
 80037f6:	d1cc      	bne.n	8003792 <find_volume.isra.0+0xce>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 80037f8:	0023      	movs	r3, r4
 80037fa:	333c      	adds	r3, #60	; 0x3c
 80037fc:	7819      	ldrb	r1, [r3, #0]
 80037fe:	3b01      	subs	r3, #1
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	0209      	lsls	r1, r1, #8
 8003804:	430b      	orrs	r3, r1
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 8003806:	d100      	bne.n	800380a <find_volume.isra.0+0x146>
 8003808:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800380a:	0021      	movs	r1, r4
 800380c:	0020      	movs	r0, r4
 800380e:	3137      	adds	r1, #55	; 0x37
 8003810:	7809      	ldrb	r1, [r1, #0]
 8003812:	3036      	adds	r0, #54	; 0x36
 8003814:	7800      	ldrb	r0, [r0, #0]
 8003816:	0209      	lsls	r1, r1, #8
 8003818:	4308      	orrs	r0, r1
 800381a:	9002      	str	r0, [sp, #8]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800381c:	d0b9      	beq.n	8003792 <find_volume.isra.0+0xce>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800381e:	437a      	muls	r2, r7
 8003820:	9204      	str	r2, [sp, #16]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003822:	9904      	ldr	r1, [sp, #16]
 8003824:	092a      	lsrs	r2, r5, #4
 8003826:	1812      	adds	r2, r2, r0
 8003828:	1852      	adds	r2, r2, r1
 800382a:	9203      	str	r2, [sp, #12]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800382c:	429a      	cmp	r2, r3
 800382e:	d8b0      	bhi.n	8003792 <find_volume.isra.0+0xce>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	0018      	movs	r0, r3
 8003834:	0031      	movs	r1, r6
 8003836:	9305      	str	r3, [sp, #20]
 8003838:	f7fc fc70 	bl	800011c <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800383c:	9b05      	ldr	r3, [sp, #20]
 800383e:	42b3      	cmp	r3, r6
 8003840:	d3a7      	bcc.n	8003792 <find_volume.isra.0+0xce>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003842:	4a20      	ldr	r2, [pc, #128]	; (80038c4 <find_volume.isra.0+0x200>)
	fmt = FS_FAT12;
 8003844:	2301      	movs	r3, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003846:	4290      	cmp	r0, r2
 8003848:	d904      	bls.n	8003854 <find_volume.isra.0+0x190>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800384a:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <find_volume.isra.0+0x204>)
 800384c:	4283      	cmp	r3, r0
 800384e:	419b      	sbcs	r3, r3
 8003850:	425b      	negs	r3, r3
 8003852:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003854:	9901      	ldr	r1, [sp, #4]
	fs->volbase = bsect;								/* Volume start sector */
 8003856:	9a01      	ldr	r2, [sp, #4]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003858:	468c      	mov	ip, r1
	fs->volbase = bsect;								/* Volume start sector */
 800385a:	6162      	str	r2, [r4, #20]
	fs->database = bsect + sysect;						/* Data start sector */
 800385c:	9903      	ldr	r1, [sp, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800385e:	9a02      	ldr	r2, [sp, #8]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003860:	3002      	adds	r0, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003862:	4462      	add	r2, ip
	fs->database = bsect + sysect;						/* Data start sector */
 8003864:	4461      	add	r1, ip
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003866:	60e0      	str	r0, [r4, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003868:	61a2      	str	r2, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 800386a:	6221      	str	r1, [r4, #32]
	if (fmt == FS_FAT32) {
 800386c:	2b03      	cmp	r3, #3
 800386e:	d112      	bne.n	8003896 <find_volume.isra.0+0x1d2>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8003870:	2d00      	cmp	r5, #0
 8003872:	d18e      	bne.n	8003792 <find_volume.isra.0+0xce>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8003874:	6d62      	ldr	r2, [r4, #84]	; 0x54
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8003876:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8003878:	61e2      	str	r2, [r4, #28]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800387a:	4a14      	ldr	r2, [pc, #80]	; (80038cc <find_volume.isra.0+0x208>)
 800387c:	1880      	adds	r0, r0, r2
 800387e:	0a40      	lsrs	r0, r0, #9
 8003880:	4287      	cmp	r7, r0
 8003882:	d386      	bcc.n	8003792 <find_volume.isra.0+0xce>
	fs->id = ++Fsid;	/* File system mount ID */
 8003884:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <find_volume.isra.0+0x20c>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8003886:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8003888:	8813      	ldrh	r3, [r2, #0]
	return FR_OK;
 800388a:	2500      	movs	r5, #0
	fs->id = ++Fsid;	/* File system mount ID */
 800388c:	3301      	adds	r3, #1
 800388e:	b29b      	uxth	r3, r3
 8003890:	8013      	strh	r3, [r2, #0]
 8003892:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8003894:	e737      	b.n	8003706 <find_volume.isra.0+0x42>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003896:	2d00      	cmp	r5, #0
 8003898:	d100      	bne.n	800389c <find_volume.isra.0+0x1d8>
 800389a:	e77a      	b.n	8003792 <find_volume.isra.0+0xce>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800389c:	9904      	ldr	r1, [sp, #16]
 800389e:	188a      	adds	r2, r1, r2
 80038a0:	61e2      	str	r2, [r4, #28]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d101      	bne.n	80038aa <find_volume.isra.0+0x1e6>
 80038a6:	0040      	lsls	r0, r0, #1
 80038a8:	e7e7      	b.n	800387a <find_volume.isra.0+0x1b6>
 80038aa:	2203      	movs	r2, #3
 80038ac:	2101      	movs	r1, #1
 80038ae:	4342      	muls	r2, r0
 80038b0:	4008      	ands	r0, r1
 80038b2:	0852      	lsrs	r2, r2, #1
 80038b4:	1810      	adds	r0, r2, r0
 80038b6:	e7e0      	b.n	800387a <find_volume.isra.0+0x1b6>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80038b8:	0035      	movs	r5, r6
 80038ba:	e724      	b.n	8003706 <find_volume.isra.0+0x42>
 80038bc:	20000b7c 	.word	0x20000b7c
 80038c0:	00000226 	.word	0x00000226
 80038c4:	00000ff5 	.word	0x00000ff5
 80038c8:	0000fff5 	.word	0x0000fff5
 80038cc:	000001ff 	.word	0x000001ff
 80038d0:	20000b80 	.word	0x20000b80

080038d4 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038d4:	68c2      	ldr	r2, [r0, #12]
	clst -= 2;
 80038d6:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038d8:	3a02      	subs	r2, #2
{
 80038da:	0003      	movs	r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038dc:	2000      	movs	r0, #0
 80038de:	428a      	cmp	r2, r1
 80038e0:	d903      	bls.n	80038ea <clust2sect+0x16>
	return clst * fs->csize + fs->database;
 80038e2:	7898      	ldrb	r0, [r3, #2]
 80038e4:	4341      	muls	r1, r0
 80038e6:	6a18      	ldr	r0, [r3, #32]
 80038e8:	1808      	adds	r0, r1, r0
}
 80038ea:	4770      	bx	lr

080038ec <get_fat>:
{
 80038ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		val = 1;	/* Internal error */
 80038ee:	2501      	movs	r5, #1
{
 80038f0:	0006      	movs	r6, r0
 80038f2:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80038f4:	42a9      	cmp	r1, r5
 80038f6:	d914      	bls.n	8003922 <get_fat+0x36>
 80038f8:	68c3      	ldr	r3, [r0, #12]
 80038fa:	428b      	cmp	r3, r1
 80038fc:	d911      	bls.n	8003922 <get_fat+0x36>
		switch (fs->fs_type) {
 80038fe:	7803      	ldrb	r3, [r0, #0]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d02e      	beq.n	8003962 <get_fat+0x76>
 8003904:	2b03      	cmp	r3, #3
 8003906:	d03e      	beq.n	8003986 <get_fat+0x9a>
 8003908:	42ab      	cmp	r3, r5
 800390a:	d10a      	bne.n	8003922 <get_fat+0x36>
			bc = (UINT)clst; bc += bc / 2;
 800390c:	084f      	lsrs	r7, r1, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800390e:	6983      	ldr	r3, [r0, #24]
			bc = (UINT)clst; bc += bc / 2;
 8003910:	187f      	adds	r7, r7, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003912:	0a79      	lsrs	r1, r7, #9
 8003914:	18c9      	adds	r1, r1, r3
 8003916:	f7ff fe85 	bl	8003624 <move_window>
 800391a:	2800      	cmp	r0, #0
 800391c:	d003      	beq.n	8003926 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800391e:	2501      	movs	r5, #1
 8003920:	426d      	negs	r5, r5
}
 8003922:	0028      	movs	r0, r5
 8003924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8003926:	1c7b      	adds	r3, r7, #1
 8003928:	05ff      	lsls	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800392a:	0a59      	lsrs	r1, r3, #9
			wc = fs->win[bc++ % SS(fs)];
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	0dff      	lsrs	r7, r7, #23
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003930:	69b3      	ldr	r3, [r6, #24]
			wc = fs->win[bc++ % SS(fs)];
 8003932:	19f7      	adds	r7, r6, r7
 8003934:	3728      	adds	r7, #40	; 0x28
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003936:	0030      	movs	r0, r6
 8003938:	18c9      	adds	r1, r1, r3
			wc = fs->win[bc++ % SS(fs)];
 800393a:	783f      	ldrb	r7, [r7, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800393c:	f7ff fe72 	bl	8003624 <move_window>
 8003940:	2800      	cmp	r0, #0
 8003942:	d1ec      	bne.n	800391e <get_fat+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003944:	9b01      	ldr	r3, [sp, #4]
 8003946:	05d8      	lsls	r0, r3, #23
 8003948:	0dc0      	lsrs	r0, r0, #23
 800394a:	1836      	adds	r6, r6, r0
 800394c:	3628      	adds	r6, #40	; 0x28
 800394e:	7833      	ldrb	r3, [r6, #0]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	431f      	orrs	r7, r3
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003954:	422c      	tst	r4, r5
 8003956:	d001      	beq.n	800395c <get_fat+0x70>
 8003958:	093d      	lsrs	r5, r7, #4
 800395a:	e7e2      	b.n	8003922 <get_fat+0x36>
 800395c:	053f      	lsls	r7, r7, #20
 800395e:	0d3d      	lsrs	r5, r7, #20
 8003960:	e7df      	b.n	8003922 <get_fat+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003962:	6983      	ldr	r3, [r0, #24]
 8003964:	0a09      	lsrs	r1, r1, #8
 8003966:	18c9      	adds	r1, r1, r3
 8003968:	f7ff fe5c 	bl	8003624 <move_window>
 800396c:	2800      	cmp	r0, #0
 800396e:	d1d6      	bne.n	800391e <get_fat+0x32>
			p = &fs->win[clst * 2 % SS(fs)];
 8003970:	21ff      	movs	r1, #255	; 0xff
 8003972:	0064      	lsls	r4, r4, #1
 8003974:	0049      	lsls	r1, r1, #1
 8003976:	400c      	ands	r4, r1
			val = LD_WORD(p);
 8003978:	1936      	adds	r6, r6, r4
 800397a:	3628      	adds	r6, #40	; 0x28
 800397c:	7875      	ldrb	r5, [r6, #1]
 800397e:	7833      	ldrb	r3, [r6, #0]
 8003980:	022d      	lsls	r5, r5, #8
 8003982:	431d      	orrs	r5, r3
			break;
 8003984:	e7cd      	b.n	8003922 <get_fat+0x36>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003986:	6983      	ldr	r3, [r0, #24]
 8003988:	09c9      	lsrs	r1, r1, #7
 800398a:	18c9      	adds	r1, r1, r3
 800398c:	f7ff fe4a 	bl	8003624 <move_window>
 8003990:	2800      	cmp	r0, #0
 8003992:	d1c4      	bne.n	800391e <get_fat+0x32>
			p = &fs->win[clst * 4 % SS(fs)];
 8003994:	21fe      	movs	r1, #254	; 0xfe
 8003996:	00a4      	lsls	r4, r4, #2
 8003998:	0049      	lsls	r1, r1, #1
 800399a:	400c      	ands	r4, r1
 800399c:	0023      	movs	r3, r4
 800399e:	3328      	adds	r3, #40	; 0x28
 80039a0:	18f3      	adds	r3, r6, r3
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80039a2:	78dd      	ldrb	r5, [r3, #3]
 80039a4:	789a      	ldrb	r2, [r3, #2]
 80039a6:	1936      	adds	r6, r6, r4
 80039a8:	0412      	lsls	r2, r2, #16
 80039aa:	062d      	lsls	r5, r5, #24
 80039ac:	3628      	adds	r6, #40	; 0x28
 80039ae:	4315      	orrs	r5, r2
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	7832      	ldrb	r2, [r6, #0]
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	4315      	orrs	r5, r2
 80039b8:	431d      	orrs	r5, r3
 80039ba:	012d      	lsls	r5, r5, #4
 80039bc:	092d      	lsrs	r5, r5, #4
			break;
 80039be:	e7b0      	b.n	8003922 <get_fat+0x36>

080039c0 <dir_sdi.constprop.0>:
	dp->index = (WORD)idx;	/* Current index */
 80039c0:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80039c2:	b570      	push	{r4, r5, r6, lr}
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80039c4:	6884      	ldr	r4, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80039c6:	0005      	movs	r5, r0
	dp->index = (WORD)idx;	/* Current index */
 80039c8:	80c3      	strh	r3, [r0, #6]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80039ca:	2c01      	cmp	r4, #1
 80039cc:	d101      	bne.n	80039d2 <dir_sdi.constprop.0+0x12>
		return FR_INT_ERR;
 80039ce:	2002      	movs	r0, #2
}
 80039d0:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80039d2:	6803      	ldr	r3, [r0, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	4294      	cmp	r4, r2
 80039d8:	d2f9      	bcs.n	80039ce <dir_sdi.constprop.0+0xe>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80039da:	2c00      	cmp	r4, #0
 80039dc:	d113      	bne.n	8003a06 <dir_sdi.constprop.0+0x46>
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	2a03      	cmp	r2, #3
 80039e2:	d102      	bne.n	80039ea <dir_sdi.constprop.0+0x2a>
		clst = dp->fs->dirbase;
 80039e4:	69da      	ldr	r2, [r3, #28]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	d10c      	bne.n	8003a04 <dir_sdi.constprop.0+0x44>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80039ea:	891a      	ldrh	r2, [r3, #8]
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	d0ee      	beq.n	80039ce <dir_sdi.constprop.0+0xe>
		sect = dp->fs->dirbase;
 80039f0:	69d8      	ldr	r0, [r3, #28]
	dp->clust = clst;	/* Current cluster# */
 80039f2:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d0ea      	beq.n	80039ce <dir_sdi.constprop.0+0xe>
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80039f8:	682b      	ldr	r3, [r5, #0]
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80039fa:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80039fc:	3328      	adds	r3, #40	; 0x28
	return FR_OK;
 80039fe:	2000      	movs	r0, #0
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003a00:	616b      	str	r3, [r5, #20]
	return FR_OK;
 8003a02:	e7e5      	b.n	80039d0 <dir_sdi.constprop.0+0x10>
 8003a04:	0014      	movs	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003a06:	789e      	ldrb	r6, [r3, #2]
 8003a08:	0136      	lsls	r6, r6, #4
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003a0a:	0021      	movs	r1, r4
 8003a0c:	6828      	ldr	r0, [r5, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003a0e:	2e00      	cmp	r6, #0
 8003a10:	d002      	beq.n	8003a18 <dir_sdi.constprop.0+0x58>
		sect = clust2sect(dp->fs, clst);
 8003a12:	f7ff ff5f 	bl	80038d4 <clust2sect>
 8003a16:	e7ec      	b.n	80039f2 <dir_sdi.constprop.0+0x32>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003a18:	f7ff ff68 	bl	80038ec <get_fat>
 8003a1c:	0004      	movs	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003a1e:	1c43      	adds	r3, r0, #1
 8003a20:	d006      	beq.n	8003a30 <dir_sdi.constprop.0+0x70>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003a22:	2801      	cmp	r0, #1
 8003a24:	d9d3      	bls.n	80039ce <dir_sdi.constprop.0+0xe>
 8003a26:	682b      	ldr	r3, [r5, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	4298      	cmp	r0, r3
 8003a2c:	d3ed      	bcc.n	8003a0a <dir_sdi.constprop.0+0x4a>
 8003a2e:	e7ce      	b.n	80039ce <dir_sdi.constprop.0+0xe>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003a30:	2001      	movs	r0, #1
 8003a32:	e7cd      	b.n	80039d0 <dir_sdi.constprop.0+0x10>

08003a34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a36:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8003a38:	a803      	add	r0, sp, #12
{
 8003a3a:	0014      	movs	r4, r2
 8003a3c:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8003a3e:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8003a40:	f7ff fdc2 	bl	80035c8 <get_ldnumber>
 8003a44:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 8003a46:	200b      	movs	r0, #11
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	db15      	blt.n	8003a78 <f_mount+0x44>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003a4c:	490b      	ldr	r1, [pc, #44]	; (8003a7c <f_mount+0x48>)
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	585a      	ldr	r2, [r3, r1]

	if (cfs) {
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d001      	beq.n	8003a5a <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003a56:	2000      	movs	r0, #0
 8003a58:	7010      	strb	r0, [r2, #0]
	}

	if (fs) {
 8003a5a:	9a01      	ldr	r2, [sp, #4]
 8003a5c:	2a00      	cmp	r2, #0
 8003a5e:	d001      	beq.n	8003a64 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8003a60:	2000      	movs	r0, #0
 8003a62:	7010      	strb	r0, [r2, #0]
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003a64:	1e10      	subs	r0, r2, #0
	FatFs[vol] = fs;					/* Register new fs object */
 8003a66:	50ca      	str	r2, [r1, r3]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003a68:	d006      	beq.n	8003a78 <f_mount+0x44>
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	2c01      	cmp	r4, #1
 8003a6e:	d103      	bne.n	8003a78 <f_mount+0x44>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8003a70:	4669      	mov	r1, sp
 8003a72:	a801      	add	r0, sp, #4
 8003a74:	f7ff fe26 	bl	80036c4 <find_volume.isra.0>
	LEAVE_FF(fs, res);
}
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd10      	pop	{r4, pc}
 8003a7c:	20000b7c 	.word	0x20000b7c

08003a80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a82:	b097      	sub	sp, #92	; 0x5c
 8003a84:	0007      	movs	r7, r0
 8003a86:	9109      	str	r1, [sp, #36]	; 0x24
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8003a88:	2009      	movs	r0, #9
{
 8003a8a:	9207      	str	r2, [sp, #28]
	if (!fp) return FR_INVALID_OBJECT;
 8003a8c:	2f00      	cmp	r7, #0
 8003a8e:	d022      	beq.n	8003ad6 <f_open+0x56>
	fp->fs = 0;			/* Clear file object */
 8003a90:	2300      	movs	r3, #0
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
 8003a92:	a909      	add	r1, sp, #36	; 0x24
	fp->fs = 0;			/* Clear file object */
 8003a94:	603b      	str	r3, [r7, #0]
	res = find_volume(&dj.fs, &path, 0);
 8003a96:	a80d      	add	r0, sp, #52	; 0x34
 8003a98:	f7ff fe14 	bl	80036c4 <find_volume.isra.0>
#endif
	if (res == FR_OK) {
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d11a      	bne.n	8003ad6 <f_open+0x56>
		INIT_BUF(dj);
 8003aa0:	ab0a      	add	r3, sp, #40	; 0x28
 8003aa2:	9313      	str	r3, [sp, #76]	; 0x4c
 8003aa4:	4b99      	ldr	r3, [pc, #612]	; (8003d0c <f_open+0x28c>)
 8003aa6:	9314      	str	r3, [sp, #80]	; 0x50
		res = follow_path(&dj, path);	/* Follow the file path */
 8003aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aaa:	9300      	str	r3, [sp, #0]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b2f      	cmp	r3, #47	; 0x2f
 8003ab0:	d001      	beq.n	8003ab6 <f_open+0x36>
 8003ab2:	2b5c      	cmp	r3, #92	; 0x5c
 8003ab4:	d102      	bne.n	8003abc <f_open+0x3c>
		path++;
 8003ab6:	9b00      	ldr	r3, [sp, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	9300      	str	r3, [sp, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8003abc:	2400      	movs	r4, #0
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003abe:	9b00      	ldr	r3, [sp, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8003ac0:	940f      	str	r4, [sp, #60]	; 0x3c
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b1f      	cmp	r3, #31
 8003ac6:	d80b      	bhi.n	8003ae0 <f_open+0x60>
		res = dir_sdi(dp, 0);
 8003ac8:	a80d      	add	r0, sp, #52	; 0x34
 8003aca:	f7ff ff79 	bl	80039c0 <dir_sdi.constprop.0>
		dp->dir = 0;
 8003ace:	9412      	str	r4, [sp, #72]	; 0x48
			if (!fp->lockid) res = FR_INT_ERR;
#endif
		}

#else				/* R/O configuration */
		if (res == FR_OK) {					/* Follow succeeded */
 8003ad0:	42a0      	cmp	r0, r4
 8003ad2:	d100      	bne.n	8003ad6 <f_open+0x56>
 8003ad4:	e1fb      	b.n	8003ece <f_open+0x44e>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8003ad6:	b017      	add	sp, #92	; 0x5c
 8003ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003ada:	9b00      	ldr	r3, [sp, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	9b00      	ldr	r3, [sp, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8003ae6:	d0f8      	beq.n	8003ada <f_open+0x5a>
 8003ae8:	2b5c      	cmp	r3, #92	; 0x5c
 8003aea:	d0f6      	beq.n	8003ada <f_open+0x5a>
	lfn = dp->lfn;
 8003aec:	2500      	movs	r5, #0
 8003aee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003af0:	9304      	str	r3, [sp, #16]
		w = p[si++];					/* Get a character */
 8003af2:	9b00      	ldr	r3, [sp, #0]
 8003af4:	1c6c      	adds	r4, r5, #1
 8003af6:	5d58      	ldrb	r0, [r3, r5]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8003af8:	281f      	cmp	r0, #31
 8003afa:	d91b      	bls.n	8003b34 <f_open+0xb4>
 8003afc:	282f      	cmp	r0, #47	; 0x2f
 8003afe:	d019      	beq.n	8003b34 <f_open+0xb4>
 8003b00:	285c      	cmp	r0, #92	; 0x5c
 8003b02:	d017      	beq.n	8003b34 <f_open+0xb4>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8003b04:	2dff      	cmp	r5, #255	; 0xff
 8003b06:	d00e      	beq.n	8003b26 <f_open+0xa6>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003b08:	2101      	movs	r1, #1
 8003b0a:	f7ff f9bf 	bl	8002e8c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d009      	beq.n	8003b26 <f_open+0xa6>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8003b12:	287f      	cmp	r0, #127	; 0x7f
 8003b14:	d809      	bhi.n	8003b2a <f_open+0xaa>
 8003b16:	4b7e      	ldr	r3, [pc, #504]	; (8003d10 <f_open+0x290>)
 8003b18:	e000      	b.n	8003b1c <f_open+0x9c>
	while (*str && *str != chr) str++;
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	781a      	ldrb	r2, [r3, #0]
 8003b1e:	2a00      	cmp	r2, #0
 8003b20:	d003      	beq.n	8003b2a <f_open+0xaa>
 8003b22:	4290      	cmp	r0, r2
 8003b24:	d1f9      	bne.n	8003b1a <f_open+0x9a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003b26:	2006      	movs	r0, #6
 8003b28:	e7d5      	b.n	8003ad6 <f_open+0x56>
		lfn[di++] = w;					/* Store the Unicode character */
 8003b2a:	9b04      	ldr	r3, [sp, #16]
 8003b2c:	006d      	lsls	r5, r5, #1
 8003b2e:	5358      	strh	r0, [r3, r5]
		w = p[si++];					/* Get a character */
 8003b30:	0025      	movs	r5, r4
 8003b32:	e7de      	b.n	8003af2 <f_open+0x72>
	*path = &p[si];						/* Return pointer to the next segment */
 8003b34:	9b00      	ldr	r3, [sp, #0]
 8003b36:	191b      	adds	r3, r3, r4
 8003b38:	9300      	str	r3, [sp, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003b3a:	2404      	movs	r4, #4
 8003b3c:	281f      	cmp	r0, #31
 8003b3e:	d900      	bls.n	8003b42 <f_open+0xc2>
 8003b40:	2400      	movs	r4, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003b42:	9b04      	ldr	r3, [sp, #16]
 8003b44:	1e9a      	subs	r2, r3, #2
 8003b46:	2d00      	cmp	r5, #0
 8003b48:	d0ed      	beq.n	8003b26 <f_open+0xa6>
		w = lfn[di - 1];
 8003b4a:	006b      	lsls	r3, r5, #1
 8003b4c:	5ad1      	ldrh	r1, [r2, r3]
		if (w != ' ' && w != '.') break;
 8003b4e:	2920      	cmp	r1, #32
 8003b50:	d002      	beq.n	8003b58 <f_open+0xd8>
 8003b52:	292e      	cmp	r1, #46	; 0x2e
 8003b54:	d000      	beq.n	8003b58 <f_open+0xd8>
 8003b56:	e1ec      	b.n	8003f32 <f_open+0x4b2>
		di--;
 8003b58:	3d01      	subs	r5, #1
 8003b5a:	e7f4      	b.n	8003b46 <f_open+0xc6>
		*d++ = (BYTE)val;
 8003b5c:	2020      	movs	r0, #32
 8003b5e:	7018      	strb	r0, [r3, #0]
 8003b60:	3301      	adds	r3, #1
	while (cnt--)
 8003b62:	4299      	cmp	r1, r3
 8003b64:	d1fa      	bne.n	8003b5c <f_open+0xdc>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003b66:	2300      	movs	r3, #0
 8003b68:	9804      	ldr	r0, [sp, #16]
 8003b6a:	0059      	lsls	r1, r3, #1
 8003b6c:	5a41      	ldrh	r1, [r0, r1]
 8003b6e:	2920      	cmp	r1, #32
 8003b70:	d022      	beq.n	8003bb8 <f_open+0x138>
 8003b72:	292e      	cmp	r1, #46	; 0x2e
 8003b74:	d020      	beq.n	8003bb8 <f_open+0x138>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <f_open+0xfe>
 8003b7a:	2103      	movs	r1, #3
 8003b7c:	430c      	orrs	r4, r1
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003b7e:	0069      	lsls	r1, r5, #1
 8003b80:	5a51      	ldrh	r1, [r2, r1]
 8003b82:	292e      	cmp	r1, #46	; 0x2e
 8003b84:	d002      	beq.n	8003b8c <f_open+0x10c>
 8003b86:	3d01      	subs	r5, #1
 8003b88:	2d00      	cmp	r5, #0
 8003b8a:	d1f8      	bne.n	8003b7e <f_open+0xfe>
		dp->fn[i++] = (BYTE)w;
 8003b8c:	2600      	movs	r6, #0
 8003b8e:	2208      	movs	r2, #8
 8003b90:	9603      	str	r6, [sp, #12]
 8003b92:	9201      	str	r2, [sp, #4]
		w = lfn[si++];					/* Get an LFN character */
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	9202      	str	r2, [sp, #8]
 8003b98:	9a04      	ldr	r2, [sp, #16]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d01e      	beq.n	8003be0 <f_open+0x160>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003ba2:	2820      	cmp	r0, #32
 8003ba4:	d004      	beq.n	8003bb0 <f_open+0x130>
 8003ba6:	282e      	cmp	r0, #46	; 0x2e
 8003ba8:	d108      	bne.n	8003bbc <f_open+0x13c>
 8003baa:	9b02      	ldr	r3, [sp, #8]
 8003bac:	429d      	cmp	r5, r3
 8003bae:	d00c      	beq.n	8003bca <f_open+0x14a>
			cf |= NS_LOSS | NS_LFN; continue;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	431c      	orrs	r4, r3
		dp->fn[i++] = (BYTE)w;
 8003bb4:	9b02      	ldr	r3, [sp, #8]
 8003bb6:	e7ed      	b.n	8003b94 <f_open+0x114>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003bb8:	3301      	adds	r3, #1
 8003bba:	e7d5      	b.n	8003b68 <f_open+0xe8>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003bbc:	9b03      	ldr	r3, [sp, #12]
 8003bbe:	9a01      	ldr	r2, [sp, #4]
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d206      	bcs.n	8003bd2 <f_open+0x152>
 8003bc4:	9b02      	ldr	r3, [sp, #8]
 8003bc6:	429d      	cmp	r5, r3
 8003bc8:	d162      	bne.n	8003c90 <f_open+0x210>
			if (ni == 11) {				/* Long extension */
 8003bca:	9b01      	ldr	r3, [sp, #4]
 8003bcc:	2b0b      	cmp	r3, #11
 8003bce:	d157      	bne.n	8003c80 <f_open+0x200>
 8003bd0:	e002      	b.n	8003bd8 <f_open+0x158>
 8003bd2:	9b01      	ldr	r3, [sp, #4]
 8003bd4:	2b0b      	cmp	r3, #11
 8003bd6:	d14b      	bne.n	8003c70 <f_open+0x1f0>
				cf |= NS_LOSS | NS_LFN; break;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	431c      	orrs	r4, r3
 8003bdc:	3308      	adds	r3, #8
 8003bde:	9301      	str	r3, [sp, #4]
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003be0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003be2:	ad0d      	add	r5, sp, #52	; 0x34
 8003be4:	781a      	ldrb	r2, [r3, #0]
 8003be6:	2ae5      	cmp	r2, #229	; 0xe5
 8003be8:	d101      	bne.n	8003bee <f_open+0x16e>
 8003bea:	3ae0      	subs	r2, #224	; 0xe0
 8003bec:	701a      	strb	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 8003bee:	9b01      	ldr	r3, [sp, #4]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d101      	bne.n	8003bf8 <f_open+0x178>
 8003bf4:	00b6      	lsls	r6, r6, #2
 8003bf6:	b2f6      	uxtb	r6, r6
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	4033      	ands	r3, r6
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	d002      	beq.n	8003c06 <f_open+0x186>
 8003c00:	43f2      	mvns	r2, r6
 8003c02:	0792      	lsls	r2, r2, #30
 8003c04:	d101      	bne.n	8003c0a <f_open+0x18a>
		cf |= NS_LFN;
 8003c06:	2202      	movs	r2, #2
 8003c08:	4314      	orrs	r4, r2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003c0a:	07a2      	lsls	r2, r4, #30
 8003c0c:	d409      	bmi.n	8003c22 <f_open+0x1a2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003c0e:	2203      	movs	r2, #3
 8003c10:	4016      	ands	r6, r2
 8003c12:	2e01      	cmp	r6, #1
 8003c14:	d101      	bne.n	8003c1a <f_open+0x19a>
 8003c16:	320d      	adds	r2, #13
 8003c18:	4314      	orrs	r4, r2
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d101      	bne.n	8003c22 <f_open+0x1a2>
 8003c1e:	3304      	adds	r3, #4
 8003c20:	431c      	orrs	r4, r3
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003c22:	69ab      	ldr	r3, [r5, #24]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003c24:	0028      	movs	r0, r5
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003c26:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003c28:	f7ff feca 	bl	80039c0 <dir_sdi.constprop.0>
 8003c2c:	1e03      	subs	r3, r0, #0
	if (res != FR_OK) return res;
 8003c2e:	d110      	bne.n	8003c52 <f_open+0x1d2>
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003c30:	22ff      	movs	r2, #255	; 0xff
 8003c32:	0016      	movs	r6, r2
 8003c34:	3b01      	subs	r3, #1
 8003c36:	842b      	strh	r3, [r5, #32]
 8003c38:	9203      	str	r2, [sp, #12]
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003c3a:	9305      	str	r3, [sp, #20]
		res = move_window(dp->fs, dp->sect);
 8003c3c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003c3e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003c40:	f7ff fcf0 	bl	8003624 <move_window>
 8003c44:	1e03      	subs	r3, r0, #0
		if (res != FR_OK) break;
 8003c46:	d104      	bne.n	8003c52 <f_open+0x1d2>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003c48:	9d12      	ldr	r5, [sp, #72]	; 0x48
		c = dir[DIR_Name];
 8003c4a:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d150      	bne.n	8003cf2 <f_open+0x272>
 8003c50:	2304      	movs	r3, #4
			ns = dp->fn[NSFLAG];
 8003c52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003c54:	9201      	str	r2, [sp, #4]
 8003c56:	7ad2      	ldrb	r2, [r2, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d100      	bne.n	8003c5e <f_open+0x1de>
 8003c5c:	e11f      	b.n	8003e9e <f_open+0x41e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d000      	beq.n	8003c64 <f_open+0x1e4>
 8003c62:	e16e      	b.n	8003f42 <f_open+0x4c2>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003c64:	2005      	movs	r0, #5
 8003c66:	421a      	tst	r2, r3
 8003c68:	d100      	bne.n	8003c6c <f_open+0x1ec>
 8003c6a:	e734      	b.n	8003ad6 <f_open+0x56>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8003c6c:	2004      	movs	r0, #4
 8003c6e:	e732      	b.n	8003ad6 <f_open+0x56>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003c70:	9b02      	ldr	r3, [sp, #8]
 8003c72:	429d      	cmp	r5, r3
 8003c74:	d004      	beq.n	8003c80 <f_open+0x200>
 8003c76:	2303      	movs	r3, #3
 8003c78:	431c      	orrs	r4, r3
			if (si > di) break;			/* No extension */
 8003c7a:	9b02      	ldr	r3, [sp, #8]
 8003c7c:	429d      	cmp	r5, r3
 8003c7e:	d3af      	bcc.n	8003be0 <f_open+0x160>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003c80:	230b      	movs	r3, #11
			b <<= 2; continue;
 8003c82:	00b6      	lsls	r6, r6, #2
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003c84:	9301      	str	r3, [sp, #4]
			b <<= 2; continue;
 8003c86:	b2f6      	uxtb	r6, r6
 8003c88:	9502      	str	r5, [sp, #8]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003c8a:	3b03      	subs	r3, #3
		dp->fn[i++] = (BYTE)w;
 8003c8c:	9303      	str	r3, [sp, #12]
 8003c8e:	e791      	b.n	8003bb4 <f_open+0x134>
		if (w >= 0x80) {				/* Non ASCII character */
 8003c90:	287f      	cmp	r0, #127	; 0x7f
 8003c92:	d90d      	bls.n	8003cb0 <f_open+0x230>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003c94:	2100      	movs	r1, #0
 8003c96:	f7ff f8f9 	bl	8002e8c <ff_convert>
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	0003      	movs	r3, r0
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003c9e:	4314      	orrs	r4, r2
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d00b      	beq.n	8003cbc <f_open+0x23c>
 8003ca4:	481b      	ldr	r0, [pc, #108]	; (8003d14 <f_open+0x294>)
 8003ca6:	18c0      	adds	r0, r0, r3
 8003ca8:	3880      	subs	r0, #128	; 0x80
 8003caa:	7800      	ldrb	r0, [r0, #0]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003cac:	2800      	cmp	r0, #0
 8003cae:	d005      	beq.n	8003cbc <f_open+0x23c>
	while (*str && *str != chr) str++;
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <f_open+0x298>)
 8003cb2:	781a      	ldrb	r2, [r3, #0]
 8003cb4:	2a00      	cmp	r2, #0
 8003cb6:	d00c      	beq.n	8003cd2 <f_open+0x252>
 8003cb8:	4282      	cmp	r2, r0
 8003cba:	d108      	bne.n	8003cce <f_open+0x24e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	205f      	movs	r0, #95	; 0x5f
 8003cc0:	431c      	orrs	r4, r3
		dp->fn[i++] = (BYTE)w;
 8003cc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003cc4:	9a03      	ldr	r2, [sp, #12]
 8003cc6:	5498      	strb	r0, [r3, r2]
 8003cc8:	0013      	movs	r3, r2
 8003cca:	3301      	adds	r3, #1
 8003ccc:	e7de      	b.n	8003c8c <f_open+0x20c>
	while (*str && *str != chr) str++;
 8003cce:	3301      	adds	r3, #1
 8003cd0:	e7ef      	b.n	8003cb2 <f_open+0x232>
				if (IsUpper(w)) {		/* ASCII large capital */
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	3b41      	subs	r3, #65	; 0x41
 8003cd6:	2b19      	cmp	r3, #25
 8003cd8:	d802      	bhi.n	8003ce0 <f_open+0x260>
					b |= 2;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	431e      	orrs	r6, r3
 8003cde:	e7f0      	b.n	8003cc2 <f_open+0x242>
					if (IsLower(w)) {	/* ASCII small capital */
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	3b61      	subs	r3, #97	; 0x61
 8003ce4:	2b19      	cmp	r3, #25
 8003ce6:	d8ec      	bhi.n	8003cc2 <f_open+0x242>
						b |= 1; w -= 0x20;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	3820      	subs	r0, #32
 8003cec:	431e      	orrs	r6, r3
 8003cee:	b280      	uxth	r0, r0
 8003cf0:	e7e7      	b.n	8003cc2 <f_open+0x242>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003cf2:	2be5      	cmp	r3, #229	; 0xe5
 8003cf4:	d006      	beq.n	8003d04 <f_open+0x284>
		a = dir[DIR_Attr] & AM_MASK;
 8003cf6:	223f      	movs	r2, #63	; 0x3f
 8003cf8:	7ae9      	ldrb	r1, [r5, #11]
 8003cfa:	400a      	ands	r2, r1
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003cfc:	0709      	lsls	r1, r1, #28
 8003cfe:	d50d      	bpl.n	8003d1c <f_open+0x29c>
 8003d00:	2a0f      	cmp	r2, #15
 8003d02:	d00e      	beq.n	8003d22 <f_open+0x2a2>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003d04:	9a05      	ldr	r2, [sp, #20]
 8003d06:	ab0d      	add	r3, sp, #52	; 0x34
 8003d08:	841a      	strh	r2, [r3, #32]
 8003d0a:	e07f      	b.n	8003e0c <f_open+0x38c>
 8003d0c:	20000b82 	.word	0x20000b82
 8003d10:	080049f2 	.word	0x080049f2
 8003d14:	08004a02 	.word	0x08004a02
 8003d18:	080049fb 	.word	0x080049fb
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003d1c:	2a0f      	cmp	r2, #15
 8003d1e:	d000      	beq.n	8003d22 <f_open+0x2a2>
 8003d20:	e07b      	b.n	8003e1a <f_open+0x39a>
				if (dp->lfn) {
 8003d22:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003d24:	aa0d      	add	r2, sp, #52	; 0x34
 8003d26:	9102      	str	r1, [sp, #8]
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	d049      	beq.n	8003dc0 <f_open+0x340>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003d2c:	2140      	movs	r1, #64	; 0x40
 8003d2e:	420b      	tst	r3, r1
 8003d30:	d06a      	beq.n	8003e08 <f_open+0x388>
						sum = dir[LDIR_Chksum];
 8003d32:	7b68      	ldrb	r0, [r5, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8003d34:	438b      	bics	r3, r1
						sum = dir[LDIR_Chksum];
 8003d36:	9003      	str	r0, [sp, #12]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8003d38:	001e      	movs	r6, r3
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003d3a:	88d3      	ldrh	r3, [r2, #6]
 8003d3c:	8413      	strh	r3, [r2, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003d3e:	7b6b      	ldrb	r3, [r5, #13]
 8003d40:	9a03      	ldr	r2, [sp, #12]
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d162      	bne.n	8003e0c <f_open+0x38c>
	if (LD_WORD(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8003d46:	7eea      	ldrb	r2, [r5, #27]
 8003d48:	7eab      	ldrb	r3, [r5, #26]
 8003d4a:	0212      	lsls	r2, r2, #8
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b21a      	sxth	r2, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d15b      	bne.n	8003e0c <f_open+0x38c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003d54:	782c      	ldrb	r4, [r5, #0]
 8003d56:	333f      	adds	r3, #63	; 0x3f
 8003d58:	401c      	ands	r4, r3
 8003d5a:	3c01      	subs	r4, #1
 8003d5c:	3b32      	subs	r3, #50	; 0x32
 8003d5e:	435c      	muls	r4, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003d60:	9201      	str	r2, [sp, #4]
 8003d62:	3b0c      	subs	r3, #12
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003d64:	9901      	ldr	r1, [sp, #4]
 8003d66:	4a78      	ldr	r2, [pc, #480]	; (8003f48 <f_open+0x4c8>)
 8003d68:	5c8a      	ldrb	r2, [r1, r2]
 8003d6a:	18a9      	adds	r1, r5, r2
 8003d6c:	7849      	ldrb	r1, [r1, #1]
 8003d6e:	5caa      	ldrb	r2, [r5, r2]
 8003d70:	0209      	lsls	r1, r1, #8
 8003d72:	430a      	orrs	r2, r1
 8003d74:	9204      	str	r2, [sp, #16]
		if (wc) {
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d04a      	beq.n	8003e10 <f_open+0x390>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003d7a:	2cfe      	cmp	r4, #254	; 0xfe
 8003d7c:	d846      	bhi.n	8003e0c <f_open+0x38c>
 8003d7e:	0010      	movs	r0, r2
 8003d80:	f7ff f8a0 	bl	8002ec4 <ff_wtoupper>
 8003d84:	1c63      	adds	r3, r4, #1
 8003d86:	9306      	str	r3, [sp, #24]
 8003d88:	9b02      	ldr	r3, [sp, #8]
 8003d8a:	0064      	lsls	r4, r4, #1
 8003d8c:	9008      	str	r0, [sp, #32]
 8003d8e:	5ae0      	ldrh	r0, [r4, r3]
 8003d90:	f7ff f898 	bl	8002ec4 <ff_wtoupper>
 8003d94:	9b08      	ldr	r3, [sp, #32]
 8003d96:	4283      	cmp	r3, r0
 8003d98:	d138      	bne.n	8003e0c <f_open+0x38c>
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003d9a:	9b04      	ldr	r3, [sp, #16]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003d9c:	9c06      	ldr	r4, [sp, #24]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003d9e:	9a01      	ldr	r2, [sp, #4]
 8003da0:	3201      	adds	r2, #1
 8003da2:	9201      	str	r2, [sp, #4]
 8003da4:	2a0d      	cmp	r2, #13
 8003da6:	d1dd      	bne.n	8003d64 <f_open+0x2e4>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8003da8:	782a      	ldrb	r2, [r5, #0]
 8003daa:	0652      	lsls	r2, r2, #25
 8003dac:	d506      	bpl.n	8003dbc <f_open+0x33c>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <f_open+0x33c>
 8003db2:	9b02      	ldr	r3, [sp, #8]
 8003db4:	0064      	lsls	r4, r4, #1
 8003db6:	5ae3      	ldrh	r3, [r4, r3]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d127      	bne.n	8003e0c <f_open+0x38c>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003dbc:	3e01      	subs	r6, #1
 8003dbe:	b2f6      	uxtb	r6, r6
	i = dp->index + 1;
 8003dc0:	ad0d      	add	r5, sp, #52	; 0x34
 8003dc2:	88ec      	ldrh	r4, [r5, #6]
 8003dc4:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003dc6:	b2a3      	uxth	r3, r4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d100      	bne.n	8003dce <f_open+0x34e>
 8003dcc:	e740      	b.n	8003c50 <f_open+0x1d0>
 8003dce:	692b      	ldr	r3, [r5, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d100      	bne.n	8003dd6 <f_open+0x356>
 8003dd4:	e73c      	b.n	8003c50 <f_open+0x1d0>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	0021      	movs	r1, r4
 8003dda:	4011      	ands	r1, r2
 8003ddc:	9101      	str	r1, [sp, #4]
 8003dde:	4214      	tst	r4, r2
 8003de0:	d109      	bne.n	8003df6 <f_open+0x376>
		if (!dp->clust) {		/* Static table */
 8003de2:	68e9      	ldr	r1, [r5, #12]
		dp->sect++;					/* Next sector */
 8003de4:	3301      	adds	r3, #1
 8003de6:	6828      	ldr	r0, [r5, #0]
 8003de8:	612b      	str	r3, [r5, #16]
		if (!dp->clust) {		/* Static table */
 8003dea:	2900      	cmp	r1, #0
 8003dec:	d13b      	bne.n	8003e66 <f_open+0x3e6>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003dee:	8903      	ldrh	r3, [r0, #8]
 8003df0:	429c      	cmp	r4, r3
 8003df2:	d300      	bcc.n	8003df6 <f_open+0x376>
 8003df4:	e72c      	b.n	8003c50 <f_open+0x1d0>
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003df8:	9901      	ldr	r1, [sp, #4]
 8003dfa:	3328      	adds	r3, #40	; 0x28
 8003dfc:	0149      	lsls	r1, r1, #5
	dp->index = (WORD)i;	/* Current index */
 8003dfe:	aa0d      	add	r2, sp, #52	; 0x34
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003e00:	185b      	adds	r3, r3, r1
	dp->index = (WORD)i;	/* Current index */
 8003e02:	80d4      	strh	r4, [r2, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003e04:	9312      	str	r3, [sp, #72]	; 0x48
	} while (res == FR_OK);
 8003e06:	e719      	b.n	8003c3c <f_open+0x1bc>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003e08:	42b3      	cmp	r3, r6
 8003e0a:	d098      	beq.n	8003d3e <f_open+0x2be>
 8003e0c:	26ff      	movs	r6, #255	; 0xff
 8003e0e:	e7d7      	b.n	8003dc0 <f_open+0x340>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003e10:	4a4e      	ldr	r2, [pc, #312]	; (8003f4c <f_open+0x4cc>)
 8003e12:	9904      	ldr	r1, [sp, #16]
 8003e14:	4291      	cmp	r1, r2
 8003e16:	d0c2      	beq.n	8003d9e <f_open+0x31e>
 8003e18:	e7f8      	b.n	8003e0c <f_open+0x38c>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003e1a:	2e00      	cmp	r6, #0
 8003e1c:	d10f      	bne.n	8003e3e <f_open+0x3be>
 8003e1e:	0029      	movs	r1, r5
 8003e20:	002a      	movs	r2, r5
	BYTE sum = 0;
 8003e22:	0033      	movs	r3, r6
 8003e24:	310b      	adds	r1, #11
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8003e26:	0858      	lsrs	r0, r3, #1
 8003e28:	01db      	lsls	r3, r3, #7
 8003e2a:	4303      	orrs	r3, r0
 8003e2c:	7810      	ldrb	r0, [r2, #0]
 8003e2e:	3201      	adds	r2, #1
 8003e30:	181b      	adds	r3, r3, r0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4291      	cmp	r1, r2
 8003e36:	d1f6      	bne.n	8003e26 <f_open+0x3a6>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003e38:	9a03      	ldr	r2, [sp, #12]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d029      	beq.n	8003e92 <f_open+0x412>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003e3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003e40:	2201      	movs	r2, #1
 8003e42:	7ac8      	ldrb	r0, [r1, #11]
 8003e44:	0003      	movs	r3, r0
 8003e46:	4013      	ands	r3, r2
 8003e48:	4210      	tst	r0, r2
 8003e4a:	d000      	beq.n	8003e4e <f_open+0x3ce>
 8003e4c:	e75a      	b.n	8003d04 <f_open+0x284>
 8003e4e:	001a      	movs	r2, r3
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003e50:	3901      	subs	r1, #1
 8003e52:	e002      	b.n	8003e5a <f_open+0x3da>
 8003e54:	2a0b      	cmp	r2, #11
 8003e56:	d100      	bne.n	8003e5a <f_open+0x3da>
 8003e58:	e6fb      	b.n	8003c52 <f_open+0x1d2>
 8003e5a:	5ca8      	ldrb	r0, [r5, r2]
 8003e5c:	3201      	adds	r2, #1
 8003e5e:	5c8c      	ldrb	r4, [r1, r2]
 8003e60:	4284      	cmp	r4, r0
 8003e62:	d0f7      	beq.n	8003e54 <f_open+0x3d4>
 8003e64:	e74e      	b.n	8003d04 <f_open+0x284>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003e66:	7883      	ldrb	r3, [r0, #2]
 8003e68:	0922      	lsrs	r2, r4, #4
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	421a      	tst	r2, r3
 8003e6e:	d1c2      	bne.n	8003df6 <f_open+0x376>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003e70:	f7ff fd3c 	bl	80038ec <get_fat>
 8003e74:	0001      	movs	r1, r0
				if (clst <= 1) return FR_INT_ERR;
 8003e76:	2801      	cmp	r0, #1
 8003e78:	d90d      	bls.n	8003e96 <f_open+0x416>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	d00d      	beq.n	8003e9a <f_open+0x41a>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003e7e:	6828      	ldr	r0, [r5, #0]
 8003e80:	68c3      	ldr	r3, [r0, #12]
 8003e82:	4299      	cmp	r1, r3
 8003e84:	d300      	bcc.n	8003e88 <f_open+0x408>
 8003e86:	e6e3      	b.n	8003c50 <f_open+0x1d0>
				dp->clust = clst;				/* Initialize data for new cluster */
 8003e88:	60e9      	str	r1, [r5, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8003e8a:	f7ff fd23 	bl	80038d4 <clust2sect>
 8003e8e:	6128      	str	r0, [r5, #16]
 8003e90:	e7b1      	b.n	8003df6 <f_open+0x376>
		res = move_window(dp->fs, dp->sect);
 8003e92:	2300      	movs	r3, #0
 8003e94:	e6dd      	b.n	8003c52 <f_open+0x1d2>
				if (clst <= 1) return FR_INT_ERR;
 8003e96:	2302      	movs	r3, #2
 8003e98:	e6db      	b.n	8003c52 <f_open+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e6d9      	b.n	8003c52 <f_open+0x1d2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003ea2:	421a      	tst	r2, r3
 8003ea4:	d113      	bne.n	8003ece <f_open+0x44e>
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8003ea6:	7acb      	ldrb	r3, [r1, #11]
 8003ea8:	06db      	lsls	r3, r3, #27
 8003eaa:	d549      	bpl.n	8003f40 <f_open+0x4c0>
	cl = LD_WORD(dir + DIR_FstClusLO);
 8003eac:	7ecb      	ldrb	r3, [r1, #27]
 8003eae:	7e8a      	ldrb	r2, [r1, #26]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	4313      	orrs	r3, r2
			dp->sclust = ld_clust(dp->fs, dir);
 8003eb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003eb6:	9201      	str	r2, [sp, #4]
	if (fs->fs_type == FS_FAT32)
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	2a03      	cmp	r2, #3
 8003ebc:	d105      	bne.n	8003eca <f_open+0x44a>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8003ebe:	7d48      	ldrb	r0, [r1, #21]
 8003ec0:	7d0a      	ldrb	r2, [r1, #20]
 8003ec2:	0200      	lsls	r0, r0, #8
 8003ec4:	4302      	orrs	r2, r0
 8003ec6:	0412      	lsls	r2, r2, #16
 8003ec8:	4313      	orrs	r3, r2
			dp->sclust = ld_clust(dp->fs, dir);
 8003eca:	930f      	str	r3, [sp, #60]	; 0x3c
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003ecc:	e608      	b.n	8003ae0 <f_open+0x60>
		dir = dj.dir;
 8003ece:	9b12      	ldr	r3, [sp, #72]	; 0x48
				res = FR_INVALID_NAME;
 8003ed0:	2006      	movs	r0, #6
			if (!dir) {						/* Current directory itself */
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d100      	bne.n	8003ed8 <f_open+0x458>
 8003ed6:	e5fe      	b.n	8003ad6 <f_open+0x56>
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
 8003ed8:	7ad9      	ldrb	r1, [r3, #11]
 8003eda:	2210      	movs	r2, #16
 8003edc:	0008      	movs	r0, r1
 8003ede:	4010      	ands	r0, r2
 8003ee0:	4211      	tst	r1, r2
 8003ee2:	d000      	beq.n	8003ee6 <f_open+0x466>
 8003ee4:	e6c2      	b.n	8003c6c <f_open+0x1ec>
	mode &= FA_READ;
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	9907      	ldr	r1, [sp, #28]
			fp->err = 0;						/* Clear error flag */
 8003eea:	71f8      	strb	r0, [r7, #7]
	mode &= FA_READ;
 8003eec:	4011      	ands	r1, r2
			fp->flag = mode;					/* File access mode */
 8003eee:	71b9      	strb	r1, [r7, #6]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8003ef0:	7eda      	ldrb	r2, [r3, #27]
 8003ef2:	7e9c      	ldrb	r4, [r3, #26]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8003ef4:	990d      	ldr	r1, [sp, #52]	; 0x34
	cl = LD_WORD(dir + DIR_FstClusLO);
 8003ef6:	0212      	lsls	r2, r2, #8
 8003ef8:	4322      	orrs	r2, r4
	if (fs->fs_type == FS_FAT32)
 8003efa:	780c      	ldrb	r4, [r1, #0]
 8003efc:	2c03      	cmp	r4, #3
 8003efe:	d105      	bne.n	8003f0c <f_open+0x48c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8003f00:	7d5d      	ldrb	r5, [r3, #21]
 8003f02:	7d1c      	ldrb	r4, [r3, #20]
 8003f04:	022d      	lsls	r5, r5, #8
 8003f06:	432c      	orrs	r4, r5
 8003f08:	0424      	lsls	r4, r4, #16
 8003f0a:	4322      	orrs	r2, r4
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8003f0c:	613a      	str	r2, [r7, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8003f0e:	7f5a      	ldrb	r2, [r3, #29]
 8003f10:	7f1c      	ldrb	r4, [r3, #28]
 8003f12:	0212      	lsls	r2, r2, #8
 8003f14:	4314      	orrs	r4, r2
 8003f16:	7f9a      	ldrb	r2, [r3, #30]
 8003f18:	7fdb      	ldrb	r3, [r3, #31]
 8003f1a:	0412      	lsls	r2, r2, #16
 8003f1c:	4322      	orrs	r2, r4
 8003f1e:	061b      	lsls	r3, r3, #24
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]
			fp->fptr = 0;						/* File pointer */
 8003f24:	2300      	movs	r3, #0
			fp->fs = dj.fs;	 					/* Validate file object */
 8003f26:	6039      	str	r1, [r7, #0]
			fp->fptr = 0;						/* File pointer */
 8003f28:	60bb      	str	r3, [r7, #8]
			fp->dsect = 0;
 8003f2a:	61bb      	str	r3, [r7, #24]
			fp->id = fp->fs->id;
 8003f2c:	88cb      	ldrh	r3, [r1, #6]
 8003f2e:	80bb      	strh	r3, [r7, #4]
 8003f30:	e5d1      	b.n	8003ad6 <f_open+0x56>
	lfn[di] = 0;						/* LFN is created */
 8003f32:	2100      	movs	r1, #0
 8003f34:	9804      	ldr	r0, [sp, #16]
 8003f36:	52c1      	strh	r1, [r0, r3]
void mem_set (void* dst, int val, UINT cnt) {
 8003f38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	310b      	adds	r1, #11
 8003f3e:	e610      	b.n	8003b62 <f_open+0xe2>
				res = FR_NO_PATH; break;
 8003f40:	2305      	movs	r3, #5
			res = dir_find(dp);				/* Find an object with the sagment name */
 8003f42:	0018      	movs	r0, r3
 8003f44:	e5c7      	b.n	8003ad6 <f_open+0x56>
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	08004a82 	.word	0x08004a82
 8003f4c:	0000ffff 	.word	0x0000ffff

08003f50 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f52:	b087      	sub	sp, #28
 8003f54:	9304      	str	r3, [sp, #16]
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8003f56:	2300      	movs	r3, #0
{
 8003f58:	0015      	movs	r5, r2
	*br = 0;	/* Clear read byte counter */
 8003f5a:	9a04      	ldr	r2, [sp, #16]
{
 8003f5c:	0004      	movs	r4, r0
	*br = 0;	/* Clear read byte counter */
 8003f5e:	6013      	str	r3, [r2, #0]
{
 8003f60:	9102      	str	r1, [sp, #8]

	res = validate(fp);							/* Check validity */
 8003f62:	f7ff fb47 	bl	80035f4 <validate>
 8003f66:	9001      	str	r0, [sp, #4]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d126      	bne.n	8003fba <f_read+0x6a>
	if (fp->err)								/* Check error */
 8003f6c:	79e3      	ldrb	r3, [r4, #7]
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d122      	bne.n	8003fba <f_read+0x6a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8003f74:	79a2      	ldrb	r2, [r4, #6]
 8003f76:	3301      	adds	r3, #1
 8003f78:	0011      	movs	r1, r2
 8003f7a:	4019      	ands	r1, r3
 8003f7c:	9105      	str	r1, [sp, #20]
 8003f7e:	421a      	tst	r2, r3
 8003f80:	d100      	bne.n	8003f84 <f_read+0x34>
 8003f82:	e072      	b.n	800406a <f_read+0x11a>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8003f84:	68e3      	ldr	r3, [r4, #12]
 8003f86:	68a2      	ldr	r2, [r4, #8]
 8003f88:	1a9f      	subs	r7, r3, r2
 8003f8a:	42af      	cmp	r7, r5
 8003f8c:	d900      	bls.n	8003f90 <f_read+0x40>
 8003f8e:	002f      	movs	r7, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8003f90:	2f00      	cmp	r7, #0
 8003f92:	d012      	beq.n	8003fba <f_read+0x6a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8003f94:	68a3      	ldr	r3, [r4, #8]
 8003f96:	05da      	lsls	r2, r3, #23
 8003f98:	d14a      	bne.n	8004030 <f_read+0xe0>
 8003f9a:	6820      	ldr	r0, [r4, #0]
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8003f9c:	0a5e      	lsrs	r6, r3, #9
 8003f9e:	7882      	ldrb	r2, [r0, #2]
 8003fa0:	3a01      	subs	r2, #1
 8003fa2:	4016      	ands	r6, r2
 8003fa4:	b2f6      	uxtb	r6, r6
			if (!csect) {						/* On the cluster boundary? */
 8003fa6:	2e00      	cmp	r6, #0
 8003fa8:	d116      	bne.n	8003fd8 <f_read+0x88>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d108      	bne.n	8003fc0 <f_read+0x70>
					clst = fp->sclust;			/* Follow from the origin */
 8003fae:	6920      	ldr	r0, [r4, #16]
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8003fb0:	2801      	cmp	r0, #1
 8003fb2:	d809      	bhi.n	8003fc8 <f_read+0x78>
 8003fb4:	2002      	movs	r0, #2
 8003fb6:	71e0      	strb	r0, [r4, #7]
 8003fb8:	9001      	str	r0, [sp, #4]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8003fba:	9801      	ldr	r0, [sp, #4]
 8003fbc:	b007      	add	sp, #28
 8003fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8003fc0:	6961      	ldr	r1, [r4, #20]
 8003fc2:	f7ff fc93 	bl	80038ec <get_fat>
 8003fc6:	e7f3      	b.n	8003fb0 <f_read+0x60>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d104      	bne.n	8003fd6 <f_read+0x86>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	71e3      	strb	r3, [r4, #7]
 8003fd0:	9b05      	ldr	r3, [sp, #20]
		LEAVE_FF(fp->fs, FR_DENIED);
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	e7f1      	b.n	8003fba <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
 8003fd6:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	6961      	ldr	r1, [r4, #20]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	9303      	str	r3, [sp, #12]
 8003fe0:	f7ff fc78 	bl	80038d4 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d0e5      	beq.n	8003fb4 <f_read+0x64>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003fe8:	2380      	movs	r3, #128	; 0x80
			sect += csect;
 8003fea:	1832      	adds	r2, r6, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	429f      	cmp	r7, r3
 8003ff0:	d31d      	bcc.n	800402e <f_read+0xde>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8003ff2:	9b03      	ldr	r3, [sp, #12]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8003ff4:	0a7d      	lsrs	r5, r7, #9
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8003ff6:	789b      	ldrb	r3, [r3, #2]
 8003ff8:	1971      	adds	r1, r6, r5
 8003ffa:	4299      	cmp	r1, r3
 8003ffc:	d900      	bls.n	8004000 <f_read+0xb0>
					cc = fp->fs->csize - csect;
 8003ffe:	1b9d      	subs	r5, r3, r6
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8004000:	9b03      	ldr	r3, [sp, #12]
 8004002:	9902      	ldr	r1, [sp, #8]
 8004004:	7858      	ldrb	r0, [r3, #1]
 8004006:	002b      	movs	r3, r5
 8004008:	f7fe ff94 	bl	8002f34 <disk_read>
 800400c:	2800      	cmp	r0, #0
 800400e:	d1dd      	bne.n	8003fcc <f_read+0x7c>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8004010:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004012:	9b02      	ldr	r3, [sp, #8]
 8004014:	9a04      	ldr	r2, [sp, #16]
 8004016:	195b      	adds	r3, r3, r5
 8004018:	9302      	str	r3, [sp, #8]
 800401a:	68a3      	ldr	r3, [r4, #8]
 800401c:	1b7f      	subs	r7, r7, r5
 800401e:	195b      	adds	r3, r3, r5
 8004020:	60a3      	str	r3, [r4, #8]
 8004022:	9b04      	ldr	r3, [sp, #16]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	9303      	str	r3, [sp, #12]
 8004028:	195b      	adds	r3, r3, r5
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e7b0      	b.n	8003f90 <f_read+0x40>
			fp->dsect = sect;
 800402e:	61a2      	str	r2, [r4, #24]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	68a3      	ldr	r3, [r4, #8]
 8004034:	0092      	lsls	r2, r2, #2
 8004036:	05db      	lsls	r3, r3, #23
 8004038:	0ddb      	lsrs	r3, r3, #23
 800403a:	003d      	movs	r5, r7
 800403c:	1ad3      	subs	r3, r2, r3
		if (rcnt > btr) rcnt = btr;
 800403e:	429f      	cmp	r7, r3
 8004040:	d900      	bls.n	8004044 <f_read+0xf4>
 8004042:	001d      	movs	r5, r3
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 8004044:	69a1      	ldr	r1, [r4, #24]
 8004046:	6820      	ldr	r0, [r4, #0]
 8004048:	f7ff faec 	bl	8003624 <move_window>
 800404c:	2800      	cmp	r0, #0
 800404e:	d1bd      	bne.n	8003fcc <f_read+0x7c>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8004050:	68a3      	ldr	r3, [r4, #8]
 8004052:	6822      	ldr	r2, [r4, #0]
 8004054:	05db      	lsls	r3, r3, #23
 8004056:	0ddb      	lsrs	r3, r3, #23
 8004058:	3328      	adds	r3, #40	; 0x28
 800405a:	18d3      	adds	r3, r2, r3
		*d++ = *s++;
 800405c:	5c1a      	ldrb	r2, [r3, r0]
 800405e:	9902      	ldr	r1, [sp, #8]
 8004060:	540a      	strb	r2, [r1, r0]
 8004062:	3001      	adds	r0, #1
	while (cnt--)
 8004064:	4285      	cmp	r5, r0
 8004066:	d1f9      	bne.n	800405c <f_read+0x10c>
 8004068:	e7d3      	b.n	8004012 <f_read+0xc2>
		LEAVE_FF(fp->fs, FR_DENIED);
 800406a:	2307      	movs	r3, #7
 800406c:	e7b1      	b.n	8003fd2 <f_read+0x82>

0800406e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800406e:	b510      	push	{r4, lr}
 8004070:	0004      	movs	r4, r0
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(fp);				/* Lock volume */
 8004072:	f7ff fabf 	bl	80035f4 <validate>
		if (res == FR_OK) {
 8004076:	2800      	cmp	r0, #0
 8004078:	d100      	bne.n	800407c <f_close+0xe>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
 800407a:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800407c:	bd10      	pop	{r4, pc}

0800407e <MX_TOUCHSENSING_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* TOUCHSENSING init function */
void MX_TOUCHSENSING_Init(void)
{
 800407e:	b510      	push	{r4, lr}
/***************************************/
   /**
  */

  tsl_user_Init();
 8004080:	f000 f804 	bl	800408c <tsl_user_Init>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8004084:	bd10      	pop	{r4, pc}

08004086 <MyTKeys_OffStateProcess>:
 8004086:	4770      	bx	lr

08004088 <MyTKeys_ErrorStateProcess>:
 8004088:	4770      	bx	lr
	...

0800408c <tsl_user_Init>:
  * @brief  Initialize the STMTouch Driver
  * @param  None
  * @retval None
  */
void tsl_user_Init(void)
{
 800408c:	b510      	push	{r4, lr}
  TSL_obj_GroupInit(&MyObjGroup); /* Init Objects */
 800408e:	4803      	ldr	r0, [pc, #12]	; (800409c <tsl_user_Init+0x10>)
 8004090:	f7fe fbc8 	bl	8002824 <TSL_obj_GroupInit>

  TSL_Init(MyBanks); /* Init acquisition module */
 8004094:	4802      	ldr	r0, [pc, #8]	; (80040a0 <tsl_user_Init+0x14>)
 8004096:	f7fe fb9f 	bl	80027d8 <TSL_Init>

  tsl_user_SetThresholds(); /* Init thresholds for each object individually (optional) */
}
 800409a:	bd10      	pop	{r4, pc}
 800409c:	20000004 	.word	0x20000004
 80040a0:	08004a90 	.word	0x08004a90

080040a4 <__libc_init_array>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	2600      	movs	r6, #0
 80040a8:	4d0c      	ldr	r5, [pc, #48]	; (80040dc <__libc_init_array+0x38>)
 80040aa:	4c0d      	ldr	r4, [pc, #52]	; (80040e0 <__libc_init_array+0x3c>)
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	42a6      	cmp	r6, r4
 80040b2:	d109      	bne.n	80040c8 <__libc_init_array+0x24>
 80040b4:	2600      	movs	r6, #0
 80040b6:	f000 f821 	bl	80040fc <_init>
 80040ba:	4d0a      	ldr	r5, [pc, #40]	; (80040e4 <__libc_init_array+0x40>)
 80040bc:	4c0a      	ldr	r4, [pc, #40]	; (80040e8 <__libc_init_array+0x44>)
 80040be:	1b64      	subs	r4, r4, r5
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	42a6      	cmp	r6, r4
 80040c4:	d105      	bne.n	80040d2 <__libc_init_array+0x2e>
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
 80040c8:	00b3      	lsls	r3, r6, #2
 80040ca:	58eb      	ldr	r3, [r5, r3]
 80040cc:	4798      	blx	r3
 80040ce:	3601      	adds	r6, #1
 80040d0:	e7ee      	b.n	80040b0 <__libc_init_array+0xc>
 80040d2:	00b3      	lsls	r3, r6, #2
 80040d4:	58eb      	ldr	r3, [r5, r3]
 80040d6:	4798      	blx	r3
 80040d8:	3601      	adds	r6, #1
 80040da:	e7f2      	b.n	80040c2 <__libc_init_array+0x1e>
 80040dc:	08004f70 	.word	0x08004f70
 80040e0:	08004f70 	.word	0x08004f70
 80040e4:	08004f70 	.word	0x08004f70
 80040e8:	08004f74 	.word	0x08004f74

080040ec <memset>:
 80040ec:	0003      	movs	r3, r0
 80040ee:	1882      	adds	r2, r0, r2
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d100      	bne.n	80040f6 <memset+0xa>
 80040f4:	4770      	bx	lr
 80040f6:	7019      	strb	r1, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	e7f9      	b.n	80040f0 <memset+0x4>

080040fc <_init>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr

08004108 <_fini>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410e:	bc08      	pop	{r3}
 8004110:	469e      	mov	lr, r3
 8004112:	4770      	bx	lr
