
SpaceCenter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005570  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b4  080056b4  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056bc  080056bc  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080056bc  080056bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080056cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  200000f0  080057bc  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dfc  080057bc  00020dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020072  00000000  00000000  0002015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c35  00000000  00000000  000401cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  00044e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a5  00000000  00000000  00046058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019854  00000000  00000000  000471fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e3e  00000000  00000000  00060a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000908fc  00000000  00000000  0007988f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000444c  00000000  00000000  0010a18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000819d  00000000  00000000  0010e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00116775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f0 	.word	0x200000f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005618 	.word	0x08005618

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f4 	.word	0x200000f4
 8000104:	08005618 	.word	0x08005618

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <_ZN9LedButtonC1EP12GPIO_TypeDeftS1_t>:
#include "LedButton.hpp"

LedButton::LedButton(GPIO_TypeDef* ledGpioIn, uint16_t ledGpioPinIn, 
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	1dbb      	adds	r3, r7, #6
 80004b6:	801a      	strh	r2, [r3, #0]
                      GPIO_TypeDef* buttonGpioIn, uint16_t buttonGpioPinIn) {
  ledGpio = ledGpioIn;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	601a      	str	r2, [r3, #0]
  ledGpioPin = ledGpioPinIn;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	1dba      	adds	r2, r7, #6
 80004c2:	8812      	ldrh	r2, [r2, #0]
 80004c4:	809a      	strh	r2, [r3, #4]
  buttonGpio = buttonGpioIn;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	683a      	ldr	r2, [r7, #0]
 80004ca:	609a      	str	r2, [r3, #8]
  buttonGpioPin = buttonGpioPinIn;
 80004cc:	68fa      	ldr	r2, [r7, #12]
 80004ce:	2318      	movs	r3, #24
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	8193      	strh	r3, [r2, #12]
  buttonState = NOT_PRESSED;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2200      	movs	r2, #0
 80004da:	739a      	strb	r2, [r3, #14]
  ledState = OFF;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2200      	movs	r2, #0
 80004e0:	73da      	strb	r2, [r3, #15]
  timeLast = 0;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  debounceButton = false;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	2200      	movs	r2, #0
 80004ec:	751a      	strb	r2, [r3, #20]
}
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b004      	add	sp, #16
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <_ZN9LedButtonD1Ev>:

LedButton::~LedButton() {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
}
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	0018      	movs	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}

0800050a <_ZN9LedButton11setLedStateE13LedState_enum>:

void LedButton::setLedState(LedState_enum state) {
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
 8000512:	000a      	movs	r2, r1
 8000514:	1cfb      	adds	r3, r7, #3
 8000516:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(ledGpio, ledGpioPin, static_cast<GPIO_PinState>(state));
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	8899      	ldrh	r1, [r3, #4]
 8000520:	1cfb      	adds	r3, r7, #3
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	001a      	movs	r2, r3
 8000526:	f002 fe67 	bl	80031f8 <HAL_GPIO_WritePin>
  ledState = state;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	1cfa      	adds	r2, r7, #3
 800052e:	7812      	ldrb	r2, [r2, #0]
 8000530:	73da      	strb	r2, [r3, #15]
}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b002      	add	sp, #8
 8000538:	bd80      	pop	{r7, pc}

0800053a <_ZN9LedButton17updateButtonStateEv>:

LedState_enum LedButton::getLedState() {
  return ledState;
}

void LedButton::updateButtonState() {
 800053a:	b580      	push	{r7, lr}
 800053c:	b086      	sub	sp, #24
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
  if (debounceButton == false) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	7d1b      	ldrb	r3, [r3, #20]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d12c      	bne.n	80005a4 <_ZN9LedButton17updateButtonStateEv+0x6a>
    ButtonState_enum newButtonState;
    if (HAL_GPIO_ReadPin(buttonGpio, buttonGpioPin) == GPIO_PIN_SET) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	689a      	ldr	r2, [r3, #8]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	899b      	ldrh	r3, [r3, #12]
 8000552:	0019      	movs	r1, r3
 8000554:	0010      	movs	r0, r2
 8000556:	f002 fe49 	bl	80031ec <HAL_GPIO_ReadPin>
 800055a:	0003      	movs	r3, r0
 800055c:	3b01      	subs	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	4153      	adcs	r3, r2
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d004      	beq.n	8000572 <_ZN9LedButton17updateButtonStateEv+0x38>
      newButtonState = NOT_PRESSED;
 8000568:	2317      	movs	r3, #23
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	e003      	b.n	800057a <_ZN9LedButton17updateButtonStateEv+0x40>
    } else {
      newButtonState = PRESSED;
 8000572:	2317      	movs	r3, #23
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	2201      	movs	r2, #1
 8000578:	701a      	strb	r2, [r3, #0]
    }
    if (newButtonState != buttonState) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7b9b      	ldrb	r3, [r3, #14]
 800057e:	2217      	movs	r2, #23
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	429a      	cmp	r2, r3
 8000586:	d007      	beq.n	8000598 <_ZN9LedButton17updateButtonStateEv+0x5e>
      debounceButton = true;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	751a      	strb	r2, [r3, #20]
      timeLast = HAL_GetTick();
 800058e:	f002 fc2b 	bl	8002de8 <HAL_GetTick>
 8000592:	0002      	movs	r2, r0
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	611a      	str	r2, [r3, #16]
    }
    buttonState = newButtonState;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2217      	movs	r2, #23
 800059c:	18ba      	adds	r2, r7, r2
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	739a      	strb	r2, [r3, #14]
    uint32_t timeDiff = timeNew - timeLast;
    if (timeDiff >= BUTTON_DEBOUNCE_MS) {
      debounceButton = false;
    }
  }
}
 80005a2:	e00e      	b.n	80005c2 <_ZN9LedButton17updateButtonStateEv+0x88>
    uint32_t timeNew = HAL_GetTick();
 80005a4:	f002 fc20 	bl	8002de8 <HAL_GetTick>
 80005a8:	0003      	movs	r3, r0
 80005aa:	613b      	str	r3, [r7, #16]
    uint32_t timeDiff = timeNew - timeLast;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	60fb      	str	r3, [r7, #12]
    if (timeDiff >= BUTTON_DEBOUNCE_MS) {
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b63      	cmp	r3, #99	; 0x63
 80005ba:	d902      	bls.n	80005c2 <_ZN9LedButton17updateButtonStateEv+0x88>
      debounceButton = false;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	751a      	strb	r2, [r3, #20]
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b006      	add	sp, #24
 80005c8:	bd80      	pop	{r7, pc}

080005ca <_ZN9LedButton14getButtonStateEv>:

ButtonState_enum LedButton::getButtonState() {
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  return buttonState;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7b9b      	ldrb	r3, [r3, #14]
}
 80005d6:	0018      	movs	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}

080005de <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>:
// Peripheral usage
#include "NeoPixel.hpp"
#include <stdlib.h>

NeoPixel::NeoPixel(uint16_t n, TIM_HandleTypeDef &timHandle, uint32_t timChannel, DMA_HandleTypeDef &dmaHandle) 
 80005de:	b580      	push	{r7, lr}
 80005e0:	b084      	sub	sp, #16
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	60f8      	str	r0, [r7, #12]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	200a      	movs	r0, #10
 80005ec:	183b      	adds	r3, r7, r0
 80005ee:	1c0a      	adds	r2, r1, #0
 80005f0:	801a      	strh	r2, [r3, #0]
        : htim(timHandle), hdma(dmaHandle), timCh{timChannel} {
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	615a      	str	r2, [r3, #20]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	69ba      	ldr	r2, [r7, #24]
 80005fc:	619a      	str	r2, [r3, #24]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	61da      	str	r2, [r3, #28]
  updateLength(n);
 8000604:	183b      	adds	r3, r7, r0
 8000606:	881a      	ldrh	r2, [r3, #0]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	0011      	movs	r1, r2
 800060c:	0018      	movs	r0, r3
 800060e:	f000 f80e 	bl	800062e <_ZN8NeoPixel12updateLengthEt>
}
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	0018      	movs	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	b004      	add	sp, #16
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN8NeoPixelD1Ev>:

NeoPixel::~NeoPixel() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
}
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	0018      	movs	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}

0800062e <_ZN8NeoPixel12updateLengthEt>:

void NeoPixel::updateLength(uint16_t n) {
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	000a      	movs	r2, r1
 8000638:	1cbb      	adds	r3, r7, #2
 800063a:	801a      	strh	r2, [r3, #0]

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * 3;
 800063c:	1cbb      	adds	r3, r7, #2
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	1c1a      	adds	r2, r3, #0
 8000642:	1892      	adds	r2, r2, r2
 8000644:	18d3      	adds	r3, r2, r3
 8000646:	b29a      	uxth	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	809a      	strh	r2, [r3, #4]
  pixels = (uint8_t *)malloc(numBytes);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	889b      	ldrh	r3, [r3, #4]
 8000650:	0018      	movs	r0, r3
 8000652:	f004 fe21 	bl	8005298 <malloc>
 8000656:	0003      	movs	r3, r0
 8000658:	001a      	movs	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	609a      	str	r2, [r3, #8]
  wrBufLen = n*3*8+8;
 800065e:	1cbb      	adds	r3, r7, #2
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	2218      	movs	r2, #24
 8000664:	4353      	muls	r3, r2
 8000666:	b29b      	uxth	r3, r3
 8000668:	3308      	adds	r3, #8
 800066a:	b29a      	uxth	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	801a      	strh	r2, [r3, #0]
  wr_buf = (uint8_t *)malloc(wrBufLen);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	0018      	movs	r0, r3
 8000676:	f004 fe0f 	bl	8005298 <malloc>
 800067a:	0003      	movs	r3, r0
 800067c:	001a      	movs	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	60da      	str	r2, [r3, #12]
  numLEDs = n;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	1cba      	adds	r2, r7, #2
 8000686:	8812      	ldrh	r2, [r2, #0]
 8000688:	805a      	strh	r2, [r3, #2]
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}

08000692 <_ZN8NeoPixel13setPixelColorEthhh>:

void NeoPixel::setPixelColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 8000692:	b590      	push	{r4, r7, lr}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	000c      	movs	r4, r1
 800069c:	0010      	movs	r0, r2
 800069e:	0019      	movs	r1, r3
 80006a0:	1cbb      	adds	r3, r7, #2
 80006a2:	1c22      	adds	r2, r4, #0
 80006a4:	801a      	strh	r2, [r3, #0]
 80006a6:	1c7b      	adds	r3, r7, #1
 80006a8:	1c02      	adds	r2, r0, #0
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	003b      	movs	r3, r7
 80006ae:	1c0a      	adds	r2, r1, #0
 80006b0:	701a      	strb	r2, [r3, #0]
  pixels[n * 3] = g;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6899      	ldr	r1, [r3, #8]
 80006b6:	1cbb      	adds	r3, r7, #2
 80006b8:	881a      	ldrh	r2, [r3, #0]
 80006ba:	0013      	movs	r3, r2
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	189b      	adds	r3, r3, r2
 80006c0:	18cb      	adds	r3, r1, r3
 80006c2:	003a      	movs	r2, r7
 80006c4:	7812      	ldrb	r2, [r2, #0]
 80006c6:	701a      	strb	r2, [r3, #0]
  pixels[n * 3 + 1] = r;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6899      	ldr	r1, [r3, #8]
 80006cc:	1cbb      	adds	r3, r7, #2
 80006ce:	881a      	ldrh	r2, [r3, #0]
 80006d0:	0013      	movs	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	189b      	adds	r3, r3, r2
 80006d6:	3301      	adds	r3, #1
 80006d8:	18cb      	adds	r3, r1, r3
 80006da:	1c7a      	adds	r2, r7, #1
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	701a      	strb	r2, [r3, #0]
  pixels[n * 3 + 2] = b;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6899      	ldr	r1, [r3, #8]
 80006e4:	1cbb      	adds	r3, r7, #2
 80006e6:	881a      	ldrh	r2, [r3, #0]
 80006e8:	0013      	movs	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	189b      	adds	r3, r3, r2
 80006ee:	3302      	adds	r3, #2
 80006f0:	18ca      	adds	r2, r1, r3
 80006f2:	2318      	movs	r3, #24
 80006f4:	18fb      	adds	r3, r7, r3
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	7013      	strb	r3, [r2, #0]
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b003      	add	sp, #12
 8000700:	bd90      	pop	{r4, r7, pc}

08000702 <_ZN8NeoPixel4showEv>:

void NeoPixel::show(void) {
 8000702:	b580      	push	{r7, lr}
 8000704:	b086      	sub	sp, #24
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]

  for(uint16_t j = 0; j < numBytes; j++) {
 800070a:	2316      	movs	r3, #22
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	2200      	movs	r2, #0
 8000710:	801a      	strh	r2, [r3, #0]
 8000712:	e02c      	b.n	800076e <_ZN8NeoPixel4showEv+0x6c>
	  for(uint_fast8_t i = 0; i < 8; i++) {
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	e020      	b.n	800075c <_ZN8NeoPixel4showEv+0x5a>
		  wr_buf[i+8*j   ] = PWM_LO << (((pixels[j]  << i) & 0x80) > 0);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	2316      	movs	r3, #22
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	18d3      	adds	r3, r2, r3
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	001a      	movs	r2, r3
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	409a      	lsls	r2, r3
 800072e:	0013      	movs	r3, r2
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	4013      	ands	r3, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	dd01      	ble.n	800073c <_ZN8NeoPixel4showEv+0x3a>
 8000738:	2118      	movs	r1, #24
 800073a:	e000      	b.n	800073e <_ZN8NeoPixel4showEv+0x3c>
 800073c:	210c      	movs	r1, #12
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	2316      	movs	r3, #22
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	0018      	movs	r0, r3
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	18c3      	adds	r3, r0, r3
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	1c0a      	adds	r2, r1, #0
 8000754:	701a      	strb	r2, [r3, #0]
	  for(uint_fast8_t i = 0; i < 8; i++) {
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	3301      	adds	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	2b07      	cmp	r3, #7
 8000760:	d9db      	bls.n	800071a <_ZN8NeoPixel4showEv+0x18>
  for(uint16_t j = 0; j < numBytes; j++) {
 8000762:	2116      	movs	r1, #22
 8000764:	187b      	adds	r3, r7, r1
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	187b      	adds	r3, r7, r1
 800076a:	3201      	adds	r2, #1
 800076c:	801a      	strh	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	889b      	ldrh	r3, [r3, #4]
 8000772:	2216      	movs	r2, #22
 8000774:	18ba      	adds	r2, r7, r2
 8000776:	8812      	ldrh	r2, [r2, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	d3cb      	bcc.n	8000714 <_ZN8NeoPixel4showEv+0x12>
	  }
  }
  for(uint_fast8_t i = 0; i < 8; i++) {
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	e00d      	b.n	800079e <_ZN8NeoPixel4showEv+0x9c>
	  wr_buf[i+8*numBytes   ] = 0;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	68da      	ldr	r2, [r3, #12]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	889b      	ldrh	r3, [r3, #4]
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	0019      	movs	r1, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	18cb      	adds	r3, r1, r3
 8000792:	18d3      	adds	r3, r2, r3
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
  for(uint_fast8_t i = 0; i < 8; i++) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3301      	adds	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	2b07      	cmp	r3, #7
 80007a2:	d9ee      	bls.n	8000782 <_ZN8NeoPixel4showEv+0x80>
  }
  HAL_TIM_PWM_Start_DMA(&htim, timCh, (uint32_t *)wr_buf, wrBufLen);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6958      	ldr	r0, [r3, #20]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	69d9      	ldr	r1, [r3, #28]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68da      	ldr	r2, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	f003 fe77 	bl	80044a6 <HAL_TIM_PWM_Start_DMA>
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b006      	add	sp, #24
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_ZN12RocketStreamC1ER17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>:
#include "RocketStream.hpp"
#include "stm32l0xx_hal.h"

RocketStream::RocketStream(TIM_HandleTypeDef &timHandle, uint32_t timChannel, DMA_HandleTypeDef &dmaHandle)
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	603b      	str	r3, [r7, #0]
                : ledArray((uint16_t)(NUM_LEDS_ROCKET_STREAM), timHandle, timChannel, dmaHandle) {
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	000b      	movs	r3, r1
 80007da:	2148      	movs	r1, #72	; 0x48
 80007dc:	f7ff feff 	bl	80005de <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
  for (int i=0; i<NUM_LEDS_ROCKET_STREAM; i++) {
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	e00b      	b.n	80007fe <_ZN12RocketStreamC1ER17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x3e>
    ledArray.setPixelColor(i, 0, 0, 0);
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	b299      	uxth	r1, r3
 80007ec:	2300      	movs	r3, #0
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2300      	movs	r3, #0
 80007f2:	2200      	movs	r2, #0
 80007f4:	f7ff ff4d 	bl	8000692 <_ZN8NeoPixel13setPixelColorEthhh>
  for (int i=0; i<NUM_LEDS_ROCKET_STREAM; i++) {
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	3301      	adds	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b47      	cmp	r3, #71	; 0x47
 8000802:	ddf0      	ble.n	80007e6 <_ZN12RocketStreamC1ER17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0x26>
  }
  showPixels();
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	0018      	movs	r0, r3
 8000808:	f000 f8d0 	bl	80009ac <_ZN12RocketStream10showPixelsEv>
}
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	0018      	movs	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	b006      	add	sp, #24
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZN12RocketStreamD1Ev>:

RocketStream::~RocketStream() {
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff fefb 	bl	800061c <_ZN8NeoPixelD1Ev>
}
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}

08000830 <_ZN12RocketStream14setRocketColorEhhhh>:

void RocketStream::setRocketColor(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b087      	sub	sp, #28
 8000834:	af02      	add	r7, sp, #8
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	000c      	movs	r4, r1
 800083a:	0010      	movs	r0, r2
 800083c:	0019      	movs	r1, r3
 800083e:	1cfb      	adds	r3, r7, #3
 8000840:	1c22      	adds	r2, r4, #0
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	1cbb      	adds	r3, r7, #2
 8000846:	1c02      	adds	r2, r0, #0
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	1c7b      	adds	r3, r7, #1
 800084c:	1c0a      	adds	r2, r1, #0
 800084e:	701a      	strb	r2, [r3, #0]
  for (int i=index*2; i<index*2+2; i++) {
 8000850:	1cfb      	adds	r3, r7, #3
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	e010      	b.n	800087c <_ZN12RocketStream14setRocketColorEhhhh+0x4c>
    ledArray.setPixelColor(i, r, g, b);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	b299      	uxth	r1, r3
 8000860:	1c7b      	adds	r3, r7, #1
 8000862:	781c      	ldrb	r4, [r3, #0]
 8000864:	1cbb      	adds	r3, r7, #2
 8000866:	781a      	ldrb	r2, [r3, #0]
 8000868:	2320      	movs	r3, #32
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	0023      	movs	r3, r4
 8000872:	f7ff ff0e 	bl	8000692 <_ZN8NeoPixel13setPixelColorEthhh>
  for (int i=index*2; i<index*2+2; i++) {
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3301      	adds	r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	1cfb      	adds	r3, r7, #3
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	429a      	cmp	r2, r3
 8000888:	dbe7      	blt.n	800085a <_ZN12RocketStream14setRocketColorEhhhh+0x2a>
  }
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b005      	add	sp, #20
 8000892:	bd90      	pop	{r4, r7, pc}

08000894 <_ZN12RocketStream17setAllRocketColorEhhh>:

void RocketStream::setAllRocketColor(uint8_t r, uint8_t g, uint8_t b) {
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b087      	sub	sp, #28
 8000898:	af02      	add	r7, sp, #8
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	000c      	movs	r4, r1
 800089e:	0010      	movs	r0, r2
 80008a0:	0019      	movs	r1, r3
 80008a2:	1cfb      	adds	r3, r7, #3
 80008a4:	1c22      	adds	r2, r4, #0
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	1cbb      	adds	r3, r7, #2
 80008aa:	1c02      	adds	r2, r0, #0
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	1c7b      	adds	r3, r7, #1
 80008b0:	1c0a      	adds	r2, r1, #0
 80008b2:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_ROCKETS*NUM_LEDS_ROCKET; i++) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	e00f      	b.n	80008da <_ZN12RocketStream17setAllRocketColorEhhh+0x46>
    ledArray.setPixelColor(i, r, g, b);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	b299      	uxth	r1, r3
 80008c0:	1cbb      	adds	r3, r7, #2
 80008c2:	781c      	ldrb	r4, [r3, #0]
 80008c4:	1cfb      	adds	r3, r7, #3
 80008c6:	781a      	ldrb	r2, [r3, #0]
 80008c8:	1c7b      	adds	r3, r7, #1
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	0023      	movs	r3, r4
 80008d0:	f7ff fedf 	bl	8000692 <_ZN8NeoPixel13setPixelColorEthhh>
  for (int i=0; i<NUM_ROCKETS*NUM_LEDS_ROCKET; i++) {
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2b07      	cmp	r3, #7
 80008de:	ddec      	ble.n	80008ba <_ZN12RocketStream17setAllRocketColorEhhh+0x26>
  }
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b005      	add	sp, #20
 80008e8:	bd90      	pop	{r4, r7, pc}

080008ea <_ZN12RocketStream14setStreamColorEhhhh>:

void RocketStream::setStreamColor(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80008ea:	b5b0      	push	{r4, r5, r7, lr}
 80008ec:	b084      	sub	sp, #16
 80008ee:	af02      	add	r7, sp, #8
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	000c      	movs	r4, r1
 80008f4:	0010      	movs	r0, r2
 80008f6:	0019      	movs	r1, r3
 80008f8:	1cfb      	adds	r3, r7, #3
 80008fa:	1c22      	adds	r2, r4, #0
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	1cbb      	adds	r3, r7, #2
 8000900:	1c02      	adds	r2, r0, #0
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	1c7b      	adds	r3, r7, #1
 8000906:	1c0a      	adds	r2, r1, #0
 8000908:	701a      	strb	r2, [r3, #0]
  // Left side stream
  ledArray.setPixelColor(STREAM_START_IND+index, r, g, b);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	1cfb      	adds	r3, r7, #3
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b29b      	uxth	r3, r3
 8000912:	3308      	adds	r3, #8
 8000914:	b299      	uxth	r1, r3
 8000916:	1c7b      	adds	r3, r7, #1
 8000918:	781c      	ldrb	r4, [r3, #0]
 800091a:	1cbb      	adds	r3, r7, #2
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	2518      	movs	r5, #24
 8000920:	197b      	adds	r3, r7, r5
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	0023      	movs	r3, r4
 8000928:	f7ff feb3 	bl	8000692 <_ZN8NeoPixel13setPixelColorEthhh>

  // Right side stream
  ledArray.setPixelColor(STREAM_START_IND+NUM_LEDS_STREAM*2-1-index, r, g, b);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	1cfb      	adds	r3, r7, #3
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b29b      	uxth	r3, r3
 8000934:	2247      	movs	r2, #71	; 0x47
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	b299      	uxth	r1, r3
 800093a:	1c7b      	adds	r3, r7, #1
 800093c:	781c      	ldrb	r4, [r3, #0]
 800093e:	1cbb      	adds	r3, r7, #2
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	197b      	adds	r3, r7, r5
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	0023      	movs	r3, r4
 800094a:	f7ff fea2 	bl	8000692 <_ZN8NeoPixel13setPixelColorEthhh>
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bdb0      	pop	{r4, r5, r7, pc}

08000956 <_ZN12RocketStream17setAllStreamColorEhhh>:

void RocketStream::setAllStreamColor(uint8_t r, uint8_t g, uint8_t b) {
 8000956:	b590      	push	{r4, r7, lr}
 8000958:	b087      	sub	sp, #28
 800095a:	af02      	add	r7, sp, #8
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	000c      	movs	r4, r1
 8000960:	0010      	movs	r0, r2
 8000962:	0019      	movs	r1, r3
 8000964:	1cfb      	adds	r3, r7, #3
 8000966:	1c22      	adds	r2, r4, #0
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	1cbb      	adds	r3, r7, #2
 800096c:	1c02      	adds	r2, r0, #0
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	1c7b      	adds	r3, r7, #1
 8000972:	1c0a      	adds	r2, r1, #0
 8000974:	701a      	strb	r2, [r3, #0]
  for (int i=STREAM_START_IND; i<STREAM_START_IND+NUM_LEDS_STREAM*2; i++) {
 8000976:	2308      	movs	r3, #8
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	e00f      	b.n	800099c <_ZN12RocketStream17setAllStreamColorEhhh+0x46>
    ledArray.setPixelColor(i, r, g, b);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	b299      	uxth	r1, r3
 8000982:	1cbb      	adds	r3, r7, #2
 8000984:	781c      	ldrb	r4, [r3, #0]
 8000986:	1cfb      	adds	r3, r7, #3
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	1c7b      	adds	r3, r7, #1
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	0023      	movs	r3, r4
 8000992:	f7ff fe7e 	bl	8000692 <_ZN8NeoPixel13setPixelColorEthhh>
  for (int i=STREAM_START_IND; i<STREAM_START_IND+NUM_LEDS_STREAM*2; i++) {
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	3301      	adds	r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b47      	cmp	r3, #71	; 0x47
 80009a0:	ddec      	ble.n	800097c <_ZN12RocketStream17setAllStreamColorEhhh+0x26>
  }
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b005      	add	sp, #20
 80009aa:	bd90      	pop	{r4, r7, pc}

080009ac <_ZN12RocketStream10showPixelsEv>:

void RocketStream::showPixels() {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  ledArray.show();
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	0018      	movs	r0, r3
 80009b8:	f7ff fea3 	bl	8000702 <_ZN8NeoPixel4showEv>
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_ZN10TouchBoardC1Ev>:
#include "TouchBoard.hpp"

TouchBoard::TouchBoard() {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  myTouchState = NOT_TOUCHED;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2201      	movs	r2, #1
 80009d0:	739a      	strb	r2, [r3, #14]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e01b      	b.n	8000a10 <_ZN10TouchBoardC1Ev+0x4c>
    pixelColors[i].r = 0;
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	0013      	movs	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	189b      	adds	r3, r3, r2
 80009e2:	2200      	movs	r2, #0
 80009e4:	545a      	strb	r2, [r3, r1]
    pixelColors[i].g = 0;
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	0013      	movs	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	189b      	adds	r3, r3, r2
 80009f0:	18cb      	adds	r3, r1, r3
 80009f2:	3301      	adds	r3, #1
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
    pixelColors[i].b = 0;
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	0013      	movs	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	189b      	adds	r3, r3, r2
 8000a02:	18cb      	adds	r3, r1, r3
 8000a04:	3302      	adds	r3, #2
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	dde0      	ble.n	80009d8 <_ZN10TouchBoardC1Ev+0x14>
  }
}
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b004      	add	sp, #16
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_ZN10TouchBoardD1Ev>:

TouchBoard::~TouchBoard() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
}
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_ZN10TouchBoard16setAllPixelColorEhhh>:
  pixelColors[pixel_num].r = r;
  pixelColors[pixel_num].g = g;
  pixelColors[pixel_num].b = b;
}

void TouchBoard::setAllPixelColor(uint8_t r, uint8_t g, uint8_t b) {
 8000a32:	b590      	push	{r4, r7, lr}
 8000a34:	b085      	sub	sp, #20
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	000c      	movs	r4, r1
 8000a3c:	0010      	movs	r0, r2
 8000a3e:	0019      	movs	r1, r3
 8000a40:	1cfb      	adds	r3, r7, #3
 8000a42:	1c22      	adds	r2, r4, #0
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	1cbb      	adds	r3, r7, #2
 8000a48:	1c02      	adds	r2, r0, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	1c7b      	adds	r3, r7, #1
 8000a4e:	1c0a      	adds	r2, r1, #0
 8000a50:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e01e      	b.n	8000a96 <_ZN10TouchBoard16setAllPixelColorEhhh+0x64>
    pixelColors[i].r = r;
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	0013      	movs	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	189b      	adds	r3, r3, r2
 8000a62:	1cfa      	adds	r2, r7, #3
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	545a      	strb	r2, [r3, r1]
    pixelColors[i].g = g;
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	189b      	adds	r3, r3, r2
 8000a72:	18cb      	adds	r3, r1, r3
 8000a74:	3301      	adds	r3, #1
 8000a76:	1cba      	adds	r2, r7, #2
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	701a      	strb	r2, [r3, #0]
    pixelColors[i].b = b;
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	0013      	movs	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	189b      	adds	r3, r3, r2
 8000a86:	18cb      	adds	r3, r1, r3
 8000a88:	3302      	adds	r3, #2
 8000a8a:	1c7a      	adds	r2, r7, #1
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<NUM_PIXELS_PER_BOARD; i++) {
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	dddd      	ble.n	8000a58 <_ZN10TouchBoard16setAllPixelColorEhhh+0x26>
  }
}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b005      	add	sp, #20
 8000aa4:	bd90      	pop	{r4, r7, pc}
	...

08000aa8 <_ZN10TouchBoard13getPixelColorEh>:

PixelColor_s TouchBoard::getPixelColor(uint8_t pixel_ind) {
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	000a      	movs	r2, r1
 8000ab2:	1cfb      	adds	r3, r7, #3
 8000ab4:	701a      	strb	r2, [r3, #0]
  return pixelColors[pixel_ind];
 8000ab6:	1cfb      	adds	r3, r7, #3
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	240c      	movs	r4, #12
 8000abc:	1938      	adds	r0, r7, r4
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	189b      	adds	r3, r3, r2
 8000ac6:	18cb      	adds	r3, r1, r3
 8000ac8:	2203      	movs	r2, #3
 8000aca:	0019      	movs	r1, r3
 8000acc:	f004 fd50 	bl	8005570 <memcpy>
 8000ad0:	193a      	adds	r2, r7, r4
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	7811      	ldrb	r1, [r2, #0]
 8000ad6:	20ff      	movs	r0, #255	; 0xff
 8000ad8:	4001      	ands	r1, r0
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	4383      	bics	r3, r0
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	7851      	ldrb	r1, [r2, #1]
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	4001      	ands	r1, r0
 8000ae6:	0209      	lsls	r1, r1, #8
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <_ZN10TouchBoard13getPixelColorEh+0x5c>)
 8000aea:	4003      	ands	r3, r0
 8000aec:	430b      	orrs	r3, r1
 8000aee:	7892      	ldrb	r2, [r2, #2]
 8000af0:	21ff      	movs	r1, #255	; 0xff
 8000af2:	400a      	ands	r2, r1
 8000af4:	0412      	lsls	r2, r2, #16
 8000af6:	4904      	ldr	r1, [pc, #16]	; (8000b08 <_ZN10TouchBoard13getPixelColorEh+0x60>)
 8000af8:	400b      	ands	r3, r1
 8000afa:	4313      	orrs	r3, r2
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b005      	add	sp, #20
 8000b02:	bd90      	pop	{r4, r7, pc}
 8000b04:	ffff00ff 	.word	0xffff00ff
 8000b08:	ff00ffff 	.word	0xff00ffff

08000b0c <_ZN10TouchBoard12setTouchGPIOEP12GPIO_TypeDeft>:

void TouchBoard::setTouchGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIOpin) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	1dbb      	adds	r3, r7, #6
 8000b18:	801a      	strh	r2, [r3, #0]
  myGpioPort = GPIOx;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	609a      	str	r2, [r3, #8]
  myGpioPin = GPIOpin;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	1dba      	adds	r2, r7, #6
 8000b24:	8812      	ldrh	r2, [r2, #0]
 8000b26:	819a      	strh	r2, [r3, #12]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b004      	add	sp, #16
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_ZN10TouchBoard16updateTouchStateEv>:

void TouchBoard::updateTouchState() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(myGpioPort, myGpioPin) == GPIO_PIN_RESET) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	899b      	ldrh	r3, [r3, #12]
 8000b40:	0019      	movs	r1, r3
 8000b42:	0010      	movs	r0, r2
 8000b44:	f002 fb52 	bl	80031ec <HAL_GPIO_ReadPin>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	425a      	negs	r2, r3
 8000b4c:	4153      	adcs	r3, r2
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <_ZN10TouchBoard16updateTouchStateEv+0x2c>
    myTouchState = TOUCHED;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	739a      	strb	r2, [r3, #14]
  } else {
    myTouchState = NOT_TOUCHED;
  }
}
 8000b5a:	e002      	b.n	8000b62 <_ZN10TouchBoard16updateTouchStateEv+0x32>
    myTouchState = NOT_TOUCHED;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	739a      	strb	r2, [r3, #14]
}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_ZN10TouchBoard13getTouchStateEv>:

TouchState_enum TouchBoard::getTouchState() {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  return myTouchState;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7b9b      	ldrb	r3, [r3, #14]
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	0018      	movs	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>:
#include "TouchBoardGroup.hpp"
#include "TouchGpioMap.h"
#include "stm32l0xx_hal.h"

TouchBoardGroup::TouchBoardGroup(uint8_t n, TIM_HandleTypeDef &timHandle,
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	b08b      	sub	sp, #44	; 0x2c
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	260b      	movs	r6, #11
 8000bb2:	19bb      	adds	r3, r7, r6
 8000bb4:	1c0a      	adds	r2, r1, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
                                  uint32_t timChannel, DMA_HandleTypeDef &dmaHandle) 
                : ledArray((uint16_t)(n*NUM_PIXELS_PER_BOARD), timHandle, timChannel, dmaHandle),
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	1d18      	adds	r0, r3, #4
 8000bbc:	19bb      	adds	r3, r7, r6
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	18db      	adds	r3, r3, r3
 8000bc4:	b299      	uxth	r1, r3
 8000bc6:	683c      	ldr	r4, [r7, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	0023      	movs	r3, r4
 8000bd0:	f7ff fd05 	bl	80005de <_ZN8NeoPixelC1EtR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
                  touchStates(n), touchBoards(n) {
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3328      	adds	r3, #40	; 0x28
 8000bd8:	001c      	movs	r4, r3
 8000bda:	19bb      	adds	r3, r7, r6
 8000bdc:	781d      	ldrb	r5, [r3, #0]
 8000bde:	2314      	movs	r3, #20
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 f975 	bl	8000ed2 <_ZNSaI10TouchBoardEC1Ev>
 8000be8:	2314      	movs	r3, #20
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	001a      	movs	r2, r3
 8000bee:	0029      	movs	r1, r5
 8000bf0:	0020      	movs	r0, r4
 8000bf2:	f000 f988 	bl	8000f06 <_ZNSt6vectorI10TouchBoardSaIS0_EEC1EjRKS1_>
 8000bf6:	2314      	movs	r3, #20
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 f976 	bl	8000eec <_ZNSaI10TouchBoardED1Ev>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3334      	adds	r3, #52	; 0x34
 8000c04:	001c      	movs	r4, r3
 8000c06:	19bb      	adds	r3, r7, r6
 8000c08:	781d      	ldrb	r5, [r3, #0]
 8000c0a:	2318      	movs	r3, #24
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f9b2 	bl	8000f78 <_ZNSaI15TouchState_enumEC1Ev>
 8000c14:	2318      	movs	r3, #24
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	001a      	movs	r2, r3
 8000c1a:	0029      	movs	r1, r5
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f000 f9c5 	bl	8000fac <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>
 8000c22:	2318      	movs	r3, #24
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 f9b3 	bl	8000f92 <_ZNSaI15TouchState_enumED1Ev>
  numBoards = n;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	19ba      	adds	r2, r7, r6
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	701a      	strb	r2, [r3, #0]
  numPixels = n*NUM_PIXELS_PER_BOARD;
 8000c34:	19bb      	adds	r3, r7, r6
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	18db      	adds	r3, r3, r3
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	705a      	strb	r2, [r3, #1]
  for (int i=0; i<numBoards; i++) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
 8000c44:	e01e      	b.n	8000c84 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0xe0>
    touchBoards[i].setTouchGPIO(touchGpioMap_Port[i], touchGpioMap_Pin[i]);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3328      	adds	r3, #40	; 0x28
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	0011      	movs	r1, r2
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 f9e5 	bl	800101e <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0xf8>)
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	58d1      	ldr	r1, [r2, r3]
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0xfc>)
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	0052      	lsls	r2, r2, #1
 8000c62:	5ad3      	ldrh	r3, [r2, r3]
 8000c64:	001a      	movs	r2, r3
 8000c66:	f7ff ff51 	bl	8000b0c <_ZN10TouchBoard12setTouchGPIOEP12GPIO_TypeDeft>
    touchStates[i] = NOT_TOUCHED;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3334      	adds	r3, #52	; 0x34
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	0011      	movs	r1, r2
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f9e1 	bl	800103a <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<numBoards; i++) {
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	dbda      	blt.n	8000c46 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef+0xa2>
  }
}
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b009      	add	sp, #36	; 0x24
 8000c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000060 	.word	0x20000060

08000ca4 <_ZN15TouchBoardGroupD1Ev>:

TouchBoardGroup::~TouchBoardGroup() {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3334      	adds	r3, #52	; 0x34
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 f999 	bl	8000fe8 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3328      	adds	r3, #40	; 0x28
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 f941 	bl	8000f42 <_ZNSt6vectorI10TouchBoardSaIS0_EED1Ev>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff fca9 	bl	800061c <_ZN8NeoPixelD1Ev>
}
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_ZN15TouchBoardGroup16setAllPixelColorEhhh>:

void TouchBoardGroup::setPixelColor(uint8_t board_num, uint8_t pixel_ind, uint8_t r, uint8_t g, uint8_t b) {
  touchBoards[board_num].setPixelColor(pixel_ind, r, g, b);
}

void TouchBoardGroup::setAllPixelColor(uint8_t r, uint8_t g, uint8_t b) {
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	000c      	movs	r4, r1
 8000cde:	0010      	movs	r0, r2
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	1cfb      	adds	r3, r7, #3
 8000ce4:	1c22      	adds	r2, r4, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	1cbb      	adds	r3, r7, #2
 8000cea:	1c02      	adds	r2, r0, #0
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	1c7b      	adds	r3, r7, #1
 8000cf0:	1c0a      	adds	r2, r1, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<numBoards; i++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	e014      	b.n	8000d24 <_ZN15TouchBoardGroup16setAllPixelColorEhhh+0x50>
    touchBoards[i].setAllPixelColor(r, g, b);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3328      	adds	r3, #40	; 0x28
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 f98b 	bl	800101e <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000d08:	0004      	movs	r4, r0
 8000d0a:	1c7b      	adds	r3, r7, #1
 8000d0c:	7818      	ldrb	r0, [r3, #0]
 8000d0e:	1cbb      	adds	r3, r7, #2
 8000d10:	781a      	ldrb	r2, [r3, #0]
 8000d12:	1cfb      	adds	r3, r7, #3
 8000d14:	7819      	ldrb	r1, [r3, #0]
 8000d16:	0003      	movs	r3, r0
 8000d18:	0020      	movs	r0, r4
 8000d1a:	f7ff fe8a 	bl	8000a32 <_ZN10TouchBoard16setAllPixelColorEhhh>
  for (int i=0; i<numBoards; i++) {
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	001a      	movs	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	dbe4      	blt.n	8000cfa <_ZN15TouchBoardGroup16setAllPixelColorEhhh+0x26>
  }
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b005      	add	sp, #20
 8000d38:	bd90      	pop	{r4, r7, pc}

08000d3a <_ZN15TouchBoardGroup13setBoardColorEhhhh>:

void TouchBoardGroup::setBoardColor(uint8_t board_num, uint8_t r, uint8_t g, uint8_t b) {
 8000d3a:	b590      	push	{r4, r7, lr}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	000c      	movs	r4, r1
 8000d44:	0010      	movs	r0, r2
 8000d46:	0019      	movs	r1, r3
 8000d48:	1cfb      	adds	r3, r7, #3
 8000d4a:	1c22      	adds	r2, r4, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	1cbb      	adds	r3, r7, #2
 8000d50:	1c02      	adds	r2, r0, #0
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	1c7b      	adds	r3, r7, #1
 8000d56:	1c0a      	adds	r2, r1, #0
 8000d58:	701a      	strb	r2, [r3, #0]
  touchBoards[board_num].setAllPixelColor(r, g, b);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3328      	adds	r3, #40	; 0x28
 8000d5e:	001a      	movs	r2, r3
 8000d60:	1cfb      	adds	r3, r7, #3
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	0019      	movs	r1, r3
 8000d66:	0010      	movs	r0, r2
 8000d68:	f000 f959 	bl	800101e <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000d6c:	0004      	movs	r4, r0
 8000d6e:	2318      	movs	r3, #24
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	7818      	ldrb	r0, [r3, #0]
 8000d74:	1c7b      	adds	r3, r7, #1
 8000d76:	781a      	ldrb	r2, [r3, #0]
 8000d78:	1cbb      	adds	r3, r7, #2
 8000d7a:	7819      	ldrb	r1, [r3, #0]
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	0020      	movs	r0, r4
 8000d80:	f7ff fe57 	bl	8000a32 <_ZN10TouchBoard16setAllPixelColorEhhh>
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b003      	add	sp, #12
 8000d8a:	bd90      	pop	{r4, r7, pc}

08000d8c <_ZN15TouchBoardGroup10showPixelsEv>:
  touchBoards[board_num].setAllPixelColor(255, 0, 0);
  showPixels();
  HAL_Delay(40);
}

void TouchBoardGroup::showPixels() {
 8000d8c:	b5b0      	push	{r4, r5, r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	6078      	str	r0, [r7, #4]
  for (int i=0; i<numBoards; i++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e03a      	b.n	8000e10 <_ZN15TouchBoardGroup10showPixelsEv+0x84>
    for (int j=0; j<NUM_PIXELS_PER_BOARD; j++) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	e031      	b.n	8000e04 <_ZN15TouchBoardGroup10showPixelsEv+0x78>
      PixelColor_s tempColor = touchBoards[i].getPixelColor(j);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3328      	adds	r3, #40	; 0x28
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 f938 	bl	800101e <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000dae:	0002      	movs	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	0019      	movs	r1, r3
 8000db6:	0010      	movs	r0, r2
 8000db8:	f7ff fe76 	bl	8000aa8 <_ZN10TouchBoard13getPixelColorEh>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	240c      	movs	r4, #12
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	1c11      	adds	r1, r2, #0
 8000dc6:	7019      	strb	r1, [r3, #0]
 8000dc8:	0411      	lsls	r1, r2, #16
 8000dca:	0e09      	lsrs	r1, r1, #24
 8000dcc:	7059      	strb	r1, [r3, #1]
 8000dce:	0212      	lsls	r2, r2, #8
 8000dd0:	0e12      	lsrs	r2, r2, #24
 8000dd2:	709a      	strb	r2, [r3, #2]
      ledArray.setPixelColor(i*NUM_PIXELS_PER_BOARD+j, tempColor.r, tempColor.g, tempColor.b);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1d18      	adds	r0, r3, #4
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	18db      	adds	r3, r3, r3
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	18d3      	adds	r3, r2, r3
 8000de6:	b299      	uxth	r1, r3
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	0025      	movs	r5, r4
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	785c      	ldrb	r4, [r3, #1]
 8000df2:	197b      	adds	r3, r7, r5
 8000df4:	789b      	ldrb	r3, [r3, #2]
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	0023      	movs	r3, r4
 8000dfa:	f7ff fc4a 	bl	8000692 <_ZN8NeoPixel13setPixelColorEthhh>
    for (int j=0; j<NUM_PIXELS_PER_BOARD; j++) {
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	3301      	adds	r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	ddca      	ble.n	8000da0 <_ZN15TouchBoardGroup10showPixelsEv+0x14>
  for (int i=0; i<numBoards; i++) {
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	001a      	movs	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	dbbe      	blt.n	8000d9a <_ZN15TouchBoardGroup10showPixelsEv+0xe>
    }
  }
  ledArray.show();
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fc6e 	bl	8000702 <_ZN8NeoPixel4showEv>
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b006      	add	sp, #24
 8000e2c:	bdb0      	pop	{r4, r5, r7, pc}

08000e2e <_ZN15TouchBoardGroup17updateTouchStatesEv>:

PixelColor_s TouchBoardGroup::getPixelColor(uint8_t board_num, uint8_t pixel_ind) {
  return touchBoards[board_num].getPixelColor(pixel_ind);
}

void TouchBoardGroup::updateTouchStates() {
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  for (int i=0; i<numBoards; i++) {
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e00d      	b.n	8000e58 <_ZN15TouchBoardGroup17updateTouchStatesEv+0x2a>
    touchBoards[i].updateTouchState();
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3328      	adds	r3, #40	; 0x28
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	0011      	movs	r1, r2
 8000e44:	0018      	movs	r0, r3
 8000e46:	f000 f8ea 	bl	800101e <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fe6f 	bl	8000b30 <_ZN10TouchBoard16updateTouchStateEv>
  for (int i=0; i<numBoards; i++) {
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4293      	cmp	r3, r2
 8000e62:	dbeb      	blt.n	8000e3c <_ZN15TouchBoardGroup17updateTouchStatesEv+0xe>
  }
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b004      	add	sp, #16
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <_ZN15TouchBoardGroup14getTouchStatesEv>:

std::vector<TouchState_enum> TouchBoardGroup::getTouchStates() {
 8000e6e:	b5b0      	push	{r4, r5, r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
  for (int i=0; i<numBoards; i++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e017      	b.n	8000eae <_ZN15TouchBoardGroup14getTouchStatesEv+0x40>
    touchStates[i] = touchBoards[i].getTouchState();
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	3328      	adds	r3, #40	; 0x28
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	0011      	movs	r1, r2
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 f8c9 	bl	800101e <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>
 8000e8c:	0005      	movs	r5, r0
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	3334      	adds	r3, #52	; 0x34
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	0011      	movs	r1, r2
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 f8cf 	bl	800103a <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>
 8000e9c:	0004      	movs	r4, r0
 8000e9e:	0028      	movs	r0, r5
 8000ea0:	f7ff fe63 	bl	8000b6a <_ZN10TouchBoard13getTouchStateEv>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	7023      	strb	r3, [r4, #0]
  for (int i=0; i<numBoards; i++) {
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	001a      	movs	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	dbe1      	blt.n	8000e7e <_ZN15TouchBoardGroup14getTouchStatesEv+0x10>
  }
  return touchStates;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	3334      	adds	r3, #52	; 0x34
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f000 f8c5 	bl	8001054 <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS2_>
}
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bdb0      	pop	{r4, r5, r7, pc}

08000ed2 <_ZNSaI10TouchBoardEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 f8f7 	bl	80010d0 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1Ev>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}

08000eec <_ZNSaI10TouchBoardED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 f8f3 	bl	80010e2 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardED1Ev>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_ZNSt6vectorI10TouchBoardSaIS0_EEC1EjRKS1_>:
       *
       *  This constructor fills the %vector with @a __n default
       *  constructed elements.
       */
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8000f06:	b590      	push	{r4, r7, lr}
 8000f08:	b085      	sub	sp, #20
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8000f12:	68fc      	ldr	r4, [r7, #12]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	0011      	movs	r1, r2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 f8ea 	bl	80010f4 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_>
 8000f20:	0001      	movs	r1, r0
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	001a      	movs	r2, r3
 8000f26:	0020      	movs	r0, r4
 8000f28:	f000 f919 	bl	800115e <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EEC1EjRKS1_>
      { _M_default_initialize(__n); }
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	0011      	movs	r1, r2
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 f944 	bl	80011c0 <_ZNSt6vectorI10TouchBoardSaIS0_EE21_M_default_initializeEj>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b005      	add	sp, #20
 8000f40:	bd90      	pop	{r4, r7, pc}

08000f42 <_ZNSt6vectorI10TouchBoardSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000f42:	b5b0      	push	{r4, r5, r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681c      	ldr	r4, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 f94b 	bl	80011f0 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>
 8000f5a:	0003      	movs	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	0029      	movs	r1, r5
 8000f60:	0020      	movs	r0, r4
 8000f62:	f000 f94e 	bl	8001202 <_ZSt8_DestroyIP10TouchBoardS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 f90f 	bl	800118c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EED1Ev>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bdb0      	pop	{r4, r5, r7, pc}

08000f78 <_ZNSaI15TouchState_enumEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 f94d 	bl	8001222 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1Ev>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_ZNSaI15TouchState_enumED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 f949 	bl	8001234 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumED1Ev>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8000fb8:	68fc      	ldr	r4, [r7, #12]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 f941 	bl	8001248 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_>
 8000fc6:	0001      	movs	r1, r0
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	001a      	movs	r2, r3
 8000fcc:	0020      	movs	r0, r4
 8000fce:	f000 f970 	bl	80012b2 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>
      { _M_default_initialize(__n); }
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 f99a 	bl	8001312 <_ZNSt6vectorI15TouchState_enumSaIS0_EE21_M_default_initializeEj>
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b005      	add	sp, #20
 8000fe6:	bd90      	pop	{r4, r7, pc}

08000fe8 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681c      	ldr	r4, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 f9a1 	bl	8001342 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8001000:	0003      	movs	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001002:	001a      	movs	r2, r3
 8001004:	0029      	movs	r1, r5
 8001006:	0020      	movs	r0, r4
 8001008:	f000 f9a4 	bl	8001354 <_ZSt8_DestroyIP15TouchState_enumS0_EvT_S2_RSaIT0_E>
      }
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	0018      	movs	r0, r3
 8001010:	f000 f966 	bl	80012e0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EED1Ev>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	0018      	movs	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bdb0      	pop	{r4, r5, r7, pc}

0800101e <_ZNSt6vectorI10TouchBoardSaIS0_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	18d3      	adds	r3, r2, r3
      }
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}

0800103a <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	18d3      	adds	r3, r2, r3
      }
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b002      	add	sp, #8
 8001052:	bd80      	pop	{r7, pc}

08001054 <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS2_>:
      vector(const vector& __x)
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800105e:	687c      	ldr	r4, [r7, #4]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	0018      	movs	r0, r3
 8001064:	f000 f986 	bl	8001374 <_ZNKSt6vectorI15TouchState_enumSaIS0_EE4sizeEv>
 8001068:	0005      	movs	r5, r0
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	0018      	movs	r0, r3
 800106e:	f000 f99d 	bl	80013ac <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8001072:	0002      	movs	r2, r0
 8001074:	260c      	movs	r6, #12
 8001076:	19bb      	adds	r3, r7, r6
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f000 f987 	bl	800138e <_ZN9__gnu_cxx14__alloc_traitsISaI15TouchState_enumES1_E17_S_select_on_copyERKS2_>
 8001080:	19bb      	adds	r3, r7, r6
 8001082:	001a      	movs	r2, r3
 8001084:	0029      	movs	r1, r5
 8001086:	0020      	movs	r0, r4
 8001088:	f000 f913 	bl	80012b2 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>
 800108c:	19bb      	adds	r3, r7, r6
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff ff7f 	bl	8000f92 <_ZNSaI15TouchState_enumED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	0018      	movs	r0, r3
 8001098:	f000 f991 	bl	80013be <_ZNKSt6vectorI15TouchState_enumSaIS0_EE5beginEv>
 800109c:	0005      	movs	r5, r0
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f000 f99c 	bl	80013de <_ZNKSt6vectorI15TouchState_enumSaIS0_EE3endEv>
 80010a6:	0006      	movs	r6, r0
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 f947 	bl	8001342 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 80010b4:	0003      	movs	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80010b6:	0022      	movs	r2, r4
 80010b8:	0031      	movs	r1, r6
 80010ba:	0028      	movs	r0, r5
 80010bc:	f000 f9a0 	bl	8001400 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>
 80010c0:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	605a      	str	r2, [r3, #4]
      }
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b005      	add	sp, #20
 80010ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010d0 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	250c      	movs	r5, #12
 8001102:	197b      	adds	r3, r7, r5
 8001104:	0011      	movs	r1, r2
 8001106:	0018      	movs	r0, r3
 8001108:	f000 f9a8 	bl	800145c <_ZNSaI10TouchBoardEC1ERKS0_>
 800110c:	197b      	adds	r3, r7, r5
 800110e:	0018      	movs	r0, r3
 8001110:	f000 f988 	bl	8001424 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_>
 8001114:	0002      	movs	r2, r0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	429a      	cmp	r2, r3
 800111a:	419b      	sbcs	r3, r3
 800111c:	425b      	negs	r3, r3
 800111e:	b2dc      	uxtb	r4, r3
 8001120:	197b      	adds	r3, r7, r5
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff fee2 	bl	8000eec <_ZNSaI10TouchBoardED1Ev>
 8001128:	2c00      	cmp	r4, #0
 800112a:	d003      	beq.n	8001134 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_+0x40>
	  __throw_length_error(
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <_ZNSt6vectorI10TouchBoardSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 800112e:	0018      	movs	r0, r3
 8001130:	f004 f89c 	bl	800526c <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8001134:	687b      	ldr	r3, [r7, #4]
      }
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	b004      	add	sp, #16
 800113c:	bdb0      	pop	{r4, r5, r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	08005630 	.word	0x08005630

08001144 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff fecc 	bl	8000eec <_ZNSaI10TouchBoardED1Ev>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	0018      	movs	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	b002      	add	sp, #8
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EEC1EjRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f000 f983 	bl	800147c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f000 f991 	bl	80014a4 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_M_create_storageEj>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	0018      	movs	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	b004      	add	sp, #16
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 80011a4:	001a      	movs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 f998 	bl	80014de <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j>
      }
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff ffc7 	bl	8001144 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implD1Ev>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b002      	add	sp, #8
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_ZNSt6vectorI10TouchBoardSaIS0_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 f80d 	bl	80011f0 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>
 80011d6:	0002      	movs	r2, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	0019      	movs	r1, r3
 80011dc:	0020      	movs	r0, r4
 80011de:	f000 f991 	bl	8001504 <_ZSt27__uninitialized_default_n_aIP10TouchBoardjS0_ET_S2_T0_RSaIT1_E>
 80011e2:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	605a      	str	r2, [r3, #4]
      }
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b003      	add	sp, #12
 80011ee:	bd90      	pop	{r4, r7, pc}

080011f0 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}

08001202 <_ZSt8_DestroyIP10TouchBoardS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	0011      	movs	r1, r2
 8001214:	0018      	movs	r0, r3
 8001216:	f000 f986 	bl	8001526 <_ZSt8_DestroyIP10TouchBoardEvT_S2_>
    }
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b004      	add	sp, #16
 8001220:	bd80      	pop	{r7, pc}

08001222 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	250c      	movs	r5, #12
 8001256:	197b      	adds	r3, r7, r5
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f000 f98e 	bl	800157c <_ZNSaI15TouchState_enumEC1ERKS0_>
 8001260:	197b      	adds	r3, r7, r5
 8001262:	0018      	movs	r0, r3
 8001264:	f000 f96e 	bl	8001544 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_>
 8001268:	0002      	movs	r2, r0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	419b      	sbcs	r3, r3
 8001270:	425b      	negs	r3, r3
 8001272:	b2dc      	uxtb	r4, r3
 8001274:	197b      	adds	r3, r7, r5
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff fe8b 	bl	8000f92 <_ZNSaI15TouchState_enumED1Ev>
 800127c:	2c00      	cmp	r4, #0
 800127e:	d003      	beq.n	8001288 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_+0x40>
	  __throw_length_error(
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <_ZNSt6vectorI15TouchState_enumSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8001282:	0018      	movs	r0, r3
 8001284:	f003 fff2 	bl	800526c <_ZSt20__throw_length_errorPKc>
	return __n;
 8001288:	687b      	ldr	r3, [r7, #4]
      }
 800128a:	0018      	movs	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	b004      	add	sp, #16
 8001290:	bdb0      	pop	{r4, r5, r7, pc}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	08005630 	.word	0x08005630

08001298 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff fe75 	bl	8000f92 <_ZNSaI15TouchState_enumED1Ev>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1EjRKS1_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 f969 	bl	800159c <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>
      { _M_create_storage(__n); }
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f000 f977 	bl	80015c4 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_M_create_storageEj>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b004      	add	sp, #16
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80012f6:	001a      	movs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 f97e 	bl	80015fc <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0018      	movs	r0, r3
 8001304:	f7ff ffc8 	bl	8001298 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implD1Ev>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b002      	add	sp, #8
 8001310:	bd80      	pop	{r7, pc}

08001312 <_ZNSt6vectorI15TouchState_enumSaIS0_EE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 8001312:	b590      	push	{r4, r7, lr}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	0018      	movs	r0, r3
 8001324:	f000 f80d 	bl	8001342 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 8001328:	0002      	movs	r2, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	0019      	movs	r1, r3
 800132e:	0020      	movs	r0, r4
 8001330:	f000 f977 	bl	8001622 <_ZSt27__uninitialized_default_n_aIP15TouchState_enumjS0_ET_S2_T0_RSaIT1_E>
 8001334:	0002      	movs	r2, r0
	this->_M_impl._M_finish =
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	605a      	str	r2, [r3, #4]
      }
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b003      	add	sp, #12
 8001340:	bd90      	pop	{r4, r7, pc}

08001342 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b002      	add	sp, #8
 8001352:	bd80      	pop	{r7, pc}

08001354 <_ZSt8_DestroyIP15TouchState_enumS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	0011      	movs	r1, r2
 8001366:	0018      	movs	r0, r3
 8001368:	f000 f96c 	bl	8001644 <_ZSt8_DestroyIP15TouchState_enumEvT_S2_>
    }
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b004      	add	sp, #16
 8001372:	bd80      	pop	{r7, pc}

08001374 <_ZNKSt6vectorI15TouchState_enumSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZN9__gnu_cxx14__alloc_traitsISaI15TouchState_enumES1_E17_S_select_on_copyERKS2_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	0011      	movs	r1, r2
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 f95f 	bl	8001662 <_ZNSt16allocator_traitsISaI15TouchState_enumEE37select_on_container_copy_constructionERKS1_>
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}

080013be <_ZNKSt6vectorI15TouchState_enumSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	230c      	movs	r3, #12
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	0011      	movs	r1, r2
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 f956 	bl	8001680 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b004      	add	sp, #16
 80013dc:	bd80      	pop	{r7, pc}

080013de <_ZNKSt6vectorI15TouchState_enumSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	1d1a      	adds	r2, r3, #4
 80013ea:	230c      	movs	r3, #12
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f000 f945 	bl	8001680 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b004      	add	sp, #16
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	0018      	movs	r0, r3
 8001416:	f000 f941 	bl	800169c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
 800141a:	0003      	movs	r3, r0
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b004      	add	sp, #16
 8001422:	bd80      	pop	{r7, pc}

08001424 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <_ZNSt6vectorI10TouchBoardSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800142e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	0018      	movs	r0, r3
 8001434:	f000 f947 	bl	80016c6 <_ZNSt16allocator_traitsISaI10TouchBoardEE8max_sizeERKS1_>
 8001438:	0003      	movs	r3, r0
 800143a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800143c:	2308      	movs	r3, #8
 800143e:	18fa      	adds	r2, r7, r3
 8001440:	230c      	movs	r3, #12
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f000 f94a 	bl	80016e0 <_ZSt3minIjERKT_S2_S2_>
 800144c:	0003      	movs	r3, r0
 800144e:	681b      	ldr	r3, [r3, #0]
      }
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b004      	add	sp, #16
 8001456:	bd80      	pop	{r7, pc}
 8001458:	07ffffff 	.word	0x07ffffff

0800145c <_ZNSaI10TouchBoardEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	0011      	movs	r1, r2
 800146c:	0018      	movs	r0, r3
 800146e:	f000 f949 	bl	8001704 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1ERKS2_>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	0018      	movs	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}

0800147c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	0011      	movs	r1, r2
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ffe5 	bl	800145c <_ZNSaI10TouchBoardEC1ERKS0_>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	0018      	movs	r0, r3
 8001496:	f000 f93f 	bl	8001718 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	0018      	movs	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	0011      	movs	r1, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f000 f941 	bl	800173c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj>
 80014ba:	0002      	movs	r2, r0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	18d2      	adds	r2, r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	609a      	str	r2, [r3, #8]
      }
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}

080014de <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
	if (__p)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 f935 	bl	8001766 <_ZNSt16allocator_traitsISaI10TouchBoardEE10deallocateERS1_PS0_j>
      }
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b004      	add	sp, #16
 8001502:	bd80      	pop	{r7, pc}

08001504 <_ZSt27__uninitialized_default_n_aIP10TouchBoardjS0_ET_S2_T0_RSaIT1_E>:

  // __uninitialized_default_n_a specialization for std::allocator,
  // which ignores the allocator and value-initializes the elements.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	0011      	movs	r1, r2
 8001516:	0018      	movs	r0, r3
 8001518:	f000 f935 	bl	8001786 <_ZSt25__uninitialized_default_nIP10TouchBoardjET_S2_T0_>
 800151c:	0003      	movs	r3, r0
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bd80      	pop	{r7, pc}

08001526 <_ZSt8_DestroyIP10TouchBoardEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	0011      	movs	r1, r2
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f939 	bl	80017ae <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_>
    }
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <_ZNSt6vectorI15TouchState_enumSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800154e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0018      	movs	r0, r3
 8001554:	f000 f945 	bl	80017e2 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8max_sizeERKS1_>
 8001558:	0003      	movs	r3, r0
 800155a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800155c:	2308      	movs	r3, #8
 800155e:	18fa      	adds	r2, r7, r3
 8001560:	230c      	movs	r3, #12
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	0011      	movs	r1, r2
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f8ba 	bl	80016e0 <_ZSt3minIjERKT_S2_S2_>
 800156c:	0003      	movs	r3, r0
 800156e:	681b      	ldr	r3, [r3, #0]
      }
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b004      	add	sp, #16
 8001576:	bd80      	pop	{r7, pc}
 8001578:	7fffffff 	.word	0x7fffffff

0800157c <_ZNSaI15TouchState_enumEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	0011      	movs	r1, r2
 800158c:	0018      	movs	r0, r3
 800158e:	f000 f935 	bl	80017fc <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1ERKS2_>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	0011      	movs	r1, r2
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff ffe5 	bl	800157c <_ZNSaI15TouchState_enumEC1ERKS0_>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 f92b 	bl	8001810 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	0011      	movs	r1, r2
 80015d4:	0018      	movs	r0, r3
 80015d6:	f000 f92d 	bl	8001834 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj>
 80015da:	0002      	movs	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	18d2      	adds	r2, r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
      }
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	if (__p)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	0018      	movs	r0, r3
 8001616:	f000 f922 	bl	800185e <_ZNSt16allocator_traitsISaI15TouchState_enumEE10deallocateERS1_PS0_j>
      }
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b004      	add	sp, #16
 8001620:	bd80      	pop	{r7, pc}

08001622 <_ZSt27__uninitialized_default_n_aIP15TouchState_enumjS0_ET_S2_T0_RSaIT1_E>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
    { return std::__uninitialized_default_n(__first, __n); }
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f000 f922 	bl	800187e <_ZSt25__uninitialized_default_nIP15TouchState_enumjET_S2_T0_>
 800163a:	0003      	movs	r3, r0
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZSt8_DestroyIP15TouchState_enumEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	0011      	movs	r1, r2
 8001654:	0018      	movs	r0, r3
 8001656:	f000 f926 	bl	80018a6 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15TouchState_enumEEvT_S4_>
    }
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b002      	add	sp, #8
 8001660:	bd80      	pop	{r7, pc}

08001662 <_ZNSt16allocator_traitsISaI15TouchState_enumEE37select_on_container_copy_constructionERKS1_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	0011      	movs	r1, r2
 8001672:	0018      	movs	r0, r3
 8001674:	f7ff ff82 	bl	800157c <_ZNSaI15TouchState_enumEC1ERKS0_>
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	0018      	movs	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}

0800169c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80016a8:	2317      	movs	r3, #23
 80016aa:	18fb      	adds	r3, r7, r3
 80016ac:	2201      	movs	r2, #1
 80016ae:	701a      	strb	r2, [r3, #0]
	__uninit_copy(__first, __last, __result);
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 f8fe 	bl	80018b8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>
 80016bc:	0003      	movs	r3, r0
    }
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b006      	add	sp, #24
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_ZNSt16allocator_traitsISaI10TouchBoardEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 f902 	bl	80018da <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv>
 80016d6:	0003      	movs	r3, r0
      }
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d201      	bcs.n	80016fa <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	e000      	b.n	80016fc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80016fa:	687b      	ldr	r3, [r7, #4]
    }
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b002      	add	sp, #8
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
	{ }
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	0018      	movs	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	b002      	add	sp, #8
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj+0x20>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	0011      	movs	r1, r2
 8001752:	0018      	movs	r0, r3
 8001754:	f000 f8ce 	bl	80018f4 <_ZNSt16allocator_traitsISaI10TouchBoardEE8allocateERS1_j>
 8001758:	0003      	movs	r3, r0
 800175a:	e000      	b.n	800175e <_ZNSt12_Vector_baseI10TouchBoardSaIS0_EE11_M_allocateEj+0x22>
 800175c:	2300      	movs	r3, #0
      }
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}

08001766 <_ZNSt16allocator_traitsISaI10TouchBoardEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	0018      	movs	r0, r3
 800177a:	f000 f8cb 	bl	8001914 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE10deallocateEPS1_j>
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b004      	add	sp, #16
 8001784:	bd80      	pop	{r7, pc}

08001786 <_ZSt25__uninitialized_default_nIP10TouchBoardjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
      constexpr bool __can_fill
 8001790:	230f      	movs	r3, #15
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
	__uninit_default_n(__first, __n);
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0011      	movs	r1, r2
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 f8c9 	bl	8001936 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_>
 80017a4:	0003      	movs	r3, r0
    }
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80017b8:	e00a      	b.n	80017d0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_+0x22>
	    std::_Destroy(std::__addressof(*__first));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	0018      	movs	r0, r3
 80017be:	f000 f8d8 	bl	8001972 <_ZSt11__addressofI10TouchBoardEPT_RS1_>
 80017c2:	0003      	movs	r3, r0
 80017c4:	0018      	movs	r0, r3
 80017c6:	f000 f8dd 	bl	8001984 <_ZSt8_DestroyI10TouchBoardEvPT_>
	  for (; __first != __last; ++__first)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3310      	adds	r3, #16
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1f0      	bne.n	80017ba <_ZNSt12_Destroy_auxILb0EE9__destroyIP10TouchBoardEEvT_S4_+0xc>
	}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b002      	add	sp, #8
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 f8d5 	bl	800199c <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv>
 80017f2:	0003      	movs	r3, r0
      }
 80017f4:	0018      	movs	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b002      	add	sp, #8
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumEC1ERKS2_>:
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}

08001810 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
	{ }
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b002      	add	sp, #8
 8001832:	bd80      	pop	{r7, pc}

08001834 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d007      	beq.n	8001854 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj+0x20>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	0011      	movs	r1, r2
 800184a:	0018      	movs	r0, r3
 800184c:	f000 f8b3 	bl	80019b6 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8allocateERS1_j>
 8001850:	0003      	movs	r3, r0
 8001852:	e000      	b.n	8001856 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE11_M_allocateEj+0x22>
 8001854:	2300      	movs	r3, #0
      }
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}

0800185e <_ZNSt16allocator_traitsISaI15TouchState_enumEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0018      	movs	r0, r3
 8001872:	f000 f8b0 	bl	80019d6 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE10deallocateEPS1_j>
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b004      	add	sp, #16
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZSt25__uninitialized_default_nIP15TouchState_enumjET_S2_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
      constexpr bool __can_fill
 8001888:	230f      	movs	r3, #15
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
	__uninit_default_n(__first, __n);
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	0011      	movs	r1, r2
 8001896:	0018      	movs	r0, r3
 8001898:	f000 f8b6 	bl	8001a08 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchState_enumjEET_S4_T0_>
 800189c:	0003      	movs	r3, r0
    }
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b004      	add	sp, #16
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15TouchState_enumEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 f8bf 	bl	8001a4e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
 80018d0:	0003      	movs	r3, r0
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b004      	add	sp, #16
 80018d8:	bd80      	pop	{r7, pc}

080018da <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE8max_sizeEv>:
			 );
      }

#if __cplusplus <= 201703L
      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f000 f8cd 	bl	8001a84 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE11_M_max_sizeEv>
 80018ea:	0003      	movs	r3, r0
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_ZNSt16allocator_traitsISaI10TouchBoardEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	0018      	movs	r0, r3
 8001906:	f000 f8c9 	bl	8001a9c <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv>
 800190a:	0003      	movs	r3, r0
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}

08001914 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	011a      	lsls	r2, r3, #4
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f003 fc83 	bl	8005234 <_ZdlPvj>
      }
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b004      	add	sp, #16
 8001934:	bd80      	pop	{r7, pc}

08001936 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
	  _ForwardIterator __cur = __first;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60fb      	str	r3, [r7, #12]
	      for (; __n > 0; --__n, (void) ++__cur)
 8001944:	e00d      	b.n	8001962 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_+0x2c>
		std::_Construct(std::__addressof(*__cur));
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	0018      	movs	r0, r3
 800194a:	f000 f812 	bl	8001972 <_ZSt11__addressofI10TouchBoardEPT_RS1_>
 800194e:	0003      	movs	r3, r0
 8001950:	0018      	movs	r0, r3
 8001952:	f000 f8cb 	bl	8001aec <_ZSt10_ConstructI10TouchBoardJEEvPT_DpOT0_>
	      for (; __n > 0; --__n, (void) ++__cur)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	3b01      	subs	r3, #1
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3310      	adds	r3, #16
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1ee      	bne.n	8001946 <_ZNSt27__uninitialized_default_n_1ILb0EE18__uninit_default_nIP10TouchBoardjEET_S4_T0_+0x10>
	      return __cur;
 8001968:	68fb      	ldr	r3, [r7, #12]
	}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bd80      	pop	{r7, pc}

08001972 <_ZSt11__addressofI10TouchBoardEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b002      	add	sp, #8
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZSt8_DestroyI10TouchBoardEvPT_>:
    _Destroy(_Tp* __pointer)
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	0018      	movs	r0, r3
 8001990:	f7ff f846 	bl	8000a20 <_ZN10TouchBoardD1Ev>
    }
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}

0800199c <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 f8b2 	bl	8001b10 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE11_M_max_sizeEv>
 80019ac:	0003      	movs	r3, r0
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_ZNSt16allocator_traitsISaI15TouchState_enumEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 f8ae 	bl	8001b28 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv>
 80019cc:	0003      	movs	r3, r0
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b002      	add	sp, #8
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	0011      	movs	r1, r2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f003 fc23 	bl	8005234 <_ZdlPvj>
      }
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b004      	add	sp, #16
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_ZSt11__addressofI15TouchState_enumEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b002      	add	sp, #8
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchState_enumjEET_S4_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
	  if (__n > 0)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d015      	beq.n	8001a44 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIP15TouchState_enumjEET_S4_T0_+0x3c>
		= std::__addressof(*__first);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7ff ffeb 	bl	80019f6 <_ZSt11__addressofI15TouchState_enumEPT_RS1_>
 8001a20:	0003      	movs	r3, r0
 8001a22:	60fb      	str	r3, [r7, #12]
	      std::_Construct(__val);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 f89e 	bl	8001b68 <_ZSt10_ConstructI15TouchState_enumJEEvPT_DpOT0_>
	      ++__first;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	607b      	str	r3, [r7, #4]
	      __first = std::fill_n(__first, __n - 1, *__val);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	1e59      	subs	r1, r3, #1
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 f8a4 	bl	8001b88 <_ZSt6fill_nIP15TouchState_enumjS0_ET_S2_T0_RKT1_>
 8001a40:	0003      	movs	r3, r0
 8001a42:	607b      	str	r3, [r7, #4]
	  return __first;
 8001a44:	687b      	ldr	r3, [r7, #4]
	}
 8001a46:	0018      	movs	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b004      	add	sp, #16
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8001a4e:	b590      	push	{r4, r7, lr}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 f8af 	bl	8001bc0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEET_S9_>
 8001a62:	0004      	movs	r4, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 f8aa 	bl	8001bc0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEET_S9_>
 8001a6c:	0001      	movs	r1, r0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	001a      	movs	r2, r3
 8001a72:	0020      	movs	r0, r4
 8001a74:	f000 f8ad 	bl	8001bd2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_>
 8001a78:	0003      	movs	r3, r0
    }
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b005      	add	sp, #20
 8001a80:	bd90      	pop	{r4, r7, pc}
	...

08001a84 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001a8c:	4b02      	ldr	r3, [pc, #8]	; (8001a98 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE11_M_max_sizeEv+0x14>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	07ffffff 	.word	0x07ffffff

08001a9c <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff ffea 	bl	8001a84 <_ZNK9__gnu_cxx13new_allocatorI10TouchBoardE11_M_max_sizeEv>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	419b      	sbcs	r3, r3
 8001ab8:	425b      	negs	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	1e5a      	subs	r2, r3, #1
 8001abe:	4193      	sbcs	r3, r2
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv+0x3c>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	055b      	lsls	r3, r3, #21
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d301      	bcc.n	8001ad4 <_ZN9__gnu_cxx13new_allocatorI10TouchBoardE8allocateEjPKv+0x38>
	      std::__throw_bad_array_new_length();
 8001ad0:	f003 fbc9 	bl	8005266 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001ad4:	f003 fbc4 	bl	8005260 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	0018      	movs	r0, r3
 8001ade:	f003 fbad 	bl	800523c <_Znwj>
 8001ae2:	0003      	movs	r3, r0
      }
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b004      	add	sp, #16
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_ZSt10_ConstructI10TouchBoardJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0019      	movs	r1, r3
 8001af8:	2010      	movs	r0, #16
 8001afa:	f7ff f849 	bl	8000b90 <_ZnwjPv>
 8001afe:	0003      	movs	r3, r0
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7fe ff5f 	bl	80009c4 <_ZN10TouchBoardC1Ev>
    }
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b002      	add	sp, #8
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE11_M_max_sizeEv+0x14>)
      }
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	7fffffff 	.word	0x7fffffff

08001b28 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff ffea 	bl	8001b10 <_ZNK9__gnu_cxx13new_allocatorI15TouchState_enumE11_M_max_sizeEv>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	419b      	sbcs	r3, r3
 8001b44:	425b      	negs	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	1e5a      	subs	r2, r3, #1
 8001b4a:	4193      	sbcs	r3, r2
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <_ZN9__gnu_cxx13new_allocatorI15TouchState_enumE8allocateEjPKv+0x2e>
	    std::__throw_bad_alloc();
 8001b52:	f003 fb85 	bl	8005260 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f003 fb6f 	bl	800523c <_Znwj>
 8001b5e:	0003      	movs	r3, r0
      }
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b004      	add	sp, #16
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_ZSt10_ConstructI15TouchState_enumJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	0019      	movs	r1, r3
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff f80b 	bl	8000b90 <_ZnwjPv>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
    }
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b002      	add	sp, #8
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_ZSt6fill_nIP15TouchState_enumjS0_ET_S2_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8001b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8001b94:	68fc      	ldr	r4, [r7, #12]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7fe fff0 	bl	8000b7e <_ZSt17__size_to_integerj>
 8001b9e:	0005      	movs	r5, r0
			       std::__iterator_category(__first));
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 f839 	bl	8001c1c <_ZSt19__iterator_categoryIP15TouchState_enumENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	1c33      	adds	r3, r6, #0
 8001bae:	0029      	movs	r1, r5
 8001bb0:	0020      	movs	r0, r4
 8001bb2:	f000 f83c 	bl	8001c2e <_ZSt10__fill_n_aIP15TouchState_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>
 8001bb6:	0003      	movs	r3, r0
    }
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b005      	add	sp, #20
 8001bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bc0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS2_SaIS2_EEEEPS2_ET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001bd2:	b5b0      	push	{r4, r5, r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 f840 	bl	8001c66 <_ZSt12__niter_baseIPK15TouchState_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8001be6:	0004      	movs	r4, r0
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 f83b 	bl	8001c66 <_ZSt12__niter_baseIPK15TouchState_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 8001bf0:	0005      	movs	r5, r0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f000 f844 	bl	8001c82 <_ZSt12__niter_baseIP15TouchState_enumET_S2_>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	0029      	movs	r1, r5
 8001c00:	0020      	movs	r0, r4
 8001c02:	f000 f847 	bl	8001c94 <_ZSt14__copy_move_a1ILb0EPK15TouchState_enumPS0_ET1_T0_S5_S4_>
 8001c06:	0002      	movs	r2, r0
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	0011      	movs	r1, r2
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 f852 	bl	8001cb6 <_ZSt12__niter_wrapIP15TouchState_enumET_RKS2_S2_>
 8001c12:	0003      	movs	r3, r0
    }
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b004      	add	sp, #16
 8001c1a:	bdb0      	pop	{r4, r5, r7, pc}

08001c1c <_ZSt19__iterator_categoryIP15TouchState_enumENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	1c18      	adds	r0, r3, #0
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b002      	add	sp, #8
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_ZSt10__fill_n_aIP15TouchState_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	003a      	movs	r2, r7
 8001c3c:	7013      	strb	r3, [r2, #0]
      if (__n <= 0)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <_ZSt10__fill_n_aIP15TouchState_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x1a>
	return __first;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	e00a      	b.n	8001c5e <_ZSt10__fill_n_aIP15TouchState_enumjS0_ET_S2_T0_RKT1_St26random_access_iterator_tag+0x30>
      std::__fill_a(__first, __first + __n, __value);
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	18d1      	adds	r1, r2, r3
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 f839 	bl	8001cca <_ZSt8__fill_aIP15TouchState_enumS0_EvT_S2_RKT0_>
      return __first + __n;
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	18d3      	adds	r3, r2, r3
    }
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b004      	add	sp, #16
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_ZSt12__niter_baseIPK15TouchState_enumSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	0018      	movs	r0, r3
 8001c72:	f000 f83a 	bl	8001cea <_ZNK9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEE4baseEv>
 8001c76:	0003      	movs	r3, r0
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZSt12__niter_baseIP15TouchState_enumET_S2_>:
    __niter_base(_Iterator __it)
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	b002      	add	sp, #8
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_ZSt14__copy_move_a1ILb0EPK15TouchState_enumPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f000 f828 	bl	8001cfc <_ZSt14__copy_move_a2ILb0EPK15TouchState_enumPS0_ET1_T0_S5_S4_>
 8001cac:	0003      	movs	r3, r0
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_ZSt12__niter_wrapIP15TouchState_enumET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
    { return __res; }
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b002      	add	sp, #8
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_ZSt8__fill_aIP15TouchState_enumS0_EvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 f81e 	bl	8001d1e <_ZSt9__fill_a1IP15TouchState_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b004      	add	sp, #16
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_ZNK9__gnu_cxx17__normal_iteratorIPK15TouchState_enumSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_ZSt14__copy_move_a2ILb0EPK15TouchState_enumPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f81c 	bl	8001d4c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchState_enumEEPT_PKS4_S7_S5_>
 8001d14:	0003      	movs	r3, r0
    }
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b004      	add	sp, #16
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_ZSt9__fill_a1IP15TouchState_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 8001d2a:	e006      	b.n	8001d3a <_ZSt9__fill_a1IP15TouchState_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x1c>
	*__first = __value;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d1f4      	bne.n	8001d2c <_ZSt9__fill_a1IP15TouchState_enumS0_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0xe>
    }
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b004      	add	sp, #16
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchState_enumEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI15TouchState_enumEEPT_PKS4_S7_S5_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f003 fb5b 	bl	8005428 <memmove>
	  return __result + _Num;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	18d3      	adds	r3, r2, r3
	}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b006      	add	sp, #24
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZN9WavPlayerC1ER17I2S_HandleTypeDef>:
#include "WavPlayer.hpp"

WavPlayer::WavPlayer(I2S_HandleTypeDef &hi2s) : i2sHandle(hi2s) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	705a      	strb	r2, [r3, #1]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	709a      	strb	r2, [r3, #2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
}
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b002      	add	sp, #8
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_ZN9WavPlayerD1Ev>:

WavPlayer::~WavPlayer() {
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
}
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b002      	add	sp, #8
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dbe:	f000 fff3 	bl	8002da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc2:	f000 f911 	bl	8001fe8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc6:	f000 fab9 	bl	800233c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001dca:	f000 fa89 	bl	80022e0 <_ZL11MX_DMA_Initv>
  MX_I2S2_Init();
 8001dce:	f000 f96f 	bl	80020b0 <_ZL12MX_I2S2_Initv>
  MX_SPI1_Init();
 8001dd2:	f000 f99b 	bl	800210c <_ZL12MX_SPI1_Initv>
  MX_TIM2_Init();
 8001dd6:	f000 f9d5 	bl	8002184 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  // Mount SD Card
  HAL_GPIO_WritePin(SD_SPI1_CS_N_GPIO_Port, SD_SPI1_CS_N_Pin, GPIO_PIN_SET);
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	0219      	lsls	r1, r3, #8
 8001dde:	23a0      	movs	r3, #160	; 0xa0
 8001de0:	05db      	lsls	r3, r3, #23
 8001de2:	2201      	movs	r2, #1
 8001de4:	0018      	movs	r0, r3
 8001de6:	f001 fa07 	bl	80031f8 <HAL_GPIO_WritePin>
  FRESULT fr;
  fr = f_mount(&FatFs, "", 1);
 8001dea:	2313      	movs	r3, #19
 8001dec:	18fc      	adds	r4, r7, r3
 8001dee:	4971      	ldr	r1, [pc, #452]	; (8001fb4 <main+0x1fc>)
 8001df0:	4b71      	ldr	r3, [pc, #452]	; (8001fb8 <main+0x200>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	0018      	movs	r0, r3
 8001df6:	f003 f9f7 	bl	80051e8 <f_mount>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	7023      	strb	r3, [r4, #0]

  // Set LED defaults
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_SET);
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	486e      	ldr	r0, [pc, #440]	; (8001fbc <main+0x204>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	0019      	movs	r1, r3
 8001e08:	f001 f9f6 	bl	80031f8 <HAL_GPIO_WritePin>

  touchGroup0.setAllPixelColor(0,0,255);
 8001e0c:	486c      	ldr	r0, [pc, #432]	; (8001fc0 <main+0x208>)
 8001e0e:	23ff      	movs	r3, #255	; 0xff
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	f7fe ff5e 	bl	8000cd4 <_ZN15TouchBoardGroup16setAllPixelColorEhhh>
  touchGroup0.showPixels();
 8001e18:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <main+0x208>)
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f7fe ffb6 	bl	8000d8c <_ZN15TouchBoardGroup10showPixelsEv>
  //audioPlayer.play_atomic("01_Blues_Clues.wav");

  while (1)
  {

    switch(state) {
 8001e20:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <main+0x20c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <main+0x76>
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d007      	beq.n	8001e3c <main+0x84>
 8001e2c:	e0be      	b.n	8001fac <main+0x1f4>
      ///////////////////////////////////////////////////////////////////////////////////
      // Off State
      // Press a button to turn on
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_off:
        state = ST_awake;
 8001e2e:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <main+0x20c>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
        HAL_Delay(200);
 8001e34:	20c8      	movs	r0, #200	; 0xc8
 8001e36:	f000 ffdd 	bl	8002df4 <HAL_Delay>
        break;
 8001e3a:	e0ba      	b.n	8001fb2 <main+0x1fa>
      // Awake State
      ///////////////////////////////////////////////////////////////////////////////////
      case ST_awake:

    	// Buttons
      buttonL.updateButtonState();
 8001e3c:	4b62      	ldr	r3, [pc, #392]	; (8001fc8 <main+0x210>)
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f7fe fb7b 	bl	800053a <_ZN9LedButton17updateButtonStateEv>
      buttonR.updateButtonState();
 8001e44:	4b61      	ldr	r3, [pc, #388]	; (8001fcc <main+0x214>)
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7fe fb77 	bl	800053a <_ZN9LedButton17updateButtonStateEv>
      buttonStateL = buttonL.getButtonState();
 8001e4c:	4b5e      	ldr	r3, [pc, #376]	; (8001fc8 <main+0x210>)
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7fe fbbb 	bl	80005ca <_ZN9LedButton14getButtonStateEv>
 8001e54:	0003      	movs	r3, r0
 8001e56:	001a      	movs	r2, r3
 8001e58:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <main+0x218>)
 8001e5a:	701a      	strb	r2, [r3, #0]
      buttonStateR = buttonR.getButtonState();
 8001e5c:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <main+0x214>)
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f7fe fbb3 	bl	80005ca <_ZN9LedButton14getButtonStateEv>
 8001e64:	0003      	movs	r3, r0
 8001e66:	001a      	movs	r2, r3
 8001e68:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <main+0x21c>)
 8001e6a:	701a      	strb	r2, [r3, #0]
      if (buttonStateL == PRESSED) {
 8001e6c:	4b58      	ldr	r3, [pc, #352]	; (8001fd0 <main+0x218>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <main+0xc8>
        buttonL.setLedState(ON);
 8001e74:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <main+0x210>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7fe fb46 	bl	800050a <_ZN9LedButton11setLedStateE13LedState_enum>
 8001e7e:	e004      	b.n	8001e8a <main+0xd2>
      } else {
        buttonL.setLedState(OFF);
 8001e80:	4b51      	ldr	r3, [pc, #324]	; (8001fc8 <main+0x210>)
 8001e82:	2100      	movs	r1, #0
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7fe fb40 	bl	800050a <_ZN9LedButton11setLedStateE13LedState_enum>
      }
      if (buttonStateR == PRESSED) {
 8001e8a:	4b52      	ldr	r3, [pc, #328]	; (8001fd4 <main+0x21c>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <main+0xe6>
        buttonR.setLedState(ON);
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <main+0x214>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7fe fb37 	bl	800050a <_ZN9LedButton11setLedStateE13LedState_enum>
 8001e9c:	e004      	b.n	8001ea8 <main+0xf0>
      } else {
        buttonR.setLedState(OFF);
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <main+0x214>)
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7fe fb31 	bl	800050a <_ZN9LedButton11setLedStateE13LedState_enum>
      }

      // Touch Boards
      touchGroup0.updateTouchStates();
 8001ea8:	4b45      	ldr	r3, [pc, #276]	; (8001fc0 <main+0x208>)
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f7fe ffbf 	bl	8000e2e <_ZN15TouchBoardGroup17updateTouchStatesEv>
      touchStates = touchGroup0.getTouchStates();
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	4a43      	ldr	r2, [pc, #268]	; (8001fc0 <main+0x208>)
 8001eb4:	0011      	movs	r1, r2
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7fe ffd9 	bl	8000e6e <_ZN15TouchBoardGroup14getTouchStatesEv>
 8001ebc:	1d3a      	adds	r2, r7, #4
 8001ebe:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <main+0x220>)
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 fbab 	bl	800261e <_ZNSt6vectorI15TouchState_enumSaIS0_EEaSEOS2_>
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7ff f88c 	bl	8000fe8 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>

      for (int i=0; i<NUM_BOARDS; i++) {
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e022      	b.n	8001f1c <main+0x164>
        if (touchStates[i] == TOUCHED) {
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <main+0x220>)
 8001eda:	0011      	movs	r1, r2
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff f8ac 	bl	800103a <_ZNSt6vectorI15TouchState_enumSaIS0_EEixEj>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	425a      	negs	r2, r3
 8001ee8:	4153      	adcs	r3, r2
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <main+0x14c>
          touchGroup0.setBoardColor(i, 255, 100, 0);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	b2d9      	uxtb	r1, r3
 8001ef4:	4832      	ldr	r0, [pc, #200]	; (8001fc0 <main+0x208>)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2364      	movs	r3, #100	; 0x64
 8001efc:	22ff      	movs	r2, #255	; 0xff
 8001efe:	f7fe ff1c 	bl	8000d3a <_ZN15TouchBoardGroup13setBoardColorEhhhh>
 8001f02:	e008      	b.n	8001f16 <main+0x15e>
        } else {
          touchGroup0.setBoardColor(i, 0, 100, 255);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	b2d9      	uxtb	r1, r3
 8001f08:	482d      	ldr	r0, [pc, #180]	; (8001fc0 <main+0x208>)
 8001f0a:	23ff      	movs	r3, #255	; 0xff
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2364      	movs	r3, #100	; 0x64
 8001f10:	2200      	movs	r2, #0
 8001f12:	f7fe ff12 	bl	8000d3a <_ZN15TouchBoardGroup13setBoardColorEhhhh>
      for (int i=0; i<NUM_BOARDS; i++) {
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2b17      	cmp	r3, #23
 8001f20:	ddd9      	ble.n	8001ed6 <main+0x11e>
        }
      }
      touchGroup0.showPixels();
 8001f22:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <main+0x208>)
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7fe ff31 	bl	8000d8c <_ZN15TouchBoardGroup10showPixelsEv>

      // Rocket Stream
      if (rocketInd == NUM_ROCKETS) {
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <main+0x224>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d109      	bne.n	8001f46 <main+0x18e>
        rocketInd = 0;
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <main+0x224>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
        rocketStream.setAllRocketColor(0, 0, 0);
 8001f38:	4829      	ldr	r0, [pc, #164]	; (8001fe0 <main+0x228>)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	f7fe fca8 	bl	8000894 <_ZN12RocketStream17setAllRocketColorEhhh>
 8001f44:	e00e      	b.n	8001f64 <main+0x1ac>
      } else {
        rocketStream.setRocketColor(rocketInd, 0, 100, 0);
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <main+0x224>)
 8001f48:	7819      	ldrb	r1, [r3, #0]
 8001f4a:	4825      	ldr	r0, [pc, #148]	; (8001fe0 <main+0x228>)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2364      	movs	r3, #100	; 0x64
 8001f52:	2200      	movs	r2, #0
 8001f54:	f7fe fc6c 	bl	8000830 <_ZN12RocketStream14setRocketColorEhhhh>
        rocketInd++;
 8001f58:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <main+0x224>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <main+0x224>)
 8001f62:	701a      	strb	r2, [r3, #0]
      }
      if (streamInd == NUM_LEDS_STREAM) {
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <main+0x22c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d109      	bne.n	8001f80 <main+0x1c8>
        streamInd = 0;
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <main+0x22c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
        rocketStream.setAllStreamColor(0, 0, 0);
 8001f72:	481b      	ldr	r0, [pc, #108]	; (8001fe0 <main+0x228>)
 8001f74:	2300      	movs	r3, #0
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	f7fe fcec 	bl	8000956 <_ZN12RocketStream17setAllStreamColorEhhh>
 8001f7e:	e00e      	b.n	8001f9e <main+0x1e6>
      } else {
        rocketStream.setStreamColor(streamInd, 0, 100, 0);
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <main+0x22c>)
 8001f82:	7819      	ldrb	r1, [r3, #0]
 8001f84:	4816      	ldr	r0, [pc, #88]	; (8001fe0 <main+0x228>)
 8001f86:	2300      	movs	r3, #0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2364      	movs	r3, #100	; 0x64
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f7fe fcac 	bl	80008ea <_ZN12RocketStream14setStreamColorEhhhh>
        streamInd++;
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <main+0x22c>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <main+0x22c>)
 8001f9c:	701a      	strb	r2, [r3, #0]
      }
      rocketStream.showPixels();
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <main+0x228>)
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7fe fd03 	bl	80009ac <_ZN12RocketStream10showPixelsEv>

      HAL_Delay(200);
 8001fa6:	20c8      	movs	r0, #200	; 0xc8
 8001fa8:	f000 ff24 	bl	8002df4 <HAL_Delay>

      default:
        state = ST_awake;
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <main+0x20c>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]


	/* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001fb2:	e735      	b.n	8001e20 <main+0x68>
 8001fb4:	08005664 	.word	0x08005664
 8001fb8:	20000390 	.word	0x20000390
 8001fbc:	50001c00 	.word	0x50001c00
 8001fc0:	200005b8 	.word	0x200005b8
 8001fc4:	20000c88 	.word	0x20000c88
 8001fc8:	20000c54 	.word	0x20000c54
 8001fcc:	20000c6c 	.word	0x20000c6c
 8001fd0:	20000c84 	.word	0x20000c84
 8001fd4:	20000c85 	.word	0x20000c85
 8001fd8:	200005f8 	.word	0x200005f8
 8001fdc:	20000c86 	.word	0x20000c86
 8001fe0:	20000c34 	.word	0x20000c34
 8001fe4:	20000c87 	.word	0x20000c87

08001fe8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b095      	sub	sp, #84	; 0x54
 8001fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fee:	2418      	movs	r4, #24
 8001ff0:	193b      	adds	r3, r7, r4
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	2338      	movs	r3, #56	; 0x38
 8001ff6:	001a      	movs	r2, r3
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f003 fa28 	bl	800544e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	0018      	movs	r0, r3
 8002002:	2314      	movs	r3, #20
 8002004:	001a      	movs	r2, r3
 8002006:	2100      	movs	r1, #0
 8002008:	f003 fa21 	bl	800544e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800200c:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <_Z18SystemClock_Configv+0xc0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a26      	ldr	r2, [pc, #152]	; (80020ac <_Z18SystemClock_Configv+0xc4>)
 8002012:	401a      	ands	r2, r3
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <_Z18SystemClock_Configv+0xc0>)
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0109      	lsls	r1, r1, #4
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800201e:	0021      	movs	r1, r4
 8002020:	187b      	adds	r3, r7, r1
 8002022:	2202      	movs	r2, #2
 8002024:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2201      	movs	r2, #1
 800202a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800202c:	187b      	adds	r3, r7, r1
 800202e:	2210      	movs	r2, #16
 8002030:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002032:	187b      	adds	r3, r7, r1
 8002034:	2202      	movs	r2, #2
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002038:	187b      	adds	r3, r7, r1
 800203a:	2200      	movs	r2, #0
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800203e:	187b      	adds	r3, r7, r1
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	02d2      	lsls	r2, r2, #11
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002046:	187b      	adds	r3, r7, r1
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	03d2      	lsls	r2, r2, #15
 800204c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800204e:	187b      	adds	r3, r7, r1
 8002050:	0018      	movs	r0, r3
 8002052:	f001 f997 	bl	8003384 <HAL_RCC_OscConfig>
 8002056:	0003      	movs	r3, r0
 8002058:	1e5a      	subs	r2, r3, #1
 800205a:	4193      	sbcs	r3, r2
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8002062:	f000 fad7 	bl	8002614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	220f      	movs	r2, #15
 800206a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2203      	movs	r2, #3
 8002070:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2101      	movs	r1, #1
 8002088:	0018      	movs	r0, r3
 800208a:	f001 fc05 	bl	8003898 <HAL_RCC_ClockConfig>
 800208e:	0003      	movs	r3, r0
 8002090:	1e5a      	subs	r2, r3, #1
 8002092:	4193      	sbcs	r3, r2
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800209a:	f000 fabb 	bl	8002614 <Error_Handler>
  }
}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b015      	add	sp, #84	; 0x54
 80020a4:	bd90      	pop	{r4, r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	40007000 	.word	0x40007000
 80020ac:	ffffe7ff 	.word	0xffffe7ff

080020b0 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <_ZL12MX_I2S2_Initv+0x50>)
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <_ZL12MX_I2S2_Initv+0x54>)
 80020b8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_ZL12MX_I2S2_Initv+0x50>)
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <_ZL12MX_I2S2_Initv+0x50>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <_ZL12MX_I2S2_Initv+0x50>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <_ZL12MX_I2S2_Initv+0x50>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <_ZL12MX_I2S2_Initv+0x50>)
 80020d6:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <_ZL12MX_I2S2_Initv+0x58>)
 80020d8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <_ZL12MX_I2S2_Initv+0x50>)
 80020dc:	2208      	movs	r2, #8
 80020de:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_ZL12MX_I2S2_Initv+0x50>)
 80020e2:	0018      	movs	r0, r3
 80020e4:	f001 f88e 	bl	8003204 <HAL_I2S_Init>
 80020e8:	0003      	movs	r3, r0
 80020ea:	1e5a      	subs	r2, r3, #1
 80020ec:	4193      	sbcs	r3, r2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <_ZL12MX_I2S2_Initv+0x48>
  {
    Error_Handler();
 80020f4:	f000 fa8e 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	2000010c 	.word	0x2000010c
 8002104:	40003800 	.word	0x40003800
 8002108:	0000ac44 	.word	0x0000ac44

0800210c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 8002112:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <_ZL12MX_SPI1_Initv+0x74>)
 8002114:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 8002118:	2282      	movs	r2, #130	; 0x82
 800211a:	0052      	lsls	r2, r2, #1
 800211c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 8002132:	2200      	movs	r2, #0
 8002134:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 8002140:	2208      	movs	r2, #8
 8002142:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 8002146:	2200      	movs	r2, #0
 8002148:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 800214c:	2200      	movs	r2, #0
 800214e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 8002152:	2200      	movs	r2, #0
 8002154:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 8002158:	2207      	movs	r2, #7
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <_ZL12MX_SPI1_Initv+0x70>)
 800215e:	0018      	movs	r0, r3
 8002160:	f001 fd20 	bl	8003ba4 <HAL_SPI_Init>
 8002164:	0003      	movs	r3, r0
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	4193      	sbcs	r3, r2
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <_ZL12MX_SPI1_Initv+0x68>
  {
    Error_Handler();
 8002170:	f000 fa50 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	20000190 	.word	0x20000190
 8002180:	40013000 	.word	0x40013000

08002184 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	2318      	movs	r3, #24
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	0018      	movs	r0, r3
 8002190:	2310      	movs	r3, #16
 8002192:	001a      	movs	r2, r3
 8002194:	2100      	movs	r1, #0
 8002196:	f003 f95a 	bl	800544e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219a:	2310      	movs	r3, #16
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	0018      	movs	r0, r3
 80021a0:	2308      	movs	r3, #8
 80021a2:	001a      	movs	r2, r3
 80021a4:	2100      	movs	r1, #0
 80021a6:	f003 f952 	bl	800544e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021aa:	003b      	movs	r3, r7
 80021ac:	0018      	movs	r0, r3
 80021ae:	2310      	movs	r3, #16
 80021b0:	001a      	movs	r2, r3
 80021b2:	2100      	movs	r1, #0
 80021b4:	f003 f94b 	bl	800544e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b8:	4b48      	ldr	r3, [pc, #288]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	05d2      	lsls	r2, r2, #23
 80021be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c6:	4b45      	ldr	r3, [pc, #276]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80021cc:	4b43      	ldr	r3, [pc, #268]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 80021ce:	2227      	movs	r2, #39	; 0x27
 80021d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d2:	4b42      	ldr	r3, [pc, #264]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d8:	4b40      	ldr	r3, [pc, #256]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021de:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 80021e0:	0018      	movs	r0, r3
 80021e2:	f002 f832 	bl	800424a <HAL_TIM_Base_Init>
 80021e6:	0003      	movs	r3, r0
 80021e8:	1e5a      	subs	r2, r3, #1
 80021ea:	4193      	sbcs	r3, r2
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80021f2:	f000 fa0f 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f6:	2118      	movs	r1, #24
 80021f8:	187b      	adds	r3, r7, r1
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	0152      	lsls	r2, r2, #5
 80021fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002200:	187a      	adds	r2, r7, r1
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 8002204:	0011      	movs	r1, r2
 8002206:	0018      	movs	r0, r3
 8002208:	f002 f9e2 	bl	80045d0 <HAL_TIM_ConfigClockSource>
 800220c:	0003      	movs	r3, r0
 800220e:	1e5a      	subs	r2, r3, #1
 8002210:	4193      	sbcs	r3, r2
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8002218:	f000 f9fc 	bl	8002614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800221c:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 800221e:	0018      	movs	r0, r3
 8002220:	f002 f91d 	bl	800445e <HAL_TIM_PWM_Init>
 8002224:	0003      	movs	r3, r0
 8002226:	1e5a      	subs	r2, r3, #1
 8002228:	4193      	sbcs	r3, r2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8002230:	f000 f9f0 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002234:	2110      	movs	r1, #16
 8002236:	187b      	adds	r3, r7, r1
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223c:	187b      	adds	r3, r7, r1
 800223e:	2200      	movs	r2, #0
 8002240:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002242:	187a      	adds	r2, r7, r1
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 8002246:	0011      	movs	r1, r2
 8002248:	0018      	movs	r0, r3
 800224a:	f002 faed 	bl	8004828 <HAL_TIMEx_MasterConfigSynchronization>
 800224e:	0003      	movs	r3, r0
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	4193      	sbcs	r3, r2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800225a:	f000 f9db 	bl	8002614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225e:	003b      	movs	r3, r7
 8002260:	2260      	movs	r2, #96	; 0x60
 8002262:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002264:	003b      	movs	r3, r7
 8002266:	2200      	movs	r2, #0
 8002268:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800226a:	003b      	movs	r3, r7
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002270:	003b      	movs	r3, r7
 8002272:	2204      	movs	r2, #4
 8002274:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002276:	0039      	movs	r1, r7
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 800227a:	2200      	movs	r2, #0
 800227c:	0018      	movs	r0, r3
 800227e:	f002 f917 	bl	80044b0 <HAL_TIM_PWM_ConfigChannel>
 8002282:	0003      	movs	r3, r0
 8002284:	1e5a      	subs	r2, r3, #1
 8002286:	4193      	sbcs	r3, r2
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 800228e:	f000 f9c1 	bl	8002614 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002292:	0039      	movs	r1, r7
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 8002296:	2208      	movs	r2, #8
 8002298:	0018      	movs	r0, r3
 800229a:	f002 f909 	bl	80044b0 <HAL_TIM_PWM_ConfigChannel>
 800229e:	0003      	movs	r3, r0
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	4193      	sbcs	r3, r2
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 80022aa:	f000 f9b3 	bl	8002614 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ae:	0039      	movs	r1, r7
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	0018      	movs	r0, r3
 80022b6:	f002 f8fb 	bl	80044b0 <HAL_TIM_PWM_ConfigChannel>
 80022ba:	0003      	movs	r3, r0
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	4193      	sbcs	r3, r2
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <_ZL12MX_TIM2_Initv+0x146>
  {
    Error_Handler();
 80022c6:	f000 f9a5 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <_ZL12MX_TIM2_Initv+0x158>)
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 fc6b 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b00a      	add	sp, #40	; 0x28
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	20000278 	.word	0x20000278

080022e0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <_ZL11MX_DMA_Initv+0x58>)
 80022e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <_ZL11MX_DMA_Initv+0x58>)
 80022ec:	2101      	movs	r1, #1
 80022ee:	430a      	orrs	r2, r1
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <_ZL11MX_DMA_Initv+0x58>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	2201      	movs	r2, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	2009      	movs	r0, #9
 8002304:	f000 fd88 	bl	8002e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002308:	2009      	movs	r0, #9
 800230a:	f000 fdaf 	bl	8002e6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	200a      	movs	r0, #10
 8002314:	f000 fd80 	bl	8002e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002318:	200a      	movs	r0, #10
 800231a:	f000 fda7 	bl	8002e6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	200b      	movs	r0, #11
 8002324:	f000 fd78 	bl	8002e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002328:	200b      	movs	r0, #11
 800232a:	f000 fd9f 	bl	8002e6c <HAL_NVIC_EnableIRQ>

}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b002      	add	sp, #8
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	40021000 	.word	0x40021000

0800233c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b08d      	sub	sp, #52	; 0x34
 8002340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002342:	241c      	movs	r4, #28
 8002344:	193b      	adds	r3, r7, r4
 8002346:	0018      	movs	r0, r3
 8002348:	2314      	movs	r3, #20
 800234a:	001a      	movs	r2, r3
 800234c:	2100      	movs	r1, #0
 800234e:	f003 f87e 	bl	800544e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002352:	4ba7      	ldr	r3, [pc, #668]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002356:	4ba6      	ldr	r3, [pc, #664]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002358:	2110      	movs	r1, #16
 800235a:	430a      	orrs	r2, r1
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c
 800235e:	4ba4      	ldr	r3, [pc, #656]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	2210      	movs	r2, #16
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	4ba1      	ldr	r3, [pc, #644]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 800236c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236e:	4ba0      	ldr	r3, [pc, #640]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002370:	2104      	movs	r1, #4
 8002372:	430a      	orrs	r2, r1
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c
 8002376:	4b9e      	ldr	r3, [pc, #632]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	2204      	movs	r2, #4
 800237c:	4013      	ands	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002382:	4b9b      	ldr	r3, [pc, #620]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002386:	4b9a      	ldr	r3, [pc, #616]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	430a      	orrs	r2, r1
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c
 800238e:	4b98      	ldr	r3, [pc, #608]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	4b95      	ldr	r3, [pc, #596]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 800239c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239e:	4b94      	ldr	r3, [pc, #592]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 80023a0:	2101      	movs	r1, #1
 80023a2:	430a      	orrs	r2, r1
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80023a6:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	2201      	movs	r2, #1
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b2:	4b8f      	ldr	r3, [pc, #572]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 80023b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b6:	4b8e      	ldr	r3, [pc, #568]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 80023b8:	2102      	movs	r1, #2
 80023ba:	430a      	orrs	r2, r1
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80023be:	4b8c      	ldr	r3, [pc, #560]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	2202      	movs	r2, #2
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ca:	4b89      	ldr	r3, [pc, #548]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 80023cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ce:	4b88      	ldr	r3, [pc, #544]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 80023d0:	2108      	movs	r1, #8
 80023d2:	430a      	orrs	r2, r1
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80023d6:	4b86      	ldr	r3, [pc, #536]	; (80025f0 <_ZL12MX_GPIO_Initv+0x2b4>)
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	2208      	movs	r2, #8
 80023dc:	4013      	ands	r3, r2
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin, GPIO_PIN_RESET);
 80023e2:	4b84      	ldr	r3, [pc, #528]	; (80025f4 <_ZL12MX_GPIO_Initv+0x2b8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	2120      	movs	r1, #32
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 ff05 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin, GPIO_PIN_RESET);
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	01db      	lsls	r3, r3, #7
 80023f2:	4881      	ldr	r0, [pc, #516]	; (80025f8 <_ZL12MX_GPIO_Initv+0x2bc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	0019      	movs	r1, r3
 80023f8:	f000 fefe 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	487e      	ldr	r0, [pc, #504]	; (80025fc <_ZL12MX_GPIO_Initv+0x2c0>)
 8002402:	2200      	movs	r2, #0
 8002404:	0019      	movs	r1, r3
 8002406:	f000 fef7 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AUDIO_SD_N_L_Pin|AUDIO_SD_N_R_Pin, GPIO_PIN_RESET);
 800240a:	23c0      	movs	r3, #192	; 0xc0
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	487c      	ldr	r0, [pc, #496]	; (8002600 <_ZL12MX_GPIO_Initv+0x2c4>)
 8002410:	2200      	movs	r2, #0
 8002412:	0019      	movs	r1, r3
 8002414:	f000 fef0 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SPI1_CS_N_GPIO_Port, SD_SPI1_CS_N_Pin, GPIO_PIN_RESET);
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	0219      	lsls	r1, r3, #8
 800241c:	23a0      	movs	r3, #160	; 0xa0
 800241e:	05db      	lsls	r3, r3, #23
 8002420:	2200      	movs	r2, #0
 8002422:	0018      	movs	r0, r3
 8002424:	f000 fee8 	bl	80031f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_L_Pin SD_DET_A_Pin SD_DET_B_Pin */
  GPIO_InitStruct.Pin = BUTTON_L_Pin|SD_DET_A_Pin|SD_DET_B_Pin;
 8002428:	193b      	adds	r3, r7, r4
 800242a:	22c8      	movs	r2, #200	; 0xc8
 800242c:	0052      	lsls	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002430:	193b      	adds	r3, r7, r4
 8002432:	2200      	movs	r2, #0
 8002434:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	193b      	adds	r3, r7, r4
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800243c:	193b      	adds	r3, r7, r4
 800243e:	4a6d      	ldr	r2, [pc, #436]	; (80025f4 <_ZL12MX_GPIO_Initv+0x2b8>)
 8002440:	0019      	movs	r1, r3
 8002442:	0010      	movs	r0, r2
 8002444:	f000 fe08 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_L_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_L_Pin;
 8002448:	193b      	adds	r3, r7, r4
 800244a:	2220      	movs	r2, #32
 800244c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244e:	193b      	adds	r3, r7, r4
 8002450:	2201      	movs	r2, #1
 8002452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	193b      	adds	r3, r7, r4
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	193b      	adds	r3, r7, r4
 800245c:	2200      	movs	r2, #0
 800245e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_L_GPIO_Port, &GPIO_InitStruct);
 8002460:	193b      	adds	r3, r7, r4
 8002462:	4a64      	ldr	r2, [pc, #400]	; (80025f4 <_ZL12MX_GPIO_Initv+0x2b8>)
 8002464:	0019      	movs	r1, r3
 8002466:	0010      	movs	r0, r2
 8002468:	f000 fdf6 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_R_Pin TOUCH_STAR_0_Pin TOUCH_STAR_1_Pin TOUCH_STAR_2_Pin
                           TOUCH_STAR_15_Pin TOUCH_STAR_16_Pin TOUCH_STAR_17_Pin */
  GPIO_InitStruct.Pin = BUTTON_R_Pin|TOUCH_STAR_0_Pin|TOUCH_STAR_1_Pin|TOUCH_STAR_2_Pin
 800246c:	193b      	adds	r3, r7, r4
 800246e:	4a65      	ldr	r2, [pc, #404]	; (8002604 <_ZL12MX_GPIO_Initv+0x2c8>)
 8002470:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_15_Pin|TOUCH_STAR_16_Pin|TOUCH_STAR_17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002472:	193b      	adds	r3, r7, r4
 8002474:	2200      	movs	r2, #0
 8002476:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	193b      	adds	r3, r7, r4
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247e:	193b      	adds	r3, r7, r4
 8002480:	4a5d      	ldr	r2, [pc, #372]	; (80025f8 <_ZL12MX_GPIO_Initv+0x2bc>)
 8002482:	0019      	movs	r1, r3
 8002484:	0010      	movs	r0, r2
 8002486:	f000 fde7 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_LED_R_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_R_Pin;
 800248a:	0021      	movs	r1, r4
 800248c:	187b      	adds	r3, r7, r1
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	01d2      	lsls	r2, r2, #7
 8002492:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002494:	000c      	movs	r4, r1
 8002496:	193b      	adds	r3, r7, r4
 8002498:	2201      	movs	r2, #1
 800249a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	193b      	adds	r3, r7, r4
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	193b      	adds	r3, r7, r4
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUTTON_LED_R_GPIO_Port, &GPIO_InitStruct);
 80024a8:	193b      	adds	r3, r7, r4
 80024aa:	4a53      	ldr	r2, [pc, #332]	; (80025f8 <_ZL12MX_GPIO_Initv+0x2bc>)
 80024ac:	0019      	movs	r1, r3
 80024ae:	0010      	movs	r0, r2
 80024b0:	f000 fdd2 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 80024b4:	0021      	movs	r1, r4
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	00d2      	lsls	r2, r2, #3
 80024bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	000c      	movs	r4, r1
 80024c0:	193b      	adds	r3, r7, r4
 80024c2:	2201      	movs	r2, #1
 80024c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	193b      	adds	r3, r7, r4
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 80024d2:	193b      	adds	r3, r7, r4
 80024d4:	4a49      	ldr	r2, [pc, #292]	; (80025fc <_ZL12MX_GPIO_Initv+0x2c0>)
 80024d6:	0019      	movs	r1, r3
 80024d8:	0010      	movs	r0, r2
 80024da:	f000 fdbd 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_G7_1_SAMP_Pin */
  GPIO_InitStruct.Pin = TOUCH_G7_1_SAMP_Pin;
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	193b      	adds	r3, r7, r4
 80024e6:	2202      	movs	r2, #2
 80024e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	193b      	adds	r3, r7, r4
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	193b      	adds	r3, r7, r4
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80024f6:	193b      	adds	r3, r7, r4
 80024f8:	2203      	movs	r2, #3
 80024fa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(TOUCH_G7_1_SAMP_GPIO_Port, &GPIO_InitStruct);
 80024fc:	193b      	adds	r3, r7, r4
 80024fe:	4a3e      	ldr	r2, [pc, #248]	; (80025f8 <_ZL12MX_GPIO_Initv+0x2bc>)
 8002500:	0019      	movs	r1, r3
 8002502:	0010      	movs	r0, r2
 8002504:	f000 fda8 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_STAR_3_Pin TOUCH_STAR_4_Pin TOUCH_STAR_5_Pin TOUCH_STAR_6_Pin
                           TOUCH_STAR_7_Pin TOUCH_STAR_8_Pin TOUCH_STAR_18_Pin TOUCH_STAR_19_Pin
                           TOUCH_STAR_20_Pin */
  GPIO_InitStruct.Pin = TOUCH_STAR_3_Pin|TOUCH_STAR_4_Pin|TOUCH_STAR_5_Pin|TOUCH_STAR_6_Pin
 8002508:	193b      	adds	r3, r7, r4
 800250a:	4a3f      	ldr	r2, [pc, #252]	; (8002608 <_ZL12MX_GPIO_Initv+0x2cc>)
 800250c:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_7_Pin|TOUCH_STAR_8_Pin|TOUCH_STAR_18_Pin|TOUCH_STAR_19_Pin
                          |TOUCH_STAR_20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250e:	193b      	adds	r3, r7, r4
 8002510:	2200      	movs	r2, #0
 8002512:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	193b      	adds	r3, r7, r4
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	193a      	adds	r2, r7, r4
 800251c:	23a0      	movs	r3, #160	; 0xa0
 800251e:	05db      	lsls	r3, r3, #23
 8002520:	0011      	movs	r1, r2
 8002522:	0018      	movs	r0, r3
 8002524:	f000 fd98 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_STAR_9_Pin TOUCH_STAR_10_Pin TOUCH_STAR_11_Pin TOUCH_STAR_12_Pin
                           TOUCH_STAR_13_Pin TOUCH_STAR_14_Pin TOUCH_STAR_21_Pin TOUCH_STAR_22_Pin
                           TOUCH_STAR_23_Pin */
  GPIO_InitStruct.Pin = TOUCH_STAR_9_Pin|TOUCH_STAR_10_Pin|TOUCH_STAR_11_Pin|TOUCH_STAR_12_Pin
 8002528:	193b      	adds	r3, r7, r4
 800252a:	4a38      	ldr	r2, [pc, #224]	; (800260c <_ZL12MX_GPIO_Initv+0x2d0>)
 800252c:	601a      	str	r2, [r3, #0]
                          |TOUCH_STAR_13_Pin|TOUCH_STAR_14_Pin|TOUCH_STAR_21_Pin|TOUCH_STAR_22_Pin
                          |TOUCH_STAR_23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252e:	193b      	adds	r3, r7, r4
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	193b      	adds	r3, r7, r4
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253a:	193b      	adds	r3, r7, r4
 800253c:	4a34      	ldr	r2, [pc, #208]	; (8002610 <_ZL12MX_GPIO_Initv+0x2d4>)
 800253e:	0019      	movs	r1, r3
 8002540:	0010      	movs	r0, r2
 8002542:	f000 fd89 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_L_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_L_Pin;
 8002546:	0021      	movs	r1, r4
 8002548:	187b      	adds	r3, r7, r1
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	00d2      	lsls	r2, r2, #3
 800254e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002550:	000c      	movs	r4, r1
 8002552:	193b      	adds	r3, r7, r4
 8002554:	2201      	movs	r2, #1
 8002556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	193b      	adds	r3, r7, r4
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	193b      	adds	r3, r7, r4
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_L_GPIO_Port, &GPIO_InitStruct);
 8002564:	193b      	adds	r3, r7, r4
 8002566:	4a26      	ldr	r2, [pc, #152]	; (8002600 <_ZL12MX_GPIO_Initv+0x2c4>)
 8002568:	0019      	movs	r1, r3
 800256a:	0010      	movs	r0, r2
 800256c:	f000 fd74 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SD_N_R_Pin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_R_Pin;
 8002570:	0021      	movs	r1, r4
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257a:	000c      	movs	r4, r1
 800257c:	193b      	adds	r3, r7, r4
 800257e:	2201      	movs	r2, #1
 8002580:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	193b      	adds	r3, r7, r4
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	193b      	adds	r3, r7, r4
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUDIO_SD_N_R_GPIO_Port, &GPIO_InitStruct);
 800258e:	193b      	adds	r3, r7, r4
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <_ZL12MX_GPIO_Initv+0x2c4>)
 8002592:	0019      	movs	r1, r3
 8002594:	0010      	movs	r0, r2
 8002596:	f000 fd5f 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 800259a:	0021      	movs	r1, r4
 800259c:	187b      	adds	r3, r7, r1
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	0212      	lsls	r2, r2, #8
 80025a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a4:	000c      	movs	r4, r1
 80025a6:	193b      	adds	r3, r7, r4
 80025a8:	2200      	movs	r2, #0
 80025aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 80025b2:	193b      	adds	r3, r7, r4
 80025b4:	4a12      	ldr	r2, [pc, #72]	; (8002600 <_ZL12MX_GPIO_Initv+0x2c4>)
 80025b6:	0019      	movs	r1, r3
 80025b8:	0010      	movs	r0, r2
 80025ba:	f000 fd4d 	bl	8003058 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_SPI1_CS_N_Pin */
  GPIO_InitStruct.Pin = SD_SPI1_CS_N_Pin;
 80025be:	0021      	movs	r1, r4
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	0212      	lsls	r2, r2, #8
 80025c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	2201      	movs	r2, #1
 80025cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	2200      	movs	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_SPI1_CS_N_GPIO_Port, &GPIO_InitStruct);
 80025da:	187a      	adds	r2, r7, r1
 80025dc:	23a0      	movs	r3, #160	; 0xa0
 80025de:	05db      	lsls	r3, r3, #23
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fd38 	bl	8003058 <HAL_GPIO_Init>

}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b00d      	add	sp, #52	; 0x34
 80025ee:	bd90      	pop	{r4, r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	50001000 	.word	0x50001000
 80025f8:	50000800 	.word	0x50000800
 80025fc:	50001c00 	.word	0x50001c00
 8002600:	50000c00 	.word	0x50000c00
 8002604:	0000238e 	.word	0x0000238e
 8002608:	00001cee 	.word	0x00001cee
 800260c:	000070d7 	.word	0x000070d7
 8002610:	50000400 	.word	0x50000400

08002614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002618:	b672      	cpsid	i
}
 800261a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800261c:	e7fe      	b.n	800261c <Error_Handler+0x8>

0800261e <_ZNSt6vectorI15TouchState_enumSaIS0_EEaSEOS2_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 800261e:	b590      	push	{r4, r7, lr}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8002628:	230f      	movs	r3, #15
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	0018      	movs	r0, r3
 8002634:	f000 f80b 	bl	800264e <_ZSt4moveIRSt6vectorI15TouchState_enumSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002638:	0001      	movs	r1, r0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	1c22      	adds	r2, r4, #0
 800263e:	0018      	movs	r0, r3
 8002640:	f000 f80e 	bl	8002660 <_ZNSt6vectorI15TouchState_enumSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>
	return *this;
 8002644:	687b      	ldr	r3, [r7, #4]
      }
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b005      	add	sp, #20
 800264c:	bd90      	pop	{r4, r7, pc}

0800264e <_ZSt4moveIRSt6vectorI15TouchState_enumSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}

08002660 <_ZNSt6vectorI15TouchState_enumSaIS0_EE14_M_move_assignEOS2_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	701a      	strb	r2, [r3, #0]
      {
	vector __tmp(get_allocator());
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	241c      	movs	r4, #28
 8002672:	193b      	adds	r3, r7, r4
 8002674:	0011      	movs	r1, r2
 8002676:	0018      	movs	r0, r3
 8002678:	f000 f82c 	bl	80026d4 <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE13get_allocatorEv>
 800267c:	193a      	adds	r2, r7, r4
 800267e:	2510      	movs	r5, #16
 8002680:	197b      	adds	r3, r7, r5
 8002682:	0011      	movs	r1, r2
 8002684:	0018      	movs	r0, r3
 8002686:	f000 f838 	bl	80026fa <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS1_>
 800268a:	193b      	adds	r3, r7, r4
 800268c:	0018      	movs	r0, r3
 800268e:	f7fe fc80 	bl	8000f92 <_ZNSaI15TouchState_enumED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	0011      	movs	r1, r2
 8002698:	0018      	movs	r0, r3
 800269a:	f000 f83e 	bl	800271a <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	197b      	adds	r3, r7, r5
 80026a2:	0011      	movs	r1, r2
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 f838 	bl	800271a <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fe fe48 	bl	8001342 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 80026b2:	0004      	movs	r4, r0
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7fe fe43 	bl	8001342 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 80026bc:	0003      	movs	r3, r0
 80026be:	0019      	movs	r1, r3
 80026c0:	0020      	movs	r0, r4
 80026c2:	f000 f84a 	bl	800275a <_ZSt15__alloc_on_moveISaI15TouchState_enumEEvRT_S3_>
      }
 80026c6:	197b      	adds	r3, r7, r5
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7fe fc8d 	bl	8000fe8 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b008      	add	sp, #32
 80026d2:	bdb0      	pop	{r4, r5, r7, pc}

080026d4 <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fe fe63 	bl	80013ac <_ZNKSt12_Vector_baseI15TouchState_enumSaIS0_EE19_M_get_Tp_allocatorEv>
 80026e6:	0002      	movs	r2, r0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0011      	movs	r1, r2
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7fe ff45 	bl	800157c <_ZNSaI15TouchState_enumEC1ERKS0_>
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b002      	add	sp, #8
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1ERKS1_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	0011      	movs	r1, r2
 800270a:	0018      	movs	r0, r3
 800270c:	f000 f833 	bl	8002776 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1ERKS1_>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b002      	add	sp, #8
 8002718:	bd80      	pop	{r7, pc}

0800271a <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 800271a:	b590      	push	{r4, r7, lr}
 800271c:	b087      	sub	sp, #28
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8002724:	240c      	movs	r4, #12
 8002726:	193b      	adds	r3, r7, r4
 8002728:	0018      	movs	r0, r3
 800272a:	f7ff f871 	bl	8001810 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	193b      	adds	r3, r7, r4
 8002732:	0011      	movs	r1, r2
 8002734:	0018      	movs	r0, r3
 8002736:	f000 f82e 	bl	8002796 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	  _M_copy_data(__x);
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f000 f828 	bl	8002796 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	  __x._M_copy_data(__tmp);
 8002746:	193a      	adds	r2, r7, r4
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f822 	bl	8002796 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>
	}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b007      	add	sp, #28
 8002758:	bd90      	pop	{r4, r7, pc}

0800275a <_ZSt15__alloc_on_moveISaI15TouchState_enumEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8002764:	6839      	ldr	r1, [r7, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f000 f829 	bl	80027c0 <_ZSt18__do_alloc_on_moveISaI15TouchState_enumEEvRT_S3_St17integral_constantIbLb1EE>
    }
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b002      	add	sp, #8
 8002774:	bd80      	pop	{r7, pc}

08002776 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f7fe ff08 	bl	800159c <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE12_Vector_implC1ERKS1_>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}

08002796 <_ZNSt12_Vector_baseI15TouchState_enumSaIS0_EE17_Vector_impl_data12_M_copy_dataERKS3_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	609a      	str	r2, [r3, #8]
	}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZSt18__do_alloc_on_moveISaI15TouchState_enumEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	701a      	strb	r2, [r3, #0]
    { __one = std::move(__two); }
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 f804 	bl	80027de <_ZSt4moveIRSaI15TouchState_enumEEONSt16remove_referenceIT_E4typeEOS4_>
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b004      	add	sp, #16
 80027dc:	bd80      	pop	{r7, pc}

080027de <_ZSt4moveIRSaI15TouchState_enumEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d13e      	bne.n	800287e <_Z41__static_initialization_and_destruction_0ii+0x8e>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4a30      	ldr	r2, [pc, #192]	; (80028c4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d13a      	bne.n	800287e <_Z41__static_initialization_and_destruction_0ii+0x8e>
TouchBoardGroup touchGroup0 = TouchBoardGroup(NUM_BOARDS, htim2, TIM_CHANNEL_1, hdma_tim2_ch1);
 8002808:	4a2f      	ldr	r2, [pc, #188]	; (80028c8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800280a:	4830      	ldr	r0, [pc, #192]	; (80028cc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800280c:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2300      	movs	r3, #0
 8002812:	2118      	movs	r1, #24
 8002814:	f7fe f9c6 	bl	8000ba4 <_ZN15TouchBoardGroupC1EhR17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
std::vector<TouchState_enum> touchStates(NUM_BOARDS);
 8002818:	240c      	movs	r4, #12
 800281a:	193b      	adds	r3, r7, r4
 800281c:	0018      	movs	r0, r3
 800281e:	f7fe fbab 	bl	8000f78 <_ZNSaI15TouchState_enumEC1Ev>
 8002822:	193a      	adds	r2, r7, r4
 8002824:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002826:	2118      	movs	r1, #24
 8002828:	0018      	movs	r0, r3
 800282a:	f7fe fbbf 	bl	8000fac <_ZNSt6vectorI15TouchState_enumSaIS0_EEC1EjRKS1_>
 800282e:	193b      	adds	r3, r7, r4
 8002830:	0018      	movs	r0, r3
 8002832:	f7fe fbae 	bl	8000f92 <_ZNSaI15TouchState_enumED1Ev>
WavPlayer audioPlayer = WavPlayer(hi2s2);
 8002836:	4a28      	ldr	r2, [pc, #160]	; (80028d8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002838:	4b28      	ldr	r3, [pc, #160]	; (80028dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800283a:	0011      	movs	r1, r2
 800283c:	0018      	movs	r0, r3
 800283e:	f7ff fa9f 	bl	8001d80 <_ZN9WavPlayerC1ER17I2S_HandleTypeDef>
RocketStream rocketStream = RocketStream(htim2, TIM_CHANNEL_3, hdma_tim2_ch3);
 8002842:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002844:	4920      	ldr	r1, [pc, #128]	; (80028c8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002846:	4827      	ldr	r0, [pc, #156]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002848:	2208      	movs	r2, #8
 800284a:	f7fd ffb9 	bl	80007c0 <_ZN12RocketStreamC1ER17TIM_HandleTypeDefmR19__DMA_HandleTypeDef>
LedButton buttonL = LedButton(BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin, BUTTON_L_GPIO_Port, BUTTON_L_Pin);
 800284e:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002850:	4925      	ldr	r1, [pc, #148]	; (80028e8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002852:	4826      	ldr	r0, [pc, #152]	; (80028ec <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002854:	2310      	movs	r3, #16
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	0013      	movs	r3, r2
 800285a:	2220      	movs	r2, #32
 800285c:	f7fd fe24 	bl	80004a8 <_ZN9LedButtonC1EP12GPIO_TypeDeftS1_t>
LedButton buttonR = LedButton(BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin, BUTTON_R_GPIO_Port, BUTTON_R_Pin);
 8002860:	4c23      	ldr	r4, [pc, #140]	; (80028f0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	01da      	lsls	r2, r3, #7
 8002866:	4922      	ldr	r1, [pc, #136]	; (80028f0 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002868:	4822      	ldr	r0, [pc, #136]	; (80028f4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	0023      	movs	r3, r4
 8002872:	f7fd fe19 	bl	80004a8 <_ZN9LedButtonC1EP12GPIO_TypeDeftS1_t>
uint16_t inactivity_timer = inactivity_timeout;
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8002878:	881a      	ldrh	r2, [r3, #0]
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d11b      	bne.n	80028bc <_Z41__static_initialization_and_destruction_0ii+0xcc>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d117      	bne.n	80028bc <_Z41__static_initialization_and_destruction_0ii+0xcc>
LedButton buttonR = LedButton(BUTTON_LED_R_GPIO_Port, BUTTON_LED_R_Pin, BUTTON_R_GPIO_Port, BUTTON_R_Pin);
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800288e:	0018      	movs	r0, r3
 8002890:	f7fd fe32 	bl	80004f8 <_ZN9LedButtonD1Ev>
LedButton buttonL = LedButton(BUTTON_LED_L_GPIO_Port, BUTTON_LED_L_Pin, BUTTON_L_GPIO_Port, BUTTON_L_Pin);
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002896:	0018      	movs	r0, r3
 8002898:	f7fd fe2e 	bl	80004f8 <_ZN9LedButtonD1Ev>
RocketStream rocketStream = RocketStream(htim2, TIM_CHANNEL_3, hdma_tim2_ch3);
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800289e:	0018      	movs	r0, r3
 80028a0:	f7fd ffb9 	bl	8000816 <_ZN12RocketStreamD1Ev>
WavPlayer audioPlayer = WavPlayer(hi2s2);
 80028a4:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7ff fa7d 	bl	8001da6 <_ZN9WavPlayerD1Ev>
std::vector<TouchState_enum> touchStates(NUM_BOARDS);
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7fe fb9a 	bl	8000fe8 <_ZNSt6vectorI15TouchState_enumSaIS0_EED1Ev>
TouchBoardGroup touchGroup0 = TouchBoardGroup(NUM_BOARDS, htim2, TIM_CHANNEL_1, hdma_tim2_ch1);
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80028b6:	0018      	movs	r0, r3
 80028b8:	f7fe f9f4 	bl	8000ca4 <_ZN15TouchBoardGroupD1Ev>
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b005      	add	sp, #20
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	0000ffff 	.word	0x0000ffff
 80028c8:	20000278 	.word	0x20000278
 80028cc:	200005b8 	.word	0x200005b8
 80028d0:	200002b8 	.word	0x200002b8
 80028d4:	200005f8 	.word	0x200005f8
 80028d8:	2000010c 	.word	0x2000010c
 80028dc:	20000604 	.word	0x20000604
 80028e0:	20000300 	.word	0x20000300
 80028e4:	20000c34 	.word	0x20000c34
 80028e8:	50001000 	.word	0x50001000
 80028ec:	20000c54 	.word	0x20000c54
 80028f0:	50000800 	.word	0x50000800
 80028f4:	20000c6c 	.word	0x20000c6c
 80028f8:	20000090 	.word	0x20000090
 80028fc:	20000c8a 	.word	0x20000c8a

08002900 <_GLOBAL__sub_I_hi2s2>:
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <_GLOBAL__sub_I_hi2s2+0x14>)
 8002906:	0019      	movs	r1, r3
 8002908:	2001      	movs	r0, #1
 800290a:	f7ff ff71 	bl	80027f0 <_Z41__static_initialization_and_destruction_0ii>
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	0000ffff 	.word	0x0000ffff

08002918 <_GLOBAL__sub_D_hi2s2>:
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <_GLOBAL__sub_D_hi2s2+0x14>)
 800291e:	0019      	movs	r1, r3
 8002920:	2000      	movs	r0, #0
 8002922:	f7ff ff65 	bl	80027f0 <_Z41__static_initialization_and_destruction_0ii>
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	0000ffff 	.word	0x0000ffff

08002930 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002930:	2201      	movs	r2, #1
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_MspInit+0x18>)
 8002934:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002936:	430a      	orrs	r2, r1
 8002938:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800293e:	0552      	lsls	r2, r2, #21
 8002940:	430a      	orrs	r2, r1
 8002942:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002944:	4770      	bx	lr
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	40021000 	.word	0x40021000

0800294c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	0005      	movs	r5, r0
 8002950:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002952:	2214      	movs	r2, #20
 8002954:	2100      	movs	r1, #0
 8002956:	a803      	add	r0, sp, #12
 8002958:	f002 fd79 	bl	800544e <memset>
  if(hi2s->Instance==SPI2)
 800295c:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_I2S_MspInit+0xa4>)
 800295e:	682a      	ldr	r2, [r5, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d143      	bne.n	80029ec <HAL_I2S_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002964:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	2602      	movs	r6, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_I2S_MspInit+0xa8>)
 800296a:	01d2      	lsls	r2, r2, #7
 800296c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    PD1     ------> I2S2_CK
    */
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2403      	movs	r4, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002970:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002972:	2108      	movs	r1, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002974:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 8002978:	481f      	ldr	r0, [pc, #124]	; (80029f8 <HAL_I2S_MspInit+0xac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	4332      	orrs	r2, r6
 800297c:	62da      	str	r2, [r3, #44]	; 0x2c
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c

    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2700      	movs	r7, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	4032      	ands	r2, r6
 8002984:	9201      	str	r2, [sp, #4]
 8002986:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298a:	430a      	orrs	r2, r1
 800298c:	62da      	str	r2, [r3, #44]	; 0x2c
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002990:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002992:	400b      	ands	r3, r1
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 8002998:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 800299a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S_SPI2_SD_Pin;
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(I2S_SPI2_SD_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f000 fb59 	bl	8003058 <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80029a6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a8:	4814      	ldr	r0, [pc, #80]	; (80029fc <HAL_I2S_MspInit+0xb0>)
 80029aa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S_SPI2_WS_Pin|I2S_SPI2_CK_Pin;
 80029ac:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ae:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80029b0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b6:	f000 fb4f 	bl	8003058 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel7;
 80029ba:	4c11      	ldr	r4, [pc, #68]	; (8002a00 <HAL_I2S_MspInit+0xb4>)
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_I2S_MspInit+0xb8>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80029be:	0020      	movs	r0, r4
    hdma_spi2_tx.Instance = DMA1_Channel7;
 80029c0:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029c2:	2310      	movs	r3, #16
 80029c4:	60a3      	str	r3, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029c6:	3370      	adds	r3, #112	; 0x70
 80029c8:	6123      	str	r3, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029ca:	3380      	adds	r3, #128	; 0x80
 80029cc:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	00db      	lsls	r3, r3, #3
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80029d2:	6066      	str	r6, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d4:	60e7      	str	r7, [r4, #12]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029d6:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80029d8:	61e7      	str	r7, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029da:	6227      	str	r7, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80029dc:	f000 fa6c 	bl	8002eb8 <HAL_DMA_Init>
 80029e0:	42b8      	cmp	r0, r7
 80029e2:	d001      	beq.n	80029e8 <HAL_I2S_MspInit+0x9c>
    {
      Error_Handler();
 80029e4:	f7ff fe16 	bl	8002614 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80029e8:	62ec      	str	r4, [r5, #44]	; 0x2c
 80029ea:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80029ec:	b009      	add	sp, #36	; 0x24
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f0:	40003800 	.word	0x40003800
 80029f4:	40021000 	.word	0x40021000
 80029f8:	50000400 	.word	0x50000400
 80029fc:	50000c00 	.word	0x50000c00
 8002a00:	20000148 	.word	0x20000148
 8002a04:	40020080 	.word	0x40020080

08002a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a08:	b530      	push	{r4, r5, lr}
 8002a0a:	0005      	movs	r5, r0
 8002a0c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0e:	2214      	movs	r2, #20
 8002a10:	2100      	movs	r1, #0
 8002a12:	a801      	add	r0, sp, #4
 8002a14:	f002 fd1b 	bl	800544e <memset>
  if(hspi->Instance==SPI1)
 8002a18:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_SPI_MspInit+0xb0>)
 8002a1a:	682a      	ldr	r2, [r5, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d148      	bne.n	8002ab2 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <HAL_SPI_MspInit+0xb4>)
 8002a24:	0152      	lsls	r2, r2, #5
 8002a26:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a28:	4825      	ldr	r0, [pc, #148]	; (8002ac0 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a2a:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a2c:	2110      	movs	r1, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a2e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a32:	430a      	orrs	r2, r1
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a38:	2203      	movs	r2, #3
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SD_SPI1_SCK_Pin|SD_SPI1_MISO_Pin|SD_SPI1_MOSI_Pin;
 8002a40:	23e0      	movs	r3, #224	; 0xe0
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a48:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI1;
 8002a4e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a50:	f000 fb02 	bl	8003058 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002a54:	4c1b      	ldr	r4, [pc, #108]	; (8002ac4 <HAL_SPI_MspInit+0xbc>)
 8002a56:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <HAL_SPI_MspInit+0xc0>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a58:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002a5a:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a60:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002a62:	0020      	movs	r0, r4
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a64:	60a3      	str	r3, [r4, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a66:	60e3      	str	r3, [r4, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a68:	6122      	str	r2, [r4, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a6a:	6163      	str	r3, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a6c:	61a3      	str	r3, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002a6e:	61e3      	str	r3, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a70:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002a72:	f000 fa21 	bl	8002eb8 <HAL_DMA_Init>
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 8002a7a:	f7ff fdcb 	bl	8002614 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_SPI_MspInit+0xc4>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002a80:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002a82:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002a84:	4c12      	ldr	r4, [pc, #72]	; (8002ad0 <HAL_SPI_MspInit+0xc8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a86:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002a88:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	6063      	str	r3, [r4, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a8e:	330f      	adds	r3, #15
 8002a90:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a92:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002a94:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a96:	60e3      	str	r3, [r4, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a98:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a9a:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a9c:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002a9e:	61e3      	str	r3, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aa0:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002aa2:	f000 fa09 	bl	8002eb8 <HAL_DMA_Init>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_SPI_MspInit+0xa6>
    {
      Error_Handler();
 8002aaa:	f7ff fdb3 	bl	8002614 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002aae:	64ac      	str	r4, [r5, #72]	; 0x48
 8002ab0:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ab2:	b007      	add	sp, #28
 8002ab4:	bd30      	pop	{r4, r5, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	40013000 	.word	0x40013000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	50001000 	.word	0x50001000
 8002ac4:	200001e8 	.word	0x200001e8
 8002ac8:	4002001c 	.word	0x4002001c
 8002acc:	40020030 	.word	0x40020030
 8002ad0:	20000230 	.word	0x20000230

08002ad4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	6802      	ldr	r2, [r0, #0]
{
 8002ad8:	b570      	push	{r4, r5, r6, lr}
  if(htim_base->Instance==TIM2)
 8002ada:	05db      	lsls	r3, r3, #23
{
 8002adc:	0005      	movs	r5, r0
  if(htim_base->Instance==TIM2)
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d152      	bne.n	8002b88 <HAL_TIM_Base_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <HAL_TIM_Base_MspInit+0xb8>)

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002ae6:	4c2a      	ldr	r4, [pc, #168]	; (8002b90 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae8:	6b91      	ldr	r1, [r2, #56]	; 0x38
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002aea:	0020      	movs	r0, r4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <HAL_TIM_Base_MspInit+0xc0>)
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002af2:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002af4:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8002af6:	2308      	movs	r3, #8
 8002af8:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002afa:	18db      	adds	r3, r3, r3
 8002afc:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002afe:	2300      	movs	r3, #0
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002b00:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b02:	3281      	adds	r2, #129	; 0x81
 8002b04:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b06:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b08:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b0a:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002b0c:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002b0e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002b10:	f000 f9d2 	bl	8002eb8 <HAL_DMA_Init>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_TIM_Base_MspInit+0x48>
    {
      Error_Handler();
 8002b18:	f7ff fd7c 	bl	8002614 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002b1c:	622c      	str	r4, [r5, #32]

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_TIM_Base_MspInit+0xc4>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002b20:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002b22:	4c1e      	ldr	r4, [pc, #120]	; (8002b9c <HAL_TIM_Base_MspInit+0xc8>)
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002b24:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002b26:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_8;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b2c:	18db      	adds	r3, r3, r3
 8002b2e:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b30:	2300      	movs	r3, #0
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002b32:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b34:	3281      	adds	r2, #129	; 0x81
 8002b36:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002b38:	0020      	movs	r0, r4
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b3a:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b3c:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b3e:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002b40:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002b42:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002b44:	f000 f9b8 	bl	8002eb8 <HAL_DMA_Init>
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_TIM_Base_MspInit+0x7c>
    {
      Error_Handler();
 8002b4c:	f7ff fd62 	bl	8002614 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);

    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_TIM_Base_MspInit+0xcc>)
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002b52:	62ac      	str	r4, [r5, #40]	; 0x28
 8002b54:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8002b56:	4c13      	ldr	r4, [pc, #76]	; (8002ba4 <HAL_TIM_Base_MspInit+0xd0>)
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002b58:	2280      	movs	r2, #128	; 0x80
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8002b5a:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_8;
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	6063      	str	r3, [r4, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b60:	18db      	adds	r3, r3, r3
 8002b62:	60a3      	str	r3, [r4, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b64:	2300      	movs	r3, #0
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002b66:	6122      	str	r2, [r4, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b68:	3281      	adds	r2, #129	; 0x81
 8002b6a:	32ff      	adds	r2, #255	; 0xff
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8002b6c:	0020      	movs	r0, r4
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6e:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b70:	6162      	str	r2, [r4, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b72:	61a3      	str	r3, [r4, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8002b74:	61e3      	str	r3, [r4, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002b76:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8002b78:	f000 f99e 	bl	8002eb8 <HAL_DMA_Init>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_TIM_Base_MspInit+0xb0>
    {
      Error_Handler();
 8002b80:	f7ff fd48 	bl	8002614 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8002b84:	62ec      	str	r4, [r5, #44]	; 0x2c
 8002b86:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b88:	bd70      	pop	{r4, r5, r6, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	200002b8 	.word	0x200002b8
 8002b94:	40020058 	.word	0x40020058
 8002b98:	40020008 	.word	0x40020008
 8002b9c:	20000300 	.word	0x20000300
 8002ba0:	40020044 	.word	0x40020044
 8002ba4:	20000348 	.word	0x20000348

08002ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	0004      	movs	r4, r0
 8002bac:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bae:	2214      	movs	r2, #20
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	a801      	add	r0, sp, #4
 8002bb4:	f002 fc4b 	bl	800544e <memset>
  if(htim->Instance==TIM2)
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	6822      	ldr	r2, [r4, #0]
 8002bbc:	05db      	lsls	r3, r3, #23
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d111      	bne.n	8002be6 <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM2;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc6:	480a      	ldr	r0, [pc, #40]	; (8002bf0 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = NEOPIX_STARS_Pin|NEOPIX_ROCKET_L_Pin|NEOPIX_ROCKET_R_Pin;
 8002bd6:	23d0      	movs	r3, #208	; 0xd0
 8002bd8:	015b      	lsls	r3, r3, #5
 8002bda:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bde:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be2:	f000 fa39 	bl	8003058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002be6:	b006      	add	sp, #24
 8002be8:	bd10      	pop	{r4, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	50001000 	.word	0x50001000

08002bf4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bf4:	4770      	bx	lr

08002bf6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <HardFault_Handler>

08002bf8 <SVC_Handler>:
 8002bf8:	4770      	bx	lr

08002bfa <PendSV_Handler>:
 8002bfa:	4770      	bx	lr

08002bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bfc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bfe:	f000 f8e7 	bl	8002dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c02:	bd10      	pop	{r4, pc}

08002c04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002c06:	4802      	ldr	r0, [pc, #8]	; (8002c10 <DMA1_Channel1_IRQHandler+0xc>)
 8002c08:	f000 f9da 	bl	8002fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c0c:	bd10      	pop	{r4, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	20000300 	.word	0x20000300

08002c14 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002c14:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002c16:	4803      	ldr	r0, [pc, #12]	; (8002c24 <DMA1_Channel2_3_IRQHandler+0x10>)
 8002c18:	f000 f9d2 	bl	8002fc0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002c1e:	f000 f9cf 	bl	8002fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002c22:	bd10      	pop	{r4, pc}
 8002c24:	200001e8 	.word	0x200001e8
 8002c28:	20000230 	.word	0x20000230

08002c2c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002c2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <DMA1_Channel4_5_6_7_IRQHandler+0x18>)
 8002c30:	f000 f9c6 	bl	8002fc0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002c34:	4804      	ldr	r0, [pc, #16]	; (8002c48 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8002c36:	f000 f9c3 	bl	8002fc0 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002c3a:	4804      	ldr	r0, [pc, #16]	; (8002c4c <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8002c3c:	f000 f9c0 	bl	8002fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002c40:	bd10      	pop	{r4, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	20000348 	.word	0x20000348
 8002c48:	200002b8 	.word	0x200002b8
 8002c4c:	20000148 	.word	0x20000148

08002c50 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002c50:	2001      	movs	r0, #1
 8002c52:	4770      	bx	lr

08002c54 <_kill>:

int _kill(int pid, int sig)
{
 8002c54:	b510      	push	{r4, lr}
	errno = EINVAL;
 8002c56:	f002 fc5f 	bl	8005518 <__errno>
 8002c5a:	2316      	movs	r3, #22
 8002c5c:	6003      	str	r3, [r0, #0]
	return -1;
 8002c5e:	2001      	movs	r0, #1
}
 8002c60:	4240      	negs	r0, r0
 8002c62:	bd10      	pop	{r4, pc}

08002c64 <_exit>:

void _exit (int status)
{
 8002c64:	b510      	push	{r4, lr}
	errno = EINVAL;
 8002c66:	f002 fc57 	bl	8005518 <__errno>
 8002c6a:	2316      	movs	r3, #22
 8002c6c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002c6e:	e7fe      	b.n	8002c6e <_exit+0xa>

08002c70 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c70:	490b      	ldr	r1, [pc, #44]	; (8002ca0 <_sbrk+0x30>)
 8002c72:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <_sbrk+0x34>)
{
 8002c74:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c76:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c78:	490b      	ldr	r1, [pc, #44]	; (8002ca8 <_sbrk+0x38>)
{
 8002c7a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002c7c:	6808      	ldr	r0, [r1, #0]
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d101      	bne.n	8002c86 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002c82:	480a      	ldr	r0, [pc, #40]	; (8002cac <_sbrk+0x3c>)
 8002c84:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c86:	6808      	ldr	r0, [r1, #0]
 8002c88:	18c3      	adds	r3, r0, r3
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d906      	bls.n	8002c9c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002c8e:	f002 fc43 	bl	8005518 <__errno>
 8002c92:	230c      	movs	r3, #12
 8002c94:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002c96:	2001      	movs	r0, #1
 8002c98:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002c9a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002c9c:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8002c9e:	e7fc      	b.n	8002c9a <_sbrk+0x2a>
 8002ca0:	00000400 	.word	0x00000400
 8002ca4:	20005000 	.word	0x20005000
 8002ca8:	20000c8c 	.word	0x20000c8c
 8002cac:	20000e00 	.word	0x20000e00

08002cb0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <SystemInit+0x44>)
 8002cb4:	0052      	lsls	r2, r2, #1
 8002cb6:	6819      	ldr	r1, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	490e      	ldr	r1, [pc, #56]	; (8002cf8 <SystemInit+0x48>)
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	490d      	ldr	r1, [pc, #52]	; (8002cfc <SystemInit+0x4c>)
 8002cc8:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002cca:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002ccc:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	438a      	bics	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	490a      	ldr	r1, [pc, #40]	; (8002d00 <SystemInit+0x50>)
 8002cd8:	400a      	ands	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	4909      	ldr	r1, [pc, #36]	; (8002d04 <SystemInit+0x54>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <SystemInit+0x58>)
 8002cec:	0512      	lsls	r2, r2, #20
 8002cee:	609a      	str	r2, [r3, #8]
#endif
}
 8002cf0:	4770      	bx	lr
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	88ff400c 	.word	0x88ff400c
 8002cfc:	fef6fff6 	.word	0xfef6fff6
 8002d00:	fffbffff 	.word	0xfffbffff
 8002d04:	ff02ffff 	.word	0xff02ffff
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002d0c:	480d      	ldr	r0, [pc, #52]	; (8002d44 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002d0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002d10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d12:	e003      	b.n	8002d1c <LoopCopyDataInit>

08002d14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002d16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d1a:	3104      	adds	r1, #4

08002d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d1c:	480b      	ldr	r0, [pc, #44]	; (8002d4c <LoopForever+0xa>)
  ldr  r3, =_edata
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002d20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d24:	d3f6      	bcc.n	8002d14 <CopyDataInit>
  ldr  r2, =_sbss
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002d28:	e002      	b.n	8002d30 <LoopFillZerobss>

08002d2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002d2a:	2300      	movs	r3, #0
  str  r3, [r2]
 8002d2c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d2e:	3204      	adds	r2, #4

08002d30 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <LoopForever+0x16>)
  cmp  r2, r3
 8002d32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d34:	d3f9      	bcc.n	8002d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d36:	f7ff ffbb 	bl	8002cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3a:	f002 fbf3 	bl	8005524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d3e:	f7ff f83b 	bl	8001db8 <main>

08002d42 <LoopForever>:

LoopForever:
    b LoopForever
 8002d42:	e7fe      	b.n	8002d42 <LoopForever>
   ldr   r0, =_estack
 8002d44:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002d48:	080056cc 	.word	0x080056cc
  ldr  r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d50:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8002d54:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 8002d58:	20000dfc 	.word	0x20000dfc

08002d5c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC1_COMP_IRQHandler>
	...

08002d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d64:	20fa      	movs	r0, #250	; 0xfa
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_InitTick+0x3c>)
 8002d68:	0080      	lsls	r0, r0, #2
 8002d6a:	7819      	ldrb	r1, [r3, #0]
 8002d6c:	f7fd f9cc 	bl	8000108 <__udivsi3>
 8002d70:	4c0b      	ldr	r4, [pc, #44]	; (8002da0 <HAL_InitTick+0x40>)
 8002d72:	0001      	movs	r1, r0
 8002d74:	6820      	ldr	r0, [r4, #0]
 8002d76:	f7fd f9c7 	bl	8000108 <__udivsi3>
 8002d7a:	f000 f883 	bl	8002e84 <HAL_SYSTICK_Config>
 8002d7e:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002d80:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d82:	2c00      	cmp	r4, #0
 8002d84:	d109      	bne.n	8002d9a <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d86:	2d03      	cmp	r5, #3
 8002d88:	d807      	bhi.n	8002d9a <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d8a:	3802      	subs	r0, #2
 8002d8c:	0022      	movs	r2, r4
 8002d8e:	0029      	movs	r1, r5
 8002d90:	f000 f842 	bl	8002e18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d94:	0020      	movs	r0, r4
 8002d96:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_InitTick+0x44>)
 8002d98:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002d9a:	bd70      	pop	{r4, r5, r6, pc}
 8002d9c:	20000098 	.word	0x20000098
 8002da0:	20000094 	.word	0x20000094
 8002da4:	2000009c 	.word	0x2000009c

08002da8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002da8:	2340      	movs	r3, #64	; 0x40
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_Init+0x24>)
{
 8002dac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002dae:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002db0:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002db2:	430b      	orrs	r3, r1
 8002db4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002db6:	f7ff ffd3 	bl	8002d60 <HAL_InitTick>
 8002dba:	1e04      	subs	r4, r0, #0
 8002dbc:	d103      	bne.n	8002dc6 <HAL_Init+0x1e>
    HAL_MspInit();
 8002dbe:	f7ff fdb7 	bl	8002930 <HAL_MspInit>
}
 8002dc2:	0020      	movs	r0, r4
 8002dc4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002dc6:	2401      	movs	r4, #1
 8002dc8:	e7fb      	b.n	8002dc2 <HAL_Init+0x1a>
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	40022000 	.word	0x40022000

08002dd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <HAL_IncTick+0x10>)
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <HAL_IncTick+0x14>)
 8002dd4:	6811      	ldr	r1, [r2, #0]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	185b      	adds	r3, r3, r1
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	4770      	bx	lr
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	20000c90 	.word	0x20000c90
 8002de4:	20000098 	.word	0x20000098

08002de8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002de8:	4b01      	ldr	r3, [pc, #4]	; (8002df0 <HAL_GetTick+0x8>)
 8002dea:	6818      	ldr	r0, [r3, #0]
}
 8002dec:	4770      	bx	lr
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	20000c90 	.word	0x20000c90

08002df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002df8:	f7ff fff6 	bl	8002de8 <HAL_GetTick>
 8002dfc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfe:	1c63      	adds	r3, r4, #1
 8002e00:	d002      	beq.n	8002e08 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e02:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <HAL_Delay+0x20>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e08:	f7ff ffee 	bl	8002de8 <HAL_GetTick>
 8002e0c:	1b40      	subs	r0, r0, r5
 8002e0e:	42a0      	cmp	r0, r4
 8002e10:	d3fa      	bcc.n	8002e08 <HAL_Delay+0x14>
  {
  }
}
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	20000098 	.word	0x20000098

08002e18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e18:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e1a:	25ff      	movs	r5, #255	; 0xff
 8002e1c:	2403      	movs	r4, #3
 8002e1e:	002a      	movs	r2, r5
 8002e20:	4004      	ands	r4, r0
 8002e22:	00e4      	lsls	r4, r4, #3
 8002e24:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e26:	0189      	lsls	r1, r1, #6
 8002e28:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e2a:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e2c:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e2e:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8002e30:	2800      	cmp	r0, #0
 8002e32:	db0a      	blt.n	8002e4a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e34:	24c0      	movs	r4, #192	; 0xc0
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_NVIC_SetPriority+0x4c>)
 8002e38:	0880      	lsrs	r0, r0, #2
 8002e3a:	0080      	lsls	r0, r0, #2
 8002e3c:	18c0      	adds	r0, r0, r3
 8002e3e:	00a4      	lsls	r4, r4, #2
 8002e40:	5903      	ldr	r3, [r0, r4]
 8002e42:	4013      	ands	r3, r2
 8002e44:	430b      	orrs	r3, r1
 8002e46:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002e48:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e4a:	200f      	movs	r0, #15
 8002e4c:	4003      	ands	r3, r0
 8002e4e:	3b08      	subs	r3, #8
 8002e50:	4805      	ldr	r0, [pc, #20]	; (8002e68 <HAL_NVIC_SetPriority+0x50>)
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	181b      	adds	r3, r3, r0
 8002e58:	69d8      	ldr	r0, [r3, #28]
 8002e5a:	4002      	ands	r2, r0
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	61da      	str	r2, [r3, #28]
 8002e60:	e7f2      	b.n	8002e48 <HAL_NVIC_SetPriority+0x30>
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	e000e100 	.word	0xe000e100
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	db05      	blt.n	8002e7c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e70:	231f      	movs	r3, #31
 8002e72:	4018      	ands	r0, r3
 8002e74:	3b1e      	subs	r3, #30
 8002e76:	4083      	lsls	r3, r0
 8002e78:	4a01      	ldr	r2, [pc, #4]	; (8002e80 <HAL_NVIC_EnableIRQ+0x14>)
 8002e7a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002e7c:	4770      	bx	lr
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e84:	2280      	movs	r2, #128	; 0x80
 8002e86:	1e43      	subs	r3, r0, #1
 8002e88:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d20d      	bcs.n	8002eac <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e90:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e92:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e94:	4807      	ldr	r0, [pc, #28]	; (8002eb4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e96:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e98:	6a03      	ldr	r3, [r0, #32]
 8002e9a:	0609      	lsls	r1, r1, #24
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea6:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea8:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eaa:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002eac:	4770      	bx	lr
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	e000e010 	.word	0xe000e010
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002ebc:	2001      	movs	r0, #1
  if(hdma == NULL)
 8002ebe:	2c00      	cmp	r4, #0
 8002ec0:	d035      	beq.n	8002f2e <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ec2:	6825      	ldr	r5, [r4, #0]
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_DMA_Init+0x78>)
 8002ec6:	2114      	movs	r1, #20
 8002ec8:	18e8      	adds	r0, r5, r3
 8002eca:	f7fd f91d 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ed0:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8002ed2:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ed8:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eda:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002edc:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ee0:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ee2:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8002ee4:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee6:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002ee8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eea:	433b      	orrs	r3, r7
 8002eec:	6967      	ldr	r7, [r4, #20]
 8002eee:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef0:	69a7      	ldr	r7, [r4, #24]
 8002ef2:	433b      	orrs	r3, r7
 8002ef4:	69e7      	ldr	r7, [r4, #28]
 8002ef6:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef8:	6a27      	ldr	r7, [r4, #32]
 8002efa:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8002efc:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002efe:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	01db      	lsls	r3, r3, #7
 8002f04:	4299      	cmp	r1, r3
 8002f06:	d00c      	beq.n	8002f22 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f08:	251c      	movs	r5, #28
 8002f0a:	4028      	ands	r0, r5
 8002f0c:	3d0d      	subs	r5, #13
 8002f0e:	4085      	lsls	r5, r0
 8002f10:	490a      	ldr	r1, [pc, #40]	; (8002f3c <HAL_DMA_Init+0x84>)
 8002f12:	680b      	ldr	r3, [r1, #0]
 8002f14:	43ab      	bics	r3, r5
 8002f16:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f18:	6863      	ldr	r3, [r4, #4]
 8002f1a:	680d      	ldr	r5, [r1, #0]
 8002f1c:	4083      	lsls	r3, r0
 8002f1e:	432b      	orrs	r3, r5
 8002f20:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f22:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f24:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f26:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f28:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8002f2a:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002f2c:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8002f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f30:	bffdfff8 	.word	0xbffdfff8
 8002f34:	40020000 	.word	0x40020000
 8002f38:	ffff800f 	.word	0xffff800f
 8002f3c:	400200a8 	.word	0x400200a8

08002f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f42:	1d45      	adds	r5, r0, #5
{
 8002f44:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8002f46:	7feb      	ldrb	r3, [r5, #31]
{
 8002f48:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002f4a:	2002      	movs	r0, #2
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d029      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x64>
 8002f50:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f52:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8002f54:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f56:	7ffb      	ldrb	r3, [r7, #31]
 8002f58:	2600      	movs	r6, #0
 8002f5a:	469c      	mov	ip, r3
 8002f5c:	4660      	mov	r0, ip
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2801      	cmp	r0, #1
 8002f62:	d12a      	bne.n	8002fba <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f64:	3001      	adds	r0, #1
 8002f66:	77f8      	strb	r0, [r7, #31]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f68:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE(hdma);
 8002f6a:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f6c:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002f6e:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f70:	6c26      	ldr	r6, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8002f72:	439d      	bics	r5, r3
 8002f74:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f76:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002f78:	403d      	ands	r5, r7
 8002f7a:	40ab      	lsls	r3, r5
 8002f7c:	6073      	str	r3, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f7e:	9b01      	ldr	r3, [sp, #4]
 8002f80:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f82:	68a3      	ldr	r3, [r4, #8]
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d10e      	bne.n	8002fa6 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f88:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f8a:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002f8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f92:	230e      	movs	r3, #14
 8002f94:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f96:	4313      	orrs	r3, r2
 8002f98:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	6802      	ldr	r2, [r0, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2000      	movs	r0, #0
}
 8002fa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002fa6:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002fa8:	60c2      	str	r2, [r0, #12]
 8002faa:	e7ef      	b.n	8002f8c <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fac:	2204      	movs	r2, #4
 8002fae:	6803      	ldr	r3, [r0, #0]
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fb4:	6802      	ldr	r2, [r0, #0]
 8002fb6:	230a      	movs	r3, #10
 8002fb8:	e7ed      	b.n	8002f96 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8002fba:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8002fbc:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8002fbe:	e7f1      	b.n	8002fa4 <HAL_DMA_Start_IT+0x64>

08002fc0 <HAL_DMA_IRQHandler>:
{
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002fc2:	261c      	movs	r6, #28
 8002fc4:	2704      	movs	r7, #4
 8002fc6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fc8:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002fca:	4032      	ands	r2, r6
 8002fcc:	003e      	movs	r6, r7
 8002fce:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fd0:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002fd2:	6803      	ldr	r3, [r0, #0]
 8002fd4:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002fd6:	4235      	tst	r5, r6
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x36>
 8002fda:	423c      	tst	r4, r7
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	0692      	lsls	r2, r2, #26
 8002fe2:	d402      	bmi.n	8002fea <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	43ba      	bics	r2, r7
 8002fe8:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8002fea:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002fec:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d019      	beq.n	8003026 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002ff2:	4798      	blx	r3
  return;
 8002ff4:	e017      	b.n	8003026 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002ff6:	2702      	movs	r7, #2
 8002ff8:	003e      	movs	r6, r7
 8002ffa:	4096      	lsls	r6, r2
 8002ffc:	4235      	tst	r5, r6
 8002ffe:	d013      	beq.n	8003028 <HAL_DMA_IRQHandler+0x68>
 8003000:	423c      	tst	r4, r7
 8003002:	d011      	beq.n	8003028 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	0692      	lsls	r2, r2, #26
 8003008:	d406      	bmi.n	8003018 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800300a:	240a      	movs	r4, #10
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	43a2      	bics	r2, r4
 8003010:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003012:	2201      	movs	r2, #1
 8003014:	1d83      	adds	r3, r0, #6
 8003016:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003018:	2200      	movs	r2, #0
 800301a:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800301c:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 800301e:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003020:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003022:	4293      	cmp	r3, r2
 8003024:	d1e5      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0x32>
}
 8003026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003028:	2608      	movs	r6, #8
 800302a:	0037      	movs	r7, r6
 800302c:	4097      	lsls	r7, r2
 800302e:	423d      	tst	r5, r7
 8003030:	d0f9      	beq.n	8003026 <HAL_DMA_IRQHandler+0x66>
 8003032:	4234      	tst	r4, r6
 8003034:	d0f7      	beq.n	8003026 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003036:	250e      	movs	r5, #14
 8003038:	681c      	ldr	r4, [r3, #0]
 800303a:	43ac      	bics	r4, r5
 800303c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800303e:	2301      	movs	r3, #1
 8003040:	001c      	movs	r4, r3
 8003042:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003044:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003046:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003048:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800304a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800304c:	2200      	movs	r2, #0
 800304e:	1d43      	adds	r3, r0, #5
 8003050:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003052:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003054:	e7e5      	b.n	8003022 <HAL_DMA_IRQHandler+0x62>
	...

08003058 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003058:	4a5c      	ldr	r2, [pc, #368]	; (80031cc <HAL_GPIO_Init+0x174>)
{
 800305a:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800305c:	1882      	adds	r2, r0, r2
 800305e:	1e54      	subs	r4, r2, #1
 8003060:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003062:	2300      	movs	r3, #0
{
 8003064:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003066:	3205      	adds	r2, #5
 8003068:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800306a:	680a      	ldr	r2, [r1, #0]
 800306c:	0014      	movs	r4, r2
 800306e:	40dc      	lsrs	r4, r3
 8003070:	d101      	bne.n	8003076 <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003072:	b007      	add	sp, #28
 8003074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003076:	2401      	movs	r4, #1
 8003078:	0025      	movs	r5, r4
 800307a:	46a4      	mov	ip, r4
 800307c:	409d      	lsls	r5, r3
 800307e:	0014      	movs	r4, r2
 8003080:	402c      	ands	r4, r5
 8003082:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8003084:	422a      	tst	r2, r5
 8003086:	d100      	bne.n	800308a <HAL_GPIO_Init+0x32>
 8003088:	e09e      	b.n	80031c8 <HAL_GPIO_Init+0x170>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800308a:	2403      	movs	r4, #3
 800308c:	684a      	ldr	r2, [r1, #4]
 800308e:	005f      	lsls	r7, r3, #1
 8003090:	9201      	str	r2, [sp, #4]
 8003092:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003094:	40bc      	lsls	r4, r7
 8003096:	43e4      	mvns	r4, r4
 8003098:	9403      	str	r4, [sp, #12]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800309a:	1e54      	subs	r4, r2, #1
 800309c:	4564      	cmp	r4, ip
 800309e:	d82f      	bhi.n	8003100 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR;
 80030a0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80030a2:	9c03      	ldr	r4, [sp, #12]
 80030a4:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a6:	68cc      	ldr	r4, [r1, #12]
 80030a8:	40bc      	lsls	r4, r7
 80030aa:	4334      	orrs	r4, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ac:	4666      	mov	r6, ip
        GPIOx->OSPEEDR = temp;
 80030ae:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80030b0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b2:	43ac      	bics	r4, r5
 80030b4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b6:	9c01      	ldr	r4, [sp, #4]
 80030b8:	0924      	lsrs	r4, r4, #4
 80030ba:	4034      	ands	r4, r6
 80030bc:	409c      	lsls	r4, r3
 80030be:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80030c0:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80030c2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030c4:	9c03      	ldr	r4, [sp, #12]
 80030c6:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c8:	688c      	ldr	r4, [r1, #8]
 80030ca:	40bc      	lsls	r4, r7
 80030cc:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80030ce:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d0:	2a02      	cmp	r2, #2
 80030d2:	d117      	bne.n	8003104 <HAL_GPIO_Init+0xac>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80030d4:	2507      	movs	r5, #7
 80030d6:	260f      	movs	r6, #15
 80030d8:	401d      	ands	r5, r3
 80030da:	00ad      	lsls	r5, r5, #2
 80030dc:	40ae      	lsls	r6, r5
 80030de:	46b4      	mov	ip, r6
        temp = GPIOx->AFR[position >> 3U];
 80030e0:	08dc      	lsrs	r4, r3, #3
 80030e2:	00a4      	lsls	r4, r4, #2
 80030e4:	1904      	adds	r4, r0, r4
 80030e6:	9404      	str	r4, [sp, #16]
 80030e8:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80030ea:	0026      	movs	r6, r4
 80030ec:	4664      	mov	r4, ip
 80030ee:	43a6      	bics	r6, r4
 80030f0:	46b4      	mov	ip, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80030f2:	690e      	ldr	r6, [r1, #16]
 80030f4:	4664      	mov	r4, ip
 80030f6:	40ae      	lsls	r6, r5
 80030f8:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 80030fa:	9c04      	ldr	r4, [sp, #16]
 80030fc:	6226      	str	r6, [r4, #32]
 80030fe:	e001      	b.n	8003104 <HAL_GPIO_Init+0xac>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003100:	2a03      	cmp	r2, #3
 8003102:	d1de      	bne.n	80030c2 <HAL_GPIO_Init+0x6a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003104:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8003106:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003108:	9d03      	ldr	r5, [sp, #12]
 800310a:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800310c:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 800310e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003110:	22c0      	movs	r2, #192	; 0xc0
 8003112:	9c01      	ldr	r4, [sp, #4]
 8003114:	0292      	lsls	r2, r2, #10
 8003116:	4214      	tst	r4, r2
 8003118:	d056      	beq.n	80031c8 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	2701      	movs	r7, #1
 800311c:	4c2c      	ldr	r4, [pc, #176]	; (80031d0 <HAL_GPIO_Init+0x178>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800311e:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003120:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003122:	433a      	orrs	r2, r7
 8003124:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8003126:	4a2b      	ldr	r2, [pc, #172]	; (80031d4 <HAL_GPIO_Init+0x17c>)
 8003128:	089c      	lsrs	r4, r3, #2
 800312a:	00a4      	lsls	r4, r4, #2
 800312c:	18a4      	adds	r4, r4, r2
 800312e:	68a2      	ldr	r2, [r4, #8]
 8003130:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003132:	2203      	movs	r2, #3
 8003134:	4015      	ands	r5, r2
 8003136:	00ad      	lsls	r5, r5, #2
 8003138:	320c      	adds	r2, #12
 800313a:	40aa      	lsls	r2, r5
 800313c:	4666      	mov	r6, ip
 800313e:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003140:	22a0      	movs	r2, #160	; 0xa0
 8003142:	05d2      	lsls	r2, r2, #23
 8003144:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003146:	9603      	str	r6, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003148:	2200      	movs	r2, #0
 800314a:	4560      	cmp	r0, ip
 800314c:	d011      	beq.n	8003172 <HAL_GPIO_Init+0x11a>
 800314e:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <HAL_GPIO_Init+0x180>)
 8003150:	4694      	mov	ip, r2
 8003152:	003a      	movs	r2, r7
 8003154:	4560      	cmp	r0, ip
 8003156:	d00c      	beq.n	8003172 <HAL_GPIO_Init+0x11a>
 8003158:	4f20      	ldr	r7, [pc, #128]	; (80031dc <HAL_GPIO_Init+0x184>)
 800315a:	1892      	adds	r2, r2, r2
 800315c:	42b8      	cmp	r0, r7
 800315e:	d008      	beq.n	8003172 <HAL_GPIO_Init+0x11a>
 8003160:	4f1f      	ldr	r7, [pc, #124]	; (80031e0 <HAL_GPIO_Init+0x188>)
 8003162:	3201      	adds	r2, #1
 8003164:	42b8      	cmp	r0, r7
 8003166:	d004      	beq.n	8003172 <HAL_GPIO_Init+0x11a>
 8003168:	4e1e      	ldr	r6, [pc, #120]	; (80031e4 <HAL_GPIO_Init+0x18c>)
 800316a:	3201      	adds	r2, #1
 800316c:	42b0      	cmp	r0, r6
 800316e:	d000      	beq.n	8003172 <HAL_GPIO_Init+0x11a>
 8003170:	9a05      	ldr	r2, [sp, #20]
 8003172:	40aa      	lsls	r2, r5
 8003174:	9d03      	ldr	r5, [sp, #12]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003176:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003178:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800317a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800317c:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <HAL_GPIO_Init+0x190>)
        temp &= ~((uint32_t)iocurrent);
 800317e:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8003180:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8003182:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 8003184:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003186:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003188:	03ff      	lsls	r7, r7, #15
 800318a:	d401      	bmi.n	8003190 <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 800318c:	0035      	movs	r5, r6
 800318e:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8003190:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003192:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003194:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003196:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8003198:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319a:	03bf      	lsls	r7, r7, #14
 800319c:	d401      	bmi.n	80031a2 <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 800319e:	0035      	movs	r5, r6
 80031a0:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80031a2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80031a4:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80031a6:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a8:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80031aa:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ac:	02ff      	lsls	r7, r7, #11
 80031ae:	d401      	bmi.n	80031b4 <HAL_GPIO_Init+0x15c>
        temp &= ~((uint32_t)iocurrent);
 80031b0:	0035      	movs	r5, r6
 80031b2:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80031b4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80031b6:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80031b8:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ba:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80031bc:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031be:	02bf      	lsls	r7, r7, #10
 80031c0:	d401      	bmi.n	80031c6 <HAL_GPIO_Init+0x16e>
        temp &= ~((uint32_t)iocurrent);
 80031c2:	4025      	ands	r5, r4
 80031c4:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80031c6:	60d6      	str	r6, [r2, #12]
    position++;
 80031c8:	3301      	adds	r3, #1
 80031ca:	e74e      	b.n	800306a <HAL_GPIO_Init+0x12>
 80031cc:	afffe400 	.word	0xafffe400
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40010000 	.word	0x40010000
 80031d8:	50000400 	.word	0x50000400
 80031dc:	50000800 	.word	0x50000800
 80031e0:	50000c00 	.word	0x50000c00
 80031e4:	50001000 	.word	0x50001000
 80031e8:	40010400 	.word	0x40010400

080031ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031ec:	6900      	ldr	r0, [r0, #16]
 80031ee:	4008      	ands	r0, r1
 80031f0:	1e43      	subs	r3, r0, #1
 80031f2:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80031f4:	b2c0      	uxtb	r0, r0
}
 80031f6:	4770      	bx	lr

080031f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f8:	2a00      	cmp	r2, #0
 80031fa:	d001      	beq.n	8003200 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031fc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80031fe:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003200:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003202:	e7fc      	b.n	80031fe <HAL_GPIO_WritePin+0x6>

08003204 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	0004      	movs	r4, r0
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
  {
    return HAL_ERROR;
 8003208:	2001      	movs	r0, #1
  if (hi2s == NULL)
 800320a:	2c00      	cmp	r4, #0
 800320c:	d045      	beq.n	800329a <HAL_I2S_Init+0x96>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800320e:	0026      	movs	r6, r4
 8003210:	3635      	adds	r6, #53	; 0x35
 8003212:	7833      	ldrb	r3, [r6, #0]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_I2S_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800321a:	0023      	movs	r3, r4
 800321c:	3334      	adds	r3, #52	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800321e:	0020      	movs	r0, r4
    hi2s->Lock = HAL_UNLOCKED;
 8003220:	701a      	strb	r2, [r3, #0]
    HAL_I2S_MspInit(hi2s);
 8003222:	f7ff fb93 	bl	800294c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003226:	2102      	movs	r1, #2
 8003228:	7031      	strb	r1, [r6, #0]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	4830      	ldr	r0, [pc, #192]	; (80032f0 <HAL_I2S_Init+0xec>)
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	4002      	ands	r2, r0
 8003232:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003234:	6219      	str	r1, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003236:	6963      	ldr	r3, [r4, #20]
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003238:	68e2      	ldr	r2, [r4, #12]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800323a:	428b      	cmp	r3, r1
 800323c:	d035      	beq.n	80032aa <HAL_I2S_Init+0xa6>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800323e:	2510      	movs	r5, #16
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003240:	2a00      	cmp	r2, #0
 8003242:	d000      	beq.n	8003246 <HAL_I2S_Init+0x42>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003244:	196d      	adds	r5, r5, r5
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003246:	68a3      	ldr	r3, [r4, #8]
 8003248:	2b20      	cmp	r3, #32
 800324a:	d800      	bhi.n	800324e <HAL_I2S_Init+0x4a>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800324c:	006d      	lsls	r5, r5, #1
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800324e:	f000 f851 	bl	80032f4 <HAL_RCC_GetSysClockFreq>

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	6922      	ldr	r2, [r4, #16]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	429a      	cmp	r2, r3
 800325a:	d11f      	bne.n	800329c <HAL_I2S_Init+0x98>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800325c:	68e3      	ldr	r3, [r4, #12]
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800325e:	6967      	ldr	r7, [r4, #20]
 8003260:	00a9      	lsls	r1, r5, #2
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003262:	2b00      	cmp	r3, #0
 8003264:	d100      	bne.n	8003268 <HAL_I2S_Init+0x64>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003266:	00e9      	lsls	r1, r5, #3
 8003268:	f7fc ff4e 	bl	8000108 <__udivsi3>
 800326c:	230a      	movs	r3, #10
 800326e:	0039      	movs	r1, r7
 8003270:	4358      	muls	r0, r3
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003272:	f7fc ff49 	bl	8000108 <__udivsi3>
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003276:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003278:	3005      	adds	r0, #5
    tmp = tmp / 10U;
 800327a:	f7fc ff45 	bl	8000108 <__udivsi3>
 800327e:	0003      	movs	r3, r0

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003280:	2001      	movs	r0, #1
 8003282:	0019      	movs	r1, r3

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003284:	4383      	bics	r3, r0
 8003286:	40c3      	lsrs	r3, r0
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003288:	4001      	ands	r1, r0
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800328a:	1e9a      	subs	r2, r3, #2
    i2sodd = (uint32_t)(i2sodd << 8U);
 800328c:	0209      	lsls	r1, r1, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800328e:	2afd      	cmp	r2, #253	; 0xfd
 8003290:	d90c      	bls.n	80032ac <HAL_I2S_Init+0xa8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003292:	2310      	movs	r3, #16
 8003294:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003296:	4313      	orrs	r3, r2
 8003298:	63a3      	str	r3, [r4, #56]	; 0x38

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 800329a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800329c:	0029      	movs	r1, r5
 800329e:	f7fc ff33 	bl	8000108 <__udivsi3>
 80032a2:	230a      	movs	r3, #10
 80032a4:	6961      	ldr	r1, [r4, #20]
 80032a6:	4358      	muls	r0, r3
 80032a8:	e7e3      	b.n	8003272 <HAL_I2S_Init+0x6e>
    i2sodd = 0U;
 80032aa:	2100      	movs	r1, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6921      	ldr	r1, [r4, #16]
 80032b0:	6822      	ldr	r2, [r4, #0]
 80032b2:	430b      	orrs	r3, r1
 80032b4:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032b6:	68a1      	ldr	r1, [r4, #8]
 80032b8:	69d0      	ldr	r0, [r2, #28]
 80032ba:	6863      	ldr	r3, [r4, #4]
 80032bc:	4d0c      	ldr	r5, [pc, #48]	; (80032f0 <HAL_I2S_Init+0xec>)
 80032be:	430b      	orrs	r3, r1
 80032c0:	4028      	ands	r0, r5
 80032c2:	4303      	orrs	r3, r0
 80032c4:	68e0      	ldr	r0, [r4, #12]
 80032c6:	4303      	orrs	r3, r0
 80032c8:	69a0      	ldr	r0, [r4, #24]
 80032ca:	4303      	orrs	r3, r0
 80032cc:	2080      	movs	r0, #128	; 0x80
 80032ce:	0100      	lsls	r0, r0, #4
 80032d0:	4303      	orrs	r3, r0
 80032d2:	61d3      	str	r3, [r2, #28]
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	4399      	bics	r1, r3
 80032d8:	2930      	cmp	r1, #48	; 0x30
 80032da:	d104      	bne.n	80032e6 <HAL_I2S_Init+0xe2>
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80032dc:	2380      	movs	r3, #128	; 0x80
 80032de:	69d1      	ldr	r1, [r2, #28]
 80032e0:	015b      	lsls	r3, r3, #5
 80032e2:	430b      	orrs	r3, r1
 80032e4:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032e6:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80032e8:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032ea:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80032ec:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 80032ee:	e7d4      	b.n	800329a <HAL_I2S_Init+0x96>
 80032f0:	fffff040 	.word	0xfffff040

080032f4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCC_GetSysClockFreq+0x78>)
{
 80032f8:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80032fa:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80032fc:	4022      	ands	r2, r4
 80032fe:	2a08      	cmp	r2, #8
 8003300:	d031      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x72>
 8003302:	2a0c      	cmp	r2, #12
 8003304:	d009      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x26>
 8003306:	2a04      	cmp	r2, #4
 8003308:	d125      	bne.n	8003356 <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800330a:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 800330c:	4b18      	ldr	r3, [pc, #96]	; (8003370 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800330e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8003310:	17c0      	asrs	r0, r0, #31
 8003312:	4018      	ands	r0, r3
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <HAL_RCC_GetSysClockFreq+0x80>)
 8003316:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8003318:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800331a:	02a2      	lsls	r2, r4, #10
 800331c:	4816      	ldr	r0, [pc, #88]	; (8003378 <HAL_RCC_GetSysClockFreq+0x84>)
 800331e:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003320:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003322:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003324:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003326:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003328:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332a:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800332c:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332e:	4211      	tst	r1, r2
 8003330:	d009      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <HAL_RCC_GetSysClockFreq+0x88>)
 8003334:	2300      	movs	r3, #0
 8003336:	2100      	movs	r1, #0
 8003338:	f7fc ff92 	bl	8000260 <__aeabi_lmul>
 800333c:	0022      	movs	r2, r4
 800333e:	2300      	movs	r3, #0
 8003340:	f7fc ff6e 	bl	8000220 <__aeabi_uldivmod>
 8003344:	e7e8      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2310      	movs	r3, #16
 800334a:	421a      	tst	r2, r3
 800334c:	d001      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003350:	e7f0      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_RCC_GetSysClockFreq+0x80>)
 8003354:	e7ee      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003356:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003358:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800335a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003360:	3301      	adds	r3, #1
 8003362:	4098      	lsls	r0, r3
      break;
 8003364:	e7d8      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8003366:	4805      	ldr	r0, [pc, #20]	; (800337c <HAL_RCC_GetSysClockFreq+0x88>)
 8003368:	e7d6      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x24>
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	40021000 	.word	0x40021000
 8003370:	ff48e500 	.word	0xff48e500
 8003374:	00f42400 	.word	0x00f42400
 8003378:	080056a9 	.word	0x080056a9
 800337c:	007a1200 	.word	0x007a1200
 8003380:	003d0900 	.word	0x003d0900

08003384 <HAL_RCC_OscConfig>:
{
 8003384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003386:	0005      	movs	r5, r0
 8003388:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800338a:	2800      	cmp	r0, #0
 800338c:	d059      	beq.n	8003442 <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338e:	230c      	movs	r3, #12
 8003390:	4cb8      	ldr	r4, [pc, #736]	; (8003674 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003392:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003394:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003396:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003398:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	025b      	lsls	r3, r3, #9
 800339e:	0019      	movs	r1, r3
 80033a0:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a2:	07d2      	lsls	r2, r2, #31
 80033a4:	d441      	bmi.n	800342a <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	682b      	ldr	r3, [r5, #0]
 80033a8:	079b      	lsls	r3, r3, #30
 80033aa:	d500      	bpl.n	80033ae <HAL_RCC_OscConfig+0x2a>
 80033ac:	e08a      	b.n	80034c4 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033ae:	682b      	ldr	r3, [r5, #0]
 80033b0:	06db      	lsls	r3, r3, #27
 80033b2:	d528      	bpl.n	8003406 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033b4:	2e00      	cmp	r6, #0
 80033b6:	d000      	beq.n	80033ba <HAL_RCC_OscConfig+0x36>
 80033b8:	e0e3      	b.n	8003582 <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	059b      	lsls	r3, r3, #22
 80033be:	d502      	bpl.n	80033c6 <HAL_RCC_OscConfig+0x42>
 80033c0:	69eb      	ldr	r3, [r5, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d03d      	beq.n	8003442 <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033c6:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c8:	6862      	ldr	r2, [r4, #4]
 80033ca:	49ab      	ldr	r1, [pc, #684]	; (8003678 <HAL_RCC_OscConfig+0x2f4>)
 80033cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80033ce:	400a      	ands	r2, r1
 80033d0:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033d2:	0b5b      	lsrs	r3, r3, #13
 80033d4:	3301      	adds	r3, #1
 80033d6:	023f      	lsls	r7, r7, #8
 80033d8:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033da:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033dc:	6861      	ldr	r1, [r4, #4]
 80033de:	6a2a      	ldr	r2, [r5, #32]
 80033e0:	0209      	lsls	r1, r1, #8
 80033e2:	0a09      	lsrs	r1, r1, #8
 80033e4:	0612      	lsls	r2, r2, #24
 80033e6:	430a      	orrs	r2, r1
 80033e8:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80033ea:	68e1      	ldr	r1, [r4, #12]
 80033ec:	48a3      	ldr	r0, [pc, #652]	; (800367c <HAL_RCC_OscConfig+0x2f8>)
 80033ee:	060b      	lsls	r3, r1, #24
 80033f0:	0f1b      	lsrs	r3, r3, #28
 80033f2:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033f4:	4aa2      	ldr	r2, [pc, #648]	; (8003680 <HAL_RCC_OscConfig+0x2fc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80033f6:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 80033f8:	4ba2      	ldr	r3, [pc, #648]	; (8003684 <HAL_RCC_OscConfig+0x300>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80033fa:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	f7ff fcaf 	bl	8002d60 <HAL_InitTick>
        if(status != HAL_OK)
 8003402:	2800      	cmp	r0, #0
 8003404:	d134      	bne.n	8003470 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003406:	682b      	ldr	r3, [r5, #0]
 8003408:	071b      	lsls	r3, r3, #28
 800340a:	d500      	bpl.n	800340e <HAL_RCC_OscConfig+0x8a>
 800340c:	e0f0      	b.n	80035f0 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340e:	682b      	ldr	r3, [r5, #0]
 8003410:	075b      	lsls	r3, r3, #29
 8003412:	d500      	bpl.n	8003416 <HAL_RCC_OscConfig+0x92>
 8003414:	e112      	b.n	800363c <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003416:	682b      	ldr	r3, [r5, #0]
 8003418:	069b      	lsls	r3, r3, #26
 800341a:	d500      	bpl.n	800341e <HAL_RCC_OscConfig+0x9a>
 800341c:	e197      	b.n	800374e <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003420:	2b00      	cmp	r3, #0
 8003422:	d000      	beq.n	8003426 <HAL_RCC_OscConfig+0xa2>
 8003424:	e1c6      	b.n	80037b4 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 8003426:	2000      	movs	r0, #0
 8003428:	e022      	b.n	8003470 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800342a:	2e08      	cmp	r6, #8
 800342c:	d003      	beq.n	8003436 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800342e:	2e0c      	cmp	r6, #12
 8003430:	d109      	bne.n	8003446 <HAL_RCC_OscConfig+0xc2>
 8003432:	2f00      	cmp	r7, #0
 8003434:	d007      	beq.n	8003446 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	039b      	lsls	r3, r3, #14
 800343a:	d5b4      	bpl.n	80033a6 <HAL_RCC_OscConfig+0x22>
 800343c:	686b      	ldr	r3, [r5, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1b1      	bne.n	80033a6 <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 8003442:	2001      	movs	r0, #1
 8003444:	e014      	b.n	8003470 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003446:	686a      	ldr	r2, [r5, #4]
 8003448:	428a      	cmp	r2, r1
 800344a:	d113      	bne.n	8003474 <HAL_RCC_OscConfig+0xf0>
 800344c:	6822      	ldr	r2, [r4, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003452:	f7ff fcc9 	bl	8002de8 <HAL_GetTick>
 8003456:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003458:	2280      	movs	r2, #128	; 0x80
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	0292      	lsls	r2, r2, #10
 800345e:	4213      	tst	r3, r2
 8003460:	d1a1      	bne.n	80033a6 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003462:	f7ff fcc1 	bl	8002de8 <HAL_GetTick>
 8003466:	9b00      	ldr	r3, [sp, #0]
 8003468:	1ac0      	subs	r0, r0, r3
 800346a:	2864      	cmp	r0, #100	; 0x64
 800346c:	d9f4      	bls.n	8003458 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 800346e:	2003      	movs	r0, #3
}
 8003470:	b005      	add	sp, #20
 8003472:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003474:	21a0      	movs	r1, #160	; 0xa0
 8003476:	02c9      	lsls	r1, r1, #11
 8003478:	428a      	cmp	r2, r1
 800347a:	d105      	bne.n	8003488 <HAL_RCC_OscConfig+0x104>
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	6821      	ldr	r1, [r4, #0]
 8003480:	02d2      	lsls	r2, r2, #11
 8003482:	430a      	orrs	r2, r1
 8003484:	6022      	str	r2, [r4, #0]
 8003486:	e7e1      	b.n	800344c <HAL_RCC_OscConfig+0xc8>
 8003488:	6821      	ldr	r1, [r4, #0]
 800348a:	487f      	ldr	r0, [pc, #508]	; (8003688 <HAL_RCC_OscConfig+0x304>)
 800348c:	4001      	ands	r1, r0
 800348e:	6021      	str	r1, [r4, #0]
 8003490:	6821      	ldr	r1, [r4, #0]
 8003492:	400b      	ands	r3, r1
 8003494:	9303      	str	r3, [sp, #12]
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	497c      	ldr	r1, [pc, #496]	; (800368c <HAL_RCC_OscConfig+0x308>)
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	400b      	ands	r3, r1
 800349e:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a0:	2a00      	cmp	r2, #0
 80034a2:	d1d6      	bne.n	8003452 <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 80034a4:	f7ff fca0 	bl	8002de8 <HAL_GetTick>
 80034a8:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034aa:	2280      	movs	r2, #128	; 0x80
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	0292      	lsls	r2, r2, #10
 80034b0:	4213      	tst	r3, r2
 80034b2:	d100      	bne.n	80034b6 <HAL_RCC_OscConfig+0x132>
 80034b4:	e777      	b.n	80033a6 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b6:	f7ff fc97 	bl	8002de8 <HAL_GetTick>
 80034ba:	9b00      	ldr	r3, [sp, #0]
 80034bc:	1ac0      	subs	r0, r0, r3
 80034be:	2864      	cmp	r0, #100	; 0x64
 80034c0:	d9f3      	bls.n	80034aa <HAL_RCC_OscConfig+0x126>
 80034c2:	e7d4      	b.n	800346e <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80034c4:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80034c6:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80034c8:	4213      	tst	r3, r2
 80034ca:	d003      	beq.n	80034d4 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80034cc:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80034ce:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80034d0:	4311      	orrs	r1, r2
 80034d2:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034d4:	2e04      	cmp	r6, #4
 80034d6:	d003      	beq.n	80034e0 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034d8:	2e0c      	cmp	r6, #12
 80034da:	d124      	bne.n	8003526 <HAL_RCC_OscConfig+0x1a2>
 80034dc:	2f00      	cmp	r7, #0
 80034de:	d122      	bne.n	8003526 <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80034e0:	6822      	ldr	r2, [r4, #0]
 80034e2:	0752      	lsls	r2, r2, #29
 80034e4:	d501      	bpl.n	80034ea <HAL_RCC_OscConfig+0x166>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0ab      	beq.n	8003442 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ea:	6861      	ldr	r1, [r4, #4]
 80034ec:	692a      	ldr	r2, [r5, #16]
 80034ee:	4868      	ldr	r0, [pc, #416]	; (8003690 <HAL_RCC_OscConfig+0x30c>)
 80034f0:	0212      	lsls	r2, r2, #8
 80034f2:	4001      	ands	r1, r0
 80034f4:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034f6:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034fa:	6822      	ldr	r2, [r4, #0]
 80034fc:	438a      	bics	r2, r1
 80034fe:	4313      	orrs	r3, r2
 8003500:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003502:	f7ff fef7 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 8003506:	68e3      	ldr	r3, [r4, #12]
 8003508:	4a5c      	ldr	r2, [pc, #368]	; (800367c <HAL_RCC_OscConfig+0x2f8>)
 800350a:	061b      	lsls	r3, r3, #24
 800350c:	0f1b      	lsrs	r3, r3, #28
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	495b      	ldr	r1, [pc, #364]	; (8003680 <HAL_RCC_OscConfig+0x2fc>)
 8003512:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8003514:	4b5b      	ldr	r3, [pc, #364]	; (8003684 <HAL_RCC_OscConfig+0x300>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003516:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	f7ff fc21 	bl	8002d60 <HAL_InitTick>
      if(status != HAL_OK)
 800351e:	2800      	cmp	r0, #0
 8003520:	d100      	bne.n	8003524 <HAL_RCC_OscConfig+0x1a0>
 8003522:	e744      	b.n	80033ae <HAL_RCC_OscConfig+0x2a>
 8003524:	e7a4      	b.n	8003470 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 8003526:	2b00      	cmp	r3, #0
 8003528:	d019      	beq.n	800355e <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800352a:	2109      	movs	r1, #9
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	438a      	bics	r2, r1
 8003530:	4313      	orrs	r3, r2
 8003532:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003534:	f7ff fc58 	bl	8002de8 <HAL_GetTick>
 8003538:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800353a:	2204      	movs	r2, #4
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	4213      	tst	r3, r2
 8003540:	d007      	beq.n	8003552 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003542:	6862      	ldr	r2, [r4, #4]
 8003544:	692b      	ldr	r3, [r5, #16]
 8003546:	4952      	ldr	r1, [pc, #328]	; (8003690 <HAL_RCC_OscConfig+0x30c>)
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	400a      	ands	r2, r1
 800354c:	4313      	orrs	r3, r2
 800354e:	6063      	str	r3, [r4, #4]
 8003550:	e72d      	b.n	80033ae <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003552:	f7ff fc49 	bl	8002de8 <HAL_GetTick>
 8003556:	1bc0      	subs	r0, r0, r7
 8003558:	2802      	cmp	r0, #2
 800355a:	d9ee      	bls.n	800353a <HAL_RCC_OscConfig+0x1b6>
 800355c:	e787      	b.n	800346e <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 800355e:	2201      	movs	r2, #1
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	4393      	bics	r3, r2
 8003564:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003566:	f7ff fc3f 	bl	8002de8 <HAL_GetTick>
 800356a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800356c:	2204      	movs	r2, #4
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	4213      	tst	r3, r2
 8003572:	d100      	bne.n	8003576 <HAL_RCC_OscConfig+0x1f2>
 8003574:	e71b      	b.n	80033ae <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003576:	f7ff fc37 	bl	8002de8 <HAL_GetTick>
 800357a:	1bc0      	subs	r0, r0, r7
 800357c:	2802      	cmp	r0, #2
 800357e:	d9f5      	bls.n	800356c <HAL_RCC_OscConfig+0x1e8>
 8003580:	e775      	b.n	800346e <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003582:	69eb      	ldr	r3, [r5, #28]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	6822      	ldr	r2, [r4, #0]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4313      	orrs	r3, r2
 8003590:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003592:	f7ff fc29 	bl	8002de8 <HAL_GetTick>
 8003596:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003598:	2280      	movs	r2, #128	; 0x80
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	4213      	tst	r3, r2
 80035a0:	d00d      	beq.n	80035be <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035a2:	6863      	ldr	r3, [r4, #4]
 80035a4:	4a34      	ldr	r2, [pc, #208]	; (8003678 <HAL_RCC_OscConfig+0x2f4>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80035aa:	4313      	orrs	r3, r2
 80035ac:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ae:	6862      	ldr	r2, [r4, #4]
 80035b0:	6a2b      	ldr	r3, [r5, #32]
 80035b2:	0212      	lsls	r2, r2, #8
 80035b4:	061b      	lsls	r3, r3, #24
 80035b6:	0a12      	lsrs	r2, r2, #8
 80035b8:	4313      	orrs	r3, r2
 80035ba:	6063      	str	r3, [r4, #4]
 80035bc:	e723      	b.n	8003406 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035be:	f7ff fc13 	bl	8002de8 <HAL_GetTick>
 80035c2:	1bc0      	subs	r0, r0, r7
 80035c4:	2802      	cmp	r0, #2
 80035c6:	d9e7      	bls.n	8003598 <HAL_RCC_OscConfig+0x214>
 80035c8:	e751      	b.n	800346e <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	4a31      	ldr	r2, [pc, #196]	; (8003694 <HAL_RCC_OscConfig+0x310>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80035d2:	f7ff fc09 	bl	8002de8 <HAL_GetTick>
 80035d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	0092      	lsls	r2, r2, #2
 80035de:	4213      	tst	r3, r2
 80035e0:	d100      	bne.n	80035e4 <HAL_RCC_OscConfig+0x260>
 80035e2:	e710      	b.n	8003406 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035e4:	f7ff fc00 	bl	8002de8 <HAL_GetTick>
 80035e8:	1bc0      	subs	r0, r0, r7
 80035ea:	2802      	cmp	r0, #2
 80035ec:	d9f4      	bls.n	80035d8 <HAL_RCC_OscConfig+0x254>
 80035ee:	e73e      	b.n	800346e <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035f0:	696a      	ldr	r2, [r5, #20]
 80035f2:	2301      	movs	r3, #1
 80035f4:	2a00      	cmp	r2, #0
 80035f6:	d010      	beq.n	800361a <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 80035f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80035fa:	4313      	orrs	r3, r2
 80035fc:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80035fe:	f7ff fbf3 	bl	8002de8 <HAL_GetTick>
 8003602:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003604:	2202      	movs	r2, #2
 8003606:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003608:	4213      	tst	r3, r2
 800360a:	d000      	beq.n	800360e <HAL_RCC_OscConfig+0x28a>
 800360c:	e6ff      	b.n	800340e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360e:	f7ff fbeb 	bl	8002de8 <HAL_GetTick>
 8003612:	1bc0      	subs	r0, r0, r7
 8003614:	2802      	cmp	r0, #2
 8003616:	d9f5      	bls.n	8003604 <HAL_RCC_OscConfig+0x280>
 8003618:	e729      	b.n	800346e <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 800361a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800361c:	439a      	bics	r2, r3
 800361e:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003620:	f7ff fbe2 	bl	8002de8 <HAL_GetTick>
 8003624:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003626:	2202      	movs	r2, #2
 8003628:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800362a:	4213      	tst	r3, r2
 800362c:	d100      	bne.n	8003630 <HAL_RCC_OscConfig+0x2ac>
 800362e:	e6ee      	b.n	800340e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003630:	f7ff fbda 	bl	8002de8 <HAL_GetTick>
 8003634:	1bc0      	subs	r0, r0, r7
 8003636:	2802      	cmp	r0, #2
 8003638:	d9f5      	bls.n	8003626 <HAL_RCC_OscConfig+0x2a2>
 800363a:	e718      	b.n	800346e <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800363e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003640:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003642:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8003644:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003646:	421a      	tst	r2, r3
 8003648:	d104      	bne.n	8003654 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800364a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800364c:	4313      	orrs	r3, r2
 800364e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003650:	2301      	movs	r3, #1
 8003652:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	2280      	movs	r2, #128	; 0x80
 8003656:	4f10      	ldr	r7, [pc, #64]	; (8003698 <HAL_RCC_OscConfig+0x314>)
 8003658:	0052      	lsls	r2, r2, #1
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	4213      	tst	r3, r2
 800365e:	d01d      	beq.n	800369c <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	2280      	movs	r2, #128	; 0x80
 8003662:	68ab      	ldr	r3, [r5, #8]
 8003664:	0052      	lsls	r2, r2, #1
 8003666:	4293      	cmp	r3, r2
 8003668:	d12c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x340>
 800366a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800366c:	4313      	orrs	r3, r2
 800366e:	6523      	str	r3, [r4, #80]	; 0x50
 8003670:	e04d      	b.n	800370e <HAL_RCC_OscConfig+0x38a>
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	40021000 	.word	0x40021000
 8003678:	ffff1fff 	.word	0xffff1fff
 800367c:	08005699 	.word	0x08005699
 8003680:	20000094 	.word	0x20000094
 8003684:	2000009c 	.word	0x2000009c
 8003688:	fffeffff 	.word	0xfffeffff
 800368c:	fffbffff 	.word	0xfffbffff
 8003690:	ffffe0ff 	.word	0xffffe0ff
 8003694:	fffffeff 	.word	0xfffffeff
 8003698:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	0052      	lsls	r2, r2, #1
 80036a2:	4313      	orrs	r3, r2
 80036a4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80036a6:	f7ff fb9f 	bl	8002de8 <HAL_GetTick>
 80036aa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	0052      	lsls	r2, r2, #1
 80036b2:	4213      	tst	r3, r2
 80036b4:	d1d4      	bne.n	8003660 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b6:	f7ff fb97 	bl	8002de8 <HAL_GetTick>
 80036ba:	9b01      	ldr	r3, [sp, #4]
 80036bc:	1ac0      	subs	r0, r0, r3
 80036be:	2864      	cmp	r0, #100	; 0x64
 80036c0:	d9f4      	bls.n	80036ac <HAL_RCC_OscConfig+0x328>
 80036c2:	e6d4      	b.n	800346e <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d116      	bne.n	80036f6 <HAL_RCC_OscConfig+0x372>
 80036c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036ca:	4a6b      	ldr	r2, [pc, #428]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	6523      	str	r3, [r4, #80]	; 0x50
 80036d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036d2:	4a6a      	ldr	r2, [pc, #424]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80036d8:	f7ff fb86 	bl	8002de8 <HAL_GetTick>
 80036dc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80036e2:	0092      	lsls	r2, r2, #2
 80036e4:	4213      	tst	r3, r2
 80036e6:	d01a      	beq.n	800371e <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e8:	f7ff fb7e 	bl	8002de8 <HAL_GetTick>
 80036ec:	4b64      	ldr	r3, [pc, #400]	; (8003880 <HAL_RCC_OscConfig+0x4fc>)
 80036ee:	1bc0      	subs	r0, r0, r7
 80036f0:	4298      	cmp	r0, r3
 80036f2:	d9f4      	bls.n	80036de <HAL_RCC_OscConfig+0x35a>
 80036f4:	e6bb      	b.n	800346e <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f6:	21a0      	movs	r1, #160	; 0xa0
 80036f8:	00c9      	lsls	r1, r1, #3
 80036fa:	428b      	cmp	r3, r1
 80036fc:	d118      	bne.n	8003730 <HAL_RCC_OscConfig+0x3ac>
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	430b      	orrs	r3, r1
 8003706:	6523      	str	r3, [r4, #80]	; 0x50
 8003708:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800370a:	431a      	orrs	r2, r3
 800370c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800370e:	f7ff fb6b 	bl	8002de8 <HAL_GetTick>
 8003712:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003718:	0092      	lsls	r2, r2, #2
 800371a:	4213      	tst	r3, r2
 800371c:	d010      	beq.n	8003740 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 800371e:	9b00      	ldr	r3, [sp, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d000      	beq.n	8003726 <HAL_RCC_OscConfig+0x3a2>
 8003724:	e677      	b.n	8003416 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003728:	4a56      	ldr	r2, [pc, #344]	; (8003884 <HAL_RCC_OscConfig+0x500>)
 800372a:	4013      	ands	r3, r2
 800372c:	63a3      	str	r3, [r4, #56]	; 0x38
 800372e:	e672      	b.n	8003416 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003730:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003732:	4a51      	ldr	r2, [pc, #324]	; (8003878 <HAL_RCC_OscConfig+0x4f4>)
 8003734:	4013      	ands	r3, r2
 8003736:	6523      	str	r3, [r4, #80]	; 0x50
 8003738:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800373a:	4a50      	ldr	r2, [pc, #320]	; (800387c <HAL_RCC_OscConfig+0x4f8>)
 800373c:	4013      	ands	r3, r2
 800373e:	e796      	b.n	800366e <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003740:	f7ff fb52 	bl	8002de8 <HAL_GetTick>
 8003744:	4b4e      	ldr	r3, [pc, #312]	; (8003880 <HAL_RCC_OscConfig+0x4fc>)
 8003746:	1bc0      	subs	r0, r0, r7
 8003748:	4298      	cmp	r0, r3
 800374a:	d9e3      	bls.n	8003714 <HAL_RCC_OscConfig+0x390>
 800374c:	e68f      	b.n	800346e <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800374e:	69aa      	ldr	r2, [r5, #24]
 8003750:	2101      	movs	r1, #1
 8003752:	4b4d      	ldr	r3, [pc, #308]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003754:	2a00      	cmp	r2, #0
 8003756:	d018      	beq.n	800378a <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8003758:	68a2      	ldr	r2, [r4, #8]
 800375a:	430a      	orrs	r2, r1
 800375c:	60a2      	str	r2, [r4, #8]
 800375e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003760:	430a      	orrs	r2, r1
 8003762:	6362      	str	r2, [r4, #52]	; 0x34
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	6a19      	ldr	r1, [r3, #32]
 8003768:	0192      	lsls	r2, r2, #6
 800376a:	430a      	orrs	r2, r1
 800376c:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800376e:	f7ff fb3b 	bl	8002de8 <HAL_GetTick>
 8003772:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003774:	2202      	movs	r2, #2
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	4213      	tst	r3, r2
 800377a:	d000      	beq.n	800377e <HAL_RCC_OscConfig+0x3fa>
 800377c:	e64f      	b.n	800341e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800377e:	f7ff fb33 	bl	8002de8 <HAL_GetTick>
 8003782:	1bc0      	subs	r0, r0, r7
 8003784:	2802      	cmp	r0, #2
 8003786:	d9f5      	bls.n	8003774 <HAL_RCC_OscConfig+0x3f0>
 8003788:	e671      	b.n	800346e <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 800378a:	68a2      	ldr	r2, [r4, #8]
 800378c:	438a      	bics	r2, r1
 800378e:	60a2      	str	r2, [r4, #8]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	493e      	ldr	r1, [pc, #248]	; (800388c <HAL_RCC_OscConfig+0x508>)
 8003794:	400a      	ands	r2, r1
 8003796:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8003798:	f7ff fb26 	bl	8002de8 <HAL_GetTick>
 800379c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800379e:	2202      	movs	r2, #2
 80037a0:	68a3      	ldr	r3, [r4, #8]
 80037a2:	4213      	tst	r3, r2
 80037a4:	d100      	bne.n	80037a8 <HAL_RCC_OscConfig+0x424>
 80037a6:	e63a      	b.n	800341e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a8:	f7ff fb1e 	bl	8002de8 <HAL_GetTick>
 80037ac:	1bc0      	subs	r0, r0, r7
 80037ae:	2802      	cmp	r0, #2
 80037b0:	d9f5      	bls.n	800379e <HAL_RCC_OscConfig+0x41a>
 80037b2:	e65c      	b.n	800346e <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b4:	2e0c      	cmp	r6, #12
 80037b6:	d043      	beq.n	8003840 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b8:	4a35      	ldr	r2, [pc, #212]	; (8003890 <HAL_RCC_OscConfig+0x50c>)
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d12e      	bne.n	800381c <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 80037be:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037c0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4013      	ands	r3, r2
 80037c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80037c6:	f7ff fb0f 	bl	8002de8 <HAL_GetTick>
 80037ca:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037cc:	04bf      	lsls	r7, r7, #18
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	423b      	tst	r3, r7
 80037d2:	d11d      	bne.n	8003810 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80037d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037d8:	68e2      	ldr	r2, [r4, #12]
 80037da:	430b      	orrs	r3, r1
 80037dc:	492d      	ldr	r1, [pc, #180]	; (8003894 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80037de:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e0:	400a      	ands	r2, r1
 80037e2:	4313      	orrs	r3, r2
 80037e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80037e6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	6822      	ldr	r2, [r4, #0]
 80037f0:	045b      	lsls	r3, r3, #17
 80037f2:	4313      	orrs	r3, r2
 80037f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80037f6:	f7ff faf7 	bl	8002de8 <HAL_GetTick>
 80037fa:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	4233      	tst	r3, r6
 8003800:	d000      	beq.n	8003804 <HAL_RCC_OscConfig+0x480>
 8003802:	e610      	b.n	8003426 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003804:	f7ff faf0 	bl	8002de8 <HAL_GetTick>
 8003808:	1b40      	subs	r0, r0, r5
 800380a:	2802      	cmp	r0, #2
 800380c:	d9f6      	bls.n	80037fc <HAL_RCC_OscConfig+0x478>
 800380e:	e62e      	b.n	800346e <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003810:	f7ff faea 	bl	8002de8 <HAL_GetTick>
 8003814:	1b80      	subs	r0, r0, r6
 8003816:	2802      	cmp	r0, #2
 8003818:	d9d9      	bls.n	80037ce <HAL_RCC_OscConfig+0x44a>
 800381a:	e628      	b.n	800346e <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 800381c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800381e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003820:	4013      	ands	r3, r2
 8003822:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003824:	f7ff fae0 	bl	8002de8 <HAL_GetTick>
 8003828:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800382a:	04b6      	lsls	r6, r6, #18
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	4233      	tst	r3, r6
 8003830:	d100      	bne.n	8003834 <HAL_RCC_OscConfig+0x4b0>
 8003832:	e5f8      	b.n	8003426 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003834:	f7ff fad8 	bl	8002de8 <HAL_GetTick>
 8003838:	1b40      	subs	r0, r0, r5
 800383a:	2802      	cmp	r0, #2
 800383c:	d9f6      	bls.n	800382c <HAL_RCC_OscConfig+0x4a8>
 800383e:	e616      	b.n	800346e <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 8003840:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003842:	2b01      	cmp	r3, #1
 8003844:	d100      	bne.n	8003848 <HAL_RCC_OscConfig+0x4c4>
 8003846:	e613      	b.n	8003470 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003848:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800384a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800384e:	0252      	lsls	r2, r2, #9
 8003850:	401a      	ands	r2, r3
 8003852:	428a      	cmp	r2, r1
 8003854:	d000      	beq.n	8003858 <HAL_RCC_OscConfig+0x4d4>
 8003856:	e5f4      	b.n	8003442 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003858:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800385c:	0392      	lsls	r2, r2, #14
 800385e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003860:	428a      	cmp	r2, r1
 8003862:	d000      	beq.n	8003866 <HAL_RCC_OscConfig+0x4e2>
 8003864:	e5ed      	b.n	8003442 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003866:	22c0      	movs	r2, #192	; 0xc0
 8003868:	0412      	lsls	r2, r2, #16
 800386a:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800386c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800386e:	4293      	cmp	r3, r2
 8003870:	d100      	bne.n	8003874 <HAL_RCC_OscConfig+0x4f0>
 8003872:	e5d8      	b.n	8003426 <HAL_RCC_OscConfig+0xa2>
 8003874:	e5e5      	b.n	8003442 <HAL_RCC_OscConfig+0xbe>
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	fffffeff 	.word	0xfffffeff
 800387c:	fffffbff 	.word	0xfffffbff
 8003880:	00001388 	.word	0x00001388
 8003884:	efffffff 	.word	0xefffffff
 8003888:	40010000 	.word	0x40010000
 800388c:	ffffdfff 	.word	0xffffdfff
 8003890:	feffffff 	.word	0xfeffffff
 8003894:	ff02ffff 	.word	0xff02ffff

08003898 <HAL_RCC_ClockConfig>:
{
 8003898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800389a:	1e04      	subs	r4, r0, #0
 800389c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80038a0:	2001      	movs	r0, #1
}
 80038a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a4:	2501      	movs	r5, #1
 80038a6:	4e5b      	ldr	r6, [pc, #364]	; (8003a14 <HAL_RCC_ClockConfig+0x17c>)
 80038a8:	9a01      	ldr	r2, [sp, #4]
 80038aa:	6833      	ldr	r3, [r6, #0]
 80038ac:	402b      	ands	r3, r5
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d331      	bcc.n	8003916 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b2:	6822      	ldr	r2, [r4, #0]
 80038b4:	0793      	lsls	r3, r2, #30
 80038b6:	d443      	bmi.n	8003940 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b8:	07d2      	lsls	r2, r2, #31
 80038ba:	d449      	bmi.n	8003950 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	2501      	movs	r5, #1
 80038be:	6833      	ldr	r3, [r6, #0]
 80038c0:	9a01      	ldr	r2, [sp, #4]
 80038c2:	402b      	ands	r3, r5
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d909      	bls.n	80038dc <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c8:	6833      	ldr	r3, [r6, #0]
 80038ca:	43ab      	bics	r3, r5
 80038cc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80038ce:	f7ff fa8b 	bl	8002de8 <HAL_GetTick>
 80038d2:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d4:	6833      	ldr	r3, [r6, #0]
 80038d6:	422b      	tst	r3, r5
 80038d8:	d000      	beq.n	80038dc <HAL_RCC_ClockConfig+0x44>
 80038da:	e08c      	b.n	80039f6 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	4d4e      	ldr	r5, [pc, #312]	; (8003a18 <HAL_RCC_ClockConfig+0x180>)
 80038e0:	0753      	lsls	r3, r2, #29
 80038e2:	d500      	bpl.n	80038e6 <HAL_RCC_ClockConfig+0x4e>
 80038e4:	e08f      	b.n	8003a06 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e6:	0712      	lsls	r2, r2, #28
 80038e8:	d506      	bpl.n	80038f8 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ea:	68ea      	ldr	r2, [r5, #12]
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	494b      	ldr	r1, [pc, #300]	; (8003a1c <HAL_RCC_ClockConfig+0x184>)
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	400a      	ands	r2, r1
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038f8:	f7ff fcfc 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 80038fc:	68eb      	ldr	r3, [r5, #12]
 80038fe:	4a48      	ldr	r2, [pc, #288]	; (8003a20 <HAL_RCC_ClockConfig+0x188>)
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	0f1b      	lsrs	r3, r3, #28
 8003904:	5cd3      	ldrb	r3, [r2, r3]
 8003906:	4947      	ldr	r1, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x18c>)
 8003908:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 800390a:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800390c:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	f7ff fa26 	bl	8002d60 <HAL_InitTick>
  if(status != HAL_OK)
 8003914:	e7c5      	b.n	80038a2 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	6833      	ldr	r3, [r6, #0]
 8003918:	9a01      	ldr	r2, [sp, #4]
 800391a:	43ab      	bics	r3, r5
 800391c:	4313      	orrs	r3, r2
 800391e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003920:	f7ff fa62 	bl	8002de8 <HAL_GetTick>
 8003924:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	6833      	ldr	r3, [r6, #0]
 8003928:	9a01      	ldr	r2, [sp, #4]
 800392a:	402b      	ands	r3, r5
 800392c:	4293      	cmp	r3, r2
 800392e:	d0c0      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7ff fa5a 	bl	8002de8 <HAL_GetTick>
 8003934:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <HAL_RCC_ClockConfig+0x194>)
 8003936:	1bc0      	subs	r0, r0, r7
 8003938:	4298      	cmp	r0, r3
 800393a:	d9f4      	bls.n	8003926 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800393c:	2003      	movs	r0, #3
 800393e:	e7b0      	b.n	80038a2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003940:	20f0      	movs	r0, #240	; 0xf0
 8003942:	4935      	ldr	r1, [pc, #212]	; (8003a18 <HAL_RCC_ClockConfig+0x180>)
 8003944:	68cb      	ldr	r3, [r1, #12]
 8003946:	4383      	bics	r3, r0
 8003948:	68a0      	ldr	r0, [r4, #8]
 800394a:	4303      	orrs	r3, r0
 800394c:	60cb      	str	r3, [r1, #12]
 800394e:	e7b3      	b.n	80038b8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003950:	4d31      	ldr	r5, [pc, #196]	; (8003a18 <HAL_RCC_ClockConfig+0x180>)
 8003952:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003954:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	2a02      	cmp	r2, #2
 8003958:	d118      	bne.n	800398c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800395a:	039b      	lsls	r3, r3, #14
 800395c:	d5a0      	bpl.n	80038a0 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395e:	2103      	movs	r1, #3
 8003960:	68eb      	ldr	r3, [r5, #12]
 8003962:	438b      	bics	r3, r1
 8003964:	4313      	orrs	r3, r2
 8003966:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8003968:	f7ff fa3e 	bl	8002de8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800396e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003970:	2b02      	cmp	r3, #2
 8003972:	d118      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003974:	220c      	movs	r2, #12
 8003976:	68eb      	ldr	r3, [r5, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	2b08      	cmp	r3, #8
 800397c:	d09e      	beq.n	80038bc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397e:	f7ff fa33 	bl	8002de8 <HAL_GetTick>
 8003982:	4b2a      	ldr	r3, [pc, #168]	; (8003a2c <HAL_RCC_ClockConfig+0x194>)
 8003984:	1bc0      	subs	r0, r0, r7
 8003986:	4298      	cmp	r0, r3
 8003988:	d9f4      	bls.n	8003974 <HAL_RCC_ClockConfig+0xdc>
 800398a:	e7d7      	b.n	800393c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398c:	2a03      	cmp	r2, #3
 800398e:	d102      	bne.n	8003996 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003990:	019b      	lsls	r3, r3, #6
 8003992:	d4e4      	bmi.n	800395e <HAL_RCC_ClockConfig+0xc6>
 8003994:	e784      	b.n	80038a0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003996:	2a01      	cmp	r2, #1
 8003998:	d102      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800399a:	075b      	lsls	r3, r3, #29
 800399c:	d4df      	bmi.n	800395e <HAL_RCC_ClockConfig+0xc6>
 800399e:	e77f      	b.n	80038a0 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80039a0:	059b      	lsls	r3, r3, #22
 80039a2:	d4dc      	bmi.n	800395e <HAL_RCC_ClockConfig+0xc6>
 80039a4:	e77c      	b.n	80038a0 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d10b      	bne.n	80039c2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039aa:	220c      	movs	r2, #12
 80039ac:	68eb      	ldr	r3, [r5, #12]
 80039ae:	4013      	ands	r3, r2
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d083      	beq.n	80038bc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7ff fa18 	bl	8002de8 <HAL_GetTick>
 80039b8:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <HAL_RCC_ClockConfig+0x194>)
 80039ba:	1bc0      	subs	r0, r0, r7
 80039bc:	4298      	cmp	r0, r3
 80039be:	d9f4      	bls.n	80039aa <HAL_RCC_ClockConfig+0x112>
 80039c0:	e7bc      	b.n	800393c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d011      	beq.n	80039ea <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80039c6:	220c      	movs	r2, #12
 80039c8:	68eb      	ldr	r3, [r5, #12]
 80039ca:	4213      	tst	r3, r2
 80039cc:	d100      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x138>
 80039ce:	e775      	b.n	80038bc <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7ff fa0a 	bl	8002de8 <HAL_GetTick>
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_RCC_ClockConfig+0x194>)
 80039d6:	1bc0      	subs	r0, r0, r7
 80039d8:	4298      	cmp	r0, r3
 80039da:	d9f4      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x12e>
 80039dc:	e7ae      	b.n	800393c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039de:	f7ff fa03 	bl	8002de8 <HAL_GetTick>
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_ClockConfig+0x194>)
 80039e4:	1bc0      	subs	r0, r0, r7
 80039e6:	4298      	cmp	r0, r3
 80039e8:	d8a8      	bhi.n	800393c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ea:	220c      	movs	r2, #12
 80039ec:	68eb      	ldr	r3, [r5, #12]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d1f4      	bne.n	80039de <HAL_RCC_ClockConfig+0x146>
 80039f4:	e762      	b.n	80038bc <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f6:	f7ff f9f7 	bl	8002de8 <HAL_GetTick>
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCC_ClockConfig+0x194>)
 80039fc:	1bc0      	subs	r0, r0, r7
 80039fe:	4298      	cmp	r0, r3
 8003a00:	d800      	bhi.n	8003a04 <HAL_RCC_ClockConfig+0x16c>
 8003a02:	e767      	b.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
 8003a04:	e79a      	b.n	800393c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a06:	68eb      	ldr	r3, [r5, #12]
 8003a08:	4909      	ldr	r1, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x198>)
 8003a0a:	400b      	ands	r3, r1
 8003a0c:	68e1      	ldr	r1, [r4, #12]
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	60eb      	str	r3, [r5, #12]
 8003a12:	e768      	b.n	80038e6 <HAL_RCC_ClockConfig+0x4e>
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	ffffc7ff 	.word	0xffffc7ff
 8003a20:	08005699 	.word	0x08005699
 8003a24:	20000094 	.word	0x20000094
 8003a28:	2000009c 	.word	0x2000009c
 8003a2c:	00001388 	.word	0x00001388
 8003a30:	fffff8ff 	.word	0xfffff8ff

08003a34 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a36:	001d      	movs	r5, r3
 8003a38:	0017      	movs	r7, r2
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	000e      	movs	r6, r1
 8003a3e:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a40:	f7ff f9d2 	bl	8002de8 <HAL_GetTick>
 8003a44:	19ed      	adds	r5, r5, r7
 8003a46:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003a48:	f7ff f9ce 	bl	8002de8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8003a4e:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	015b      	lsls	r3, r3, #5
 8003a54:	0d1b      	lsrs	r3, r3, #20
 8003a56:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a58:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8003a5a:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a5c:	6893      	ldr	r3, [r2, #8]
 8003a5e:	4033      	ands	r3, r6
 8003a60:	429e      	cmp	r6, r3
 8003a62:	d001      	beq.n	8003a68 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8003a64:	2000      	movs	r0, #0
 8003a66:	e032      	b.n	8003ace <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8003a68:	1c7b      	adds	r3, r7, #1
 8003a6a:	d0f7      	beq.n	8003a5c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a6c:	f7ff f9bc 	bl	8002de8 <HAL_GetTick>
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	1ac0      	subs	r0, r0, r3
 8003a74:	42a8      	cmp	r0, r5
 8003a76:	d32c      	bcc.n	8003ad2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a78:	21e0      	movs	r1, #224	; 0xe0
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	438a      	bics	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a82:	2282      	movs	r2, #130	; 0x82
 8003a84:	6861      	ldr	r1, [r4, #4]
 8003a86:	0052      	lsls	r2, r2, #1
 8003a88:	4291      	cmp	r1, r2
 8003a8a:	d10c      	bne.n	8003aa6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8003a8c:	2180      	movs	r1, #128	; 0x80
 8003a8e:	68a2      	ldr	r2, [r4, #8]
 8003a90:	0209      	lsls	r1, r1, #8
 8003a92:	428a      	cmp	r2, r1
 8003a94:	d003      	beq.n	8003a9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a96:	2180      	movs	r1, #128	; 0x80
 8003a98:	00c9      	lsls	r1, r1, #3
 8003a9a:	428a      	cmp	r2, r1
 8003a9c:	d103      	bne.n	8003aa6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8003a9e:	2140      	movs	r1, #64	; 0x40
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	438a      	bics	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003aaa:	0189      	lsls	r1, r1, #6
 8003aac:	428a      	cmp	r2, r1
 8003aae:	d106      	bne.n	8003abe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	480d      	ldr	r0, [pc, #52]	; (8003ae8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8003ab4:	4001      	ands	r1, r0
 8003ab6:	6019      	str	r1, [r3, #0]
 8003ab8:	6819      	ldr	r1, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003abe:	0023      	movs	r3, r4
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	3351      	adds	r3, #81	; 0x51
 8003ac4:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8003ac6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003ac8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003aca:	3450      	adds	r4, #80	; 0x50
 8003acc:	7023      	strb	r3, [r4, #0]
}
 8003ace:	b005      	add	sp, #20
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8003ad2:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003ad4:	1e5a      	subs	r2, r3, #1
 8003ad6:	4193      	sbcs	r3, r2
 8003ad8:	425b      	negs	r3, r3
 8003ada:	401d      	ands	r5, r3
      count--;
 8003adc:	9b03      	ldr	r3, [sp, #12]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	e7ba      	b.n	8003a58 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	20000094 	.word	0x20000094
 8003ae8:	ffffdfff 	.word	0xffffdfff

08003aec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af0:	2282      	movs	r2, #130	; 0x82
{
 8003af2:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af4:	6840      	ldr	r0, [r0, #4]
 8003af6:	0052      	lsls	r2, r2, #1
 8003af8:	4290      	cmp	r0, r2
 8003afa:	d11e      	bne.n	8003b3a <SPI_EndRxTransaction+0x4e>
 8003afc:	2080      	movs	r0, #128	; 0x80
 8003afe:	2580      	movs	r5, #128	; 0x80
 8003b00:	68a2      	ldr	r2, [r4, #8]
 8003b02:	0200      	lsls	r0, r0, #8
 8003b04:	00ed      	lsls	r5, r5, #3
 8003b06:	4282      	cmp	r2, r0
 8003b08:	d001      	beq.n	8003b0e <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b0a:	42aa      	cmp	r2, r5
 8003b0c:	d106      	bne.n	8003b1c <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b0e:	2740      	movs	r7, #64	; 0x40
 8003b10:	6826      	ldr	r6, [r4, #0]
 8003b12:	6830      	ldr	r0, [r6, #0]
 8003b14:	43b8      	bics	r0, r7
 8003b16:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b18:	42aa      	cmp	r2, r5
 8003b1a:	d00e      	beq.n	8003b3a <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1c:	000a      	movs	r2, r1
 8003b1e:	2180      	movs	r1, #128	; 0x80
 8003b20:	0020      	movs	r0, r4
 8003b22:	f7ff ff87 	bl	8003a34 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d101      	bne.n	8003b2e <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003b2a:	2000      	movs	r0, #0
}
 8003b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b2e:	2320      	movs	r3, #32
 8003b30:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b32:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b34:	4313      	orrs	r3, r2
 8003b36:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b38:	e7f8      	b.n	8003b2c <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3a:	000a      	movs	r2, r1
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	e7ef      	b.n	8003b20 <SPI_EndRxTransaction+0x34>

08003b40 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <SPI_EndRxTxTransaction+0x5c>)
{
 8003b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b44:	0004      	movs	r4, r0
 8003b46:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	4915      	ldr	r1, [pc, #84]	; (8003ba0 <SPI_EndRxTxTransaction+0x60>)
{
 8003b4c:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b4e:	f7fc fadb 	bl	8000108 <__udivsi3>
 8003b52:	23fa      	movs	r3, #250	; 0xfa
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4343      	muls	r3, r0
 8003b58:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b5a:	2382      	movs	r3, #130	; 0x82
 8003b5c:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b5e:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4299      	cmp	r1, r3
 8003b64:	d10d      	bne.n	8003b82 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b66:	0033      	movs	r3, r6
 8003b68:	002a      	movs	r2, r5
 8003b6a:	2180      	movs	r1, #128	; 0x80
 8003b6c:	0020      	movs	r0, r4
 8003b6e:	f7ff ff61 	bl	8003a34 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d00f      	beq.n	8003b96 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b76:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8003b78:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8003b80:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8003b82:	9b01      	ldr	r3, [sp, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <SPI_EndRxTxTransaction+0x56>
      count--;
 8003b88:	9b01      	ldr	r3, [sp, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	4213      	tst	r3, r2
 8003b94:	d1f5      	bne.n	8003b82 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8003b96:	2000      	movs	r0, #0
 8003b98:	e7f2      	b.n	8003b80 <SPI_EndRxTxTransaction+0x40>
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	20000094 	.word	0x20000094
 8003ba0:	016e3600 	.word	0x016e3600

08003ba4 <HAL_SPI_Init>:
{
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003ba8:	2001      	movs	r0, #1
  if (hspi == NULL)
 8003baa:	2c00      	cmp	r4, #0
 8003bac:	d054      	beq.n	8003c58 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d152      	bne.n	8003c5a <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb4:	2282      	movs	r2, #130	; 0x82
 8003bb6:	6861      	ldr	r1, [r4, #4]
 8003bb8:	0052      	lsls	r2, r2, #1
 8003bba:	4291      	cmp	r1, r2
 8003bbc:	d000      	beq.n	8003bc0 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bbe:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc0:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bc2:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bc6:	3551      	adds	r5, #81	; 0x51
 8003bc8:	782b      	ldrb	r3, [r5, #0]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8003bd0:	0023      	movs	r3, r4
 8003bd2:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8003bd4:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003bd6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8003bd8:	f7fe ff16 	bl	8002a08 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003bdc:	2602      	movs	r6, #2
  __HAL_SPI_DISABLE(hspi);
 8003bde:	2240      	movs	r2, #64	; 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003be0:	2082      	movs	r0, #130	; 0x82
 8003be2:	2784      	movs	r7, #132	; 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 8003be4:	702e      	strb	r6, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8003be6:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003be8:	0040      	lsls	r0, r0, #1
  __HAL_SPI_DISABLE(hspi);
 8003bea:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bec:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 8003bee:	4393      	bics	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	69a2      	ldr	r2, [r4, #24]
 8003bf6:	4003      	ands	r3, r0
 8003bf8:	68a0      	ldr	r0, [r4, #8]
 8003bfa:	4038      	ands	r0, r7
 8003bfc:	2780      	movs	r7, #128	; 0x80
 8003bfe:	4303      	orrs	r3, r0
 8003c00:	68e0      	ldr	r0, [r4, #12]
 8003c02:	013f      	lsls	r7, r7, #4
 8003c04:	4038      	ands	r0, r7
 8003c06:	4303      	orrs	r3, r0
 8003c08:	6920      	ldr	r0, [r4, #16]
 8003c0a:	2738      	movs	r7, #56	; 0x38
 8003c0c:	4030      	ands	r0, r6
 8003c0e:	4303      	orrs	r3, r0
 8003c10:	6960      	ldr	r0, [r4, #20]
 8003c12:	3e01      	subs	r6, #1
 8003c14:	4030      	ands	r0, r6
 8003c16:	4303      	orrs	r3, r0
 8003c18:	2080      	movs	r0, #128	; 0x80
 8003c1a:	0080      	lsls	r0, r0, #2
 8003c1c:	4010      	ands	r0, r2
 8003c1e:	4303      	orrs	r3, r0
 8003c20:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c22:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c24:	4038      	ands	r0, r7
 8003c26:	4303      	orrs	r3, r0
 8003c28:	6a20      	ldr	r0, [r4, #32]
 8003c2a:	3748      	adds	r7, #72	; 0x48
 8003c2c:	4038      	ands	r0, r7
 8003c2e:	2780      	movs	r7, #128	; 0x80
 8003c30:	4303      	orrs	r3, r0
 8003c32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003c34:	01bf      	lsls	r7, r7, #6
 8003c36:	4038      	ands	r0, r7
 8003c38:	4303      	orrs	r3, r0
 8003c3a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	2010      	movs	r0, #16
 8003c40:	401a      	ands	r2, r3
 8003c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c44:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c46:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c4c:	69cb      	ldr	r3, [r1, #28]
 8003c4e:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <HAL_SPI_Init+0xc0>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c54:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c56:	702e      	strb	r6, [r5, #0]
}
 8003c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c5e:	6163      	str	r3, [r4, #20]
 8003c60:	e7ae      	b.n	8003bc0 <HAL_SPI_Init+0x1c>
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	fffff7ff 	.word	0xfffff7ff

08003c68 <HAL_SPI_TransmitReceive>:
{
 8003c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6a:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	3350      	adds	r3, #80	; 0x50
{
 8003c70:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8003c72:	781a      	ldrb	r2, [r3, #0]
{
 8003c74:	0004      	movs	r4, r0
 8003c76:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8003c78:	2002      	movs	r0, #2
{
 8003c7a:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8003c7c:	2a01      	cmp	r2, #1
 8003c7e:	d100      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x1a>
 8003c80:	e092      	b.n	8003da8 <HAL_SPI_TransmitReceive+0x140>
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003c86:	f7ff f8af 	bl	8002de8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003c8a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8003c8c:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8003c8e:	3351      	adds	r3, #81	; 0x51
 8003c90:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003c92:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8003c94:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d00a      	beq.n	8003cb0 <HAL_SPI_TransmitReceive+0x48>
 8003c9a:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8003c9c:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4299      	cmp	r1, r3
 8003ca2:	d000      	beq.n	8003ca6 <HAL_SPI_TransmitReceive+0x3e>
 8003ca4:	e079      	b.n	8003d9a <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ca6:	68a3      	ldr	r3, [r4, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d176      	bne.n	8003d9a <HAL_SPI_TransmitReceive+0x132>
 8003cac:	2a04      	cmp	r2, #4
 8003cae:	d174      	bne.n	8003d9a <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8003cb0:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cb2:	2d00      	cmp	r5, #0
 8003cb4:	d071      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x132>
 8003cb6:	2f00      	cmp	r7, #0
 8003cb8:	d06f      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x132>
 8003cba:	2e00      	cmp	r6, #0
 8003cbc:	d06d      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cbe:	0023      	movs	r3, r4
 8003cc0:	3351      	adds	r3, #81	; 0x51
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	2a04      	cmp	r2, #4
 8003cc6:	d001      	beq.n	8003ccc <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cc8:	2205      	movs	r2, #5
 8003cca:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ccc:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cce:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cd0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8003cd2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cd4:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cd6:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8003cd8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003cda:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cdc:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cde:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ce0:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ce2:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ce4:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce6:	4210      	tst	r0, r2
 8003ce8:	d102      	bne.n	8003cf0 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	4302      	orrs	r2, r0
 8003cee:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	68e0      	ldr	r0, [r4, #12]
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	4290      	cmp	r0, r2
 8003cf8:	d158      	bne.n	8003dac <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cfa:	2900      	cmp	r1, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_SPI_TransmitReceive+0x9a>
 8003cfe:	2e01      	cmp	r6, #1
 8003d00:	d107      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d02:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d04:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d06:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003d08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003d12:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d14:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d16:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10e      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0xd4>
 8003d1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d24:	0020      	movs	r0, r4
 8003d26:	9a01      	ldr	r2, [sp, #4]
 8003d28:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d2a:	f7ff ff09 	bl	8003b40 <SPI_EndRxTxTransaction>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d100      	bne.n	8003d34 <HAL_SPI_TransmitReceive+0xcc>
 8003d32:	e083      	b.n	8003e3c <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d34:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8003d36:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d38:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8003d3a:	e02e      	b.n	8003d9a <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d3c:	6821      	ldr	r1, [r4, #0]
 8003d3e:	688b      	ldr	r3, [r1, #8]
 8003d40:	423b      	tst	r3, r7
 8003d42:	d00e      	beq.n	8003d62 <HAL_SPI_TransmitReceive+0xfa>
 8003d44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_SPI_TransmitReceive+0xfa>
 8003d4a:	2d01      	cmp	r5, #1
 8003d4c:	d109      	bne.n	8003d62 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8003d4e:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d52:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d54:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d56:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d58:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003d5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d62:	688b      	ldr	r3, [r1, #8]
 8003d64:	001a      	movs	r2, r3
 8003d66:	4032      	ands	r2, r6
 8003d68:	4233      	tst	r3, r6
 8003d6a:	d00c      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x11e>
 8003d6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8003d72:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d74:	68c9      	ldr	r1, [r1, #12]
 8003d76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d78:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003d7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d86:	f7ff f82f 	bl	8002de8 <HAL_GetTick>
 8003d8a:	9b01      	ldr	r3, [sp, #4]
 8003d8c:	1ac0      	subs	r0, r0, r3
 8003d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d90:	4298      	cmp	r0, r3
 8003d92:	d3c1      	bcc.n	8003d18 <HAL_SPI_TransmitReceive+0xb0>
 8003d94:	3301      	adds	r3, #1
 8003d96:	d0bf      	beq.n	8003d18 <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8003d98:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003d9a:	0023      	movs	r3, r4
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	3351      	adds	r3, #81	; 0x51
 8003da0:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8003da2:	2300      	movs	r3, #0
 8003da4:	3450      	adds	r4, #80	; 0x50
 8003da6:	7023      	strb	r3, [r4, #0]
}
 8003da8:	b005      	add	sp, #20
 8003daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dac:	2900      	cmp	r1, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_SPI_TransmitReceive+0x14c>
 8003db0:	2e01      	cmp	r6, #1
 8003db2:	d108      	bne.n	8003dc6 <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db4:	782a      	ldrb	r2, [r5, #0]
 8003db6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003db8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003dba:	3301      	adds	r3, #1
 8003dbc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003dbe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003dc6:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc8:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dca:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dcc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d102      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x170>
 8003dd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0a5      	beq.n	8003d24 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	423a      	tst	r2, r7
 8003dde:	d00f      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x198>
 8003de0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003de2:	2a00      	cmp	r2, #0
 8003de4:	d00c      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x198>
 8003de6:	2d01      	cmp	r5, #1
 8003de8:	d10a      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 8003dea:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003dee:	7812      	ldrb	r2, [r2, #0]
 8003df0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003df4:	3301      	adds	r3, #1
 8003df6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003df8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	6899      	ldr	r1, [r3, #8]
 8003e04:	000a      	movs	r2, r1
 8003e06:	4032      	ands	r2, r6
 8003e08:	4231      	tst	r1, r6
 8003e0a:	d00d      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0x1c0>
 8003e0c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003e0e:	2900      	cmp	r1, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8003e12:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e14:	68d9      	ldr	r1, [r3, #12]
 8003e16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e18:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003e20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e28:	f7fe ffde 	bl	8002de8 <HAL_GetTick>
 8003e2c:	9b01      	ldr	r3, [sp, #4]
 8003e2e:	1ac0      	subs	r0, r0, r3
 8003e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e32:	4298      	cmp	r0, r3
 8003e34:	d3ca      	bcc.n	8003dcc <HAL_SPI_TransmitReceive+0x164>
 8003e36:	3301      	adds	r3, #1
 8003e38:	d0c8      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x164>
 8003e3a:	e7ad      	b.n	8003d98 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e3c:	68a3      	ldr	r3, [r4, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ab      	bne.n	8003d9a <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	9003      	str	r0, [sp, #12]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	9203      	str	r2, [sp, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	9303      	str	r3, [sp, #12]
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	e7a3      	b.n	8003d9a <HAL_SPI_TransmitReceive+0x132>
	...

08003e54 <HAL_SPI_TransmitReceive_DMA>:
{
 8003e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8003e56:	0006      	movs	r6, r0
 8003e58:	3650      	adds	r6, #80	; 0x50
 8003e5a:	7835      	ldrb	r5, [r6, #0]
{
 8003e5c:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8003e5e:	2002      	movs	r0, #2
 8003e60:	2d01      	cmp	r5, #1
 8003e62:	d047      	beq.n	8003ef4 <HAL_SPI_TransmitReceive_DMA+0xa0>
  tmp_state           = hspi->State;
 8003e64:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 8003e66:	3801      	subs	r0, #1
 8003e68:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 8003e6a:	3551      	adds	r5, #81	; 0x51
 8003e6c:	7828      	ldrb	r0, [r5, #0]
 8003e6e:	b2c7      	uxtb	r7, r0
 8003e70:	9701      	str	r7, [sp, #4]
  tmp_mode            = hspi->Init.Mode;
 8003e72:	6867      	ldr	r7, [r4, #4]
 8003e74:	46bc      	mov	ip, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003e76:	2801      	cmp	r0, #1
 8003e78:	d00a      	beq.n	8003e90 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8003e7a:	2782      	movs	r7, #130	; 0x82
    errorcode = HAL_BUSY;
 8003e7c:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003e7e:	007f      	lsls	r7, r7, #1
 8003e80:	45bc      	cmp	ip, r7
 8003e82:	d135      	bne.n	8003ef0 <HAL_SPI_TransmitReceive_DMA+0x9c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e84:	68a7      	ldr	r7, [r4, #8]
 8003e86:	2f00      	cmp	r7, #0
 8003e88:	d132      	bne.n	8003ef0 <HAL_SPI_TransmitReceive_DMA+0x9c>
 8003e8a:	9f01      	ldr	r7, [sp, #4]
 8003e8c:	2f04      	cmp	r7, #4
 8003e8e:	d12f      	bne.n	8003ef0 <HAL_SPI_TransmitReceive_DMA+0x9c>
    errorcode = HAL_ERROR;
 8003e90:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e92:	2900      	cmp	r1, #0
 8003e94:	d02c      	beq.n	8003ef0 <HAL_SPI_TransmitReceive_DMA+0x9c>
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d02a      	beq.n	8003ef0 <HAL_SPI_TransmitReceive_DMA+0x9c>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d028      	beq.n	8003ef0 <HAL_SPI_TransmitReceive_DMA+0x9c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e9e:	7828      	ldrb	r0, [r5, #0]
 8003ea0:	2804      	cmp	r0, #4
 8003ea2:	d001      	beq.n	8003ea8 <HAL_SPI_TransmitReceive_DMA+0x54>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ea4:	2005      	movs	r0, #5
 8003ea6:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ea8:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eaa:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eac:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8003eae:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8003eb0:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 8003eb2:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->TxXferSize  = Size;
 8003eb4:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eb6:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003eb8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003eba:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003ebc:	782b      	ldrb	r3, [r5, #0]
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003ebe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d118      	bne.n	8003ef6 <HAL_SPI_TransmitReceive_DMA+0xa2>
 8003ec4:	4922      	ldr	r1, [pc, #136]	; (8003f50 <HAL_SPI_TransmitReceive_DMA+0xfc>)
 8003ec6:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <HAL_SPI_TransmitReceive_DMA+0x100>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003ec8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003eca:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <HAL_SPI_TransmitReceive_DMA+0x104>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003ecc:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ece:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 8003ed4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ed6:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8003ed8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003eda:	310c      	adds	r1, #12
 8003edc:	f7ff f830 	bl	8002f40 <HAL_DMA_Start_IT>
 8003ee0:	1e03      	subs	r3, r0, #0
 8003ee2:	d00b      	beq.n	8003efc <HAL_SPI_TransmitReceive_DMA+0xa8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ee4:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 8003ee6:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ee8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003eea:	4313      	orrs	r3, r2
 8003eec:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003eee:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	7033      	strb	r3, [r6, #0]
}
 8003ef4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ef6:	4919      	ldr	r1, [pc, #100]	; (8003f5c <HAL_SPI_TransmitReceive_DMA+0x108>)
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <HAL_SPI_TransmitReceive_DMA+0x10c>)
 8003efa:	e7e5      	b.n	8003ec8 <HAL_SPI_TransmitReceive_DMA+0x74>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003efc:	2701      	movs	r7, #1
 8003efe:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003f00:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003f02:	6851      	ldr	r1, [r2, #4]
 8003f04:	4339      	orrs	r1, r7
 8003f06:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003f08:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003f0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003f0c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003f0e:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 8003f10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f12:	6b21      	ldr	r1, [r4, #48]	; 0x30
                                 hspi->TxXferCount))
 8003f14:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f16:	320c      	adds	r2, #12
 8003f18:	f7ff f812 	bl	8002f40 <HAL_DMA_Start_IT>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d006      	beq.n	8003f2e <HAL_SPI_TransmitReceive_DMA+0xda>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f20:	2310      	movs	r3, #16
 8003f22:	6d62      	ldr	r2, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003f24:	0038      	movs	r0, r7
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f26:	4313      	orrs	r3, r2
 8003f28:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003f2a:	702f      	strb	r7, [r5, #0]
    goto error;
 8003f2c:	e7e0      	b.n	8003ef0 <HAL_SPI_TransmitReceive_DMA+0x9c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f2e:	2240      	movs	r2, #64	; 0x40
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	4211      	tst	r1, r2
 8003f36:	d102      	bne.n	8003f3e <HAL_SPI_TransmitReceive_DMA+0xea>
    __HAL_SPI_ENABLE(hspi);
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f3e:	2220      	movs	r2, #32
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f46:	2202      	movs	r2, #2
 8003f48:	6859      	ldr	r1, [r3, #4]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	e7cf      	b.n	8003ef0 <HAL_SPI_TransmitReceive_DMA+0x9c>
 8003f50:	08004059 	.word	0x08004059
 8003f54:	08004095 	.word	0x08004095
 8003f58:	08004071 	.word	0x08004071
 8003f5c:	08004065 	.word	0x08004065
 8003f60:	08004103 	.word	0x08004103

08003f64 <HAL_SPI_Receive_DMA>:
{
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003f68:	6880      	ldr	r0, [r0, #8]
{
 8003f6a:	0013      	movs	r3, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d10f      	bne.n	8003f90 <HAL_SPI_Receive_DMA+0x2c>
 8003f70:	2282      	movs	r2, #130	; 0x82
 8003f72:	6865      	ldr	r5, [r4, #4]
 8003f74:	0052      	lsls	r2, r2, #1
 8003f76:	4295      	cmp	r5, r2
 8003f78:	d10a      	bne.n	8003f90 <HAL_SPI_Receive_DMA+0x2c>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f7a:	0022      	movs	r2, r4
 8003f7c:	3004      	adds	r0, #4
 8003f7e:	3251      	adds	r2, #81	; 0x51
 8003f80:	7010      	strb	r0, [r2, #0]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003f82:	000a      	movs	r2, r1
 8003f84:	0020      	movs	r0, r4
 8003f86:	f7ff ff65 	bl	8003e54 <HAL_SPI_TransmitReceive_DMA>
 8003f8a:	0005      	movs	r5, r0
}
 8003f8c:	0028      	movs	r0, r5
 8003f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8003f90:	0026      	movs	r6, r4
 8003f92:	3650      	adds	r6, #80	; 0x50
 8003f94:	7832      	ldrb	r2, [r6, #0]
 8003f96:	2502      	movs	r5, #2
 8003f98:	2a01      	cmp	r2, #1
 8003f9a:	d0f7      	beq.n	8003f8c <HAL_SPI_Receive_DMA+0x28>
 8003f9c:	2201      	movs	r2, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8003f9e:	0027      	movs	r7, r4
  __HAL_LOCK(hspi);
 8003fa0:	7032      	strb	r2, [r6, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8003fa2:	3751      	adds	r7, #81	; 0x51
 8003fa4:	783a      	ldrb	r2, [r7, #0]
 8003fa6:	b2d5      	uxtb	r5, r2
 8003fa8:	2a01      	cmp	r2, #1
 8003faa:	d149      	bne.n	8004040 <HAL_SPI_Receive_DMA+0xdc>
  if ((pData == NULL) || (Size == 0U))
 8003fac:	2900      	cmp	r1, #0
 8003fae:	d032      	beq.n	8004016 <HAL_SPI_Receive_DMA+0xb2>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d030      	beq.n	8004016 <HAL_SPI_Receive_DMA+0xb2>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fb4:	3203      	adds	r2, #3
 8003fb6:	703a      	strb	r2, [r7, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb8:	2200      	movs	r2, #0
  hspi->RxXferSize  = Size;
 8003fba:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fbc:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8003fbe:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc0:	2380      	movs	r3, #128	; 0x80
  hspi->RxISR       = NULL;
 8003fc2:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fc4:	6462      	str	r2, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003fc6:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003fc8:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fca:	63a1      	str	r1, [r4, #56]	; 0x38
    __HAL_SPI_DISABLE(hspi);
 8003fcc:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	4298      	cmp	r0, r3
 8003fd2:	d107      	bne.n	8003fe4 <HAL_SPI_Receive_DMA+0x80>
    __HAL_SPI_DISABLE(hspi);
 8003fd4:	2040      	movs	r0, #64	; 0x40
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	4383      	bics	r3, r0
 8003fda:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	4819      	ldr	r0, [pc, #100]	; (8004044 <HAL_SPI_Receive_DMA+0xe0>)
 8003fe0:	4003      	ands	r3, r0
 8003fe2:	6013      	str	r3, [r2, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003fe4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <HAL_SPI_Receive_DMA+0xe4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003fe8:	320c      	adds	r2, #12
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003fea:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <HAL_SPI_Receive_DMA+0xe8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003fee:	4694      	mov	ip, r2
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003ff0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <HAL_SPI_Receive_DMA+0xec>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ff4:	000a      	movs	r2, r1
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ff6:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 8003ffc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ffe:	4661      	mov	r1, ip
                                 hspi->RxXferCount))
 8004000:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004002:	f7fe ff9d 	bl	8002f40 <HAL_DMA_Start_IT>
 8004006:	2800      	cmp	r0, #0
 8004008:	d008      	beq.n	800401c <HAL_SPI_Receive_DMA+0xb8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800400a:	2310      	movs	r3, #16
 800400c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800400e:	4313      	orrs	r3, r2
 8004010:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8004012:	2301      	movs	r3, #1
 8004014:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(hspi);
 8004016:	2300      	movs	r3, #0
 8004018:	7033      	strb	r3, [r6, #0]
  return errorcode;
 800401a:	e7b7      	b.n	8003f8c <HAL_SPI_Receive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800401c:	2240      	movs	r2, #64	; 0x40
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	6819      	ldr	r1, [r3, #0]
 8004022:	4211      	tst	r1, r2
 8004024:	d102      	bne.n	800402c <HAL_SPI_Receive_DMA+0xc8>
    __HAL_SPI_ENABLE(hspi);
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800402c:	2220      	movs	r2, #32
 800402e:	6859      	ldr	r1, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004030:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004036:	2201      	movs	r2, #1
 8004038:	6859      	ldr	r1, [r3, #4]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	e7ea      	b.n	8004016 <HAL_SPI_Receive_DMA+0xb2>
    errorcode = HAL_BUSY;
 8004040:	2502      	movs	r5, #2
 8004042:	e7e8      	b.n	8004016 <HAL_SPI_Receive_DMA+0xb2>
 8004044:	ffffbfff 	.word	0xffffbfff
 8004048:	08004059 	.word	0x08004059
 800404c:	08004095 	.word	0x08004095
 8004050:	08004071 	.word	0x08004071

08004054 <HAL_SPI_TxRxCpltCallback>:
 8004054:	4770      	bx	lr

08004056 <HAL_SPI_RxHalfCpltCallback>:
 8004056:	4770      	bx	lr

08004058 <SPI_DMAHalfReceiveCplt>:
{
 8004058:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800405a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800405c:	f7ff fffb 	bl	8004056 <HAL_SPI_RxHalfCpltCallback>
}
 8004060:	bd10      	pop	{r4, pc}

08004062 <HAL_SPI_TxRxHalfCpltCallback>:
 8004062:	4770      	bx	lr

08004064 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8004064:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004066:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004068:	f7ff fffb 	bl	8004062 <HAL_SPI_TxRxHalfCpltCallback>
}
 800406c:	bd10      	pop	{r4, pc}

0800406e <HAL_SPI_ErrorCallback>:
 800406e:	4770      	bx	lr

08004070 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004070:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004072:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004074:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004076:	6802      	ldr	r2, [r0, #0]
 8004078:	6853      	ldr	r3, [r2, #4]
 800407a:	438b      	bics	r3, r1
 800407c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800407e:	2310      	movs	r3, #16
 8004080:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004082:	4313      	orrs	r3, r2
 8004084:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004086:	0003      	movs	r3, r0
 8004088:	2201      	movs	r2, #1
 800408a:	3351      	adds	r3, #81	; 0x51
 800408c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 800408e:	f7ff ffee 	bl	800406e <HAL_SPI_ErrorCallback>
}
 8004092:	bd10      	pop	{r4, pc}

08004094 <SPI_DMAReceiveCplt>:
{
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004098:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800409a:	f7fe fea5 	bl	8002de8 <HAL_GetTick>
 800409e:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80040a0:	2020      	movs	r0, #32
 80040a2:	682b      	ldr	r3, [r5, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4203      	tst	r3, r0
 80040a8:	d127      	bne.n	80040fa <SPI_DMAReceiveCplt+0x66>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	6859      	ldr	r1, [r3, #4]
 80040ae:	4381      	bics	r1, r0
 80040b0:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80040b2:	68a1      	ldr	r1, [r4, #8]
 80040b4:	2900      	cmp	r1, #0
 80040b6:	d11d      	bne.n	80040f4 <SPI_DMAReceiveCplt+0x60>
 80040b8:	3105      	adds	r1, #5
 80040ba:	6860      	ldr	r0, [r4, #4]
 80040bc:	31ff      	adds	r1, #255	; 0xff
 80040be:	4288      	cmp	r0, r1
 80040c0:	d118      	bne.n	80040f4 <SPI_DMAReceiveCplt+0x60>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80040c2:	2003      	movs	r0, #3
 80040c4:	6859      	ldr	r1, [r3, #4]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80040c6:	4381      	bics	r1, r0
 80040c8:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80040ca:	0020      	movs	r0, r4
 80040cc:	2164      	movs	r1, #100	; 0x64
 80040ce:	f7ff fd0d 	bl	8003aec <SPI_EndRxTransaction>
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d001      	beq.n	80040da <SPI_DMAReceiveCplt+0x46>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040d6:	2320      	movs	r3, #32
 80040d8:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80040de:	0023      	movs	r3, r4
 80040e0:	2201      	movs	r2, #1
 80040e2:	3351      	adds	r3, #81	; 0x51
 80040e4:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d006      	beq.n	80040fa <SPI_DMAReceiveCplt+0x66>
      HAL_SPI_ErrorCallback(hspi);
 80040ec:	0020      	movs	r0, r4
 80040ee:	f7ff ffbe 	bl	800406e <HAL_SPI_ErrorCallback>
}
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80040f4:	2001      	movs	r0, #1
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	e7e5      	b.n	80040c6 <SPI_DMAReceiveCplt+0x32>
  HAL_SPI_RxCpltCallback(hspi);
 80040fa:	0020      	movs	r0, r4
 80040fc:	f000 ff18 	bl	8004f30 <HAL_SPI_RxCpltCallback>
 8004100:	e7f7      	b.n	80040f2 <SPI_DMAReceiveCplt+0x5e>

08004102 <SPI_DMATransmitReceiveCplt>:
{
 8004102:	b570      	push	{r4, r5, r6, lr}
 8004104:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004106:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8004108:	f7fe fe6e 	bl	8002de8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	2520      	movs	r5, #32
 8004110:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8004112:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004114:	422b      	tst	r3, r5
 8004116:	d11f      	bne.n	8004158 <SPI_DMATransmitReceiveCplt+0x56>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004118:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800411a:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800411c:	684b      	ldr	r3, [r1, #4]
 800411e:	43ab      	bics	r3, r5
 8004120:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004122:	2164      	movs	r1, #100	; 0x64
 8004124:	f7ff fd0c 	bl	8003b40 <SPI_EndRxTxTransaction>
 8004128:	2800      	cmp	r0, #0
 800412a:	d002      	beq.n	8004132 <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800412c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800412e:	431d      	orrs	r5, r3
 8004130:	6565      	str	r5, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004132:	2103      	movs	r1, #3
 8004134:	6822      	ldr	r2, [r4, #0]
 8004136:	6853      	ldr	r3, [r2, #4]
 8004138:	438b      	bics	r3, r1
 800413a:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004140:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004142:	0023      	movs	r3, r4
 8004144:	2201      	movs	r2, #1
 8004146:	3351      	adds	r3, #81	; 0x51
 8004148:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800414a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <SPI_DMATransmitReceiveCplt+0x56>
      HAL_SPI_ErrorCallback(hspi);
 8004150:	0020      	movs	r0, r4
 8004152:	f7ff ff8c 	bl	800406e <HAL_SPI_ErrorCallback>
}
 8004156:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8004158:	0020      	movs	r0, r4
 800415a:	f7ff ff7b 	bl	8004054 <HAL_SPI_TxRxCpltCallback>
 800415e:	e7fa      	b.n	8004156 <SPI_DMATransmitReceiveCplt+0x54>

08004160 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004160:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 8004162:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004164:	05d2      	lsls	r2, r2, #23
 8004166:	4290      	cmp	r0, r2
 8004168:	d008      	beq.n	800417c <TIM_Base_SetConfig+0x1c>
 800416a:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <TIM_Base_SetConfig+0x60>)
 800416c:	4290      	cmp	r0, r2
 800416e:	d005      	beq.n	800417c <TIM_Base_SetConfig+0x1c>
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <TIM_Base_SetConfig+0x64>)
 8004172:	4290      	cmp	r0, r2
 8004174:	d002      	beq.n	800417c <TIM_Base_SetConfig+0x1c>
 8004176:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <TIM_Base_SetConfig+0x68>)
 8004178:	4290      	cmp	r0, r2
 800417a:	d114      	bne.n	80041a6 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800417c:	2270      	movs	r2, #112	; 0x70
 800417e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004180:	684a      	ldr	r2, [r1, #4]
 8004182:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	05d2      	lsls	r2, r2, #23
 8004188:	4290      	cmp	r0, r2
 800418a:	d008      	beq.n	800419e <TIM_Base_SetConfig+0x3e>
 800418c:	4a0c      	ldr	r2, [pc, #48]	; (80041c0 <TIM_Base_SetConfig+0x60>)
 800418e:	4290      	cmp	r0, r2
 8004190:	d005      	beq.n	800419e <TIM_Base_SetConfig+0x3e>
 8004192:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <TIM_Base_SetConfig+0x64>)
 8004194:	4290      	cmp	r0, r2
 8004196:	d002      	beq.n	800419e <TIM_Base_SetConfig+0x3e>
 8004198:	4a0b      	ldr	r2, [pc, #44]	; (80041c8 <TIM_Base_SetConfig+0x68>)
 800419a:	4290      	cmp	r0, r2
 800419c:	d103      	bne.n	80041a6 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419e:	4a0b      	ldr	r2, [pc, #44]	; (80041cc <TIM_Base_SetConfig+0x6c>)
 80041a0:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a2:	68cb      	ldr	r3, [r1, #12]
 80041a4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a6:	2280      	movs	r2, #128	; 0x80
 80041a8:	4393      	bics	r3, r2
 80041aa:	690a      	ldr	r2, [r1, #16]
 80041ac:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80041ae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b0:	688b      	ldr	r3, [r1, #8]
 80041b2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b4:	680b      	ldr	r3, [r1, #0]
 80041b6:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b8:	2301      	movs	r3, #1
 80041ba:	6143      	str	r3, [r0, #20]
}
 80041bc:	4770      	bx	lr
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40010800 	.word	0x40010800
 80041c8:	40011400 	.word	0x40011400
 80041cc:	fffffcff 	.word	0xfffffcff

080041d0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d0:	2201      	movs	r2, #1
{
 80041d2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041d4:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d6:	6a03      	ldr	r3, [r0, #32]
 80041d8:	4393      	bics	r3, r2
 80041da:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80041dc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80041de:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80041e0:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041e2:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e4:	680d      	ldr	r5, [r1, #0]
 80041e6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041e8:	2502      	movs	r5, #2
 80041ea:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041ec:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ee:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041f2:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 80041f4:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 80041f6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f8:	6203      	str	r3, [r0, #32]
}
 80041fa:	bd30      	pop	{r4, r5, pc}

080041fc <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fc:	2210      	movs	r2, #16
 80041fe:	6a03      	ldr	r3, [r0, #32]
{
 8004200:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004202:	4393      	bics	r3, r2
 8004204:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004206:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004208:	4a08      	ldr	r2, [pc, #32]	; (800422c <TIM_OC2_SetConfig+0x30>)
  tmpcr2 =  TIMx->CR2;
 800420a:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800420c:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800420e:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	680a      	ldr	r2, [r1, #0]
 8004212:	0212      	lsls	r2, r2, #8
 8004214:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004216:	2320      	movs	r3, #32
 8004218:	439c      	bics	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800421a:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800421e:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004220:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004222:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004224:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8004226:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004228:	6203      	str	r3, [r0, #32]
}
 800422a:	bd30      	pop	{r4, r5, pc}
 800422c:	ffff8cff 	.word	0xffff8cff

08004230 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004230:	231f      	movs	r3, #31
{
 8004232:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004234:	2401      	movs	r4, #1
 8004236:	4019      	ands	r1, r3
 8004238:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800423a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 800423c:	6a03      	ldr	r3, [r0, #32]
 800423e:	43a3      	bics	r3, r4
 8004240:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004242:	6a03      	ldr	r3, [r0, #32]
 8004244:	431a      	orrs	r2, r3
 8004246:	6202      	str	r2, [r0, #32]
}
 8004248:	bd10      	pop	{r4, pc}

0800424a <HAL_TIM_Base_Init>:
{
 800424a:	b570      	push	{r4, r5, r6, lr}
 800424c:	0004      	movs	r4, r0
    return HAL_ERROR;
 800424e:	2001      	movs	r0, #1
  if (htim == NULL)
 8004250:	2c00      	cmp	r4, #0
 8004252:	d01d      	beq.n	8004290 <HAL_TIM_Base_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004254:	0025      	movs	r5, r4
 8004256:	3539      	adds	r5, #57	; 0x39
 8004258:	782b      	ldrb	r3, [r5, #0]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004260:	0023      	movs	r3, r4
 8004262:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8004264:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004266:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004268:	f7fe fc34 	bl	8002ad4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	2302      	movs	r3, #2
 800426e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	1d21      	adds	r1, r4, #4
 8004274:	f7ff ff74 	bl	8004160 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004278:	0022      	movs	r2, r4
 800427a:	2301      	movs	r3, #1
  return HAL_OK;
 800427c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427e:	323e      	adds	r2, #62	; 0x3e
 8004280:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	343d      	adds	r4, #61	; 0x3d
 8004284:	3a04      	subs	r2, #4
 8004286:	7013      	strb	r3, [r2, #0]
 8004288:	7053      	strb	r3, [r2, #1]
 800428a:	7093      	strb	r3, [r2, #2]
 800428c:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 800428e:	702b      	strb	r3, [r5, #0]
}
 8004290:	bd70      	pop	{r4, r5, r6, pc}
	...

08004294 <HAL_TIM_OC_Start_DMA>:
{
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	000e      	movs	r6, r1
 8004298:	0004      	movs	r4, r0
 800429a:	0011      	movs	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800429c:	0002      	movs	r2, r0
 800429e:	2e00      	cmp	r6, #0
 80042a0:	d105      	bne.n	80042ae <HAL_TIM_OC_Start_DMA+0x1a>
 80042a2:	323a      	adds	r2, #58	; 0x3a
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	b2d0      	uxtb	r0, r2
 80042a8:	2a02      	cmp	r2, #2
 80042aa:	d10d      	bne.n	80042c8 <HAL_TIM_OC_Start_DMA+0x34>
}
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80042ae:	2e04      	cmp	r6, #4
 80042b0:	d115      	bne.n	80042de <HAL_TIM_OC_Start_DMA+0x4a>
 80042b2:	323b      	adds	r2, #59	; 0x3b
 80042b4:	7815      	ldrb	r5, [r2, #0]
    return HAL_BUSY;
 80042b6:	2002      	movs	r0, #2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80042b8:	3d02      	subs	r5, #2
 80042ba:	426a      	negs	r2, r5
 80042bc:	4155      	adcs	r5, r2
 80042be:	b2ed      	uxtb	r5, r5
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	d1f3      	bne.n	80042ac <HAL_TIM_OC_Start_DMA+0x18>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80042c4:	2e00      	cmp	r6, #0
 80042c6:	d110      	bne.n	80042ea <HAL_TIM_OC_Start_DMA+0x56>
 80042c8:	0022      	movs	r2, r4
 80042ca:	323a      	adds	r2, #58	; 0x3a
 80042cc:	7812      	ldrb	r2, [r2, #0]
 80042ce:	3a01      	subs	r2, #1
 80042d0:	4250      	negs	r0, r2
 80042d2:	4142      	adcs	r2, r0
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	d12e      	bne.n	8004338 <HAL_TIM_OC_Start_DMA+0xa4>
    return HAL_ERROR;
 80042da:	2001      	movs	r0, #1
 80042dc:	e7e6      	b.n	80042ac <HAL_TIM_OC_Start_DMA+0x18>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80042de:	2e08      	cmp	r6, #8
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_OC_Start_DMA+0x52>
 80042e2:	323c      	adds	r2, #60	; 0x3c
 80042e4:	e7e6      	b.n	80042b4 <HAL_TIM_OC_Start_DMA+0x20>
 80042e6:	323d      	adds	r2, #61	; 0x3d
 80042e8:	e7e4      	b.n	80042b4 <HAL_TIM_OC_Start_DMA+0x20>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80042ea:	0022      	movs	r2, r4
 80042ec:	2e04      	cmp	r6, #4
 80042ee:	d101      	bne.n	80042f4 <HAL_TIM_OC_Start_DMA+0x60>
 80042f0:	323b      	adds	r2, #59	; 0x3b
 80042f2:	e7eb      	b.n	80042cc <HAL_TIM_OC_Start_DMA+0x38>
 80042f4:	2e08      	cmp	r6, #8
 80042f6:	d106      	bne.n	8004306 <HAL_TIM_OC_Start_DMA+0x72>
 80042f8:	323c      	adds	r2, #60	; 0x3c
 80042fa:	7812      	ldrb	r2, [r2, #0]
 80042fc:	2a01      	cmp	r2, #1
 80042fe:	d1ec      	bne.n	80042da <HAL_TIM_OC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 8004300:	2900      	cmp	r1, #0
 8004302:	d16e      	bne.n	80043e2 <HAL_TIM_OC_Start_DMA+0x14e>
 8004304:	e01a      	b.n	800433c <HAL_TIM_OC_Start_DMA+0xa8>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004306:	323d      	adds	r2, #61	; 0x3d
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	2a01      	cmp	r2, #1
 800430c:	d1e5      	bne.n	80042da <HAL_TIM_OC_Start_DMA+0x46>
    if ((pData == NULL) && (Length > 0U))
 800430e:	2900      	cmp	r1, #0
 8004310:	d101      	bne.n	8004316 <HAL_TIM_OC_Start_DMA+0x82>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e1      	bne.n	80042da <HAL_TIM_OC_Start_DMA+0x46>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004316:	0022      	movs	r2, r4
 8004318:	2002      	movs	r0, #2
 800431a:	323d      	adds	r2, #61	; 0x3d
 800431c:	7010      	strb	r0, [r2, #0]
  switch (Channel)
 800431e:	2e0c      	cmp	r6, #12
 8004320:	d076      	beq.n	8004410 <HAL_TIM_OC_Start_DMA+0x17c>
 8004322:	3801      	subs	r0, #1
 8004324:	2e0c      	cmp	r6, #12
 8004326:	d8c1      	bhi.n	80042ac <HAL_TIM_OC_Start_DMA+0x18>
 8004328:	2e08      	cmp	r6, #8
 800432a:	d05e      	beq.n	80043ea <HAL_TIM_OC_Start_DMA+0x156>
 800432c:	d8be      	bhi.n	80042ac <HAL_TIM_OC_Start_DMA+0x18>
 800432e:	2e00      	cmp	r6, #0
 8004330:	d00c      	beq.n	800434c <HAL_TIM_OC_Start_DMA+0xb8>
 8004332:	2e04      	cmp	r6, #4
 8004334:	d1ba      	bne.n	80042ac <HAL_TIM_OC_Start_DMA+0x18>
 8004336:	e040      	b.n	80043ba <HAL_TIM_OC_Start_DMA+0x126>
    if ((pData == NULL) && (Length > 0U))
 8004338:	2900      	cmp	r1, #0
 800433a:	d101      	bne.n	8004340 <HAL_TIM_OC_Start_DMA+0xac>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1cc      	bne.n	80042da <HAL_TIM_OC_Start_DMA+0x46>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004340:	2202      	movs	r2, #2
 8004342:	2e00      	cmp	r6, #0
 8004344:	d134      	bne.n	80043b0 <HAL_TIM_OC_Start_DMA+0x11c>
 8004346:	0020      	movs	r0, r4
 8004348:	303a      	adds	r0, #58	; 0x3a
 800434a:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800434c:	6a20      	ldr	r0, [r4, #32]
 800434e:	4a3d      	ldr	r2, [pc, #244]	; (8004444 <HAL_TIM_OC_Start_DMA+0x1b0>)
 8004350:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004352:	4a3d      	ldr	r2, [pc, #244]	; (8004448 <HAL_TIM_OC_Start_DMA+0x1b4>)
 8004354:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004356:	4a3d      	ldr	r2, [pc, #244]	; (800444c <HAL_TIM_OC_Start_DMA+0x1b8>)
 8004358:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	3234      	adds	r2, #52	; 0x34
 800435e:	f7fe fdef 	bl	8002f40 <HAL_DMA_Start_IT>
 8004362:	2800      	cmp	r0, #0
 8004364:	d1b9      	bne.n	80042da <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	6822      	ldr	r2, [r4, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	68d1      	ldr	r1, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800436e:	6824      	ldr	r4, [r4, #0]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004370:	430b      	orrs	r3, r1
 8004372:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004374:	0031      	movs	r1, r6
 8004376:	2201      	movs	r2, #1
 8004378:	0020      	movs	r0, r4
 800437a:	f7ff ff59 	bl	8004230 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	05db      	lsls	r3, r3, #23
 8004382:	429c      	cmp	r4, r3
 8004384:	d008      	beq.n	8004398 <HAL_TIM_OC_Start_DMA+0x104>
 8004386:	4b32      	ldr	r3, [pc, #200]	; (8004450 <HAL_TIM_OC_Start_DMA+0x1bc>)
 8004388:	429c      	cmp	r4, r3
 800438a:	d005      	beq.n	8004398 <HAL_TIM_OC_Start_DMA+0x104>
 800438c:	4b31      	ldr	r3, [pc, #196]	; (8004454 <HAL_TIM_OC_Start_DMA+0x1c0>)
 800438e:	429c      	cmp	r4, r3
 8004390:	d002      	beq.n	8004398 <HAL_TIM_OC_Start_DMA+0x104>
 8004392:	4b31      	ldr	r3, [pc, #196]	; (8004458 <HAL_TIM_OC_Start_DMA+0x1c4>)
 8004394:	429c      	cmp	r4, r3
 8004396:	d14e      	bne.n	8004436 <HAL_TIM_OC_Start_DMA+0x1a2>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004398:	2207      	movs	r2, #7
 800439a:	68a3      	ldr	r3, [r4, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439c:	2000      	movs	r0, #0
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800439e:	4013      	ands	r3, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a0:	2b06      	cmp	r3, #6
 80043a2:	d100      	bne.n	80043a6 <HAL_TIM_OC_Start_DMA+0x112>
 80043a4:	e782      	b.n	80042ac <HAL_TIM_OC_Start_DMA+0x18>
        __HAL_TIM_ENABLE(htim);
 80043a6:	2301      	movs	r3, #1
 80043a8:	6822      	ldr	r2, [r4, #0]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	e77d      	b.n	80042ac <HAL_TIM_OC_Start_DMA+0x18>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b0:	2e04      	cmp	r6, #4
 80043b2:	d114      	bne.n	80043de <HAL_TIM_OC_Start_DMA+0x14a>
 80043b4:	0020      	movs	r0, r4
 80043b6:	303b      	adds	r0, #59	; 0x3b
 80043b8:	7002      	strb	r2, [r0, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043bc:	4a21      	ldr	r2, [pc, #132]	; (8004444 <HAL_TIM_OC_Start_DMA+0x1b0>)
 80043be:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043c0:	4a21      	ldr	r2, [pc, #132]	; (8004448 <HAL_TIM_OC_Start_DMA+0x1b4>)
 80043c2:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80043c4:	4a21      	ldr	r2, [pc, #132]	; (800444c <HAL_TIM_OC_Start_DMA+0x1b8>)
 80043c6:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80043c8:	6822      	ldr	r2, [r4, #0]
 80043ca:	3238      	adds	r2, #56	; 0x38
 80043cc:	f7fe fdb8 	bl	8002f40 <HAL_DMA_Start_IT>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d182      	bne.n	80042da <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	6822      	ldr	r2, [r4, #0]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	68d1      	ldr	r1, [r2, #12]
 80043dc:	e7c7      	b.n	800436e <HAL_TIM_OC_Start_DMA+0xda>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043de:	2e08      	cmp	r6, #8
 80043e0:	d199      	bne.n	8004316 <HAL_TIM_OC_Start_DMA+0x82>
 80043e2:	0022      	movs	r2, r4
 80043e4:	2002      	movs	r0, #2
 80043e6:	323c      	adds	r2, #60	; 0x3c
 80043e8:	7010      	strb	r0, [r2, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <HAL_TIM_OC_Start_DMA+0x1b0>)
 80043ee:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <HAL_TIM_OC_Start_DMA+0x1b4>)
 80043f2:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80043f4:	4a15      	ldr	r2, [pc, #84]	; (800444c <HAL_TIM_OC_Start_DMA+0x1b8>)
 80043f6:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80043f8:	6822      	ldr	r2, [r4, #0]
 80043fa:	323c      	adds	r2, #60	; 0x3c
 80043fc:	f7fe fda0 	bl	8002f40 <HAL_DMA_Start_IT>
 8004400:	2800      	cmp	r0, #0
 8004402:	d000      	beq.n	8004406 <HAL_TIM_OC_Start_DMA+0x172>
 8004404:	e769      	b.n	80042da <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	6822      	ldr	r2, [r4, #0]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	68d1      	ldr	r1, [r2, #12]
 800440e:	e7ae      	b.n	800436e <HAL_TIM_OC_Start_DMA+0xda>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004410:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004412:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <HAL_TIM_OC_Start_DMA+0x1b0>)
 8004414:	62c2      	str	r2, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004416:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <HAL_TIM_OC_Start_DMA+0x1b4>)
 8004418:	6302      	str	r2, [r0, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800441a:	4a0c      	ldr	r2, [pc, #48]	; (800444c <HAL_TIM_OC_Start_DMA+0x1b8>)
 800441c:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800441e:	6822      	ldr	r2, [r4, #0]
 8004420:	3240      	adds	r2, #64	; 0x40
 8004422:	f7fe fd8d 	bl	8002f40 <HAL_DMA_Start_IT>
 8004426:	2800      	cmp	r0, #0
 8004428:	d000      	beq.n	800442c <HAL_TIM_OC_Start_DMA+0x198>
 800442a:	e756      	b.n	80042da <HAL_TIM_OC_Start_DMA+0x46>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	6822      	ldr	r2, [r4, #0]
 8004430:	015b      	lsls	r3, r3, #5
 8004432:	68d1      	ldr	r1, [r2, #12]
 8004434:	e79b      	b.n	800436e <HAL_TIM_OC_Start_DMA+0xda>
      __HAL_TIM_ENABLE(htim);
 8004436:	2301      	movs	r3, #1
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	2000      	movs	r0, #0
 800443c:	4313      	orrs	r3, r2
 800443e:	6023      	str	r3, [r4, #0]
 8004440:	e734      	b.n	80042ac <HAL_TIM_OC_Start_DMA+0x18>
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	0800471f 	.word	0x0800471f
 8004448:	08004791 	.word	0x08004791
 800444c:	080047cb 	.word	0x080047cb
 8004450:	40000400 	.word	0x40000400
 8004454:	40010800 	.word	0x40010800
 8004458:	40011400 	.word	0x40011400

0800445c <HAL_TIM_PWM_MspInit>:
 800445c:	4770      	bx	lr

0800445e <HAL_TIM_PWM_Init>:
{
 800445e:	b570      	push	{r4, r5, r6, lr}
 8004460:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004462:	2001      	movs	r0, #1
  if (htim == NULL)
 8004464:	2c00      	cmp	r4, #0
 8004466:	d01d      	beq.n	80044a4 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004468:	0025      	movs	r5, r4
 800446a:	3539      	adds	r5, #57	; 0x39
 800446c:	782b      	ldrb	r3, [r5, #0]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004474:	0023      	movs	r3, r4
 8004476:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8004478:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800447a:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 800447c:	f7ff ffee 	bl	800445c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	2302      	movs	r3, #2
 8004482:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	1d21      	adds	r1, r4, #4
 8004488:	f7ff fe6a 	bl	8004160 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800448c:	0022      	movs	r2, r4
 800448e:	2301      	movs	r3, #1
  return HAL_OK;
 8004490:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004492:	323e      	adds	r2, #62	; 0x3e
 8004494:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004496:	343d      	adds	r4, #61	; 0x3d
 8004498:	3a04      	subs	r2, #4
 800449a:	7013      	strb	r3, [r2, #0]
 800449c:	7053      	strb	r3, [r2, #1]
 800449e:	7093      	strb	r3, [r2, #2]
 80044a0:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	702b      	strb	r3, [r5, #0]
}
 80044a4:	bd70      	pop	{r4, r5, r6, pc}

080044a6 <HAL_TIM_PWM_Start_DMA>:
 80044a6:	b510      	push	{r4, lr}
 80044a8:	f7ff fef4 	bl	8004294 <HAL_TIM_OC_Start_DMA>
 80044ac:	bd10      	pop	{r4, pc}
	...

080044b0 <HAL_TIM_PWM_ConfigChannel>:
{
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80044b2:	0005      	movs	r5, r0
 80044b4:	3538      	adds	r5, #56	; 0x38
{
 80044b6:	0016      	movs	r6, r2
  __HAL_LOCK(htim);
 80044b8:	782a      	ldrb	r2, [r5, #0]
{
 80044ba:	0003      	movs	r3, r0
 80044bc:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 80044be:	2002      	movs	r0, #2
 80044c0:	2a01      	cmp	r2, #1
 80044c2:	d00a      	beq.n	80044da <HAL_TIM_PWM_ConfigChannel+0x2a>
 80044c4:	3801      	subs	r0, #1
 80044c6:	7028      	strb	r0, [r5, #0]
  switch (Channel)
 80044c8:	2e08      	cmp	r6, #8
 80044ca:	d052      	beq.n	8004572 <HAL_TIM_PWM_ConfigChannel+0xc2>
 80044cc:	d806      	bhi.n	80044dc <HAL_TIM_PWM_ConfigChannel+0x2c>
 80044ce:	2e00      	cmp	r6, #0
 80044d0:	d02a      	beq.n	8004528 <HAL_TIM_PWM_ConfigChannel+0x78>
 80044d2:	2e04      	cmp	r6, #4
 80044d4:	d03a      	beq.n	800454c <HAL_TIM_PWM_ConfigChannel+0x9c>
  __HAL_UNLOCK(htim);
 80044d6:	2300      	movs	r3, #0
 80044d8:	702b      	strb	r3, [r5, #0]
}
 80044da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80044dc:	2e0c      	cmp	r6, #12
 80044de:	d1fa      	bne.n	80044d6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e0:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e2:	4935      	ldr	r1, [pc, #212]	; (80045b8 <HAL_TIM_PWM_ConfigChannel+0x108>)
 80044e4:	6a1a      	ldr	r2, [r3, #32]
 80044e6:	400a      	ands	r2, r1
 80044e8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80044ea:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044ec:	4933      	ldr	r1, [pc, #204]	; (80045bc <HAL_TIM_PWM_ConfigChannel+0x10c>)
  tmpcr2 =  TIMx->CR2;
 80044ee:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80044f0:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044f2:	400a      	ands	r2, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f4:	6821      	ldr	r1, [r4, #0]
 80044f6:	0209      	lsls	r1, r1, #8
 80044f8:	4311      	orrs	r1, r2
  tmpccer &= ~TIM_CCER_CC4P;
 80044fa:	4a31      	ldr	r2, [pc, #196]	; (80045c0 <HAL_TIM_PWM_ConfigChannel+0x110>)
 80044fc:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044fe:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8004500:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004502:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8004504:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004506:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004508:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 800450a:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800450c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	69d9      	ldr	r1, [r3, #28]
 8004512:	0112      	lsls	r2, r2, #4
 8004514:	430a      	orrs	r2, r1
 8004516:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	492a      	ldr	r1, [pc, #168]	; (80045c4 <HAL_TIM_PWM_ConfigChannel+0x114>)
 800451c:	400a      	ands	r2, r1
 800451e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004520:	68e2      	ldr	r2, [r4, #12]
 8004522:	69d9      	ldr	r1, [r3, #28]
 8004524:	0212      	lsls	r2, r2, #8
 8004526:	e043      	b.n	80045b0 <HAL_TIM_PWM_ConfigChannel+0x100>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004528:	681f      	ldr	r7, [r3, #0]
 800452a:	0038      	movs	r0, r7
 800452c:	f7ff fe50 	bl	80041d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004530:	2308      	movs	r3, #8
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004536:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004538:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	4393      	bics	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	68e2      	ldr	r2, [r4, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004548:	2000      	movs	r0, #0
      break;
 800454a:	e7c4      	b.n	80044d6 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800454c:	681e      	ldr	r6, [r3, #0]
 800454e:	0030      	movs	r0, r6
 8004550:	f7ff fe54 	bl	80041fc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	69b2      	ldr	r2, [r6, #24]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	4313      	orrs	r3, r2
 800455c:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800455e:	69b3      	ldr	r3, [r6, #24]
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8004562:	4013      	ands	r3, r2
 8004564:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004566:	68e3      	ldr	r3, [r4, #12]
 8004568:	69b2      	ldr	r2, [r6, #24]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	4313      	orrs	r3, r2
 800456e:	61b3      	str	r3, [r6, #24]
      break;
 8004570:	e7ea      	b.n	8004548 <HAL_TIM_PWM_ConfigChannel+0x98>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004572:	681b      	ldr	r3, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004574:	4914      	ldr	r1, [pc, #80]	; (80045c8 <HAL_TIM_PWM_ConfigChannel+0x118>)
 8004576:	6a1a      	ldr	r2, [r3, #32]
 8004578:	400a      	ands	r2, r1
 800457a:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800457c:	2273      	movs	r2, #115	; 0x73
  tmpccer = TIMx->CCER;
 800457e:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004580:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004582:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004584:	4391      	bics	r1, r2
  tmpccmrx |= OC_Config->OCMode;
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	4311      	orrs	r1, r2
  tmpccer &= ~TIM_CCER_CC3P;
 800458a:	4a10      	ldr	r2, [pc, #64]	; (80045cc <HAL_TIM_PWM_ConfigChannel+0x11c>)
 800458c:	4017      	ands	r7, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800458e:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8004590:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004592:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004594:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004596:	0212      	lsls	r2, r2, #8
  TIMx->CCR3 = OC_Config->Pulse;
 8004598:	63d9      	str	r1, [r3, #60]	; 0x3c
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800459a:	2104      	movs	r1, #4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800459c:	433a      	orrs	r2, r7
  TIMx->CCER = tmpccer;
 800459e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	4316      	orrs	r6, r2
 80045a4:	61de      	str	r6, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	438a      	bics	r2, r1
 80045aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045b0:	430a      	orrs	r2, r1
 80045b2:	61da      	str	r2, [r3, #28]
 80045b4:	e7c8      	b.n	8004548 <HAL_TIM_PWM_ConfigChannel+0x98>
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	ffffefff 	.word	0xffffefff
 80045bc:	ffff8cff 	.word	0xffff8cff
 80045c0:	ffffdfff 	.word	0xffffdfff
 80045c4:	fffffbff 	.word	0xfffffbff
 80045c8:	fffffeff 	.word	0xfffffeff
 80045cc:	fffffdff 	.word	0xfffffdff

080045d0 <HAL_TIM_ConfigClockSource>:
{
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80045d2:	0005      	movs	r5, r0
 80045d4:	2202      	movs	r2, #2
 80045d6:	3538      	adds	r5, #56	; 0x38
 80045d8:	782c      	ldrb	r4, [r5, #0]
{
 80045da:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80045dc:	0010      	movs	r0, r2
 80045de:	2c01      	cmp	r4, #1
 80045e0:	d01d      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80045e2:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80045e4:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80045e6:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 80045e8:	702c      	strb	r4, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80045ea:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80045ec:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ee:	4848      	ldr	r0, [pc, #288]	; (8004710 <HAL_TIM_ConfigClockSource+0x140>)
  tmpsmcr = htim->Instance->SMCR;
 80045f0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f2:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 80045f4:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80045f6:	680a      	ldr	r2, [r1, #0]
 80045f8:	2a60      	cmp	r2, #96	; 0x60
 80045fa:	d05c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0xe6>
 80045fc:	d82f      	bhi.n	800465e <HAL_TIM_ConfigClockSource+0x8e>
 80045fe:	2a40      	cmp	r2, #64	; 0x40
 8004600:	d100      	bne.n	8004604 <HAL_TIM_ConfigClockSource+0x34>
 8004602:	e06f      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x114>
 8004604:	d814      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x60>
 8004606:	2a20      	cmp	r2, #32
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_ConfigClockSource+0x54>
 800460a:	d809      	bhi.n	8004620 <HAL_TIM_ConfigClockSource+0x50>
 800460c:	2110      	movs	r1, #16
 800460e:	0010      	movs	r0, r2
 8004610:	4388      	bics	r0, r1
 8004612:	d007      	beq.n	8004624 <HAL_TIM_ConfigClockSource+0x54>
 8004614:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_READY;
 8004616:	2301      	movs	r3, #1
 8004618:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 800461a:	2300      	movs	r3, #0
 800461c:	702b      	strb	r3, [r5, #0]
}
 800461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004620:	2a30      	cmp	r2, #48	; 0x30
 8004622:	d1f7      	bne.n	8004614 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr &= ~TIM_SMCR_TS;
 8004624:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8004626:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004628:	4381      	bics	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462a:	430a      	orrs	r2, r1
 800462c:	2107      	movs	r1, #7
 800462e:	e02f      	b.n	8004690 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8004630:	2a50      	cmp	r2, #80	; 0x50
 8004632:	d1ef      	bne.n	8004614 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004634:	6848      	ldr	r0, [r1, #4]
 8004636:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8004638:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463a:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800463c:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463e:	43a7      	bics	r7, r4
 8004640:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004642:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004644:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004646:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004648:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800464a:	240a      	movs	r4, #10
  TIMx->CCMR1 = tmpccmr1;
 800464c:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800464e:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004650:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004652:	4301      	orrs	r1, r0
  TIMx->CCER = tmpccer;
 8004654:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004656:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004658:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465a:	3a19      	subs	r2, #25
 800465c:	e018      	b.n	8004690 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 800465e:	2780      	movs	r7, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2000      	movs	r0, #0
  switch (sClockSourceConfig->ClockSource)
 8004662:	017f      	lsls	r7, r7, #5
 8004664:	42ba      	cmp	r2, r7
 8004666:	d0d6      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x46>
 8004668:	2080      	movs	r0, #128	; 0x80
 800466a:	0180      	lsls	r0, r0, #6
 800466c:	4282      	cmp	r2, r0
 800466e:	d013      	beq.n	8004698 <HAL_TIM_ConfigClockSource+0xc8>
 8004670:	0020      	movs	r0, r4
 8004672:	2a70      	cmp	r2, #112	; 0x70
 8004674:	d1cf      	bne.n	8004616 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8004676:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004678:	4a26      	ldr	r2, [pc, #152]	; (8004714 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800467a:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800467c:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800467e:	688a      	ldr	r2, [r1, #8]
 8004680:	68c9      	ldr	r1, [r1, #12]
 8004682:	4322      	orrs	r2, r4
 8004684:	0209      	lsls	r1, r1, #8
 8004686:	430a      	orrs	r2, r1
 8004688:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800468a:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800468c:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 800468e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004690:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004694:	609a      	str	r2, [r3, #8]
}
 8004696:	e7be      	b.n	8004616 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8004698:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800469a:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800469c:	684c      	ldr	r4, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800469e:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a0:	688a      	ldr	r2, [r1, #8]
 80046a2:	68c9      	ldr	r1, [r1, #12]
 80046a4:	4322      	orrs	r2, r4
 80046a6:	0209      	lsls	r1, r1, #8
 80046a8:	430a      	orrs	r2, r1
 80046aa:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 80046ac:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ae:	2280      	movs	r2, #128	; 0x80
 80046b0:	6899      	ldr	r1, [r3, #8]
 80046b2:	01d2      	lsls	r2, r2, #7
 80046b4:	e7ec      	b.n	8004690 <HAL_TIM_ConfigClockSource+0xc0>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046b6:	2410      	movs	r4, #16
 80046b8:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ba:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046bc:	43a0      	bics	r0, r4
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046be:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c0:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c2:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c4:	4f14      	ldr	r7, [pc, #80]	; (8004718 <HAL_TIM_ConfigClockSource+0x148>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046c6:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c8:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ca:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046cc:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80046ce:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d0:	0112      	lsls	r2, r2, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d2:	43a0      	bics	r0, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d4:	4302      	orrs	r2, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80046d6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d8:	621a      	str	r2, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046da:	2270      	movs	r2, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80046dc:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046de:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e0:	3a09      	subs	r2, #9
 80046e2:	e7d5      	b.n	8004690 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e4:	6848      	ldr	r0, [r1, #4]
 80046e6:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80046e8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ea:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ec:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ee:	43a7      	bics	r7, r4
 80046f0:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f2:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80046f4:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f6:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046f8:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046fa:	240a      	movs	r4, #10
  TIMx->CCMR1 = tmpccmr1;
 80046fc:	619a      	str	r2, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046fe:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004700:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004702:	4301      	orrs	r1, r0
  TIMx->CCER = tmpccer;
 8004704:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004706:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004708:	4391      	bics	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800470a:	3a29      	subs	r2, #41	; 0x29
 800470c:	e7c0      	b.n	8004690 <HAL_TIM_ConfigClockSource+0xc0>
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	ffff0088 	.word	0xffff0088
 8004714:	ffff00ff 	.word	0xffff00ff
 8004718:	ffff0fff 	.word	0xffff0fff

0800471c <HAL_TIM_PWM_PulseFinishedCallback>:
 800471c:	4770      	bx	lr

0800471e <TIM_DMADelayPulseCplt>:
{
 800471e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004720:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004722:	6a22      	ldr	r2, [r4, #32]
 8004724:	4282      	cmp	r2, r0
 8004726:	d10d      	bne.n	8004744 <TIM_DMADelayPulseCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004728:	2301      	movs	r3, #1
 800472a:	7623      	strb	r3, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 800472c:	69d2      	ldr	r2, [r2, #28]
 800472e:	2a00      	cmp	r2, #0
 8004730:	d102      	bne.n	8004738 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004732:	0022      	movs	r2, r4
 8004734:	323a      	adds	r2, #58	; 0x3a
 8004736:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	0020      	movs	r0, r4
 800473a:	f7ff ffef 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	2300      	movs	r3, #0
 8004740:	7623      	strb	r3, [r4, #24]
}
 8004742:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004746:	4283      	cmp	r3, r0
 8004748:	d109      	bne.n	800475e <TIM_DMADelayPulseCplt+0x40>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800474a:	2202      	movs	r2, #2
 800474c:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f1      	bne.n	8004738 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	0023      	movs	r3, r4
 8004756:	3a01      	subs	r2, #1
 8004758:	333b      	adds	r3, #59	; 0x3b
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	e7ec      	b.n	8004738 <TIM_DMADelayPulseCplt+0x1a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800475e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004760:	4283      	cmp	r3, r0
 8004762:	d108      	bne.n	8004776 <TIM_DMADelayPulseCplt+0x58>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004764:	2204      	movs	r2, #4
 8004766:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e4      	bne.n	8004738 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800476e:	0023      	movs	r3, r4
 8004770:	3a03      	subs	r2, #3
 8004772:	333c      	adds	r3, #60	; 0x3c
 8004774:	e7f1      	b.n	800475a <TIM_DMADelayPulseCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004776:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004778:	4283      	cmp	r3, r0
 800477a:	d1dd      	bne.n	8004738 <TIM_DMADelayPulseCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800477c:	2208      	movs	r2, #8
 800477e:	7622      	strb	r2, [r4, #24]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1d8      	bne.n	8004738 <TIM_DMADelayPulseCplt+0x1a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004786:	0023      	movs	r3, r4
 8004788:	3a07      	subs	r2, #7
 800478a:	333d      	adds	r3, #61	; 0x3d
 800478c:	e7e5      	b.n	800475a <TIM_DMADelayPulseCplt+0x3c>

0800478e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 800478e:	4770      	bx	lr

08004790 <TIM_DMADelayPulseHalfCplt>:
{
 8004790:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004792:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004794:	6a23      	ldr	r3, [r4, #32]
 8004796:	4283      	cmp	r3, r0
 8004798:	d107      	bne.n	80047aa <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479a:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800479c:	7623      	strb	r3, [r4, #24]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800479e:	0020      	movs	r0, r4
 80047a0:	f7ff fff5 	bl	800478e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a4:	2300      	movs	r3, #0
 80047a6:	7623      	strb	r3, [r4, #24]
}
 80047a8:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047ac:	4283      	cmp	r3, r0
 80047ae:	d101      	bne.n	80047b4 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047b0:	2302      	movs	r3, #2
 80047b2:	e7f3      	b.n	800479c <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047b6:	4283      	cmp	r3, r0
 80047b8:	d101      	bne.n	80047be <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ba:	2304      	movs	r3, #4
 80047bc:	e7ee      	b.n	800479c <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047c0:	4283      	cmp	r3, r0
 80047c2:	d1ec      	bne.n	800479e <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c4:	2308      	movs	r3, #8
 80047c6:	e7e9      	b.n	800479c <TIM_DMADelayPulseHalfCplt+0xc>

080047c8 <HAL_TIM_ErrorCallback>:
 80047c8:	4770      	bx	lr

080047ca <TIM_DMAError>:
{
 80047ca:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80047ce:	6a23      	ldr	r3, [r4, #32]
 80047d0:	4283      	cmp	r3, r0
 80047d2:	d105      	bne.n	80047e0 <TIM_DMAError+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047d4:	2301      	movs	r3, #1
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047d6:	0022      	movs	r2, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047d8:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	323a      	adds	r2, #58	; 0x3a
    htim->State = HAL_TIM_STATE_READY;
 80047dc:	7013      	strb	r3, [r2, #0]
 80047de:	e008      	b.n	80047f2 <TIM_DMAError+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047e2:	4283      	cmp	r3, r0
 80047e4:	d10b      	bne.n	80047fe <TIM_DMAError+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047e6:	2302      	movs	r3, #2
 80047e8:	7623      	strb	r3, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047ea:	0023      	movs	r3, r4
 80047ec:	2201      	movs	r2, #1
 80047ee:	333b      	adds	r3, #59	; 0x3b
 80047f0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 80047f2:	0020      	movs	r0, r4
 80047f4:	f7ff ffe8 	bl	80047c8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f8:	2300      	movs	r3, #0
 80047fa:	7623      	strb	r3, [r4, #24]
}
 80047fc:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004800:	2301      	movs	r3, #1
 8004802:	4282      	cmp	r2, r0
 8004804:	d104      	bne.n	8004810 <TIM_DMAError+0x46>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004806:	2204      	movs	r2, #4
 8004808:	7622      	strb	r2, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800480a:	0022      	movs	r2, r4
 800480c:	323c      	adds	r2, #60	; 0x3c
 800480e:	e7e5      	b.n	80047dc <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004810:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004812:	4282      	cmp	r2, r0
 8004814:	d104      	bne.n	8004820 <TIM_DMAError+0x56>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004816:	2208      	movs	r2, #8
 8004818:	7622      	strb	r2, [r4, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	0022      	movs	r2, r4
 800481c:	323d      	adds	r2, #61	; 0x3d
 800481e:	e7dd      	b.n	80047dc <TIM_DMAError+0x12>
    htim->State = HAL_TIM_STATE_READY;
 8004820:	0022      	movs	r2, r4
 8004822:	3239      	adds	r2, #57	; 0x39
 8004824:	e7da      	b.n	80047dc <TIM_DMAError+0x12>
	...

08004828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004828:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800482a:	0004      	movs	r4, r0
 800482c:	2202      	movs	r2, #2
 800482e:	3438      	adds	r4, #56	; 0x38
 8004830:	7825      	ldrb	r5, [r4, #0]
{
 8004832:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004834:	0010      	movs	r0, r2
 8004836:	2d01      	cmp	r5, #1
 8004838:	d020      	beq.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0x54>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483a:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800483c:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800483e:	3539      	adds	r5, #57	; 0x39
 8004840:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004846:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004848:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800484a:	680e      	ldr	r6, [r1, #0]
 800484c:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484e:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004850:	2080      	movs	r0, #128	; 0x80
 8004852:	05c0      	lsls	r0, r0, #23
 8004854:	4283      	cmp	r3, r0
 8004856:	d008      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004858:	4809      	ldr	r0, [pc, #36]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800485a:	4283      	cmp	r3, r0
 800485c:	d005      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800485e:	4809      	ldr	r0, [pc, #36]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8004860:	4283      	cmp	r3, r0
 8004862:	d002      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004864:	4808      	ldr	r0, [pc, #32]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004866:	4283      	cmp	r3, r0
 8004868:	d104      	bne.n	8004874 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486a:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486e:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004870:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004874:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004876:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004878:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800487a:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800487c:	bd70      	pop	{r4, r5, r6, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	40000400 	.word	0x40000400
 8004884:	40010800 	.word	0x40010800
 8004888:	40011400 	.word	0x40011400

0800488c <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	if (SD_ff_hw.initialized)
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <disk_status+0xc>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	4243      	negs	r3, r0
 8004892:	4158      	adcs	r0, r3
		return 0;

	return STA_NOINIT;
}
 8004894:	b2c0      	uxtb	r0, r0
 8004896:	4770      	bx	lr
 8004898:	20000c94 	.word	0x20000c94

0800489c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800489c:	b510      	push	{r4, lr}
	if (hwif_init(&SD_ff_hw) == 0)
 800489e:	4803      	ldr	r0, [pc, #12]	; (80048ac <disk_initialize+0x10>)
 80048a0:	f000 fa7c 	bl	8004d9c <hwif_init>
 80048a4:	1e43      	subs	r3, r0, #1
 80048a6:	4198      	sbcs	r0, r3
		return 0;

	return STA_NOINIT;
}
 80048a8:	b2c0      	uxtb	r0, r0
 80048aa:	bd10      	pop	{r4, pc}
 80048ac:	20000c94 	.word	0x20000c94

080048b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	0014      	movs	r4, r2
 80048b4:	000d      	movs	r5, r1
 80048b6:	189e      	adds	r6, r3, r2
	int i;

	for (i=0; i<count; i++)
 80048b8:	42b4      	cmp	r4, r6
 80048ba:	d101      	bne.n	80048c0 <disk_read+0x10>
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
			return RES_ERROR;

	return RES_OK;
 80048bc:	2000      	movs	r0, #0
}
 80048be:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
 80048c0:	002a      	movs	r2, r5
 80048c2:	0021      	movs	r1, r4
 80048c4:	4805      	ldr	r0, [pc, #20]	; (80048dc <disk_read+0x2c>)
 80048c6:	f000 fb13 	bl	8004ef0 <sd_read>
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	3401      	adds	r4, #1
 80048d0:	18ed      	adds	r5, r5, r3
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d0f0      	beq.n	80048b8 <disk_read+0x8>
			return RES_ERROR;
 80048d6:	2001      	movs	r0, #1
 80048d8:	e7f1      	b.n	80048be <disk_read+0xe>
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	20000c94 	.word	0x20000c94

080048e0 <crc7_one>:
	int i;
	const uint8_t g = 0x89;
	t ^= data;
	for (i=0; i<8; i++) {
		if (t & 0x80)
			t ^= g;
 80048e0:	2277      	movs	r2, #119	; 0x77
	t ^= data;
 80048e2:	2308      	movs	r3, #8
 80048e4:	4048      	eors	r0, r1
			t ^= g;
 80048e6:	4252      	negs	r2, r2
		if (t & 0x80)
 80048e8:	b241      	sxtb	r1, r0
 80048ea:	2900      	cmp	r1, #0
 80048ec:	da01      	bge.n	80048f2 <crc7_one+0x12>
			t ^= g;
 80048ee:	4050      	eors	r0, r2
 80048f0:	b2c0      	uxtb	r0, r0
		t <<= 1;
 80048f2:	0040      	lsls	r0, r0, #1
	for (i=0; i<8; i++) {
 80048f4:	3b01      	subs	r3, #1
		t <<= 1;
 80048f6:	b2c0      	uxtb	r0, r0
	for (i=0; i<8; i++) {
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f5      	bne.n	80048e8 <crc7_one+0x8>
	}
	return t;
}
 80048fc:	4770      	bx	lr
	...

08004900 <spi_txrx>:
{
 8004900:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t out = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	466a      	mov	r2, sp
{
 8004906:	210f      	movs	r1, #15
	uint8_t out = 0;
 8004908:	75d3      	strb	r3, [r2, #23]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 800490a:	2217      	movs	r2, #23
{
 800490c:	4469      	add	r1, sp
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 800490e:	3b01      	subs	r3, #1
{
 8004910:	7008      	strb	r0, [r1, #0]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), HAL_MAX_DELAY);
 8004912:	446a      	add	r2, sp
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4804      	ldr	r0, [pc, #16]	; (8004928 <spi_txrx+0x28>)
 8004918:	3302      	adds	r3, #2
 800491a:	f7ff f9a5 	bl	8003c68 <HAL_SPI_TransmitReceive>
	return out;
 800491e:	466b      	mov	r3, sp
 8004920:	7dd8      	ldrb	r0, [r3, #23]
}
 8004922:	b007      	add	sp, #28
 8004924:	bd00      	pop	{pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	20000190 	.word	0x20000190

0800492c <sd_cmd>:


/*** sd functions - on top of spi code ***/

static void sd_cmd(uint8_t cmd, uint32_t arg)
{
 800492c:	b570      	push	{r4, r5, r6, lr}
	uint8_t crc = 0;
	spi_txrx(0x40 | cmd);
 800492e:	2540      	movs	r5, #64	; 0x40
 8004930:	4305      	orrs	r5, r0
 8004932:	0028      	movs	r0, r5
{
 8004934:	000c      	movs	r4, r1
	spi_txrx(0x40 | cmd);
 8004936:	f7ff ffe3 	bl	8004900 <spi_txrx>
	crc = crc7_one(crc, 0x40 | cmd);
 800493a:	0029      	movs	r1, r5
 800493c:	2000      	movs	r0, #0
 800493e:	f7ff ffcf 	bl	80048e0 <crc7_one>
 8004942:	0005      	movs	r5, r0
	spi_txrx(arg >> 24);
 8004944:	0e26      	lsrs	r6, r4, #24
 8004946:	0030      	movs	r0, r6
 8004948:	f7ff ffda 	bl	8004900 <spi_txrx>
	crc = crc7_one(crc, arg >> 24);
 800494c:	0031      	movs	r1, r6
 800494e:	0028      	movs	r0, r5
 8004950:	f7ff ffc6 	bl	80048e0 <crc7_one>
 8004954:	0006      	movs	r6, r0
	spi_txrx(arg >> 16);
 8004956:	0c25      	lsrs	r5, r4, #16
 8004958:	b2ed      	uxtb	r5, r5
 800495a:	0028      	movs	r0, r5
 800495c:	f7ff ffd0 	bl	8004900 <spi_txrx>
	crc = crc7_one(crc, arg >> 16);
 8004960:	0029      	movs	r1, r5
 8004962:	0030      	movs	r0, r6
 8004964:	f7ff ffbc 	bl	80048e0 <crc7_one>
 8004968:	0006      	movs	r6, r0
	spi_txrx(arg >> 8);
 800496a:	0a25      	lsrs	r5, r4, #8
 800496c:	b2ed      	uxtb	r5, r5
 800496e:	0028      	movs	r0, r5
 8004970:	f7ff ffc6 	bl	8004900 <spi_txrx>
	crc = crc7_one(crc, arg >> 8);
 8004974:	0029      	movs	r1, r5
 8004976:	0030      	movs	r0, r6
 8004978:	f7ff ffb2 	bl	80048e0 <crc7_one>
 800497c:	0005      	movs	r5, r0
	spi_txrx(arg);
 800497e:	b2e4      	uxtb	r4, r4
 8004980:	0020      	movs	r0, r4
 8004982:	f7ff ffbd 	bl	8004900 <spi_txrx>
	crc = crc7_one(crc, arg);
 8004986:	0021      	movs	r1, r4
 8004988:	0028      	movs	r0, r5
 800498a:	f7ff ffa9 	bl	80048e0 <crc7_one>
	//spi_txrx(0x95);
	spi_txrx(crc | 0x1);	/* crc7, for cmd0 */
 800498e:	2301      	movs	r3, #1
 8004990:	4318      	orrs	r0, r3
 8004992:	b2c0      	uxtb	r0, r0
 8004994:	f7ff ffb4 	bl	8004900 <spi_txrx>
}
 8004998:	bd70      	pop	{r4, r5, r6, pc}
	...

0800499c <sd_get_r1>:

static uint8_t sd_get_r1()
{
 800499c:	b510      	push	{r4, lr}
	int tries = 1000;
	uint8_t r;

	while (tries--) {
 800499e:	4c05      	ldr	r4, [pc, #20]	; (80049b4 <sd_get_r1+0x18>)
 80049a0:	3c01      	subs	r4, #1
		r = spi_txrx(0xff);
 80049a2:	20ff      	movs	r0, #255	; 0xff
	while (tries--) {
 80049a4:	2c00      	cmp	r4, #0
 80049a6:	d003      	beq.n	80049b0 <sd_get_r1+0x14>
		r = spi_txrx(0xff);
 80049a8:	f7ff ffaa 	bl	8004900 <spi_txrx>
		if ((r & 0x80) == 0)
 80049ac:	0603      	lsls	r3, r0, #24
 80049ae:	d4f7      	bmi.n	80049a0 <sd_get_r1+0x4>
			return r;
	}
	return 0xff;
}
 80049b0:	bd10      	pop	{r4, pc}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	000003e9 	.word	0x000003e9

080049b8 <sd_nec>:


/* Nec (=Ncr? which is limited to [0,8]) dummy bytes before lowering CS,
 * as described in sandisk doc, 5.4. */
static void sd_nec()
{
 80049b8:	b510      	push	{r4, lr}
 80049ba:	2408      	movs	r4, #8
	int i;
	for (i=0; i<8; i++)
		spi_txrx(0xff);
 80049bc:	20ff      	movs	r0, #255	; 0xff
	for (i=0; i<8; i++)
 80049be:	3c01      	subs	r4, #1
		spi_txrx(0xff);
 80049c0:	f7ff ff9e 	bl	8004900 <spi_txrx>
	for (i=0; i<8; i++)
 80049c4:	2c00      	cmp	r4, #0
 80049c6:	d1f9      	bne.n	80049bc <sd_nec+0x4>
}
 80049c8:	bd10      	pop	{r4, pc}

080049ca <sd_get_r7>:
{
 80049ca:	b570      	push	{r4, r5, r6, lr}
 80049cc:	0006      	movs	r6, r0
	r = sd_get_r1();
 80049ce:	f7ff ffe5 	bl	800499c <sd_get_r1>
 80049d2:	0005      	movs	r5, r0
	if (r != 0x01)
 80049d4:	2801      	cmp	r0, #1
 80049d6:	d113      	bne.n	8004a00 <sd_get_r7+0x36>
	r = spi_txrx(0xff) << 24;
 80049d8:	20ff      	movs	r0, #255	; 0xff
 80049da:	f7ff ff91 	bl	8004900 <spi_txrx>
 80049de:	0004      	movs	r4, r0
	r |= spi_txrx(0xff) << 16;
 80049e0:	20ff      	movs	r0, #255	; 0xff
 80049e2:	f7ff ff8d 	bl	8004900 <spi_txrx>
	r = spi_txrx(0xff) << 24;
 80049e6:	0624      	lsls	r4, r4, #24
	r |= spi_txrx(0xff) << 16;
 80049e8:	0400      	lsls	r0, r0, #16
 80049ea:	4304      	orrs	r4, r0
	r |= spi_txrx(0xff) << 8;
 80049ec:	20ff      	movs	r0, #255	; 0xff
 80049ee:	f7ff ff87 	bl	8004900 <spi_txrx>
 80049f2:	0200      	lsls	r0, r0, #8
 80049f4:	4304      	orrs	r4, r0
	r |= spi_txrx(0xff);
 80049f6:	20ff      	movs	r0, #255	; 0xff
 80049f8:	f7ff ff82 	bl	8004900 <spi_txrx>
 80049fc:	4320      	orrs	r0, r4
	*r7 = r;
 80049fe:	6030      	str	r0, [r6, #0]
}
 8004a00:	0028      	movs	r0, r5
 8004a02:	bd70      	pop	{r4, r5, r6, pc}

08004a04 <sd_get_data.constprop.0>:

	return 0;
}

/* 0xfe marks data start, then len bytes of data and crc16 */
static int sd_get_data(hwif *hw, uint8_t *buf, int len)
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	0006      	movs	r6, r0
 8004a08:	000c      	movs	r4, r1
 8004a0a:	4d0c      	ldr	r5, [pc, #48]	; (8004a3c <sd_get_data.constprop.0+0x38>)
	uint8_t r;
	uint16_t _crc16;
	uint16_t calc_crc;
	int i;

	while (tries--) {
 8004a0c:	3d01      	subs	r5, #1
 8004a0e:	2d00      	cmp	r5, #0
 8004a10:	d102      	bne.n	8004a18 <sd_get_data.constprop.0+0x14>
		r = spi_txrx(0xff);
		if (r == 0xfe)
			break;
	}
	if (tries < 0)
		return -1;
 8004a12:	2001      	movs	r0, #1
 8004a14:	4240      	negs	r0, r0
	//if (_crc16 != calc_crc) {
	//	return -1;
	//}

	return 0;
}
 8004a16:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 8004a18:	20ff      	movs	r0, #255	; 0xff
 8004a1a:	f7ff ff71 	bl	8004900 <spi_txrx>
		if (r == 0xfe)
 8004a1e:	28fe      	cmp	r0, #254	; 0xfe
 8004a20:	d1f4      	bne.n	8004a0c <sd_get_data.constprop.0+0x8>
	dma_complete = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	4d06      	ldr	r5, [pc, #24]	; (8004a40 <sd_get_data.constprop.0+0x3c>)
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 8004a26:	0031      	movs	r1, r6
 8004a28:	4806      	ldr	r0, [pc, #24]	; (8004a44 <sd_get_data.constprop.0+0x40>)
 8004a2a:	b2a2      	uxth	r2, r4
	dma_complete = 0;
 8004a2c:	702b      	strb	r3, [r5, #0]
	HAL_SPI_Receive_DMA(&FAT_SD_SPI, buf, len);
 8004a2e:	f7ff fa99 	bl	8003f64 <HAL_SPI_Receive_DMA>
	while (dma_complete == 0);
 8004a32:	782b      	ldrb	r3, [r5, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0fc      	beq.n	8004a32 <sd_get_data.constprop.0+0x2e>
 8004a38:	2000      	movs	r0, #0
 8004a3a:	e7ec      	b.n	8004a16 <sd_get_data.constprop.0+0x12>
 8004a3c:	00004e21 	.word	0x00004e21
 8004a40:	20000ca4 	.word	0x20000ca4
 8004a44:	20000190 	.word	0x20000190

08004a48 <sd_readsector>:
	return 0;
}


static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
{
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	0005      	movs	r5, r0
 8004a4c:	000c      	movs	r4, r1
	int r;

	spi_cs_low();
 8004a4e:	20a0      	movs	r0, #160	; 0xa0
 8004a50:	2180      	movs	r1, #128	; 0x80
{
 8004a52:	0016      	movs	r6, r2
	spi_cs_low();
 8004a54:	0209      	lsls	r1, r1, #8
 8004a56:	2200      	movs	r2, #0
 8004a58:	05c0      	lsls	r0, r0, #23
 8004a5a:	f7fe fbcd 	bl	80031f8 <HAL_GPIO_WritePin>
	if (hw->capabilities & CAP_SDHC)
 8004a5e:	68eb      	ldr	r3, [r5, #12]
		sd_cmd(17, address); /* read single block */
 8004a60:	0021      	movs	r1, r4
	if (hw->capabilities & CAP_SDHC)
 8004a62:	079b      	lsls	r3, r3, #30
 8004a64:	d400      	bmi.n	8004a68 <sd_readsector+0x20>
	else
		sd_cmd(17, address*512); /* read single block */
 8004a66:	0261      	lsls	r1, r4, #9
 8004a68:	2011      	movs	r0, #17
 8004a6a:	f7ff ff5f 	bl	800492c <sd_cmd>

	r = sd_get_r1();
 8004a6e:	f7ff ff95 	bl	800499c <sd_get_r1>
	if (r == 0xff) {
 8004a72:	28ff      	cmp	r0, #255	; 0xff
 8004a74:	d109      	bne.n	8004a8a <sd_readsector+0x42>
		spi_cs_high();
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	20a0      	movs	r0, #160	; 0xa0
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	05c0      	lsls	r0, r0, #23
 8004a7e:	0209      	lsls	r1, r1, #8
 8004a80:	f7fe fbba 	bl	80031f8 <HAL_GPIO_WritePin>
		r = -1;
 8004a84:	2001      	movs	r0, #1

	r = sd_get_data(hw, buf, 512);
	sd_nec();
	spi_cs_high();
	if (r == -1) {
		r = -3;
 8004a86:	4240      	negs	r0, r0
	}

	return 0;
 fail:
	return r;
}
 8004a88:	bd70      	pop	{r4, r5, r6, pc}
	if (r & 0xfe) {
 8004a8a:	2501      	movs	r5, #1
 8004a8c:	43a8      	bics	r0, r5
 8004a8e:	b2c4      	uxtb	r4, r0
 8004a90:	2c00      	cmp	r4, #0
 8004a92:	d008      	beq.n	8004aa6 <sd_readsector+0x5e>
		spi_cs_high();
 8004a94:	2180      	movs	r1, #128	; 0x80
 8004a96:	20a0      	movs	r0, #160	; 0xa0
 8004a98:	002a      	movs	r2, r5
 8004a9a:	05c0      	lsls	r0, r0, #23
 8004a9c:	0209      	lsls	r1, r1, #8
 8004a9e:	f7fe fbab 	bl	80031f8 <HAL_GPIO_WritePin>
		r = -2;
 8004aa2:	2002      	movs	r0, #2
 8004aa4:	e7ef      	b.n	8004a86 <sd_readsector+0x3e>
	r = sd_get_data(hw, buf, 512);
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	0030      	movs	r0, r6
 8004aaa:	0089      	lsls	r1, r1, #2
 8004aac:	f7ff ffaa 	bl	8004a04 <sd_get_data.constprop.0>
 8004ab0:	0006      	movs	r6, r0
	sd_nec();
 8004ab2:	f7ff ff81 	bl	80049b8 <sd_nec>
	spi_cs_high();
 8004ab6:	2180      	movs	r1, #128	; 0x80
 8004ab8:	20a0      	movs	r0, #160	; 0xa0
 8004aba:	002a      	movs	r2, r5
 8004abc:	05c0      	lsls	r0, r0, #23
 8004abe:	0209      	lsls	r1, r1, #8
 8004ac0:	f7fe fb9a 	bl	80031f8 <HAL_GPIO_WritePin>
	return 0;
 8004ac4:	0020      	movs	r0, r4
	if (r == -1) {
 8004ac6:	3601      	adds	r6, #1
 8004ac8:	d1de      	bne.n	8004a88 <sd_readsector+0x40>
		r = -3;
 8004aca:	2003      	movs	r0, #3
 8004acc:	e7db      	b.n	8004a86 <sd_readsector+0x3e>
	...

08004ad0 <sd_read_status.constprop.0.isra.0>:
	spi_cs_low();
 8004ad0:	2180      	movs	r1, #128	; 0x80
 8004ad2:	20a0      	movs	r0, #160	; 0xa0
static int sd_read_status(hwif *hw)
 8004ad4:	b510      	push	{r4, lr}
	spi_cs_low();
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	0209      	lsls	r1, r1, #8
 8004ada:	05c0      	lsls	r0, r0, #23
 8004adc:	f7fe fb8c 	bl	80031f8 <HAL_GPIO_WritePin>
	sd_cmd(13, 0);
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	200d      	movs	r0, #13
 8004ae4:	f7ff ff22 	bl	800492c <sd_cmd>
 8004ae8:	4c0b      	ldr	r4, [pc, #44]	; (8004b18 <sd_read_status.constprop.0.isra.0+0x48>)
	while (tries--) {
 8004aea:	3c01      	subs	r4, #1
 8004aec:	2c00      	cmp	r4, #0
 8004aee:	d109      	bne.n	8004b04 <sd_read_status.constprop.0.isra.0+0x34>
	sd_nec();
 8004af0:	f7ff ff62 	bl	80049b8 <sd_nec>
	spi_cs_high();
 8004af4:	2180      	movs	r1, #128	; 0x80
 8004af6:	20a0      	movs	r0, #160	; 0xa0
 8004af8:	2201      	movs	r2, #1
 8004afa:	0209      	lsls	r1, r1, #8
 8004afc:	05c0      	lsls	r0, r0, #23
 8004afe:	f7fe fb7b 	bl	80031f8 <HAL_GPIO_WritePin>
}
 8004b02:	bd10      	pop	{r4, pc}
		r = spi_txrx(0xff);
 8004b04:	20ff      	movs	r0, #255	; 0xff
 8004b06:	f7ff fefb 	bl	8004900 <spi_txrx>
		if ((r & 0x80) == 0)
 8004b0a:	0600      	lsls	r0, r0, #24
 8004b0c:	d4ed      	bmi.n	8004aea <sd_read_status.constprop.0.isra.0+0x1a>
	r = r<<8 | spi_txrx(0xff);
 8004b0e:	20ff      	movs	r0, #255	; 0xff
 8004b10:	f7ff fef6 	bl	8004900 <spi_txrx>
	return r;
 8004b14:	e7ec      	b.n	8004af0 <sd_read_status.constprop.0.isra.0+0x20>
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	000003e9 	.word	0x000003e9

08004b1c <sd_init>:
	hw->capabilities = 0;
 8004b1c:	2300      	movs	r3, #0
{
 8004b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
	hw->capabilities = 0;
 8004b20:	60c3      	str	r3, [r0, #12]
{
 8004b22:	0004      	movs	r4, r0
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8004b24:	489b      	ldr	r0, [pc, #620]	; (8004d94 <sd_init+0x278>)
 8004b26:	3320      	adds	r3, #32
{
 8004b28:	b085      	sub	sp, #20
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8004b2a:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8004b2c:	f7ff f83a 	bl	8003ba4 <HAL_SPI_Init>
	spi_cs_high();
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	20a0      	movs	r0, #160	; 0xa0
 8004b34:	2201      	movs	r2, #1
 8004b36:	0209      	lsls	r1, r1, #8
 8004b38:	05c0      	lsls	r0, r0, #23
 8004b3a:	f7fe fb5d 	bl	80031f8 <HAL_GPIO_WritePin>
 8004b3e:	260a      	movs	r6, #10
		spi_txrx(0xff);
 8004b40:	20ff      	movs	r0, #255	; 0xff
	for (i=0; i<10; i++)
 8004b42:	3e01      	subs	r6, #1
		spi_txrx(0xff);
 8004b44:	f7ff fedc 	bl	8004900 <spi_txrx>
	for (i=0; i<10; i++)
 8004b48:	2e00      	cmp	r6, #0
 8004b4a:	d1f9      	bne.n	8004b40 <sd_init+0x24>
	spi_cs_low();
 8004b4c:	2180      	movs	r1, #128	; 0x80
 8004b4e:	20a0      	movs	r0, #160	; 0xa0
 8004b50:	0032      	movs	r2, r6
 8004b52:	0209      	lsls	r1, r1, #8
 8004b54:	05c0      	lsls	r0, r0, #23
 8004b56:	f7fe fb4f 	bl	80031f8 <HAL_GPIO_WritePin>
	sd_cmd(0, 0);
 8004b5a:	0031      	movs	r1, r6
 8004b5c:	0030      	movs	r0, r6
 8004b5e:	f7ff fee5 	bl	800492c <sd_cmd>
	r = sd_get_r1();
 8004b62:	f7ff ff1b 	bl	800499c <sd_get_r1>
 8004b66:	0005      	movs	r5, r0
	sd_nec();
 8004b68:	f7ff ff26 	bl	80049b8 <sd_nec>
	spi_cs_high();
 8004b6c:	2180      	movs	r1, #128	; 0x80
 8004b6e:	20a0      	movs	r0, #160	; 0xa0
 8004b70:	2201      	movs	r2, #1
 8004b72:	0209      	lsls	r1, r1, #8
 8004b74:	05c0      	lsls	r0, r0, #23
 8004b76:	f7fe fb3f 	bl	80031f8 <HAL_GPIO_WritePin>
	if (r == 0xff)
 8004b7a:	2dff      	cmp	r5, #255	; 0xff
 8004b7c:	d104      	bne.n	8004b88 <sd_init+0x6c>
	return -1;
 8004b7e:	2501      	movs	r5, #1
	return -2;
 8004b80:	426d      	negs	r5, r5
}
 8004b82:	0028      	movs	r0, r5
 8004b84:	b005      	add	sp, #20
 8004b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (r != 0x01) {
 8004b88:	2d01      	cmp	r5, #1
 8004b8a:	d001      	beq.n	8004b90 <sd_init+0x74>
	return -2;
 8004b8c:	2502      	movs	r5, #2
 8004b8e:	e7f7      	b.n	8004b80 <sd_init+0x64>
	spi_cs_low();
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	20a0      	movs	r0, #160	; 0xa0
 8004b94:	0032      	movs	r2, r6
 8004b96:	0209      	lsls	r1, r1, #8
 8004b98:	05c0      	lsls	r0, r0, #23
 8004b9a:	f7fe fb2d 	bl	80031f8 <HAL_GPIO_WritePin>
	sd_cmd(8, 0x1aa /* VHS = 1 */);
 8004b9e:	21d5      	movs	r1, #213	; 0xd5
 8004ba0:	2008      	movs	r0, #8
 8004ba2:	0049      	lsls	r1, r1, #1
 8004ba4:	f7ff fec2 	bl	800492c <sd_cmd>
	r = sd_get_r7(&r7);
 8004ba8:	a802      	add	r0, sp, #8
 8004baa:	f7ff ff0e 	bl	80049ca <sd_get_r7>
 8004bae:	0006      	movs	r6, r0
	sd_nec();
 8004bb0:	f7ff ff02 	bl	80049b8 <sd_nec>
	spi_cs_high();
 8004bb4:	2180      	movs	r1, #128	; 0x80
 8004bb6:	20a0      	movs	r0, #160	; 0xa0
 8004bb8:	002a      	movs	r2, r5
 8004bba:	0209      	lsls	r1, r1, #8
 8004bbc:	05c0      	lsls	r0, r0, #23
 8004bbe:	f7fe fb1b 	bl	80031f8 <HAL_GPIO_WritePin>
	hw->capabilities |= CAP_VER2_00;
 8004bc2:	002a      	movs	r2, r5
 8004bc4:	68e3      	ldr	r3, [r4, #12]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	60e2      	str	r2, [r4, #12]
	if (r == 0xff)
 8004bca:	2eff      	cmp	r6, #255	; 0xff
 8004bcc:	d0d7      	beq.n	8004b7e <sd_init+0x62>
	if (r == 0x01)
 8004bce:	2e01      	cmp	r6, #1
 8004bd0:	d003      	beq.n	8004bda <sd_init+0xbe>
	else if (r & 0x4) {
 8004bd2:	0776      	lsls	r6, r6, #29
 8004bd4:	d5da      	bpl.n	8004b8c <sd_init+0x70>
		hw->capabilities &= ~CAP_VER2_00;
 8004bd6:	43ab      	bics	r3, r5
 8004bd8:	60e3      	str	r3, [r4, #12]
	spi_cs_low();
 8004bda:	2180      	movs	r1, #128	; 0x80
 8004bdc:	20a0      	movs	r0, #160	; 0xa0
 8004bde:	2200      	movs	r2, #0
 8004be0:	0209      	lsls	r1, r1, #8
 8004be2:	05c0      	lsls	r0, r0, #23
 8004be4:	f7fe fb08 	bl	80031f8 <HAL_GPIO_WritePin>
	sd_cmd(58, 0);
 8004be8:	2100      	movs	r1, #0
 8004bea:	203a      	movs	r0, #58	; 0x3a
 8004bec:	f7ff fe9e 	bl	800492c <sd_cmd>
	r = sd_get_r3(&r3);
 8004bf0:	a803      	add	r0, sp, #12
 8004bf2:	f7ff feea 	bl	80049ca <sd_get_r7>
 8004bf6:	0005      	movs	r5, r0
	sd_nec();
 8004bf8:	f7ff fede 	bl	80049b8 <sd_nec>
	spi_cs_high();
 8004bfc:	2180      	movs	r1, #128	; 0x80
 8004bfe:	20a0      	movs	r0, #160	; 0xa0
 8004c00:	2201      	movs	r2, #1
 8004c02:	0209      	lsls	r1, r1, #8
 8004c04:	05c0      	lsls	r0, r0, #23
 8004c06:	f7fe faf7 	bl	80031f8 <HAL_GPIO_WritePin>
	if (r == 0xff)
 8004c0a:	2dff      	cmp	r5, #255	; 0xff
 8004c0c:	d0b7      	beq.n	8004b7e <sd_init+0x62>
	if (r != 0x01 && !(r & 0x4)) { /* allow it to not be implemented - old cards */
 8004c0e:	2d01      	cmp	r5, #1
 8004c10:	d001      	beq.n	8004c16 <sd_init+0xfa>
 8004c12:	076d      	lsls	r5, r5, #29
 8004c14:	d5ba      	bpl.n	8004b8c <sd_init+0x70>
	if (hw->capabilities & CAP_VER2_00)
 8004c16:	2280      	movs	r2, #128	; 0x80
		spi_cs_low();
 8004c18:	27a0      	movs	r7, #160	; 0xa0
	if (hw->capabilities & CAP_VER2_00)
 8004c1a:	68e3      	ldr	r3, [r4, #12]
 8004c1c:	05d2      	lsls	r2, r2, #23
 8004c1e:	079b      	lsls	r3, r3, #30
 8004c20:	4013      	ands	r3, r2
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	4b5c      	ldr	r3, [pc, #368]	; (8004d98 <sd_init+0x27c>)
		spi_cs_low();
 8004c26:	05ff      	lsls	r7, r7, #23
	if (hw->capabilities & CAP_VER2_00)
 8004c28:	9300      	str	r3, [sp, #0]
		spi_cs_low();
 8004c2a:	2180      	movs	r1, #128	; 0x80
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	0038      	movs	r0, r7
 8004c30:	0209      	lsls	r1, r1, #8
 8004c32:	f7fe fae1 	bl	80031f8 <HAL_GPIO_WritePin>
		sd_cmd(55, 0);
 8004c36:	2100      	movs	r1, #0
 8004c38:	2037      	movs	r0, #55	; 0x37
 8004c3a:	f7ff fe77 	bl	800492c <sd_cmd>
		r = sd_get_r1();
 8004c3e:	f7ff fead 	bl	800499c <sd_get_r1>
 8004c42:	0005      	movs	r5, r0
		sd_nec();
 8004c44:	f7ff feb8 	bl	80049b8 <sd_nec>
		spi_cs_high();
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	0038      	movs	r0, r7
 8004c4e:	0209      	lsls	r1, r1, #8
 8004c50:	f7fe fad2 	bl	80031f8 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8004c54:	2dff      	cmp	r5, #255	; 0xff
 8004c56:	d100      	bne.n	8004c5a <sd_init+0x13e>
 8004c58:	e791      	b.n	8004b7e <sd_init+0x62>
		if (r & 0xfe) {
 8004c5a:	2601      	movs	r6, #1
 8004c5c:	43b5      	bics	r5, r6
 8004c5e:	b2ea      	uxtb	r2, r5
 8004c60:	2a00      	cmp	r2, #0
 8004c62:	d193      	bne.n	8004b8c <sd_init+0x70>
		spi_cs_low();
 8004c64:	2180      	movs	r1, #128	; 0x80
 8004c66:	0038      	movs	r0, r7
 8004c68:	0209      	lsls	r1, r1, #8
 8004c6a:	f7fe fac5 	bl	80031f8 <HAL_GPIO_WritePin>
		sd_cmd(41, hcs);
 8004c6e:	9901      	ldr	r1, [sp, #4]
 8004c70:	2029      	movs	r0, #41	; 0x29
 8004c72:	f7ff fe5b 	bl	800492c <sd_cmd>
		r = sd_get_r1();
 8004c76:	f7ff fe91 	bl	800499c <sd_get_r1>
 8004c7a:	0005      	movs	r5, r0
		sd_nec();
 8004c7c:	f7ff fe9c 	bl	80049b8 <sd_nec>
		spi_cs_high();
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	0032      	movs	r2, r6
 8004c84:	0038      	movs	r0, r7
 8004c86:	0209      	lsls	r1, r1, #8
 8004c88:	f7fe fab6 	bl	80031f8 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8004c8c:	2dff      	cmp	r5, #255	; 0xff
 8004c8e:	d100      	bne.n	8004c92 <sd_init+0x176>
 8004c90:	e775      	b.n	8004b7e <sd_init+0x62>
		if (r & 0xfe) {
 8004c92:	002b      	movs	r3, r5
 8004c94:	43b3      	bics	r3, r6
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d000      	beq.n	8004c9e <sd_init+0x182>
 8004c9c:	e776      	b.n	8004b8c <sd_init+0x70>
	} while (r != 0 && tries--);
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	d023      	beq.n	8004cea <sd_init+0x1ce>
 8004ca2:	9b00      	ldr	r3, [sp, #0]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1be      	bne.n	8004c2a <sd_init+0x10e>
 8004cac:	e76e      	b.n	8004b8c <sd_init+0x70>
		spi_cs_low();
 8004cae:	2180      	movs	r1, #128	; 0x80
 8004cb0:	20a0      	movs	r0, #160	; 0xa0
 8004cb2:	0209      	lsls	r1, r1, #8
 8004cb4:	05c0      	lsls	r0, r0, #23
 8004cb6:	f7fe fa9f 	bl	80031f8 <HAL_GPIO_WritePin>
		sd_cmd(16, 512);
 8004cba:	2180      	movs	r1, #128	; 0x80
 8004cbc:	2010      	movs	r0, #16
 8004cbe:	0089      	lsls	r1, r1, #2
 8004cc0:	f7ff fe34 	bl	800492c <sd_cmd>
		r = sd_get_r1();
 8004cc4:	f7ff fe6a 	bl	800499c <sd_get_r1>
 8004cc8:	0004      	movs	r4, r0
		sd_nec();
 8004cca:	f7ff fe75 	bl	80049b8 <sd_nec>
		spi_cs_high();
 8004cce:	2180      	movs	r1, #128	; 0x80
 8004cd0:	20a0      	movs	r0, #160	; 0xa0
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	0209      	lsls	r1, r1, #8
 8004cd6:	05c0      	lsls	r0, r0, #23
 8004cd8:	f7fe fa8e 	bl	80031f8 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8004cdc:	2cff      	cmp	r4, #255	; 0xff
 8004cde:	d100      	bne.n	8004ce2 <sd_init+0x1c6>
 8004ce0:	e74d      	b.n	8004b7e <sd_init+0x62>
		if (r & 0xfe) {
 8004ce2:	23fe      	movs	r3, #254	; 0xfe
 8004ce4:	421c      	tst	r4, r3
 8004ce6:	d030      	beq.n	8004d4a <sd_init+0x22e>
 8004ce8:	e750      	b.n	8004b8c <sd_init+0x70>
	if (hw->capabilities & CAP_VER2_00) {
 8004cea:	68e3      	ldr	r3, [r4, #12]
 8004cec:	4233      	tst	r3, r6
 8004cee:	d026      	beq.n	8004d3e <sd_init+0x222>
		spi_cs_low();
 8004cf0:	2180      	movs	r1, #128	; 0x80
 8004cf2:	20a0      	movs	r0, #160	; 0xa0
 8004cf4:	002a      	movs	r2, r5
 8004cf6:	0209      	lsls	r1, r1, #8
 8004cf8:	05c0      	lsls	r0, r0, #23
 8004cfa:	f7fe fa7d 	bl	80031f8 <HAL_GPIO_WritePin>
		sd_cmd(58, 0);
 8004cfe:	0029      	movs	r1, r5
 8004d00:	203a      	movs	r0, #58	; 0x3a
 8004d02:	f7ff fe13 	bl	800492c <sd_cmd>
		r = sd_get_r3(&r3);
 8004d06:	a803      	add	r0, sp, #12
 8004d08:	f7ff fe5f 	bl	80049ca <sd_get_r7>
 8004d0c:	0007      	movs	r7, r0
		sd_nec();
 8004d0e:	f7ff fe53 	bl	80049b8 <sd_nec>
		spi_cs_high();
 8004d12:	2180      	movs	r1, #128	; 0x80
 8004d14:	20a0      	movs	r0, #160	; 0xa0
 8004d16:	0032      	movs	r2, r6
 8004d18:	0209      	lsls	r1, r1, #8
 8004d1a:	05c0      	lsls	r0, r0, #23
 8004d1c:	f7fe fa6c 	bl	80031f8 <HAL_GPIO_WritePin>
		if (r == 0xff)
 8004d20:	2fff      	cmp	r7, #255	; 0xff
 8004d22:	d100      	bne.n	8004d26 <sd_init+0x20a>
 8004d24:	e72b      	b.n	8004b7e <sd_init+0x62>
		if (r & 0xfe) {
 8004d26:	43b7      	bics	r7, r6
 8004d28:	b2ff      	uxtb	r7, r7
 8004d2a:	2f00      	cmp	r7, #0
 8004d2c:	d000      	beq.n	8004d30 <sd_init+0x214>
 8004d2e:	e72d      	b.n	8004b8c <sd_init+0x70>
			if (r3>>30 & 1) {
 8004d30:	9b03      	ldr	r3, [sp, #12]
				hw->capabilities |= CAP_SDHC;
 8004d32:	68e2      	ldr	r2, [r4, #12]
			if (r3>>30 & 1) {
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	d502      	bpl.n	8004d3e <sd_init+0x222>
				hw->capabilities |= CAP_SDHC;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60e3      	str	r3, [r4, #12]
	if ((hw->capabilities & CAP_SDHC) == 0) {
 8004d3e:	68e1      	ldr	r1, [r4, #12]
 8004d40:	2302      	movs	r3, #2
 8004d42:	000a      	movs	r2, r1
 8004d44:	401a      	ands	r2, r3
 8004d46:	4219      	tst	r1, r3
 8004d48:	d0b1      	beq.n	8004cae <sd_init+0x192>
	spi_cs_low();
 8004d4a:	2180      	movs	r1, #128	; 0x80
 8004d4c:	20a0      	movs	r0, #160	; 0xa0
 8004d4e:	2200      	movs	r2, #0
 8004d50:	0209      	lsls	r1, r1, #8
 8004d52:	05c0      	lsls	r0, r0, #23
 8004d54:	f7fe fa50 	bl	80031f8 <HAL_GPIO_WritePin>
	sd_cmd(59, 0);
 8004d58:	2100      	movs	r1, #0
 8004d5a:	203b      	movs	r0, #59	; 0x3b
 8004d5c:	f7ff fde6 	bl	800492c <sd_cmd>
	r = sd_get_r1();
 8004d60:	f7ff fe1c 	bl	800499c <sd_get_r1>
 8004d64:	0004      	movs	r4, r0
	sd_nec();
 8004d66:	f7ff fe27 	bl	80049b8 <sd_nec>
	spi_cs_high();
 8004d6a:	2180      	movs	r1, #128	; 0x80
 8004d6c:	20a0      	movs	r0, #160	; 0xa0
 8004d6e:	2201      	movs	r2, #1
 8004d70:	0209      	lsls	r1, r1, #8
 8004d72:	05c0      	lsls	r0, r0, #23
 8004d74:	f7fe fa40 	bl	80031f8 <HAL_GPIO_WritePin>
	if (r == 0xff)
 8004d78:	2cff      	cmp	r4, #255	; 0xff
 8004d7a:	d100      	bne.n	8004d7e <sd_init+0x262>
 8004d7c:	e6ff      	b.n	8004b7e <sd_init+0x62>
	if (r & 0xfe) {
 8004d7e:	23fe      	movs	r3, #254	; 0xfe
 8004d80:	0022      	movs	r2, r4
 8004d82:	401a      	ands	r2, r3
 8004d84:	421c      	tst	r4, r3
 8004d86:	d000      	beq.n	8004d8a <sd_init+0x26e>
 8004d88:	e700      	b.n	8004b8c <sd_init+0x70>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8004d8a:	4802      	ldr	r0, [pc, #8]	; (8004d94 <sd_init+0x278>)
 8004d8c:	61c2      	str	r2, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8004d8e:	f7fe ff09 	bl	8003ba4 <HAL_SPI_Init>
}
 8004d92:	e6f6      	b.n	8004b82 <sd_init+0x66>
 8004d94:	20000190 	.word	0x20000190
 8004d98:	000003e9 	.word	0x000003e9

08004d9c <hwif_init>:


/*** public API - on top of sd/spi code ***/

int hwif_init(hwif* hw)
{
 8004d9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int tries = 10;

	if (hw->initialized)
		return 0;
 8004d9e:	2500      	movs	r5, #0
	if (hw->initialized)
 8004da0:	6803      	ldr	r3, [r0, #0]
{
 8004da2:	0004      	movs	r4, r0
	if (hw->initialized)
 8004da4:	42ab      	cmp	r3, r5
 8004da6:	d10a      	bne.n	8004dbe <hwif_init+0x22>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8004da8:	2320      	movs	r3, #32
 8004daa:	4850      	ldr	r0, [pc, #320]	; (8004eec <hwif_init+0x150>)
}
 8004dac:	260b      	movs	r6, #11
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8004dae:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8004db0:	f7fe fef8 	bl	8003ba4 <HAL_SPI_Init>

	spi_init();

	while (tries--) {
 8004db4:	3e01      	subs	r6, #1
 8004db6:	2e00      	cmp	r6, #0
 8004db8:	d104      	bne.n	8004dc4 <hwif_init+0x28>
	/* read status register */
	sd_read_status(hw);

	sd_read_cid(hw);
	if (sd_read_csd(hw) != 0)
		return -1;
 8004dba:	2501      	movs	r5, #1
 8004dbc:	426d      	negs	r5, r5

	hw->initialized = 1;
	return 0;
}
 8004dbe:	0028      	movs	r0, r5
 8004dc0:	b004      	add	sp, #16
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_init(hw) == 0)
 8004dc4:	0020      	movs	r0, r4
 8004dc6:	f7ff fea9 	bl	8004b1c <sd_init>
 8004dca:	1e05      	subs	r5, r0, #0
 8004dcc:	d1f2      	bne.n	8004db4 <hwif_init+0x18>
	sd_read_status(hw);
 8004dce:	f7ff fe7f 	bl	8004ad0 <sd_read_status.constprop.0.isra.0>
	spi_cs_low();
 8004dd2:	2180      	movs	r1, #128	; 0x80
 8004dd4:	20a0      	movs	r0, #160	; 0xa0
 8004dd6:	002a      	movs	r2, r5
 8004dd8:	0209      	lsls	r1, r1, #8
 8004dda:	05c0      	lsls	r0, r0, #23
 8004ddc:	f7fe fa0c 	bl	80031f8 <HAL_GPIO_WritePin>
	sd_cmd(10, 0);
 8004de0:	0029      	movs	r1, r5
 8004de2:	200a      	movs	r0, #10
 8004de4:	f7ff fda2 	bl	800492c <sd_cmd>
	r = sd_get_r1();
 8004de8:	f7ff fdd8 	bl	800499c <sd_get_r1>
	if (r == 0xff) {
 8004dec:	28ff      	cmp	r0, #255	; 0xff
 8004dee:	d11d      	bne.n	8004e2c <hwif_init+0x90>
		spi_cs_high();
 8004df0:	2201      	movs	r2, #1
	spi_cs_high();
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	20a0      	movs	r0, #160	; 0xa0
 8004df6:	0209      	lsls	r1, r1, #8
 8004df8:	05c0      	lsls	r0, r0, #23
 8004dfa:	f7fe f9fd 	bl	80031f8 <HAL_GPIO_WritePin>
	spi_cs_low();
 8004dfe:	2180      	movs	r1, #128	; 0x80
 8004e00:	20a0      	movs	r0, #160	; 0xa0
 8004e02:	2200      	movs	r2, #0
 8004e04:	0209      	lsls	r1, r1, #8
 8004e06:	05c0      	lsls	r0, r0, #23
 8004e08:	f7fe f9f6 	bl	80031f8 <HAL_GPIO_WritePin>
	sd_cmd(9, 0);
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	2009      	movs	r0, #9
 8004e10:	f7ff fd8c 	bl	800492c <sd_cmd>
	r = sd_get_r1();
 8004e14:	f7ff fdc2 	bl	800499c <sd_get_r1>
	if (r == 0xff) {
 8004e18:	28ff      	cmp	r0, #255	; 0xff
 8004e1a:	d114      	bne.n	8004e46 <hwif_init+0xaa>
		spi_cs_high();
 8004e1c:	2180      	movs	r1, #128	; 0x80
 8004e1e:	20a0      	movs	r0, #160	; 0xa0
 8004e20:	2201      	movs	r2, #1
 8004e22:	0209      	lsls	r1, r1, #8
 8004e24:	05c0      	lsls	r0, r0, #23
 8004e26:	f7fe f9e7 	bl	80031f8 <HAL_GPIO_WritePin>
 8004e2a:	e7c6      	b.n	8004dba <hwif_init+0x1e>
	if (r & 0xfe) {
 8004e2c:	2501      	movs	r5, #1
 8004e2e:	43a8      	bics	r0, r5
 8004e30:	b2c0      	uxtb	r0, r0
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d1dc      	bne.n	8004df0 <hwif_init+0x54>
	r = sd_get_data(hw, buf, 16);
 8004e36:	2110      	movs	r1, #16
 8004e38:	4668      	mov	r0, sp
 8004e3a:	f7ff fde3 	bl	8004a04 <sd_get_data.constprop.0>
	sd_nec();
 8004e3e:	f7ff fdbb 	bl	80049b8 <sd_nec>
	spi_cs_high();
 8004e42:	002a      	movs	r2, r5
 8004e44:	e7d5      	b.n	8004df2 <hwif_init+0x56>
	if (r & 0xfe) {
 8004e46:	2601      	movs	r6, #1
 8004e48:	43b0      	bics	r0, r6
 8004e4a:	b2c0      	uxtb	r0, r0
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d1e5      	bne.n	8004e1c <hwif_init+0x80>
	r = sd_get_data(hw, buf, 16);
 8004e50:	2110      	movs	r1, #16
 8004e52:	4668      	mov	r0, sp
 8004e54:	f7ff fdd6 	bl	8004a04 <sd_get_data.constprop.0>
 8004e58:	0005      	movs	r5, r0
	sd_nec();
 8004e5a:	f7ff fdad 	bl	80049b8 <sd_nec>
	spi_cs_high();
 8004e5e:	2180      	movs	r1, #128	; 0x80
 8004e60:	20a0      	movs	r0, #160	; 0xa0
 8004e62:	0032      	movs	r2, r6
 8004e64:	0209      	lsls	r1, r1, #8
 8004e66:	05c0      	lsls	r0, r0, #23
 8004e68:	f7fe f9c6 	bl	80031f8 <HAL_GPIO_WritePin>
	if (r == -1) {
 8004e6c:	1c6b      	adds	r3, r5, #1
 8004e6e:	d0a6      	beq.n	8004dbe <hwif_init+0x22>
	capacity = (((buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6)+1) << (2+(((buf[9]&3) << 1) | buf[10]>>7)) << ((buf[5] & 0xf) - 9);
 8004e70:	466b      	mov	r3, sp
 8004e72:	7a99      	ldrb	r1, [r3, #10]
 8004e74:	79da      	ldrb	r2, [r3, #7]
 8004e76:	7a1e      	ldrb	r6, [r3, #8]
 8004e78:	7a58      	ldrb	r0, [r3, #9]
	if ((buf[0] >> 6) + 1 == 1) {
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	099b      	lsrs	r3, r3, #6
 8004e7e:	d12a      	bne.n	8004ed6 <hwif_init+0x13a>
	capacity = (((buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6)+1) << (2+(((buf[9]&3) << 1) | buf[10]>>7)) << ((buf[5] & 0xf) - 9);
 8004e80:	466b      	mov	r3, sp
 8004e82:	799d      	ldrb	r5, [r3, #6]
 8004e84:	23c0      	movs	r3, #192	; 0xc0
 8004e86:	02ad      	lsls	r5, r5, #10
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	0092      	lsls	r2, r2, #2
 8004e8c:	09b6      	lsrs	r6, r6, #6
 8004e8e:	401d      	ands	r5, r3
 8004e90:	4332      	orrs	r2, r6
 8004e92:	432a      	orrs	r2, r5
 8004e94:	1c53      	adds	r3, r2, #1
 8004e96:	2206      	movs	r2, #6
 8004e98:	0040      	lsls	r0, r0, #1
 8004e9a:	4010      	ands	r0, r2
 8004e9c:	09ca      	lsrs	r2, r1, #7
 8004e9e:	4310      	orrs	r0, r2
 8004ea0:	466a      	mov	r2, sp
 8004ea2:	3002      	adds	r0, #2
 8004ea4:	4083      	lsls	r3, r0
 8004ea6:	200f      	movs	r0, #15
 8004ea8:	7952      	ldrb	r2, [r2, #5]
 8004eaa:	4002      	ands	r2, r0
 8004eac:	3a09      	subs	r2, #9
 8004eae:	4093      	lsls	r3, r2
	hw->sectors = capacity;
 8004eb0:	6063      	str	r3, [r4, #4]
	hw->erase_sectors = 1;
 8004eb2:	2301      	movs	r3, #1
	if (((buf[10]>>6)&1) == 0)
 8004eb4:	098a      	lsrs	r2, r1, #6
	hw->erase_sectors = 1;
 8004eb6:	60a3      	str	r3, [r4, #8]
	if (((buf[10]>>6)&1) == 0)
 8004eb8:	421a      	tst	r2, r3
 8004eba:	d108      	bne.n	8004ece <hwif_init+0x132>
		hw->erase_sectors = ((buf[10]&0x3f)<<1 | buf[11]>>7) + 1;
 8004ebc:	4099      	lsls	r1, r3
 8004ebe:	337d      	adds	r3, #125	; 0x7d
 8004ec0:	4019      	ands	r1, r3
 8004ec2:	466b      	mov	r3, sp
 8004ec4:	7adb      	ldrb	r3, [r3, #11]
 8004ec6:	09db      	lsrs	r3, r3, #7
 8004ec8:	4319      	orrs	r1, r3
 8004eca:	3101      	adds	r1, #1
 8004ecc:	60a1      	str	r1, [r4, #8]
	hw->initialized = 1;
 8004ece:	2301      	movs	r3, #1
	return 0;
 8004ed0:	2500      	movs	r5, #0
	hw->initialized = 1;
 8004ed2:	6023      	str	r3, [r4, #0]
	return 0;
 8004ed4:	e773      	b.n	8004dbe <hwif_init+0x22>
		hw->capabilities |= CAP_SDHC;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	68e5      	ldr	r5, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 8004eda:	0236      	lsls	r6, r6, #8
		hw->capabilities |= CAP_SDHC;
 8004edc:	432b      	orrs	r3, r5
 8004ede:	60e3      	str	r3, [r4, #12]
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 8004ee0:	0413      	lsls	r3, r2, #16
 8004ee2:	4333      	orrs	r3, r6
 8004ee4:	4303      	orrs	r3, r0
	capacity *= 1024; /* in 512 B sectors */
 8004ee6:	029b      	lsls	r3, r3, #10
 8004ee8:	e7e2      	b.n	8004eb0 <hwif_init+0x114>
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	20000190 	.word	0x20000190

08004ef0 <sd_read>:

int sd_read(hwif* hw, uint32_t address, uint8_t *buf)
{
 8004ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ef2:	0005      	movs	r5, r0
 8004ef4:	000e      	movs	r6, r1
 8004ef6:	0017      	movs	r7, r2
	int r;
	int tries = 10;

	r = sd_readsector(hw, address, buf);
 8004ef8:	f7ff fda6 	bl	8004a48 <sd_readsector>

	while (r < 0 && tries--) {
 8004efc:	230b      	movs	r3, #11
	r = sd_readsector(hw, address, buf);
 8004efe:	0004      	movs	r4, r0
	while (r < 0 && tries--) {
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	2c00      	cmp	r4, #0
 8004f04:	da04      	bge.n	8004f10 <sd_read+0x20>
 8004f06:	9b01      	ldr	r3, [sp, #4]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <sd_read+0x24>
		r = sd_readsector(hw, address, buf);
	}
	if (tries == -1)

	return r;
}
 8004f10:	0020      	movs	r0, r4
 8004f12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (sd_init(hw) != 0)
 8004f14:	0028      	movs	r0, r5
 8004f16:	f7ff fe01 	bl	8004b1c <sd_init>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d1f1      	bne.n	8004f02 <sd_read+0x12>
		sd_read_status(hw);
 8004f1e:	f7ff fdd7 	bl	8004ad0 <sd_read_status.constprop.0.isra.0>
		r = sd_readsector(hw, address, buf);
 8004f22:	003a      	movs	r2, r7
 8004f24:	0031      	movs	r1, r6
 8004f26:	0028      	movs	r0, r5
 8004f28:	f7ff fd8e 	bl	8004a48 <sd_readsector>
 8004f2c:	0004      	movs	r4, r0
 8004f2e:	e7e8      	b.n	8004f02 <sd_read+0x12>

08004f30 <HAL_SPI_RxCpltCallback>:

	return r;
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
    dma_complete = 1;
 8004f30:	2201      	movs	r2, #1
 8004f32:	4b01      	ldr	r3, [pc, #4]	; (8004f38 <HAL_SPI_RxCpltCallback+0x8>)
 8004f34:	701a      	strb	r2, [r3, #0]
	return;
}
 8004f36:	4770      	bx	lr
 8004f38:	20000ca4 	.word	0x20000ca4

08004f3c <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004f3c:	6802      	ldr	r2, [r0, #0]
 8004f3e:	1e13      	subs	r3, r2, #0
 8004f40:	d103      	bne.n	8004f4a <get_ldnumber+0xe>
	int vol = -1;
 8004f42:	2001      	movs	r0, #1
 8004f44:	4240      	negs	r0, r0
 8004f46:	e00e      	b.n	8004f66 <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004f48:	3301      	adds	r3, #1
 8004f4a:	7819      	ldrb	r1, [r3, #0]
 8004f4c:	291f      	cmp	r1, #31
 8004f4e:	d909      	bls.n	8004f64 <get_ldnumber+0x28>
 8004f50:	293a      	cmp	r1, #58	; 0x3a
 8004f52:	d1f9      	bne.n	8004f48 <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8004f54:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004f56:	428b      	cmp	r3, r1
 8004f58:	d1f3      	bne.n	8004f42 <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	2a30      	cmp	r2, #48	; 0x30
 8004f5e:	d1f0      	bne.n	8004f42 <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 8004f60:	3301      	adds	r3, #1
 8004f62:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004f64:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8004f66:	4770      	bx	lr

08004f68 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f68:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004f6a:	b570      	push	{r4, r5, r6, lr}
 8004f6c:	0004      	movs	r4, r0
 8004f6e:	000d      	movs	r5, r1
	FRESULT res = FR_OK;
 8004f70:	2000      	movs	r0, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f72:	428b      	cmp	r3, r1
 8004f74:	d00c      	beq.n	8004f90 <move_window+0x28>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f76:	000a      	movs	r2, r1
 8004f78:	0021      	movs	r1, r4
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	7860      	ldrb	r0, [r4, #1]
 8004f7e:	3128      	adds	r1, #40	; 0x28
 8004f80:	f7ff fc96 	bl	80048b0 <disk_read>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d002      	beq.n	8004f8e <move_window+0x26>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f88:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
 8004f8a:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f8c:	426d      	negs	r5, r5
			fs->winsect = sector;
 8004f8e:	6265      	str	r5, [r4, #36]	; 0x24
}
 8004f90:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f94 <check_fs>:
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004f94:	2300      	movs	r3, #0
{
 8004f96:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004f98:	7103      	strb	r3, [r0, #4]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	6243      	str	r3, [r0, #36]	; 0x24
{
 8004f9e:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004fa0:	f7ff ffe2 	bl	8004f68 <move_window>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d11c      	bne.n	8004fe2 <check_fs+0x4e>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004fa8:	4b10      	ldr	r3, [pc, #64]	; (8004fec <check_fs+0x58>)
 8004faa:	5ae2      	ldrh	r2, [r4, r3]
 8004fac:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <check_fs+0x5c>)
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d119      	bne.n	8004fe6 <check_fs+0x52>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004fb2:	0023      	movs	r3, r4
 8004fb4:	335e      	adds	r3, #94	; 0x5e
 8004fb6:	881a      	ldrh	r2, [r3, #0]
 8004fb8:	885b      	ldrh	r3, [r3, #2]
 8004fba:	041b      	lsls	r3, r3, #16
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <check_fs+0x60>)
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <check_fs+0x4c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004fc8:	347a      	adds	r4, #122	; 0x7a
 8004fca:	8860      	ldrh	r0, [r4, #2]
 8004fcc:	8823      	ldrh	r3, [r4, #0]
 8004fce:	0400      	lsls	r0, r0, #16
 8004fd0:	4318      	orrs	r0, r3
 8004fd2:	0200      	lsls	r0, r0, #8
 8004fd4:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <check_fs+0x64>)
 8004fd6:	0a00      	lsrs	r0, r0, #8
 8004fd8:	18c0      	adds	r0, r0, r3
 8004fda:	1e43      	subs	r3, r0, #1
 8004fdc:	4198      	sbcs	r0, r3
		return 3;
 8004fde:	b2c0      	uxtb	r0, r0
		return 0;

	return 1;
}
 8004fe0:	bd10      	pop	{r4, pc}
		return 3;
 8004fe2:	2003      	movs	r0, #3
 8004fe4:	e7fc      	b.n	8004fe0 <check_fs+0x4c>
		return 2;
 8004fe6:	2002      	movs	r0, #2
 8004fe8:	e7fa      	b.n	8004fe0 <check_fs+0x4c>
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	00000226 	.word	0x00000226
 8004ff0:	0000aa55 	.word	0x0000aa55
 8004ff4:	00544146 	.word	0x00544146
 8004ff8:	ffabbeba 	.word	0xffabbeba

08004ffc <find_volume.constprop.0>:
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 8004ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004ffe:	2300      	movs	r3, #0
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
 8005000:	0007      	movs	r7, r0
 8005002:	b08b      	sub	sp, #44	; 0x2c
 8005004:	0008      	movs	r0, r1
	*rfs = 0;
 8005006:	603b      	str	r3, [r7, #0]
	vol = get_ldnumber(path);
 8005008:	f7ff ff98 	bl	8004f3c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800500c:	250b      	movs	r5, #11
	vol = get_ldnumber(path);
 800500e:	1e06      	subs	r6, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 8005010:	db15      	blt.n	800503e <find_volume.constprop.0+0x42>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005012:	4b6f      	ldr	r3, [pc, #444]	; (80051d0 <find_volume.constprop.0+0x1d4>)
 8005014:	0082      	lsls	r2, r0, #2
 8005016:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005018:	3501      	adds	r5, #1
 800501a:	2c00      	cmp	r4, #0
 800501c:	d00f      	beq.n	800503e <find_volume.constprop.0+0x42>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */

	if (fs->fs_type) {					/* If the volume has been mounted */
 800501e:	7823      	ldrb	r3, [r4, #0]
	*rfs = fs;							/* Return pointer to the file system object */
 8005020:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10e      	bne.n	8005044 <find_volume.constprop.0+0x48>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005026:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005028:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800502a:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800502c:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800502e:	f7ff fc35 	bl	800489c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005032:	2601      	movs	r6, #1
 8005034:	0007      	movs	r7, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005036:	2503      	movs	r5, #3
 8005038:	4037      	ands	r7, r6
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800503a:	4230      	tst	r0, r6
 800503c:	d00b      	beq.n	8005056 <find_volume.constprop.0+0x5a>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 800503e:	0028      	movs	r0, r5
 8005040:	b00b      	add	sp, #44	; 0x2c
 8005042:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = disk_status(fs->drv);
 8005044:	7860      	ldrb	r0, [r4, #1]
 8005046:	f7ff fc21 	bl	800488c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800504a:	2301      	movs	r3, #1
 800504c:	0005      	movs	r5, r0
 800504e:	401d      	ands	r5, r3
 8005050:	4218      	tst	r0, r3
 8005052:	d1e8      	bne.n	8005026 <find_volume.constprop.0+0x2a>
 8005054:	e7f3      	b.n	800503e <find_volume.constprop.0+0x42>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005056:	0039      	movs	r1, r7
 8005058:	0020      	movs	r0, r4
 800505a:	f7ff ff9b 	bl	8004f94 <check_fs>
 800505e:	0005      	movs	r5, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005060:	2801      	cmp	r0, #1
 8005062:	d12c      	bne.n	80050be <find_volume.constprop.0+0xc2>
 8005064:	0023      	movs	r3, r4
 8005066:	4a5b      	ldr	r2, [pc, #364]	; (80051d4 <find_volume.constprop.0+0x1d8>)
 8005068:	33e7      	adds	r3, #231	; 0xe7
 800506a:	a906      	add	r1, sp, #24
 800506c:	33ff      	adds	r3, #255	; 0xff
 800506e:	18a0      	adds	r0, r4, r2
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005070:	2200      	movs	r2, #0
 8005072:	791e      	ldrb	r6, [r3, #4]
 8005074:	4296      	cmp	r6, r2
 8005076:	d009      	beq.n	800508c <find_volume.constprop.0+0x90>
 8005078:	7a5a      	ldrb	r2, [r3, #9]
 800507a:	7a1e      	ldrb	r6, [r3, #8]
 800507c:	0212      	lsls	r2, r2, #8
 800507e:	4332      	orrs	r2, r6
 8005080:	7a9e      	ldrb	r6, [r3, #10]
 8005082:	0436      	lsls	r6, r6, #16
 8005084:	4316      	orrs	r6, r2
 8005086:	7ada      	ldrb	r2, [r3, #11]
 8005088:	0612      	lsls	r2, r2, #24
 800508a:	4332      	orrs	r2, r6
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800508c:	3310      	adds	r3, #16
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800508e:	c104      	stmia	r1!, {r2}
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005090:	4283      	cmp	r3, r0
 8005092:	d1ed      	bne.n	8005070 <find_volume.constprop.0+0x74>
 8005094:	2600      	movs	r6, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005096:	2702      	movs	r7, #2
			bsect = br[i];
 8005098:	00b3      	lsls	r3, r6, #2
 800509a:	aa06      	add	r2, sp, #24
 800509c:	58d3      	ldr	r3, [r2, r3]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800509e:	0038      	movs	r0, r7
			bsect = br[i];
 80050a0:	9301      	str	r3, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <find_volume.constprop.0+0xb6>
 80050a6:	0019      	movs	r1, r3
 80050a8:	0020      	movs	r0, r4
 80050aa:	f7ff ff73 	bl	8004f94 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d00d      	beq.n	80050ce <find_volume.constprop.0+0xd2>
 80050b2:	3601      	adds	r6, #1
 80050b4:	2e04      	cmp	r6, #4
 80050b6:	d1ef      	bne.n	8005098 <find_volume.constprop.0+0x9c>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80050b8:	2803      	cmp	r0, #3
 80050ba:	d106      	bne.n	80050ca <find_volume.constprop.0+0xce>
 80050bc:	e7bf      	b.n	800503e <find_volume.constprop.0+0x42>
 80050be:	2803      	cmp	r0, #3
 80050c0:	d100      	bne.n	80050c4 <find_volume.constprop.0+0xc8>
 80050c2:	e083      	b.n	80051cc <find_volume.constprop.0+0x1d0>
	bsect = 0;
 80050c4:	9701      	str	r7, [sp, #4]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d001      	beq.n	80050ce <find_volume.constprop.0+0xd2>
 80050ca:	250d      	movs	r5, #13
 80050cc:	e7b7      	b.n	800503e <find_volume.constprop.0+0x42>
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80050ce:	0023      	movs	r3, r4
 80050d0:	2280      	movs	r2, #128	; 0x80
 80050d2:	3333      	adds	r3, #51	; 0x33
 80050d4:	7819      	ldrb	r1, [r3, #0]
 80050d6:	785b      	ldrb	r3, [r3, #1]
 80050d8:	0092      	lsls	r2, r2, #2
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	430b      	orrs	r3, r1
 80050de:	4293      	cmp	r3, r2
 80050e0:	d1f3      	bne.n	80050ca <find_volume.constprop.0+0xce>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 80050e2:	8fe7      	ldrh	r7, [r4, #62]	; 0x3e
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 80050e4:	2f00      	cmp	r7, #0
 80050e6:	d100      	bne.n	80050ea <find_volume.constprop.0+0xee>
 80050e8:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80050ea:	0023      	movs	r3, r4
	fs->fsize = fasize;
 80050ec:	6127      	str	r7, [r4, #16]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80050ee:	3338      	adds	r3, #56	; 0x38
 80050f0:	781a      	ldrb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80050f2:	1e53      	subs	r3, r2, #1
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 80050f4:	70e2      	strb	r2, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d8e7      	bhi.n	80050ca <find_volume.constprop.0+0xce>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 80050fa:	0023      	movs	r3, r4
 80050fc:	3335      	adds	r3, #53	; 0x35
 80050fe:	781e      	ldrb	r6, [r3, #0]
 8005100:	70a6      	strb	r6, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005102:	2e00      	cmp	r6, #0
 8005104:	d0e1      	beq.n	80050ca <find_volume.constprop.0+0xce>
 8005106:	1e73      	subs	r3, r6, #1
 8005108:	421e      	tst	r6, r3
 800510a:	d1de      	bne.n	80050ca <find_volume.constprop.0+0xce>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800510c:	0023      	movs	r3, r4
 800510e:	3339      	adds	r3, #57	; 0x39
 8005110:	785d      	ldrb	r5, [r3, #1]
 8005112:	7819      	ldrb	r1, [r3, #0]
 8005114:	022d      	lsls	r5, r5, #8
 8005116:	430d      	orrs	r5, r1
 8005118:	8125      	strh	r5, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800511a:	072b      	lsls	r3, r5, #28
 800511c:	d1d5      	bne.n	80050ca <find_volume.constprop.0+0xce>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 800511e:	0023      	movs	r3, r4
 8005120:	333b      	adds	r3, #59	; 0x3b
 8005122:	7819      	ldrb	r1, [r3, #0]
 8005124:	785b      	ldrb	r3, [r3, #1]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	430b      	orrs	r3, r1
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 800512a:	d100      	bne.n	800512e <find_volume.constprop.0+0x132>
 800512c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800512e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8005130:	9102      	str	r1, [sp, #8]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005132:	2900      	cmp	r1, #0
 8005134:	d0c9      	beq.n	80050ca <find_volume.constprop.0+0xce>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005136:	437a      	muls	r2, r7
 8005138:	9204      	str	r2, [sp, #16]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800513a:	092a      	lsrs	r2, r5, #4
 800513c:	1852      	adds	r2, r2, r1
 800513e:	9904      	ldr	r1, [sp, #16]
 8005140:	1852      	adds	r2, r2, r1
 8005142:	9203      	str	r2, [sp, #12]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005144:	429a      	cmp	r2, r3
 8005146:	d8c0      	bhi.n	80050ca <find_volume.constprop.0+0xce>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	0018      	movs	r0, r3
 800514c:	0031      	movs	r1, r6
 800514e:	9305      	str	r3, [sp, #20]
 8005150:	f7fa ffda 	bl	8000108 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005154:	9b05      	ldr	r3, [sp, #20]
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005156:	0002      	movs	r2, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005158:	42b3      	cmp	r3, r6
 800515a:	d3b6      	bcc.n	80050ca <find_volume.constprop.0+0xce>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800515c:	491e      	ldr	r1, [pc, #120]	; (80051d8 <find_volume.constprop.0+0x1dc>)
	fmt = FS_FAT12;
 800515e:	2301      	movs	r3, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005160:	4288      	cmp	r0, r1
 8005162:	d904      	bls.n	800516e <find_volume.constprop.0+0x172>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005164:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <find_volume.constprop.0+0x1e0>)
 8005166:	4283      	cmp	r3, r0
 8005168:	419b      	sbcs	r3, r3
 800516a:	425b      	negs	r3, r3
 800516c:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800516e:	9801      	ldr	r0, [sp, #4]
	fs->volbase = bsect;								/* Volume start sector */
 8005170:	9901      	ldr	r1, [sp, #4]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005172:	4684      	mov	ip, r0
	fs->volbase = bsect;								/* Volume start sector */
 8005174:	6161      	str	r1, [r4, #20]
	fs->database = bsect + sysect;						/* Data start sector */
 8005176:	9803      	ldr	r0, [sp, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005178:	9902      	ldr	r1, [sp, #8]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800517a:	3202      	adds	r2, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800517c:	4461      	add	r1, ip
	fs->database = bsect + sysect;						/* Data start sector */
 800517e:	4460      	add	r0, ip
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005180:	60e2      	str	r2, [r4, #12]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005182:	61a1      	str	r1, [r4, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 8005184:	6220      	str	r0, [r4, #32]
	if (fmt == FS_FAT32) {
 8005186:	2b03      	cmp	r3, #3
 8005188:	d112      	bne.n	80051b0 <find_volume.constprop.0+0x1b4>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800518a:	2d00      	cmp	r5, #0
 800518c:	d19d      	bne.n	80050ca <find_volume.constprop.0+0xce>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 800518e:	6d61      	ldr	r1, [r4, #84]	; 0x54
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005190:	0090      	lsls	r0, r2, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005192:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <find_volume.constprop.0+0x1e4>)
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8005194:	61e1      	str	r1, [r4, #28]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005196:	1880      	adds	r0, r0, r2
 8005198:	0a40      	lsrs	r0, r0, #9
 800519a:	4287      	cmp	r7, r0
 800519c:	d395      	bcc.n	80050ca <find_volume.constprop.0+0xce>
	fs->id = ++Fsid;	/* File system mount ID */
 800519e:	4a11      	ldr	r2, [pc, #68]	; (80051e4 <find_volume.constprop.0+0x1e8>)
	fs->fs_type = fmt;	/* FAT sub-type */
 80051a0:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80051a2:	8813      	ldrh	r3, [r2, #0]
	return FR_OK;
 80051a4:	2500      	movs	r5, #0
	fs->id = ++Fsid;	/* File system mount ID */
 80051a6:	3301      	adds	r3, #1
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8013      	strh	r3, [r2, #0]
 80051ac:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 80051ae:	e746      	b.n	800503e <find_volume.constprop.0+0x42>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	d08a      	beq.n	80050ca <find_volume.constprop.0+0xce>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80051b4:	9804      	ldr	r0, [sp, #16]
 80051b6:	1841      	adds	r1, r0, r1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80051b8:	0050      	lsls	r0, r2, #1
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d0e9      	beq.n	8005192 <find_volume.constprop.0+0x196>
 80051be:	2003      	movs	r0, #3
 80051c0:	2501      	movs	r5, #1
 80051c2:	4350      	muls	r0, r2
 80051c4:	402a      	ands	r2, r5
 80051c6:	0840      	lsrs	r0, r0, #1
 80051c8:	1880      	adds	r0, r0, r2
 80051ca:	e7e2      	b.n	8005192 <find_volume.constprop.0+0x196>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80051cc:	0035      	movs	r5, r6
 80051ce:	e736      	b.n	800503e <find_volume.constprop.0+0x42>
 80051d0:	20000ca8 	.word	0x20000ca8
 80051d4:	00000226 	.word	0x00000226
 80051d8:	00000ff5 	.word	0x00000ff5
 80051dc:	0000fff5 	.word	0x0000fff5
 80051e0:	000001ff 	.word	0x000001ff
 80051e4:	20000cac 	.word	0x20000cac

080051e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80051e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051ea:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 80051ec:	a803      	add	r0, sp, #12
{
 80051ee:	0014      	movs	r4, r2
 80051f0:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 80051f2:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80051f4:	f7ff fea2 	bl	8004f3c <get_ldnumber>
 80051f8:	0003      	movs	r3, r0
	if (vol < 0) return FR_INVALID_DRIVE;
 80051fa:	200b      	movs	r0, #11
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	db15      	blt.n	800522c <f_mount+0x44>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005200:	490b      	ldr	r1, [pc, #44]	; (8005230 <f_mount+0x48>)
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	585a      	ldr	r2, [r3, r1]

	if (cfs) {
 8005206:	2a00      	cmp	r2, #0
 8005208:	d001      	beq.n	800520e <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800520a:	2000      	movs	r0, #0
 800520c:	7010      	strb	r0, [r2, #0]
	}

	if (fs) {
 800520e:	9a01      	ldr	r2, [sp, #4]
 8005210:	2a00      	cmp	r2, #0
 8005212:	d001      	beq.n	8005218 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8005214:	2000      	movs	r0, #0
 8005216:	7010      	strb	r0, [r2, #0]
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005218:	1e10      	subs	r0, r2, #0
	FatFs[vol] = fs;					/* Register new fs object */
 800521a:	50ca      	str	r2, [r1, r3]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800521c:	d006      	beq.n	800522c <f_mount+0x44>
 800521e:	2000      	movs	r0, #0
 8005220:	2c01      	cmp	r4, #1
 8005222:	d103      	bne.n	800522c <f_mount+0x44>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005224:	4669      	mov	r1, sp
 8005226:	a801      	add	r0, sp, #4
 8005228:	f7ff fee8 	bl	8004ffc <find_volume.constprop.0>
	LEAVE_FF(fs, res);
}
 800522c:	b004      	add	sp, #16
 800522e:	bd10      	pop	{r4, pc}
 8005230:	20000ca8 	.word	0x20000ca8

08005234 <_ZdlPvj>:
 8005234:	b510      	push	{r4, lr}
 8005236:	f000 f81c 	bl	8005272 <_ZdlPv>
 800523a:	bd10      	pop	{r4, pc}

0800523c <_Znwj>:
 800523c:	b510      	push	{r4, lr}
 800523e:	1e04      	subs	r4, r0, #0
 8005240:	d100      	bne.n	8005244 <_Znwj+0x8>
 8005242:	3401      	adds	r4, #1
 8005244:	0020      	movs	r0, r4
 8005246:	f000 f827 	bl	8005298 <malloc>
 800524a:	2800      	cmp	r0, #0
 800524c:	d000      	beq.n	8005250 <_Znwj+0x14>
 800524e:	bd10      	pop	{r4, pc}
 8005250:	f000 f814 	bl	800527c <_ZSt15get_new_handlerv>
 8005254:	2800      	cmp	r0, #0
 8005256:	d101      	bne.n	800525c <_Znwj+0x20>
 8005258:	f000 f816 	bl	8005288 <abort>
 800525c:	4780      	blx	r0
 800525e:	e7f1      	b.n	8005244 <_Znwj+0x8>

08005260 <_ZSt17__throw_bad_allocv>:
 8005260:	b510      	push	{r4, lr}
 8005262:	f000 f811 	bl	8005288 <abort>

08005266 <_ZSt28__throw_bad_array_new_lengthv>:
 8005266:	b510      	push	{r4, lr}
 8005268:	f000 f80e 	bl	8005288 <abort>

0800526c <_ZSt20__throw_length_errorPKc>:
 800526c:	b510      	push	{r4, lr}
 800526e:	f000 f80b 	bl	8005288 <abort>

08005272 <_ZdlPv>:
 8005272:	b510      	push	{r4, lr}
 8005274:	f000 f81a 	bl	80052ac <free>
 8005278:	bd10      	pop	{r4, pc}
	...

0800527c <_ZSt15get_new_handlerv>:
 800527c:	4b01      	ldr	r3, [pc, #4]	; (8005284 <_ZSt15get_new_handlerv+0x8>)
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	4770      	bx	lr
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	20000cb0 	.word	0x20000cb0

08005288 <abort>:
 8005288:	2006      	movs	r0, #6
 800528a:	b510      	push	{r4, lr}
 800528c:	f000 f912 	bl	80054b4 <raise>
 8005290:	2001      	movs	r0, #1
 8005292:	f7fd fce7 	bl	8002c64 <_exit>
	...

08005298 <malloc>:
 8005298:	b510      	push	{r4, lr}
 800529a:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <malloc+0x10>)
 800529c:	0001      	movs	r1, r0
 800529e:	6818      	ldr	r0, [r3, #0]
 80052a0:	f000 f830 	bl	8005304 <_malloc_r>
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	200000ec 	.word	0x200000ec

080052ac <free>:
 80052ac:	b510      	push	{r4, lr}
 80052ae:	4b03      	ldr	r3, [pc, #12]	; (80052bc <free+0x10>)
 80052b0:	0001      	movs	r1, r0
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	f000 f966 	bl	8005584 <_free_r>
 80052b8:	bd10      	pop	{r4, pc}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	200000ec 	.word	0x200000ec

080052c0 <sbrk_aligned>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	4e0f      	ldr	r6, [pc, #60]	; (8005300 <sbrk_aligned+0x40>)
 80052c4:	000d      	movs	r5, r1
 80052c6:	6831      	ldr	r1, [r6, #0]
 80052c8:	0004      	movs	r4, r0
 80052ca:	2900      	cmp	r1, #0
 80052cc:	d102      	bne.n	80052d4 <sbrk_aligned+0x14>
 80052ce:	f000 f911 	bl	80054f4 <_sbrk_r>
 80052d2:	6030      	str	r0, [r6, #0]
 80052d4:	0029      	movs	r1, r5
 80052d6:	0020      	movs	r0, r4
 80052d8:	f000 f90c 	bl	80054f4 <_sbrk_r>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d00a      	beq.n	80052f6 <sbrk_aligned+0x36>
 80052e0:	2303      	movs	r3, #3
 80052e2:	1cc5      	adds	r5, r0, #3
 80052e4:	439d      	bics	r5, r3
 80052e6:	42a8      	cmp	r0, r5
 80052e8:	d007      	beq.n	80052fa <sbrk_aligned+0x3a>
 80052ea:	1a29      	subs	r1, r5, r0
 80052ec:	0020      	movs	r0, r4
 80052ee:	f000 f901 	bl	80054f4 <_sbrk_r>
 80052f2:	3001      	adds	r0, #1
 80052f4:	d101      	bne.n	80052fa <sbrk_aligned+0x3a>
 80052f6:	2501      	movs	r5, #1
 80052f8:	426d      	negs	r5, r5
 80052fa:	0028      	movs	r0, r5
 80052fc:	bd70      	pop	{r4, r5, r6, pc}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	20000cb8 	.word	0x20000cb8

08005304 <_malloc_r>:
 8005304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005306:	2203      	movs	r2, #3
 8005308:	1ccb      	adds	r3, r1, #3
 800530a:	4393      	bics	r3, r2
 800530c:	3308      	adds	r3, #8
 800530e:	0006      	movs	r6, r0
 8005310:	001f      	movs	r7, r3
 8005312:	2b0c      	cmp	r3, #12
 8005314:	d238      	bcs.n	8005388 <_malloc_r+0x84>
 8005316:	270c      	movs	r7, #12
 8005318:	42b9      	cmp	r1, r7
 800531a:	d837      	bhi.n	800538c <_malloc_r+0x88>
 800531c:	0030      	movs	r0, r6
 800531e:	f000 f873 	bl	8005408 <__malloc_lock>
 8005322:	4b38      	ldr	r3, [pc, #224]	; (8005404 <_malloc_r+0x100>)
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	001c      	movs	r4, r3
 800532a:	2c00      	cmp	r4, #0
 800532c:	d133      	bne.n	8005396 <_malloc_r+0x92>
 800532e:	0039      	movs	r1, r7
 8005330:	0030      	movs	r0, r6
 8005332:	f7ff ffc5 	bl	80052c0 <sbrk_aligned>
 8005336:	0004      	movs	r4, r0
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d15e      	bne.n	80053fa <_malloc_r+0xf6>
 800533c:	9b00      	ldr	r3, [sp, #0]
 800533e:	681c      	ldr	r4, [r3, #0]
 8005340:	0025      	movs	r5, r4
 8005342:	2d00      	cmp	r5, #0
 8005344:	d14e      	bne.n	80053e4 <_malloc_r+0xe0>
 8005346:	2c00      	cmp	r4, #0
 8005348:	d051      	beq.n	80053ee <_malloc_r+0xea>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	0029      	movs	r1, r5
 800534e:	18e3      	adds	r3, r4, r3
 8005350:	0030      	movs	r0, r6
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	f000 f8ce 	bl	80054f4 <_sbrk_r>
 8005358:	9b01      	ldr	r3, [sp, #4]
 800535a:	4283      	cmp	r3, r0
 800535c:	d147      	bne.n	80053ee <_malloc_r+0xea>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	0030      	movs	r0, r6
 8005362:	1aff      	subs	r7, r7, r3
 8005364:	0039      	movs	r1, r7
 8005366:	f7ff ffab 	bl	80052c0 <sbrk_aligned>
 800536a:	3001      	adds	r0, #1
 800536c:	d03f      	beq.n	80053ee <_malloc_r+0xea>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	19db      	adds	r3, r3, r7
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	9b00      	ldr	r3, [sp, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d040      	beq.n	80053fe <_malloc_r+0xfa>
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	42a2      	cmp	r2, r4
 8005380:	d133      	bne.n	80053ea <_malloc_r+0xe6>
 8005382:	2200      	movs	r2, #0
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	e014      	b.n	80053b2 <_malloc_r+0xae>
 8005388:	2b00      	cmp	r3, #0
 800538a:	dac5      	bge.n	8005318 <_malloc_r+0x14>
 800538c:	230c      	movs	r3, #12
 800538e:	2500      	movs	r5, #0
 8005390:	6033      	str	r3, [r6, #0]
 8005392:	0028      	movs	r0, r5
 8005394:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005396:	6821      	ldr	r1, [r4, #0]
 8005398:	1bc9      	subs	r1, r1, r7
 800539a:	d420      	bmi.n	80053de <_malloc_r+0xda>
 800539c:	290b      	cmp	r1, #11
 800539e:	d918      	bls.n	80053d2 <_malloc_r+0xce>
 80053a0:	19e2      	adds	r2, r4, r7
 80053a2:	6027      	str	r7, [r4, #0]
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	d112      	bne.n	80053ce <_malloc_r+0xca>
 80053a8:	9b00      	ldr	r3, [sp, #0]
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	6863      	ldr	r3, [r4, #4]
 80053ae:	6011      	str	r1, [r2, #0]
 80053b0:	6053      	str	r3, [r2, #4]
 80053b2:	0030      	movs	r0, r6
 80053b4:	0025      	movs	r5, r4
 80053b6:	f000 f82f 	bl	8005418 <__malloc_unlock>
 80053ba:	2207      	movs	r2, #7
 80053bc:	350b      	adds	r5, #11
 80053be:	1d23      	adds	r3, r4, #4
 80053c0:	4395      	bics	r5, r2
 80053c2:	1aea      	subs	r2, r5, r3
 80053c4:	429d      	cmp	r5, r3
 80053c6:	d0e4      	beq.n	8005392 <_malloc_r+0x8e>
 80053c8:	1b5b      	subs	r3, r3, r5
 80053ca:	50a3      	str	r3, [r4, r2]
 80053cc:	e7e1      	b.n	8005392 <_malloc_r+0x8e>
 80053ce:	605a      	str	r2, [r3, #4]
 80053d0:	e7ec      	b.n	80053ac <_malloc_r+0xa8>
 80053d2:	6862      	ldr	r2, [r4, #4]
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	d1d5      	bne.n	8005384 <_malloc_r+0x80>
 80053d8:	9b00      	ldr	r3, [sp, #0]
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e7e9      	b.n	80053b2 <_malloc_r+0xae>
 80053de:	0023      	movs	r3, r4
 80053e0:	6864      	ldr	r4, [r4, #4]
 80053e2:	e7a2      	b.n	800532a <_malloc_r+0x26>
 80053e4:	002c      	movs	r4, r5
 80053e6:	686d      	ldr	r5, [r5, #4]
 80053e8:	e7ab      	b.n	8005342 <_malloc_r+0x3e>
 80053ea:	0013      	movs	r3, r2
 80053ec:	e7c4      	b.n	8005378 <_malloc_r+0x74>
 80053ee:	230c      	movs	r3, #12
 80053f0:	0030      	movs	r0, r6
 80053f2:	6033      	str	r3, [r6, #0]
 80053f4:	f000 f810 	bl	8005418 <__malloc_unlock>
 80053f8:	e7cb      	b.n	8005392 <_malloc_r+0x8e>
 80053fa:	6027      	str	r7, [r4, #0]
 80053fc:	e7d9      	b.n	80053b2 <_malloc_r+0xae>
 80053fe:	605b      	str	r3, [r3, #4]
 8005400:	deff      	udf	#255	; 0xff
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	20000cb4 	.word	0x20000cb4

08005408 <__malloc_lock>:
 8005408:	b510      	push	{r4, lr}
 800540a:	4802      	ldr	r0, [pc, #8]	; (8005414 <__malloc_lock+0xc>)
 800540c:	f000 f8ae 	bl	800556c <__retarget_lock_acquire_recursive>
 8005410:	bd10      	pop	{r4, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	20000df8 	.word	0x20000df8

08005418 <__malloc_unlock>:
 8005418:	b510      	push	{r4, lr}
 800541a:	4802      	ldr	r0, [pc, #8]	; (8005424 <__malloc_unlock+0xc>)
 800541c:	f000 f8a7 	bl	800556e <__retarget_lock_release_recursive>
 8005420:	bd10      	pop	{r4, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	20000df8 	.word	0x20000df8

08005428 <memmove>:
 8005428:	b510      	push	{r4, lr}
 800542a:	4288      	cmp	r0, r1
 800542c:	d902      	bls.n	8005434 <memmove+0xc>
 800542e:	188b      	adds	r3, r1, r2
 8005430:	4298      	cmp	r0, r3
 8005432:	d303      	bcc.n	800543c <memmove+0x14>
 8005434:	2300      	movs	r3, #0
 8005436:	e007      	b.n	8005448 <memmove+0x20>
 8005438:	5c8b      	ldrb	r3, [r1, r2]
 800543a:	5483      	strb	r3, [r0, r2]
 800543c:	3a01      	subs	r2, #1
 800543e:	d2fb      	bcs.n	8005438 <memmove+0x10>
 8005440:	bd10      	pop	{r4, pc}
 8005442:	5ccc      	ldrb	r4, [r1, r3]
 8005444:	54c4      	strb	r4, [r0, r3]
 8005446:	3301      	adds	r3, #1
 8005448:	429a      	cmp	r2, r3
 800544a:	d1fa      	bne.n	8005442 <memmove+0x1a>
 800544c:	e7f8      	b.n	8005440 <memmove+0x18>

0800544e <memset>:
 800544e:	0003      	movs	r3, r0
 8005450:	1882      	adds	r2, r0, r2
 8005452:	4293      	cmp	r3, r2
 8005454:	d100      	bne.n	8005458 <memset+0xa>
 8005456:	4770      	bx	lr
 8005458:	7019      	strb	r1, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	e7f9      	b.n	8005452 <memset+0x4>

0800545e <_raise_r>:
 800545e:	b570      	push	{r4, r5, r6, lr}
 8005460:	0004      	movs	r4, r0
 8005462:	000d      	movs	r5, r1
 8005464:	291f      	cmp	r1, #31
 8005466:	d904      	bls.n	8005472 <_raise_r+0x14>
 8005468:	2316      	movs	r3, #22
 800546a:	6003      	str	r3, [r0, #0]
 800546c:	2001      	movs	r0, #1
 800546e:	4240      	negs	r0, r0
 8005470:	bd70      	pop	{r4, r5, r6, pc}
 8005472:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <_raise_r+0x24>
 8005478:	008a      	lsls	r2, r1, #2
 800547a:	189b      	adds	r3, r3, r2
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	2a00      	cmp	r2, #0
 8005480:	d108      	bne.n	8005494 <_raise_r+0x36>
 8005482:	0020      	movs	r0, r4
 8005484:	f000 f832 	bl	80054ec <_getpid_r>
 8005488:	002a      	movs	r2, r5
 800548a:	0001      	movs	r1, r0
 800548c:	0020      	movs	r0, r4
 800548e:	f000 f81b 	bl	80054c8 <_kill_r>
 8005492:	e7ed      	b.n	8005470 <_raise_r+0x12>
 8005494:	2000      	movs	r0, #0
 8005496:	2a01      	cmp	r2, #1
 8005498:	d0ea      	beq.n	8005470 <_raise_r+0x12>
 800549a:	1c51      	adds	r1, r2, #1
 800549c:	d103      	bne.n	80054a6 <_raise_r+0x48>
 800549e:	2316      	movs	r3, #22
 80054a0:	3001      	adds	r0, #1
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	e7e4      	b.n	8005470 <_raise_r+0x12>
 80054a6:	2400      	movs	r4, #0
 80054a8:	0028      	movs	r0, r5
 80054aa:	601c      	str	r4, [r3, #0]
 80054ac:	4790      	blx	r2
 80054ae:	0020      	movs	r0, r4
 80054b0:	e7de      	b.n	8005470 <_raise_r+0x12>
	...

080054b4 <raise>:
 80054b4:	b510      	push	{r4, lr}
 80054b6:	4b03      	ldr	r3, [pc, #12]	; (80054c4 <raise+0x10>)
 80054b8:	0001      	movs	r1, r0
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	f7ff ffcf 	bl	800545e <_raise_r>
 80054c0:	bd10      	pop	{r4, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	200000ec 	.word	0x200000ec

080054c8 <_kill_r>:
 80054c8:	2300      	movs	r3, #0
 80054ca:	b570      	push	{r4, r5, r6, lr}
 80054cc:	4d06      	ldr	r5, [pc, #24]	; (80054e8 <_kill_r+0x20>)
 80054ce:	0004      	movs	r4, r0
 80054d0:	0008      	movs	r0, r1
 80054d2:	0011      	movs	r1, r2
 80054d4:	602b      	str	r3, [r5, #0]
 80054d6:	f7fd fbbd 	bl	8002c54 <_kill>
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	d103      	bne.n	80054e6 <_kill_r+0x1e>
 80054de:	682b      	ldr	r3, [r5, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d000      	beq.n	80054e6 <_kill_r+0x1e>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd70      	pop	{r4, r5, r6, pc}
 80054e8:	20000df4 	.word	0x20000df4

080054ec <_getpid_r>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	f7fd fbaf 	bl	8002c50 <_getpid>
 80054f2:	bd10      	pop	{r4, pc}

080054f4 <_sbrk_r>:
 80054f4:	2300      	movs	r3, #0
 80054f6:	b570      	push	{r4, r5, r6, lr}
 80054f8:	4d06      	ldr	r5, [pc, #24]	; (8005514 <_sbrk_r+0x20>)
 80054fa:	0004      	movs	r4, r0
 80054fc:	0008      	movs	r0, r1
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	f7fd fbb6 	bl	8002c70 <_sbrk>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d103      	bne.n	8005510 <_sbrk_r+0x1c>
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d000      	beq.n	8005510 <_sbrk_r+0x1c>
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	bd70      	pop	{r4, r5, r6, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	20000df4 	.word	0x20000df4

08005518 <__errno>:
 8005518:	4b01      	ldr	r3, [pc, #4]	; (8005520 <__errno+0x8>)
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	4770      	bx	lr
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	200000ec 	.word	0x200000ec

08005524 <__libc_init_array>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	2600      	movs	r6, #0
 8005528:	4c0c      	ldr	r4, [pc, #48]	; (800555c <__libc_init_array+0x38>)
 800552a:	4d0d      	ldr	r5, [pc, #52]	; (8005560 <__libc_init_array+0x3c>)
 800552c:	1b64      	subs	r4, r4, r5
 800552e:	10a4      	asrs	r4, r4, #2
 8005530:	42a6      	cmp	r6, r4
 8005532:	d109      	bne.n	8005548 <__libc_init_array+0x24>
 8005534:	2600      	movs	r6, #0
 8005536:	f000 f86f 	bl	8005618 <_init>
 800553a:	4c0a      	ldr	r4, [pc, #40]	; (8005564 <__libc_init_array+0x40>)
 800553c:	4d0a      	ldr	r5, [pc, #40]	; (8005568 <__libc_init_array+0x44>)
 800553e:	1b64      	subs	r4, r4, r5
 8005540:	10a4      	asrs	r4, r4, #2
 8005542:	42a6      	cmp	r6, r4
 8005544:	d105      	bne.n	8005552 <__libc_init_array+0x2e>
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	00b3      	lsls	r3, r6, #2
 800554a:	58eb      	ldr	r3, [r5, r3]
 800554c:	4798      	blx	r3
 800554e:	3601      	adds	r6, #1
 8005550:	e7ee      	b.n	8005530 <__libc_init_array+0xc>
 8005552:	00b3      	lsls	r3, r6, #2
 8005554:	58eb      	ldr	r3, [r5, r3]
 8005556:	4798      	blx	r3
 8005558:	3601      	adds	r6, #1
 800555a:	e7f2      	b.n	8005542 <__libc_init_array+0x1e>
 800555c:	080056bc 	.word	0x080056bc
 8005560:	080056bc 	.word	0x080056bc
 8005564:	080056c4 	.word	0x080056c4
 8005568:	080056bc 	.word	0x080056bc

0800556c <__retarget_lock_acquire_recursive>:
 800556c:	4770      	bx	lr

0800556e <__retarget_lock_release_recursive>:
 800556e:	4770      	bx	lr

08005570 <memcpy>:
 8005570:	2300      	movs	r3, #0
 8005572:	b510      	push	{r4, lr}
 8005574:	429a      	cmp	r2, r3
 8005576:	d100      	bne.n	800557a <memcpy+0xa>
 8005578:	bd10      	pop	{r4, pc}
 800557a:	5ccc      	ldrb	r4, [r1, r3]
 800557c:	54c4      	strb	r4, [r0, r3]
 800557e:	3301      	adds	r3, #1
 8005580:	e7f8      	b.n	8005574 <memcpy+0x4>
	...

08005584 <_free_r>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	0005      	movs	r5, r0
 8005588:	2900      	cmp	r1, #0
 800558a:	d010      	beq.n	80055ae <_free_r+0x2a>
 800558c:	1f0c      	subs	r4, r1, #4
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	da00      	bge.n	8005596 <_free_r+0x12>
 8005594:	18e4      	adds	r4, r4, r3
 8005596:	0028      	movs	r0, r5
 8005598:	f7ff ff36 	bl	8005408 <__malloc_lock>
 800559c:	4a1d      	ldr	r2, [pc, #116]	; (8005614 <_free_r+0x90>)
 800559e:	6813      	ldr	r3, [r2, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <_free_r+0x2c>
 80055a4:	6063      	str	r3, [r4, #4]
 80055a6:	6014      	str	r4, [r2, #0]
 80055a8:	0028      	movs	r0, r5
 80055aa:	f7ff ff35 	bl	8005418 <__malloc_unlock>
 80055ae:	bd70      	pop	{r4, r5, r6, pc}
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	d908      	bls.n	80055c6 <_free_r+0x42>
 80055b4:	6820      	ldr	r0, [r4, #0]
 80055b6:	1821      	adds	r1, r4, r0
 80055b8:	428b      	cmp	r3, r1
 80055ba:	d1f3      	bne.n	80055a4 <_free_r+0x20>
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	1809      	adds	r1, r1, r0
 80055c2:	6021      	str	r1, [r4, #0]
 80055c4:	e7ee      	b.n	80055a4 <_free_r+0x20>
 80055c6:	001a      	movs	r2, r3
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <_free_r+0x4e>
 80055ce:	42a3      	cmp	r3, r4
 80055d0:	d9f9      	bls.n	80055c6 <_free_r+0x42>
 80055d2:	6811      	ldr	r1, [r2, #0]
 80055d4:	1850      	adds	r0, r2, r1
 80055d6:	42a0      	cmp	r0, r4
 80055d8:	d10b      	bne.n	80055f2 <_free_r+0x6e>
 80055da:	6820      	ldr	r0, [r4, #0]
 80055dc:	1809      	adds	r1, r1, r0
 80055de:	1850      	adds	r0, r2, r1
 80055e0:	6011      	str	r1, [r2, #0]
 80055e2:	4283      	cmp	r3, r0
 80055e4:	d1e0      	bne.n	80055a8 <_free_r+0x24>
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	1841      	adds	r1, r0, r1
 80055ec:	6011      	str	r1, [r2, #0]
 80055ee:	6053      	str	r3, [r2, #4]
 80055f0:	e7da      	b.n	80055a8 <_free_r+0x24>
 80055f2:	42a0      	cmp	r0, r4
 80055f4:	d902      	bls.n	80055fc <_free_r+0x78>
 80055f6:	230c      	movs	r3, #12
 80055f8:	602b      	str	r3, [r5, #0]
 80055fa:	e7d5      	b.n	80055a8 <_free_r+0x24>
 80055fc:	6820      	ldr	r0, [r4, #0]
 80055fe:	1821      	adds	r1, r4, r0
 8005600:	428b      	cmp	r3, r1
 8005602:	d103      	bne.n	800560c <_free_r+0x88>
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	1809      	adds	r1, r1, r0
 800560a:	6021      	str	r1, [r4, #0]
 800560c:	6063      	str	r3, [r4, #4]
 800560e:	6054      	str	r4, [r2, #4]
 8005610:	e7ca      	b.n	80055a8 <_free_r+0x24>
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	20000cb4 	.word	0x20000cb4

08005618 <_init>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr

08005624 <_fini>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562a:	bc08      	pop	{r3}
 800562c:	469e      	mov	lr, r3
 800562e:	4770      	bx	lr
